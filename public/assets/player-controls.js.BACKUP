var playerControls	= new Vue({
	delimiters: ['${', '}'],
	el: "#player-controls",
	
	data() {
		return {
			player: null,
			
			playerState: null,
			loopingState: null,
			metronomeVolume: null,
			
			selectedLayout: null,
			selectedSpeed: null,
			
			speeds: [
				{value: '0.25', text: '25%'},
				{value: '0.5', text: '50%'},
				{value: '0.6', text: '60%'},
				{value: '0.7', text: '70%'},
				{value: '0.8', text: '80%'},
				{value: '0.9', text: '90%'},
				{value: '1', text: '100%'},
				{value: '1.1', text: '110%'},
				{value: '1.25', text: '125%'},
				{value: '1.5', text: '150%'},
				{value: '2', text: '200%'},
			],
			
			layouts: [
				{
					id: 'page',
					text: 'Page',
					layout: 'page',
					scrollmode: 'vertical',
				},
				{
					id: 'horizontalBarwise',
					text: 'Horizontal (Barwise)',
					layout: 'horizontal',
					scrollmode: 'horizontal-bar',
				},
				{
					id: 'horizontalOffscreen',
					text: 'Horizontal (Offscreen)',
					layout: 'horizontal',
					scrollmode: 'horizontal-offscreen',
				},
			],
		};
	},
	
	methods: {
		playPause() {
			if ( ! this.playerState )
				$( '#btnPlayPause' ).addClass( 'player-control-active  -xl' );
			
			this.player.alphaTab( 'playPause' );
		},
    
		stop() {
			this.player.alphaTab( 'stop' );
			
			$( '#btnPlayPause' ).removeClass( 'player-control-active  -xl' );
		},
		
		speed() {
			var playbackSpeed	= event.target.getAttribute('data-value');
			this.player.alphaTab( 'playbackSpeed', playbackSpeed );
			
		    $( '#speed-selector-value' ).text( event.target.getAttribute('data-text') );
		},
		
		looping() {
			this.loopingState = ! this.player.alphaTab( 'loop' );
			this.player.alphaTab( 'loop', this.loopingState );
			
			if( this.loopingState ) {
		    	$( '#btnLooping' ).addClass( 'player-control-active  -xl' );
		    }
		    else {
		    	$( '#btnLooping' ).removeClass( 'player-control-active  -xl' );
		    }
		},
		
		metronome() {
			this.metronomeVolume = this.player.alphaTab( 'metronomeVolume' );
			
		    if( this.metronomeVolume == 0 ) {
		    	this.player.alphaTab( 'metronomeVolume', 4 );
		        $( '#btnMetronome' ).addClass( 'player-control-active  -xl' );
		    }
		    else {
		    	alert(this.metronomeVolume);
		    	this.player.alphaTab( 'metronomeVolume', 0 );
		        $( '#btnMetronome' ).removeClass( 'player-control-active  -xl' );
		    }
		},
		
		countIn() {
			
		},
		
		layout: function()
		{
		    var layout		= event.target.getAttribute('data-layout');
		    var scrollmode	= event.target.getAttribute( 'data-scrollmode' );

		    this.player.removeClass( 'horizontal page' );
		    this.player.addClass( layout );
		    
		    // update renderer
		    this.player.alphaTab( 'layout', layout );
		    
		    // update player
		    this.player.alphaTab( 'autoScroll', scrollmode );
		    $( 'body,html' ).animate({
		        scrollTop: 0
		    }, 300);
		},
		
		print() {
			this.player.alphaTab( 'print' );
		},
		
		favorite() {
			$.get( $( '#add-favorite-url' ).data( 'url' ), function( data ) {
				alert('READY');
				//document.location.reload();
			});
		},
		
		displayTrack: function( scoreTrack ) {
			// build div container item for track
			var trackContainer = $( '<div class="track"></div>' ).data( 'track', scoreTrack.Index );
		 
			// show/hide button and track title
			var title = $( '<div class="title"></div>' ).on( 'click', function( e )
			{
				var track = $( this ).closest( 'div.track' ).data( 'track' );
				tracks = [track];
				$( this ).find( '.showHide' ).removeClass( 'fa-eye-slash' ).addClass( 'fa-eye' );
		     
				console.log(tracks);
				
				// render new tracks
				this.player.alphaTab( 'tracks', tracks );
			});
			
			trackContainer.append( title );
		 
			var showHide = $( '<i class="fa fa-eye-slash showHide"></i>' );
			title.append( showHide );
			title.append( scoreTrack.Name );
			
		 
			// solo and mute buttons
			var soloMute = $( '<div class="btn-group btn-group-xs"></div>' );
			var solo = $( '<button type="button" class="btn btn-default solo"><svg class="icon"><use xlink:href="#icon-solo"></use></svg></button>' );
			solo.on( 'click', function(e)
			{
				$(this).toggleClass('checked');
				var isSolo = $(this).hasClass('checked');
				var track = $(this).closest('div').data('track');
				this.player.alphaTab('soloTrack', track, isSolo);                    
			});
		 
			var mute = $('<button type="button" class="btn btn-default mute"><svg class="icon"><use xlink:href="#icon-mute"></use></svg></button>');
			mute.on('click', function(e) {
				$(this).toggleClass('checked');
				var isMute = $(this).hasClass('checked');
				var track = $(this).closest('div').data('track');
				this.player.alphaTab('muteTrack', track, isMute);                    
			});                
			soloMute.append(solo).append(mute);
			trackContainer.append(soloMute);
		 
			// volume slider
			var volume = $( '<input type="text" />').on( 'slide', function( e )
			{
		         var track = $( this ).closest( 'div' ).data( 'track' );
		         this.player.alphaTab( 'trackVolume', track, e.value );
		    });
			trackContainer.append( volume );
			
			volume.slider({
				min: 0,
				max: 16,
				step: 1,
				value: scoreTrack.PlaybackInfo.Volume,
				handle: 'square'
			});
			
			return trackContainer;
		},
		
		// Alphatab Event Handlers
		onSoundFontLoad: function( e, progress ) {
			var percentage = ( ( progress.loaded / progress.total ) * 100 ) | 0;
		    $( '#soundFontProgress' ).css( 'width', percentage + '%' ).text( percentage + '%' );
		    
		    $( '#soundFontProgressMenuItem' ).hide();
		},
		onPlayStateChanged: function() {
			this.playerState = this.player.alphaTab( 'playerState' );
		},
		onLoaded: function( e, score ) {
			var trackList = $( '#trackList' );

			trackList.empty();

			for( var i = 0; i < score.Tracks.length; i++) {
				trackList.append( this.displayTrack( score.Tracks[i] ) );
			}
		},
		onRendered: function( e, score ) {
			
		},
		
		/*
		 * Track Event Handlers
		 */
		onClickTrackTitle: function() {
			var track = $( this ).closest( 'div.track' ).data( 'track' );
			tracks = [track];
			$( this ).find( '.showHide' ).removeClass( 'fa-eye-slash' ).addClass( 'fa-eye' );
	     
			console.log( tracks );
			
			// render new tracks
			this.player.alphaTab( 'tracks', tracks );
		},
		
		onClickTrackSolo: function() {
			$(this).toggleClass('checked');
			var isSolo = $(this).hasClass('checked');
			var track = $(this).closest('div').data('track');
			this.player.alphaTab('soloTrack', track, isSolo);    
		},
		
		onClickTrackMute: function() {
			$(this).toggleClass('checked');
			var isMute = $(this).hasClass('checked');
			var track = $(this).closest('div').data('track');
			this.player.alphaTab('muteTrack', track, isMute);                    
		},
	},
	created() {
		this.player	= $( '#alphaTab' );
		this.player.alphaTab();
		
		// Alphatab Event Handling
		this.player.on(  'alphaTab.soundFontLoad', this.onSoundFontLoad );
		this.player.on(  'alphaTab.playerStateChanged', this.onPlayStateChanged );
		this.player.on(  'alphaTab.loaded', this.onLoaded );
		this.player.on(  'alphaTab.rendered', this.onRendered );
	  }
});

Vue.component( 'todo-item', {
	template: '\
		<div class="track">\
			<div class="title" v-on:click="onClickTrackTitle"><i class="fa fa-eye-slash showHide"></i>${ scoreTrack.Name }</div>\
			<div class="btn-group btn-group-xs">\
				<button type="button" class="btn btn-default solo" v-on:click="onClickTrackSolo">\
					<svg class="icon"><use xlink:href="#icon-solo"></use></svg>\
				</button>\
				<button type="button" class="btn btn-default mute" v-on:click="onClickTrackMute">\
					<svg class="icon"><use xlink:href="#icon-mute"></use></svg>\
				</button>\
			</div>\
			<input id="volume-${ scoreTrack.Index }" type="text" />\
		</div>\
		<script>\
			$( "volume-${ scoreTrack.Index }" ).slider({ min: 0, max: 16, step: 1, value: ${ scoreTrack.PlaybackInfo.Volume }, handle: "square" });\
		</script>\
	',
	props: ['scoreTrack']
});

