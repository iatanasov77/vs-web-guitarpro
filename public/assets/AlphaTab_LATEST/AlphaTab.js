/*
 * alphaTab v0.9.6.296 (develop)
 *
 * Copyright Â© 2020, Daniel Kuschny and Contributors, All rights reserved.
 * 
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * SoundFont loading and Audio Synthesis based on TinySoundFont (licensed under MIT)
 * Copyright (C) 2017, 2018 Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
 *
 * TinySoundFont is based on SFZero (licensed under MIT)
 * Copyright (C) 2012 Steve Folta (https://github.com/stevefolta/SFZero)
 */ 
(function ($hx_exports, $global) { "use strict";
$hx_exports["alphaTab"] = $hx_exports["alphaTab"] || {};
$hx_exports["alphaTab"]["utils"] = $hx_exports["alphaTab"]["utils"] || {};
;$hx_exports["alphaTab"]["util"] = $hx_exports["alphaTab"]["util"] || {};
$hx_exports["alphaTab"]["util"]["_LogLevel"] = $hx_exports["alphaTab"]["util"]["_LogLevel"] || {};
;$hx_exports["alphaTab"]["ui"] = $hx_exports["alphaTab"]["ui"] || {};
;$hx_exports["alphaTab"]["rendering"] = $hx_exports["alphaTab"]["rendering"] || {};
$hx_exports["alphaTab"]["rendering"]["utils"] = $hx_exports["alphaTab"]["rendering"]["utils"] || {};
;$hx_exports["alphaTab"]["model"] = $hx_exports["alphaTab"]["model"] || {};
$hx_exports["alphaTab"]["model"]["_WhammyType"] = $hx_exports["alphaTab"]["model"]["_WhammyType"] || {};
;$hx_exports["alphaTab"]["model"]["_VibratoType"] = $hx_exports["alphaTab"]["model"]["_VibratoType"] || {};
;$hx_exports["alphaTab"]["model"]["_TripletFeel"] = $hx_exports["alphaTab"]["model"]["_TripletFeel"] || {};
;$hx_exports["alphaTab"]["model"]["_SlideOutType"] = $hx_exports["alphaTab"]["model"]["_SlideOutType"] || {};
;$hx_exports["alphaTab"]["model"]["_SlideInType"] = $hx_exports["alphaTab"]["model"]["_SlideInType"] || {};
;$hx_exports["alphaTab"]["model"]["_SimileMark"] = $hx_exports["alphaTab"]["model"]["_SimileMark"] || {};
;$hx_exports["alphaTab"]["model"]["_PickStroke"] = $hx_exports["alphaTab"]["model"]["_PickStroke"] || {};
;$hx_exports["alphaTab"]["model"]["_Ottavia"] = $hx_exports["alphaTab"]["model"]["_Ottavia"] || {};
;$hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"] = $hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"] || {};
;$hx_exports["alphaTab"]["model"]["_KeySignatureType"] = $hx_exports["alphaTab"]["model"]["_KeySignatureType"] || {};
;$hx_exports["alphaTab"]["model"]["_KeySignature"] = $hx_exports["alphaTab"]["model"]["_KeySignature"] || {};
;$hx_exports["alphaTab"]["model"]["_HarmonicType"] = $hx_exports["alphaTab"]["model"]["_HarmonicType"] || {};
;$hx_exports["alphaTab"]["model"]["_GraceType"] = $hx_exports["alphaTab"]["model"]["_GraceType"] || {};
;$hx_exports["alphaTab"]["model"]["_Fingers"] = $hx_exports["alphaTab"]["model"]["_Fingers"] || {};
;$hx_exports["alphaTab"]["model"]["_FermataType"] = $hx_exports["alphaTab"]["model"]["_FermataType"] || {};
;$hx_exports["alphaTab"]["model"]["_DynamicValue"] = $hx_exports["alphaTab"]["model"]["_DynamicValue"] || {};
;$hx_exports["alphaTab"]["model"]["_Duration"] = $hx_exports["alphaTab"]["model"]["_Duration"] || {};
;$hx_exports["alphaTab"]["model"]["_CrescendoType"] = $hx_exports["alphaTab"]["model"]["_CrescendoType"] || {};
;$hx_exports["alphaTab"]["model"]["_Clef"] = $hx_exports["alphaTab"]["model"]["_Clef"] || {};
;$hx_exports["alphaTab"]["model"]["_BrushType"] = $hx_exports["alphaTab"]["model"]["_BrushType"] || {};
;$hx_exports["alphaTab"]["model"]["_BendType"] = $hx_exports["alphaTab"]["model"]["_BendType"] || {};
;$hx_exports["alphaTab"]["model"]["_BendStyle"] = $hx_exports["alphaTab"]["model"]["_BendStyle"] || {};
;$hx_exports["alphaTab"]["model"]["_AutomationType"] = $hx_exports["alphaTab"]["model"]["_AutomationType"] || {};
;$hx_exports["alphaTab"]["model"]["_AccidentalType"] = $hx_exports["alphaTab"]["model"]["_AccidentalType"] || {};
;$hx_exports["alphaTab"]["model"]["_AccentuationType"] = $hx_exports["alphaTab"]["model"]["_AccentuationType"] || {};
;$hx_exports["alphaTab"]["io"] = $hx_exports["alphaTab"]["io"] || {};
;$hx_exports["alphaTab"]["importer"] = $hx_exports["alphaTab"]["importer"] || {};
;$hx_exports["alphaTab"]["exporter"] = $hx_exports["alphaTab"]["exporter"] || {};
;$hx_exports["alphaTab"]["collections"] = $hx_exports["alphaTab"]["collections"] || {};
$hx_exports["alphaTab"]["collections"]["_FastList"] = $hx_exports["alphaTab"]["collections"]["_FastList"] || {};
;$hx_exports["alphaTab"]["collections"]["_FastDictionary"] = $hx_exports["alphaTab"]["collections"]["_FastDictionary"] || {};
;$hx_exports["alphaTab"]["_TabRhythmMode"] = $hx_exports["alphaTab"]["_TabRhythmMode"] || {};
;$hx_exports["alphaTab"]["_StaveProfile"] = $hx_exports["alphaTab"]["_StaveProfile"] || {};
;$hx_exports["alphaTab"]["_ScrollMode"] = $hx_exports["alphaTab"]["_ScrollMode"] || {};
;$hx_exports["alphaTab"]["_NotationMode"] = $hx_exports["alphaTab"]["_NotationMode"] || {};
;$hx_exports["alphaTab"]["_LayoutMode"] = $hx_exports["alphaTab"]["_LayoutMode"] || {};
;$hx_exports["alphaTab"]["_FingeringMode"] = $hx_exports["alphaTab"]["_FingeringMode"] || {};
;$hx_exports["alphaTab"]["audio"] = $hx_exports["alphaTab"]["audio"] || {};
$hx_exports["alphaTab"]["audio"]["generator"] = $hx_exports["alphaTab"]["audio"]["generator"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"] = $hx_exports["alphaTab"]["audio"]["synth"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["synthesis"] = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_OutputMode"] = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_OutputMode"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventType"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventType"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerType"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerType"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["ds"] = $hx_exports["alphaTab"]["audio"]["synth"]["ds"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"] = $hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"] || {};
;$hx_exports["alphaTab"]["platform"] = $hx_exports["alphaTab"]["platform"] || {};
$hx_exports["alphaTab"]["platform"]["javaScript"] = $hx_exports["alphaTab"]["platform"]["javaScript"] || {};
;$hx_exports["alphaTab"]["platform"]["model"] = $hx_exports["alphaTab"]["platform"]["model"] || {};
$hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"] = $hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"] || {};
;$hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"] = $hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"] || {};
;$hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"] = $hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"] || {};
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js._Boot.HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _List.ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _List.ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,__class__: List
};
var _List = {};
_List.ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_List.ListNode.__name__ = ["_List","ListNode"];
_List.ListNode.prototype = {
	__class__: _List.ListNode
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var alphaTab = {};
alphaTab.AlphaTabApi = $hx_exports["alphaTab"]["AlphaTabApi"] = function(uiFacade,settings) {
	var _gthis = this;
	this._startTime = 0;
	this._trackIndexes = null;
	this.uiFacade = null;
	this.container = null;
	this.renderer = null;
	this.score = null;
	this.settings = null;
	this.tracks = null;
	this.canvasElement = null;
	this._tickCache = null;
	this.player = null;
	this._cursorWrapper = null;
	this._barCursor = null;
	this._beatCursor = null;
	this._selectionWrapper = null;
	this._previousTick = 0;
	this._playerState = 0;
	this._currentBeat = null;
	this._previousStateForCursor = 0;
	this._previousCursorCache = null;
	this._lastScroll = 0;
	this._selecting = false;
	this._selectionStart = null;
	this._selectionEnd = null;
	this.uiFacade = uiFacade;
	this.container = uiFacade.get_rootContainer();
	uiFacade.initialize(this,settings);
	alphaTab.util.Logger.logLevel = this.settings.core.logLevel;
	this.canvasElement = uiFacade.createCanvasElement();
	this.container.appendChild(this.canvasElement);
	this.container.addResize(alphaTab.platform.Platform.throttle(function() {
		if(_gthis.container.get_width() != _gthis.renderer.get_width()) {
			_gthis.triggerResize();
		}
	},uiFacade.get_resizeThrottle()));
	if(this.settings.core.useWorkers && this.uiFacade.get_areWorkersSupported() && alphaTab.Environment.getRenderEngineFactory(this.settings).supportsWorkers) {
		this.renderer = this.uiFacade.createWorkerRenderer();
	} else {
		this.renderer = new alphaTab.rendering.ScoreRenderer(this.settings);
	}
	var initialResizeEventInfo = new alphaTab.ResizeEventArgs();
	initialResizeEventInfo.oldWidth = this.renderer.get_width();
	initialResizeEventInfo.newWidth = system.Convert.toInt32_Single(this.container.get_width());
	initialResizeEventInfo.settings = this.settings;
	this.onResize(initialResizeEventInfo);
	this.renderer.addPreRender($bind(this,this.onRenderStarted));
	this.renderer.addRenderFinished(function(e) {
		_gthis.onRenderFinished();
	});
	this.renderer.addPostRenderFinished(function() {
		var duration = Date.now() - _gthis._startTime;
		alphaTab.util.Logger.info("rendering","Rendering completed in " + Std.string(duration) + "ms",null);
		_gthis.onPostRenderFinished();
	});
	this.renderer.addPreRender(function(resize) {
		_gthis._startTime = Date.now();
	});
	this.renderer.addPartialRenderFinished($bind(this,this.appendRenderResult));
	this.renderer.addRenderFinished(function(r) {
		_gthis.appendRenderResult(r);
		_gthis.appendRenderResult(null);
	});
	this.renderer.addError($bind(this,this.onError));
	if(this.settings.player.enablePlayer) {
		this.setupPlayer();
	}
	this.setupClickHandling();
	this.uiFacade.initialRender();
};
alphaTab.AlphaTabApi.__name__ = ["alphaTab","AlphaTabApi"];
alphaTab.AlphaTabApi.prototype = {
	destroy: function() {
		if(this.player != null) {
			this.player.destroy();
		}
		this.uiFacade.destroy();
		this.renderer.destroy();
	}
	,updateSettings: function() {
		this.renderer.updateSettings(this.settings);
		if(this.settings.player.enablePlayer) {
			this.setupPlayer();
		} else {
			this.destroyPlayer();
		}
	}
	,load: function(scoreData,trackIndexes) {
		var _gthis = this;
		try {
			return this.uiFacade.load(scoreData,function(score) {
				_gthis.renderScore(score,trackIndexes);
			},function(error) {
				_gthis.onError("import",error);
			});
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.onError("import",e);
				return false;
			} else throw(e);
		}
	}
	,renderScore: function(score,trackIndexes) {
		var this1 = [];
		var tracks = this1;
		if(trackIndexes == null) {
			if(score.tracks.length > 0) {
				tracks.push(score.tracks[0]);
			}
		} else if(trackIndexes.length == 0) {
			if(score.tracks.length > 0) {
				tracks.push(score.tracks[0]);
			}
		} else if(trackIndexes.length == 1 && trackIndexes[0] == -1) {
			var track = $iterator(score.tracks)();
			while(track.hasNext()) {
				var track1 = track.next();
				tracks.push(track1);
			}
		} else {
			var index = new system.Int32ArrayIterator(trackIndexes);
			while(index.hasNext()) {
				var index1 = index.next();
				if(index1 >= 0 && index1 <= score.tracks.length) {
					tracks.push(score.tracks[index1]);
				}
			}
		}
		this.internalRenderTracks(score,tracks);
	}
	,renderTracks: function(tracks) {
		if(tracks.length > 0) {
			var score = tracks[0].score;
			var track = HxOverrides.iter(tracks);
			while(track.hasNext()) {
				var track1 = track.next();
				if(track1.score != score) {
					this.onError("load",new alphaTab.AlphaTabException().AlphaTabException("All rendered tracks must belong to the same score."));
					return;
				}
			}
			this.internalRenderTracks(score,tracks);
		}
	}
	,internalRenderTracks: function(score,tracks) {
		if(score != this.score) {
			alphaTab.model.ModelUtils.applyPitchOffsets(this.settings,score);
			this.score = score;
			this.tracks = tracks;
			var this1 = [];
			this._trackIndexes = this1;
			var track = HxOverrides.iter(tracks);
			while(track.hasNext()) {
				var track1 = track.next();
				this._trackIndexes.push(track1.index);
			}
			this.onLoaded(score);
			this.loadMidiForScore();
			this.render();
		} else {
			this.tracks = tracks;
			var this2 = [];
			this._trackIndexes = this2;
			var track2 = HxOverrides.iter(tracks);
			while(track2.hasNext()) {
				var track3 = track2.next();
				this._trackIndexes.push(track3.index);
			}
			this.render();
		}
	}
	,triggerResize: function() {
		var _gthis = this;
		if(!this.container.get_isVisible()) {
			alphaTab.util.Logger.warning("Rendering","AlphaTab container was invisible while autosizing, waiting for element to become visible",null);
			this.uiFacade.addRootContainerBecameVisible(function() {
				alphaTab.util.Logger.info("Rendering","AlphaTab container became visible, doing autosizing",null);
				_gthis.triggerResize();
			});
		} else {
			var _tmp = new alphaTab.ResizeEventArgs();
			_tmp.oldWidth = _gthis.renderer.get_width();
			_tmp.newWidth = system.Convert.toInt32_Single(_gthis.container.get_width());
			_tmp.settings = _gthis.settings;
			var resizeEventInfo = _tmp;
			this.onResize(resizeEventInfo);
			this.renderer.updateSettings(this.settings);
			this.renderer.set_width(system.Convert.toInt32_Single(this.container.get_width()));
			this.renderer.resizeRender();
		}
	}
	,appendRenderResult: function(result) {
		if(result != null) {
			var tmp = this.canvasElement;
			var this1 = system.Convert.toInt32_Single(result.totalWidth);
			tmp.set_width(this1);
			var tmp1 = this.canvasElement;
			var this2 = system.Convert.toInt32_Single(result.totalHeight);
			tmp1.set_height(this2);
			if(this._cursorWrapper != null) {
				var tmp2 = this._cursorWrapper;
				var this3 = system.Convert.toInt32_Single(result.totalWidth);
				tmp2.set_width(this3);
				var tmp3 = this._cursorWrapper;
				var this4 = system.Convert.toInt32_Single(result.totalHeight);
				tmp3.set_height(this4);
			}
		}
		if(result == null || result.renderResult != null) {
			this.uiFacade.beginAppendRenderResults(result);
		}
	}
	,tex: function(tex,tracks) {
		try {
			var parser = new alphaTab.importer.AlphaTexImporter();
			var data = alphaTab.io.ByteBuffer.fromBuffer(alphaTab.platform.Platform.stringToByteArray(tex));
			parser.init(data,this.settings);
			var score = parser.readScore();
			this.renderScore(score,tracks);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.onError("import",e);
			} else throw(e);
		}
	}
	,loadSoundFont: function(data) {
		if(this.player == null) {
			return false;
		}
		return this.uiFacade.loadSoundFont(data);
	}
	,render: function() {
		var _gthis = this;
		if(this.renderer == null) {
			return;
		}
		var renderAction = null;
		renderAction = function() {
			if(_gthis.uiFacade.get_canRender()) {
				_gthis.renderer.set_width(system.Convert.toInt32_Single(_gthis.container.get_width()));
				_gthis.renderer.renderScore(_gthis.score,new Int32Array(_gthis._trackIndexes));
			} else {
				_gthis.uiFacade.addCanRenderChanged(renderAction);
			}
		};
		renderAction();
	}
	,get_isReadyForPlayback: function() {
		if(this.player == null) {
			return false;
		}
		return this.player.get_isReadyForPlayback();
	}
	,get_playerState: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_state();
	}
	,get_masterVolume: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_masterVolume();
	}
	,set_masterVolume: function(value) {
		if(this.player != null) {
			this.player.set_masterVolume(value);
		}
		return this.get_masterVolume();
	}
	,get_metronomeVolume: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_metronomeVolume();
	}
	,set_metronomeVolume: function(value) {
		if(this.player != null) {
			this.player.set_metronomeVolume(value);
		}
		return this.get_metronomeVolume();
	}
	,get_tickPosition: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_tickPosition();
	}
	,set_tickPosition: function(value) {
		if(this.player != null) {
			this.player.set_tickPosition(value);
		}
		return this.get_tickPosition();
	}
	,get_timePosition: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_timePosition();
	}
	,set_timePosition: function(value) {
		if(this.player != null) {
			this.player.set_timePosition(value);
		}
		return this.get_timePosition();
	}
	,get_playbackRange: function() {
		if(this.player == null) {
			return null;
		}
		return this.player.get_playbackRange();
	}
	,set_playbackRange: function(value) {
		if(this.player != null) {
			this.player.set_playbackRange(value);
		}
		return this.get_playbackRange();
	}
	,get_playbackSpeed: function() {
		if(this.player == null) {
			return 0;
		}
		return this.player.get_playbackSpeed();
	}
	,set_playbackSpeed: function(value) {
		if(this.player != null) {
			this.player.set_playbackSpeed(value);
		}
		return this.get_playbackSpeed();
	}
	,get_isLooping: function() {
		if(this.player == null) {
			return false;
		}
		return this.player.get_isLooping();
	}
	,set_isLooping: function(value) {
		if(this.player != null) {
			this.player.set_isLooping(value);
		}
		return this.get_isLooping();
	}
	,destroyPlayer: function() {
		if(this.player == null) {
			return;
		}
		this.player.destroy();
		this.player = null;
		this.destroyCursors();
	}
	,setupPlayer: function() {
		var _gthis = this;
		if(this.player != null) {
			return;
		}
		this.player = this.uiFacade.createWorkerPlayer();
		if(this.player == null) {
			return;
		}
		this.player.addReady(function() {
			_gthis.loadMidiForScore();
		});
		this.player.addReadyForPlayback(function() {
			_gthis.onReadyForPlayback();
			if(_gthis.tracks != null) {
				var track = HxOverrides.iter(_gthis.tracks);
				while(track.hasNext()) {
					var track1 = track.next();
					var this1 = 16;
					var volume = track1.playbackInfo.volume / this1;
					_gthis.player.setChannelVolume(track1.playbackInfo.primaryChannel,volume);
					_gthis.player.setChannelVolume(track1.playbackInfo.secondaryChannel,volume);
				}
			}
		});
		this.player.addSoundFontLoaded($bind(this,this.onSoundFontLoaded));
		this.player.addSoundFontLoadFailed(function(e) {
			_gthis.onError("soundFont",e);
		});
		this.player.addMidiLoaded($bind(this,this.onMidiLoaded));
		this.player.addMidiLoadFailed(function(e1) {
			_gthis.onError("midi",e1);
		});
		this.player.addStateChanged($bind(this,this.onPlayerStateChanged));
		this.player.addPositionChanged($bind(this,this.onPlayerPositionChanged));
		this.player.addFinished($bind(this,this.onPlayerFinished));
		if(this.settings.player.enableCursor) {
			this.setupCursors();
		} else {
			this.destroyCursors();
		}
	}
	,loadMidiForScore: function() {
		if(this.player == null || this.score == null || !this.player.get_isReady()) {
			return;
		}
		alphaTab.util.Logger.info("AlphaTab","Generating Midi",null);
		var midiFile = new alphaTab.audio.synth.midi.MidiFile();
		var handler = new alphaTab.audio.generator.AlphaSynthMidiFileHandler(midiFile);
		var generator = new alphaTab.audio.generator.MidiFileGenerator(this.score,this.settings,handler);
		generator.generate();
		this._tickCache = generator.tickLookup;
		this.player.loadMidiFile(midiFile);
	}
	,changeTrackVolume: function(tracks,volume) {
		if(this.player == null) {
			return;
		}
		var track = HxOverrides.iter(tracks);
		while(track.hasNext()) {
			var track1 = track.next();
			this.player.setChannelVolume(track1.playbackInfo.primaryChannel,volume);
			this.player.setChannelVolume(track1.playbackInfo.secondaryChannel,volume);
		}
	}
	,changeTrackSolo: function(tracks,solo) {
		if(this.player == null) {
			return;
		}
		var track = HxOverrides.iter(tracks);
		while(track.hasNext()) {
			var track1 = track.next();
			this.player.setChannelSolo(track1.playbackInfo.primaryChannel,solo);
			this.player.setChannelSolo(track1.playbackInfo.secondaryChannel,solo);
		}
	}
	,changeTrackMute: function(tracks,mute) {
		if(this.player == null) {
			return;
		}
		var track = HxOverrides.iter(tracks);
		while(track.hasNext()) {
			var track1 = track.next();
			this.player.setChannelMute(track1.playbackInfo.primaryChannel,mute);
			this.player.setChannelMute(track1.playbackInfo.secondaryChannel,mute);
		}
	}
	,play: function() {
		if(this.player == null) {
			return false;
		}
		return this.player.play();
	}
	,pause: function() {
		if(this.player == null) {
			return;
		}
		this.player.pause();
	}
	,playPause: function() {
		if(this.player == null) {
			return;
		}
		this.player.playPause();
	}
	,stop: function() {
		if(this.player == null) {
			return;
		}
		this.player.stop();
	}
	,destroyCursors: function() {
		if(this._cursorWrapper == null) {
			return;
		}
		this.uiFacade.destroyCursors();
		this._cursorWrapper = null;
		this._barCursor = null;
		this._beatCursor = null;
		this._selectionWrapper = null;
		this._previousTick = 0;
		this._playerState = 0;
	}
	,setupCursors: function() {
		var _gthis = this;
		var cursors = this.uiFacade.createCursors();
		if(cursors == null) {
			return;
		}
		this._cursorWrapper = cursors.cursorWrapper;
		this._barCursor = cursors.barCursor;
		this._beatCursor = cursors.beatCursor;
		this._selectionWrapper = cursors.selectionWrapper;
		this._previousTick = 0;
		this._playerState = 0;
		this.renderer.addPostRenderFinished(function() {
			_gthis.cursorUpdateTick(_gthis._previousTick,false);
		});
		this.player.addPositionChanged(function(e) {
			_gthis._previousTick = e.currentTick;
			_gthis.uiFacade.beginInvoke(function() {
				_gthis.cursorUpdateTick(e.currentTick,false);
			});
		});
		this.player.addStateChanged(function(e1) {
			_gthis._playerState = e1.state;
			if(!e1.stopped && e1.state == 0) {
				var currentBeat = _gthis._currentBeat;
				var tickCache = _gthis._tickCache;
				if(currentBeat != null && tickCache != null) {
					_gthis.player.set_tickPosition(tickCache.getMasterBarStart(currentBeat.voice.bar.get_masterBar()) + currentBeat.playbackStart);
				}
			}
		});
	}
	,cursorUpdateTick: function(tick,stop) {
		if(stop == null) {
			stop = false;
		}
		var _gthis = this;
		this.uiFacade.beginInvoke(function() {
			var cache = _gthis._tickCache;
			if(cache != null) {
				var tracks = _gthis.tracks;
				if(tracks.length > 0) {
					var beat = cache.findBeat(tracks,tick);
					if(beat != null) {
						var this1 = beat.duration;
						_gthis.cursorUpdateBeat(beat.currentBeat,beat.nextBeat,this1,stop,beat.beatsToHighlight);
					}
				}
			}
		});
	}
	,cursorUpdateBeat: function(beat,nextBeat,duration,stop,beatsToHighlight) {
		if(beat == null) {
			return;
		}
		var cache = this.renderer.get_boundsLookup();
		if(cache == null) {
			return;
		}
		var previousBeat = this._currentBeat;
		var previousCache = this._previousCursorCache;
		var previousState = this._previousStateForCursor;
		this._currentBeat = beat;
		this._previousCursorCache = cache;
		this._previousStateForCursor = this._playerState;
		if(beat == previousBeat && cache == previousCache && previousState == this._playerState) {
			return;
		}
		var barCursor = this._barCursor;
		var beatCursor = this._beatCursor;
		var beatBoundings = cache.findBeat(beat);
		if(beatBoundings == null) {
			return;
		}
		var barBoundings = beatBoundings.barBounds.masterBarBounds;
		var barBounds = barBoundings.visualBounds;
		barCursor.set_top(barBounds.y);
		barCursor.set_left(barBounds.x);
		barCursor.set_width(barBounds.w);
		barCursor.set_height(barBounds.h);
		beatCursor.stopAnimation();
		beatCursor.set_top(barBounds.y);
		beatCursor.set_left(beatBoundings.visualBounds.x);
		beatCursor.set_height(barBounds.h);
		this.uiFacade.removeHighlights();
		if(this._playerState == 1 || stop) {
			var duration1 = this.player.get_playbackSpeed();
			duration = duration / duration1;
			if(!stop) {
				if(beatsToHighlight != null) {
					var highlight = $iterator(beatsToHighlight)();
					while(highlight.hasNext()) {
						var highlight1 = highlight.next();
						var className = alphaTab.rendering.glyphs.BeatContainerGlyph.getGroupId(highlight1);
						this.uiFacade.highlightElements(className);
					}
				}
				var nextBeatX = barBoundings.visualBounds.x + barBoundings.visualBounds.w;
				if(nextBeat != null) {
					if(nextBeat.voice.bar.index == beat.voice.bar.index || nextBeat.voice.bar.index == beat.voice.bar.index + 1) {
						var nextBeatBoundings = cache.findBeat(nextBeat);
						if(nextBeatBoundings != null && nextBeatBoundings.barBounds.masterBarBounds.staveGroupBounds == barBoundings.staveGroupBounds) {
							nextBeatX = nextBeatBoundings.visualBounds.x;
						}
					}
				}
				this.uiFacade.beginInvoke(function() {
					beatCursor.transitionToX(duration,nextBeatX);
				});
			}
			if(!this._selecting && this.settings.player.scrollMode != 0) {
				var scrollElement = this.uiFacade.getScrollContainer();
				var isVertical = alphaTab.Environment.getLayoutEngineFactory(this.settings).vertical;
				var mode = this.settings.player.scrollMode;
				var elementOffset = this.uiFacade.getOffset(scrollElement,this.container);
				if(isVertical) {
					switch(mode) {
					case 1:
						var y = system.Convert.toInt32_Single(elementOffset.y + barBoundings.realBounds.y + this.settings.player.scrollOffsetY);
						if(y != this._lastScroll) {
							this._lastScroll = y;
							this.uiFacade.scrollToY(scrollElement,y,this.settings.player.scrollSpeed);
						}
						break;
					case 2:
						var elementBottom = scrollElement.get_scrollTop() + this.uiFacade.getOffset(null,scrollElement).h;
						if(barBoundings.visualBounds.y + barBoundings.visualBounds.h >= elementBottom || barBoundings.visualBounds.y < scrollElement.get_scrollTop()) {
							var scrollTop = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
							this._lastScroll = system.Convert.toInt32_Single(barBoundings.visualBounds.x);
							this.uiFacade.scrollToY(scrollElement,system.Convert.toInt32_Single(scrollTop),this.settings.player.scrollSpeed);
						}
						break;
					default:
					}
				} else {
					switch(mode) {
					case 1:
						var x = system.Convert.toInt32_Single(barBoundings.visualBounds.x);
						if(x != this._lastScroll) {
							var scrollLeft = system.Convert.toInt32_Single(barBoundings.realBounds.x + this.settings.player.scrollOffsetX);
							this._lastScroll = system.Convert.toInt32_Single(barBoundings.visualBounds.x);
							this.uiFacade.scrollToX(scrollElement,scrollLeft,this.settings.player.scrollSpeed);
						}
						break;
					case 2:
						var elementRight = scrollElement.get_scrollLeft() + this.uiFacade.getOffset(null,scrollElement).w;
						if(barBoundings.visualBounds.x + barBoundings.visualBounds.w >= elementRight || barBoundings.visualBounds.x < scrollElement.get_scrollLeft()) {
							var scrollLeft1 = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
							this._lastScroll = system.Convert.toInt32_Single(barBoundings.visualBounds.x);
							this.uiFacade.scrollToX(scrollElement,system.Convert.toInt32_Single(scrollLeft1),this.settings.player.scrollSpeed);
						}
						break;
					default:
					}
				}
			}
			this.onPlayedBeatChanged(beat);
		}
	}
	,addPlayedBeatChanged: function(value) {
		this.playedBeatChanged = system._EventAction1.EventAction1_Impl_.add(this.playedBeatChanged,value);
	}
	,removePlayedBeatChanged: function(value) {
		this.playedBeatChanged = system._EventAction1.EventAction1_Impl_.sub(this.playedBeatChanged,value);
	}
	,onPlayedBeatChanged: function(beat) {
		var _e = this.playedBeatChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(beat);
		}
		this.uiFacade.triggerEvent(this.container,"playedBeatChanged",beat);
	}
	,setupClickHandling: function() {
		var _gthis = this;
		this.canvasElement.addMouseDown(function(e) {
			if(!e.get_isLeftMouseButton() || !_gthis.settings.player.enablePlayer || !_gthis.settings.player.enableCursor) {
				return;
			}
			e.preventDefault();
			var relX = e.getX(_gthis.canvasElement);
			var relY = e.getY(_gthis.canvasElement);
			var beat = _gthis.renderer.get_boundsLookup().getBeatAtPos(relX,relY);
			if(beat != null) {
				_gthis._selectionStart = new alphaTab.SelectionInfo(beat);
				_gthis._selectionEnd = null;
				_gthis._selecting = true;
			}
		});
		this.canvasElement.addMouseMove(function(e1) {
			if(!_gthis._selecting || !_gthis.settings.player.enablePlayer || !_gthis.settings.player.enableCursor) {
				return;
			}
			var relX1 = e1.getX(_gthis.canvasElement);
			var relY1 = e1.getY(_gthis.canvasElement);
			var beat1 = _gthis.renderer.get_boundsLookup().getBeatAtPos(relX1,relY1);
			if(beat1 != null && (_gthis._selectionEnd == null || _gthis._selectionEnd.beat != beat1)) {
				_gthis._selectionEnd = new alphaTab.SelectionInfo(beat1);
				_gthis.cursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
			}
		});
		this.canvasElement.addMouseUp(function(e2) {
			if(!_gthis._selecting || !_gthis.settings.player.enablePlayer || !_gthis.settings.player.enableCursor) {
				return;
			}
			e2.preventDefault();
			if(_gthis._selectionEnd != null) {
				var startTick = _gthis._selectionStart.beat.get_absoluteDisplayStart();
				var endTick = _gthis._selectionStart.beat.get_absoluteDisplayStart();
				if(endTick < startTick) {
					var t = _gthis._selectionStart;
					_gthis._selectionStart = _gthis._selectionEnd;
					_gthis._selectionEnd = t;
				}
			}
			if(_gthis._selectionStart != null) {
				var tickCache = _gthis._tickCache;
				var realMasterBarStart = tickCache.getMasterBarStart(_gthis._selectionStart.beat.voice.bar.get_masterBar());
				_gthis.cursorUpdateBeat(_gthis._selectionStart.beat,null,0,false,null);
				_gthis.player.set_tickPosition(realMasterBarStart + _gthis._selectionStart.beat.playbackStart);
				if(_gthis._selectionEnd != null && _gthis._selectionStart.beat != _gthis._selectionEnd.beat) {
					var realMasterBarEnd = tickCache.getMasterBarStart(_gthis._selectionEnd.beat.voice.bar.get_masterBar());
					var _gthis1 = _gthis.player;
					var _tmp = new alphaTab.audio.synth.PlaybackRange();
					_tmp.startTick = realMasterBarStart + _gthis._selectionStart.beat.playbackStart;
					_tmp.endTick = realMasterBarEnd + _gthis._selectionEnd.beat.playbackStart + _gthis._selectionEnd.beat.playbackDuration - 50;
					_gthis1.set_playbackRange(_tmp);
				} else {
					_gthis._selectionStart = null;
					_gthis.player.set_playbackRange(null);
					_gthis.cursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
				}
			}
			_gthis._selecting = false;
		});
		this.renderer.addPostRenderFinished(function() {
			if(_gthis._selectionStart == null || !_gthis.settings.player.enablePlayer || !_gthis.settings.player.enableCursor) {
				return;
			}
			_gthis.cursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
		});
	}
	,cursorSelectRange: function(startBeat,endBeat) {
		var cache = this.renderer.get_boundsLookup();
		if(cache == null) {
			return;
		}
		var selectionWrapper = this._selectionWrapper;
		selectionWrapper.clear();
		if(startBeat == null || endBeat == null || startBeat.beat == endBeat.beat) {
			return;
		}
		if(startBeat.bounds == null) {
			startBeat.bounds = cache.findBeat(startBeat.beat);
		}
		if(endBeat.bounds == null) {
			endBeat.bounds = cache.findBeat(endBeat.beat);
		}
		var startTick = startBeat.beat.get_absolutePlaybackStart();
		var endTick = endBeat.beat.get_absolutePlaybackStart();
		if(endTick < startTick) {
			var t = startBeat;
			startBeat = endBeat;
			endBeat = t;
		}
		var startX = startBeat.bounds.realBounds.x;
		var endX = endBeat.bounds.realBounds.x + endBeat.bounds.realBounds.w;
		if(endBeat.beat.index == endBeat.beat.voice.beats.length - 1) {
			endX = endBeat.bounds.barBounds.masterBarBounds.realBounds.x + endBeat.bounds.barBounds.masterBarBounds.realBounds.w;
		}
		if(startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds != endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds) {
			var staffStartX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x;
			var staffEndX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x + startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.w;
			var startSelection = this.uiFacade.createSelectionElement();
			startSelection.set_top(startBeat.bounds.barBounds.masterBarBounds.visualBounds.y);
			startSelection.set_left(startX);
			startSelection.set_width(staffEndX - startX);
			startSelection.set_height(startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
			selectionWrapper.appendChild(startSelection);
			var staffStartIndex = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index + 1;
			var staffEndIndex = endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index;
			var staffIndex = staffStartIndex;
			while(staffIndex < staffEndIndex) {
				var staffBounds = cache.staveGroups[staffIndex];
				var middleSelection = this.uiFacade.createSelectionElement();
				middleSelection.set_top(staffBounds.visualBounds.y);
				middleSelection.set_left(staffStartX);
				middleSelection.set_width(staffEndX - staffStartX);
				middleSelection.set_height(staffBounds.visualBounds.h);
				selectionWrapper.appendChild(middleSelection);
				++staffIndex;
			}
			var endSelection = this.uiFacade.createSelectionElement();
			endSelection.set_top(endBeat.bounds.barBounds.masterBarBounds.visualBounds.y);
			endSelection.set_left(staffStartX);
			endSelection.set_width(endX - staffStartX);
			endSelection.set_height(endBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
			selectionWrapper.appendChild(endSelection);
		} else {
			var selection = this.uiFacade.createSelectionElement();
			selection.set_top(startBeat.bounds.barBounds.masterBarBounds.visualBounds.y);
			selection.set_left(startX);
			selection.set_width(endX - startX);
			selection.set_height(startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
			selectionWrapper.appendChild(selection);
		}
	}
	,addLoaded: function(value) {
		this.loaded = system._EventAction1.EventAction1_Impl_.add(this.loaded,value);
	}
	,removeLoaded: function(value) {
		this.loaded = system._EventAction1.EventAction1_Impl_.sub(this.loaded,value);
	}
	,onLoaded: function(obj) {
		var _e = this.loaded;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
		this.uiFacade.triggerEvent(this.container,"loaded",obj);
	}
	,addResize: function(value) {
		this.resize = system._EventAction1.EventAction1_Impl_.add(this.resize,value);
	}
	,removeResize: function(value) {
		this.resize = system._EventAction1.EventAction1_Impl_.sub(this.resize,value);
	}
	,onResize: function(obj) {
		var _e = this.resize;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
		this.uiFacade.triggerEvent(this.container,"resize",obj);
	}
	,addRenderStarted: function(value) {
		this.renderStarted = system._EventAction1.EventAction1_Impl_.add(this.renderStarted,value);
	}
	,removeRenderStarted: function(value) {
		this.renderStarted = system._EventAction1.EventAction1_Impl_.sub(this.renderStarted,value);
	}
	,onRenderStarted: function(resize) {
		var _e = this.renderStarted;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(resize);
		}
		this.uiFacade.triggerEvent(this.container,"render",resize);
	}
	,addRenderFinished: function(value) {
		this.renderFinished = system._EventAction.EventAction_Impl_.add(this.renderFinished,value);
	}
	,removeRenderFinished: function(value) {
		this.renderFinished = system._EventAction.EventAction_Impl_.sub(this.renderFinished,value);
	}
	,onRenderFinished: function() {
		var _e = this.renderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"rendered",null);
	}
	,addPostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.add(this.postRenderFinished,value);
	}
	,removePostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.sub(this.postRenderFinished,value);
	}
	,onPostRenderFinished: function() {
		var _e = this.postRenderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"postRendered",null);
	}
	,addError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.add(this.error,value);
	}
	,removeError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.sub(this.error,value);
	}
	,onError: function(type,details) {
		alphaTab.util.Logger.error(type,"An unexpected error occurred",details);
		var _e = this.error;
		var handler = function(p1,p2) {
			system._EventAction2.EventAction2_Impl_.invoke(_e,p1,p2);
		};
		if(handler != null) {
			handler(type,details);
		}
		this.uiFacade.triggerEvent(this.container,"error",{ type : type, details : details});
	}
	,addReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.add(this.readyForPlayback,value);
	}
	,removeReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.sub(this.readyForPlayback,value);
	}
	,onReadyForPlayback: function() {
		var _e = this.readyForPlayback;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"playerReady",null);
	}
	,addPlayerFinished: function(value) {
		this.playerFinished = system._EventAction.EventAction_Impl_.add(this.playerFinished,value);
	}
	,removePlayerFinished: function(value) {
		this.playerFinished = system._EventAction.EventAction_Impl_.sub(this.playerFinished,value);
	}
	,onPlayerFinished: function() {
		var _e = this.playerFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"finished",null);
	}
	,addSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.add(this.soundFontLoaded,value);
	}
	,removeSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.sub(this.soundFontLoaded,value);
	}
	,onSoundFontLoaded: function() {
		var _e = this.soundFontLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"soundFontLoaded",null);
	}
	,addMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.add(this.midiLoaded,value);
	}
	,removeMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.sub(this.midiLoaded,value);
	}
	,onMidiLoaded: function() {
		var _e = this.midiLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
		this.uiFacade.triggerEvent(this.container,"midiFileLoaded",null);
	}
	,addPlayerStateChanged: function(value) {
		this.playerStateChanged = system._EventAction1.EventAction1_Impl_.add(this.playerStateChanged,value);
	}
	,removePlayerStateChanged: function(value) {
		this.playerStateChanged = system._EventAction1.EventAction1_Impl_.sub(this.playerStateChanged,value);
	}
	,onPlayerStateChanged: function(e) {
		var _e = this.playerStateChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
		this.uiFacade.triggerEvent(this.container,"playerStateChanged",e);
	}
	,addPlayerPositionChanged: function(value) {
		this.playerPositionChanged = system._EventAction1.EventAction1_Impl_.add(this.playerPositionChanged,value);
	}
	,removePlayerPositionChanged: function(value) {
		this.playerPositionChanged = system._EventAction1.EventAction1_Impl_.sub(this.playerPositionChanged,value);
	}
	,onPlayerPositionChanged: function(e) {
		var _e = this.playerPositionChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
		this.uiFacade.triggerEvent(this.container,"positionChanged",e);
	}
	,__class__: alphaTab.AlphaTabApi
};
var system = {};
system.Exception = function() {
};
system.Exception.__name__ = ["system","Exception"];
system.Exception.prototype = {
	Exception_CsString: function(message) {
		this.message = message;
		return this;
	}
	,__class__: system.Exception
};
alphaTab.AlphaTabException = $hx_exports["alphaTab"]["AlphaTabException"] = function() {
	system.Exception.call(this);
};
alphaTab.AlphaTabException.__name__ = ["alphaTab","AlphaTabException"];
alphaTab.AlphaTabException.__super__ = system.Exception;
alphaTab.AlphaTabException.prototype = $extend(system.Exception.prototype,{
	AlphaTabException: function(message) {
		this.Exception_CsString(message);
		return this;
	}
	,__class__: alphaTab.AlphaTabException
});
alphaTab.CoreSettings = $hx_exports["alphaTab"]["CoreSettings"] = function() {
	this.includeNoteBounds = false;
	this.useWorkers = true;
	this.logLevel = 2;
	this.engine = "default";
	this.enableLazyLoading = true;
	this.scriptFile = null;
	this.fontDirectory = null;
	var global = $global;
	if(global.document && global.alphatab_root) {
		this.scriptFile = global.alphatab_root;
		this.scriptFile = alphaTab.CoreSettings.ensureFullUrl(this.scriptFile);
		this.scriptFile = alphaTab.CoreSettings.appendScriptName(this.scriptFile);
	} else {
		this.scriptFile = alphaTab.Environment.scriptFile;
	}
	if(global.document && global.alphatab_font) {
		this.fontDirectory = global.alphatab_font;
		this.fontDirectory = alphaTab.CoreSettings.ensureFullUrl(this.fontDirectory);
	} else {
		this.fontDirectory = this.scriptFile;
		var s = this.fontDirectory;
		if(!(s == null || s.length == 0)) {
			var this1 = this.fontDirectory;
			var this2 = system.Convert.toUInt16(47);
			var lastSlash = this1.lastIndexOf(String.fromCharCode(this2));
			if(lastSlash >= 0) {
				this.fontDirectory = HxOverrides.substr(this.fontDirectory,0,lastSlash) + "/Font/";
			}
		}
	}
};
alphaTab.CoreSettings.__name__ = ["alphaTab","CoreSettings"];
alphaTab.CoreSettings.ensureFullUrl = function(relativeUrl) {
	var global = $global;
	if(!StringTools.startsWith(relativeUrl,"http") && !StringTools.startsWith(relativeUrl,"https") && !StringTools.startsWith(relativeUrl,"file")) {
		var this1 = "";
		var root = this1;
		root += Std.string(global.location.protocol);
		root += Std.string("//");
		if(global.location.hostname) {
			root += Std.string(global.location.hostname);
		}
		if(global.location.port) {
			root += Std.string(":");
			root += Std.string(global.location.port);
		}
		var directory = global.location.pathname.split("/").slice(0,-1).join("/");
		if(directory.length > 0) {
			if(!StringTools.startsWith(directory,"/")) {
				root += Std.string("/");
			}
			root += Std.string(directory);
		}
		if(!StringTools.startsWith(relativeUrl,"/")) {
			root += Std.string("/");
		}
		root += Std.string(relativeUrl);
		return root;
	}
	return relativeUrl;
};
alphaTab.CoreSettings.appendScriptName = function(url) {
	if(!(url == null || url.length == 0) && !StringTools.endsWith(url,".js")) {
		if(!StringTools.endsWith(url,"/")) {
			url = url + "/";
		}
		url = url + "AlphaTab.js";
	}
	return url;
};
alphaTab.CoreSettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.CoreSettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.CoreSettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.CoreSettings.prototype = {
	fillToJson: function(json) {
		json.scriptFile = this.scriptFile;
		json.fontDirectory = this.fontDirectory;
		json.enableLazyLoading = this.enableLazyLoading;
		json.engine = this.engine;
		json.logLevel = alphaTab.util._LogLevel.LogLevel_Impl_.toJson(this.logLevel);
		json.useWorkers = this.useWorkers;
		json.includeNoteBounds = this.includeNoteBounds;
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "enablelazyloading":
			this.enableLazyLoading = value;
			return true;
		case "engine":
			this.engine = value;
			return true;
		case "fontdirectory":
			this.fontDirectory = value;
			return true;
		case "includenotebounds":
			this.includeNoteBounds = value;
			return true;
		case "loglevel":
			this.logLevel = alphaTab.util._LogLevel.LogLevel_Impl_.fromJson(value);
			return true;
		case "scriptfile":
			this.scriptFile = value;
			return true;
		case "useworkers":
			this.useWorkers = value;
			return true;
		default:
		}
		return false;
	}
	,__class__: alphaTab.CoreSettings
};
alphaTab.DisplaySettings = $hx_exports["alphaTab"]["DisplaySettings"] = function() {
	this.resources = new alphaTab.RenderingResources();
	this.barCountPerPartial = 10;
	this.barCount = -1;
	this.startBar = 1;
	this.barsPerRow = -1;
	this.staveProfile = 0;
	this.layoutMode = 0;
	this.stretchForce = 1.0;
	this.scale = 1.0;
	this.padding = null;
};
alphaTab.DisplaySettings.__name__ = ["alphaTab","DisplaySettings"];
alphaTab.DisplaySettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.DisplaySettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.DisplaySettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.DisplaySettings.prototype = {
	fillToJson: function(json) {
		json.scale = this.scale;
		json.stretchForce = this.stretchForce;
		json.layoutMode = alphaTab._LayoutMode.LayoutMode_Impl_.toJson(this.layoutMode);
		json.staveProfile = alphaTab._StaveProfile.StaveProfile_Impl_.toJson(this.staveProfile);
		json.barsPerRow = this.barsPerRow;
		json.startBar = this.startBar;
		json.barCount = this.barCount;
		json.barCountPerPartial = this.barCountPerPartial;
		if(json.resources == null) {
			json.resources = alphaTab.RenderingResources.toJson(this.resources);
		} else {
			this.resources.fillToJson(json.resources);
		}
		json.padding = this.padding == null ? null : this.padding.slice();
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "barcount":
			this.barCount = value;
			return true;
		case "barcountperpartial":
			this.barCountPerPartial = value;
			return true;
		case "barsperrow":
			this.barsPerRow = value;
			return true;
		case "layoutmode":
			this.layoutMode = alphaTab._LayoutMode.LayoutMode_Impl_.fromJson(value);
			return true;
		case "padding":
			this.padding = value == null ? null : value.slice();
			return true;
		case "scale":
			this.scale = value;
			return true;
		case "startbar":
			this.startBar = value;
			return true;
		case "staveprofile":
			this.staveProfile = alphaTab._StaveProfile.StaveProfile_Impl_.fromJson(value);
			return true;
		case "stretchforce":
			this.stretchForce = value;
			return true;
		default:
		}
		if(alphaTab.platform.Platform.equalsAny(property,["resources"])) {
			if(this.resources == null) {
				this.resources = alphaTab.RenderingResources.fromJson(value);
			} else {
				this.resources.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch = alphaTab.platform.Platform.findStartsWith(property,["resources"]);
			if(partialMatch != null) {
				if(this.resources == null) {
					this.resources = new alphaTab.RenderingResources();
				}
				if(this.resources.setProperty(HxOverrides.substr(property,partialMatch.length,null),value)) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: alphaTab.DisplaySettings
};
alphaTab.platform = {};
alphaTab.platform.ICanvas = function() { };
alphaTab.platform.ICanvas.__name__ = ["alphaTab","platform","ICanvas"];
alphaTab.platform.ICanvas.prototype = {
	__class__: alphaTab.platform.ICanvas
};
alphaTab.platform.svg = {};
alphaTab.platform.svg.SvgCanvas = function() {
	this.Buffer = null;
	this._currentPath = null;
	this._currentPathIsEmpty = false;
	this.set_color(null);
	this.set_lineWidth(0.0);
	this.set_font(null);
	this.set_textAlign(0);
	this.set_textBaseline(0);
	this.set_settings(null);
	var this1 = "";
	this._currentPath = this1;
	this._currentPathIsEmpty = true;
	this.set_color(new alphaTab.platform.model.Color(255,255,255,255));
	this.set_lineWidth(1);
	this.set_font(new alphaTab.platform.model.Font("Arial",10,0));
	this.set_textAlign(0);
	this.set_textBaseline(0);
};
alphaTab.platform.svg.SvgCanvas.__name__ = ["alphaTab","platform","svg","SvgCanvas"];
alphaTab.platform.svg.SvgCanvas.__interfaces__ = [alphaTab.platform.ICanvas];
alphaTab.platform.svg.SvgCanvas.prototype = {
	get_color: function() {
		return this.__Color;
	}
	,set_color: function(value) {
		return this.__Color = value;
	}
	,get_lineWidth: function() {
		return this.__LineWidth;
	}
	,set_lineWidth: function(value) {
		return this.__LineWidth = value;
	}
	,get_font: function() {
		return this.__Font;
	}
	,set_font: function(value) {
		return this.__Font = value;
	}
	,get_textAlign: function() {
		return this.__TextAlign;
	}
	,set_textAlign: function(value) {
		return this.__TextAlign = value;
	}
	,get_textBaseline: function() {
		return this.__TextBaseline;
	}
	,set_textBaseline: function(value) {
		return this.__TextBaseline = value;
	}
	,get_settings: function() {
		return this.__Settings;
	}
	,set_settings: function(value) {
		return this.__Settings = value;
	}
	,beginRender: function(width,height) {
		var this1 = "";
		this.Buffer = this1;
		this.Buffer += Std.string("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"");
		this.Buffer += Std.string(width);
		this.Buffer += Std.string("px\" height=\"");
		var s = system.Convert.toInt32_Single(height);
		this.Buffer += Std.string(s);
		this.Buffer += Std.string("px\" class=\"at-surface-svg\">\n");
		var this2 = "";
		this._currentPath = this2;
		this._currentPathIsEmpty = true;
	}
	,beginGroup: function(identifier) {
		this.Buffer += Std.string("<g class=\"" + identifier + "\">");
	}
	,endGroup: function() {
		this.Buffer += Std.string("</g>");
	}
	,endRender: function() {
		this.Buffer += Std.string("</svg>");
		return this.Buffer;
	}
	,fillRect: function(x,y,w,h) {
		if(w > 0) {
			var s = "<rect x=\"" + Std.string(system.Convert.toInt32_Single(x) - 0) + "\" y=\"" + Std.string(system.Convert.toInt32_Single(y) - 0) + "\" width=\"" + Std.string(w) + "\" height=\"" + Std.string(h) + "\" fill=\"" + this.get_color().rgba + "\" />\n";
			this.Buffer += Std.string(s);
		}
	}
	,strokeRect: function(x,y,w,h) {
		var s = "<rect x=\"" + Std.string(system.Convert.toInt32_Single(x) - 0) + "\" y=\"" + Std.string(system.Convert.toInt32_Single(y) - 0) + "\" width=\"" + Std.string(w) + "\" height=\"" + Std.string(h) + "\" stroke=\"" + this.get_color().rgba + "\"";
		this.Buffer += Std.string(s);
		if(this.get_lineWidth() != 1) {
			var s1 = " stroke-width=\"" + Std.string(this.get_lineWidth()) + "\"";
			this.Buffer += Std.string(s1);
		}
		this.Buffer += Std.string(" fill=\"transparent\" />\n");
	}
	,beginPath: function() {
	}
	,closePath: function() {
		this._currentPath += Std.string(" z");
	}
	,moveTo: function(x,y) {
		this._currentPath += Std.string(" M" + Std.string(x - 0) + "," + Std.string(y - 0));
	}
	,lineTo: function(x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" L" + Std.string(x - 0) + "," + Std.string(y - 0));
	}
	,quadraticCurveTo: function(cpx,cpy,x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" Q" + Std.string(cpx) + "," + Std.string(cpy) + "," + Std.string(x) + "," + Std.string(y));
	}
	,bezierCurveTo: function(cp1X,cp1Y,cp2X,cp2Y,x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" C" + Std.string(cp1X) + "," + Std.string(cp1Y) + "," + Std.string(cp2X) + "," + Std.string(cp2Y) + "," + Std.string(x) + "," + Std.string(y));
	}
	,fillCircle: function(x,y,radius) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" M" + Std.string(x - radius) + "," + Std.string(y) + " A1,1 0 0,0 " + Std.string(x + radius) + "," + Std.string(y) + " A1,1 0 0,0 " + Std.string(x - radius) + "," + Std.string(y) + " z");
		this.fill();
	}
	,fill: function() {
		if(!this._currentPathIsEmpty) {
			this.Buffer += Std.string("<path d=\"" + this._currentPath + "\"");
			if(this.get_color().rgba != "#000000") {
				var s = " fill=\"" + this.get_color().rgba + "\"";
				this.Buffer += Std.string(s);
			}
			this.Buffer += Std.string(" style=\"stroke: none\"/>");
		}
		var this1 = "";
		this._currentPath = this1;
		this._currentPathIsEmpty = true;
	}
	,stroke: function() {
		if(!this._currentPathIsEmpty) {
			var s = "<path d=\"" + this._currentPath + "\" stroke=\"" + this.get_color().rgba + "\"";
			if(this.get_lineWidth() != 1) {
				s = s + (" stroke-width=\"" + Std.string(this.get_lineWidth()) + "\"");
			}
			s = s + " style=\"fill: none\" />";
			this.Buffer += Std.string(s);
		}
		var this1 = "";
		this._currentPath = this1;
		this._currentPathIsEmpty = true;
	}
	,fillText: function(text,x,y) {
		if(text == "") {
			return;
		}
		var s = "<text x=\"" + Std.string(system.Convert.toInt32_Single(x)) + "\" y=\"" + Std.string(system.Convert.toInt32_Single(y)) + "\" style=\"stroke: none; font:" + this.get_font().toCssString(this.get_settings().display.scale) + "\" " + " dominant-baseline=\"" + this.getSvgBaseLine() + "\"";
		if(this.get_color().rgba != "#000000") {
			s = s + (" fill=\"" + this.get_color().rgba + "\"");
		}
		if(this.get_textAlign() != 0) {
			s = s + (" text-anchor=\"" + this.getSvgTextAlignment(this.get_textAlign()) + "\"");
		}
		s = s + (">" + text + "</text>");
		this.Buffer += Std.string(s);
	}
	,getSvgTextAlignment: function(textAlign) {
		switch(textAlign) {
		case 0:
			return "start";
		case 1:
			return "middle";
		case 2:
			return "end";
		default:
		}
		return "";
	}
	,getSvgBaseLine: function() {
		var _g = this.get_textBaseline();
		switch(_g) {
		case 0:
			return "hanging";
		case 1:
			return "middle";
		case 2:
			return "bottom";
		default:
			return "";
		}
	}
	,measureText: function(text) {
		if(text == null || text.length == 0) {
			return 0;
		}
		return alphaTab.platform.svg.FontSizes.measureString(text,this.get_font().family,this.get_font().size,this.get_font().style);
	}
	,fillMusicFontSymbol: function(x,y,scale,symbol,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		throw new js._Boot.HaxeError("abstract");
	}
	,fillMusicFontSymbols: function(x,y,scale,symbols,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		throw new js._Boot.HaxeError("abstract");
	}
	,onRenderFinished: function() {
		return null;
	}
	,beginRotate: function(centerX,centerY,angle) {
		this.Buffer += Std.string("<g transform=\"translate(" + Std.string(centerX) + " ," + Std.string(centerY) + ") rotate( " + Std.string(angle) + ")\">");
	}
	,endRotate: function() {
		this.Buffer += Std.string("</g>");
	}
	,__class__: alphaTab.platform.svg.SvgCanvas
};
alphaTab.platform.svg.CssFontSvgCanvas = function() {
	alphaTab.platform.svg.SvgCanvas.call(this);
};
alphaTab.platform.svg.CssFontSvgCanvas.__name__ = ["alphaTab","platform","svg","CssFontSvgCanvas"];
alphaTab.platform.svg.CssFontSvgCanvas.__super__ = alphaTab.platform.svg.SvgCanvas;
alphaTab.platform.svg.CssFontSvgCanvas.prototype = $extend(alphaTab.platform.svg.SvgCanvas.prototype,{
	fillMusicFontSymbol: function(x,y,scale,symbol,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		if(symbol == -1) {
			return;
		}
		this.fillMusicFontSymbolText(x,y,scale,"&#" + Std.string(symbol) + ";",centerAtPosition);
	}
	,fillMusicFontSymbols: function(x,y,scale,symbols,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		var s = "";
		var symbol = HxOverrides.iter(symbols);
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1 != -1) {
				s = s + ("&#" + Std.string(symbol1) + ";");
			}
		}
		this.fillMusicFontSymbolText(x,y,scale,s,centerAtPosition);
	}
	,fillMusicFontSymbolText: function(x,y,scale,symbols,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		var s = "<g transform=\"translate(" + Std.string(system.Convert.toInt32_Single(x) - 0) + " " + Std.string(system.Convert.toInt32_Single(y) - 0) + ")\" class=\"at\" ><text";
		this.Buffer += Std.string(s);
		if(scale != 1) {
			this.Buffer += Std.string(" style=\"font-size: " + Std.string(scale * 100) + "%; stroke:none\"");
		} else {
			this.Buffer += Std.string(" style=\"stroke:none\"");
		}
		if(this.get_color().rgba != "#000000") {
			var s1 = " fill=\"" + this.get_color().rgba + "\"";
			this.Buffer += Std.string(s1);
		}
		if(centerAtPosition) {
			var s2 = " text-anchor=\"" + this.getSvgTextAlignment(1) + "\"";
			this.Buffer += Std.string(s2);
		}
		this.Buffer += Std.string(">" + symbols + "</text></g>");
	}
	,__class__: alphaTab.platform.svg.CssFontSvgCanvas
});
alphaTab.platform.model = {};
alphaTab.platform.model.Color = $hx_exports["alphaTab"]["platform"]["model"]["Color"] = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	this.raw = 0;
	this.rgba = null;
	this.raw = a << 24 | r << 16 | g << 8 | b;
	this.updateRgba();
};
alphaTab.platform.model.Color.__name__ = ["alphaTab","platform","model","Color"];
alphaTab.platform.model.Color.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	if(js.Boot.__instanceof(json,alphaTab.platform.model.Color)) {
		return json;
	}
	var _g = typeof(json);
	switch(_g) {
	case "number":
		var c = new alphaTab.platform.model.Color(0,0,0,0);
		var raw = json;
		c.raw = system.Convert.toInt32_Double(raw);
		c.updateRgba();
		return c;
	case "string":
		var s = json;
		if(StringTools.startsWith(s,"#")) {
			if(s.length == 4) {
				var s1 = HxOverrides.substr(s,1,1);
				var tmp = system.Convert.toUInt8(parseInt(s1, 16) * 17);
				var s2 = HxOverrides.substr(s,2,1);
				var tmp1 = system.Convert.toUInt8(parseInt(s2, 16) * 17);
				var s3 = HxOverrides.substr(s,3,1);
				return new alphaTab.platform.model.Color(tmp,tmp1,system.Convert.toUInt8(parseInt(s3, 16) * 17),255);
			}
			if(s.length == 5) {
				var s4 = HxOverrides.substr(s,1,1);
				var tmp2 = system.Convert.toUInt8(parseInt(s4, 16) * 17);
				var s5 = HxOverrides.substr(s,2,1);
				var tmp3 = system.Convert.toUInt8(parseInt(s5, 16) * 17);
				var s6 = HxOverrides.substr(s,3,1);
				var tmp4 = system.Convert.toUInt8(parseInt(s6, 16) * 17);
				var s7 = HxOverrides.substr(s,4,1);
				return new alphaTab.platform.model.Color(tmp2,tmp3,tmp4,system.Convert.toUInt8(parseInt(s7, 16) * 17));
			}
			if(s.length == 7) {
				var s8 = HxOverrides.substr(s,1,2);
				var tmp5 = system.Convert.toUInt8(parseInt(s8, 16));
				var s9 = HxOverrides.substr(s,3,2);
				var tmp6 = system.Convert.toUInt8(parseInt(s9, 16));
				var s10 = HxOverrides.substr(s,5,2);
				return new alphaTab.platform.model.Color(tmp5,tmp6,system.Convert.toUInt8(parseInt(s10, 16)),255);
			}
			if(s.length == 9) {
				var s11 = HxOverrides.substr(s,1,2);
				var tmp7 = system.Convert.toUInt8(parseInt(s11, 16));
				var s12 = HxOverrides.substr(s,3,2);
				var tmp8 = system.Convert.toUInt8(parseInt(s12, 16));
				var s13 = HxOverrides.substr(s,5,2);
				var tmp9 = system.Convert.toUInt8(parseInt(s13, 16));
				var s14 = HxOverrides.substr(s,7,2);
				return new alphaTab.platform.model.Color(tmp7,tmp8,tmp9,system.Convert.toUInt8(parseInt(s14, 16)));
			}
		} else if(StringTools.startsWith(s,"rgba") || StringTools.startsWith(s,"rgb")) {
			var start = s.indexOf("(");
			var end = s.lastIndexOf(")");
			if(start == -1 || end == -1) {
				throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("No values specified for rgb/rgba function"));
			}
			var a = HxOverrides.substr(s,start + 1,end - start - 1);
			var this1 = system.Convert.toUInt16(44);
			var this2 = this1;
			var numbers = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
			if(numbers.length == 3) {
				return new alphaTab.platform.model.Color(system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[0])),system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[1])),system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[2])),255);
			}
			if(numbers.length == 4) {
				return new alphaTab.platform.model.Color(system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[0])),system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[1])),system.Convert.toUInt8(alphaTab.platform.Platform.parseIntMinValue(numbers[2])),system.Convert.toUInt8(system.Convert.toInt32_Single(parseFloat(numbers[3]) * 255)));
			}
		}
		break;
	default:
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported format for color"));
};
alphaTab.platform.model.Color.toJson = function(obj) {
	return obj.raw;
};
alphaTab.platform.model.Color.random = function(opacity) {
	if(opacity == null) {
		opacity = 100;
	}
	return new alphaTab.platform.model.Color(system.Convert.toUInt8(alphaTab.platform.Platform.random(255)),system.Convert.toUInt8(alphaTab.platform.Platform.random(255)),system.Convert.toUInt8(alphaTab.platform.Platform.random(255)),opacity);
};
alphaTab.platform.model.Color.prototype = {
	updateRgba: function() {
		if(this.get_a() == 255) {
			this.rgba = "#" + alphaTab.platform.Platform.toHexString(this.get_r(),2) + alphaTab.platform.Platform.toHexString(this.get_g(),2) + alphaTab.platform.Platform.toHexString(this.get_b(),2);
		} else {
			this.rgba = "rgba(" + Std.string(this.get_r()) + "," + Std.string(this.get_g()) + "," + Std.string(this.get_b()) + "," + Std.string(this.get_a() / 255.0) + ")";
		}
	}
	,get_a: function() {
		return system.Convert.toUInt8(this.raw >> 24 & 255);
	}
	,get_r: function() {
		return system.Convert.toUInt8(this.raw >> 16 & 255);
	}
	,get_g: function() {
		return system.Convert.toUInt8(this.raw >> 8 & 255);
	}
	,get_b: function() {
		return system.Convert.toUInt8(this.raw & 255);
	}
	,__class__: alphaTab.platform.model.Color
};
alphaTab.platform.model.Font = $hx_exports["alphaTab"]["platform"]["model"]["Font"] = function(family,size,style) {
	if(style == null) {
		style = 0;
	}
	this._css = null;
	this._cssScale = 0.0;
	this.family = null;
	this.size = 0.0;
	this.style = 0;
	this.family = family;
	this.size = size;
	this.style = style;
	this._css = this.toCssString(1);
};
alphaTab.platform.model.Font.__name__ = ["alphaTab","platform","model","Font"];
alphaTab.platform.model.Font.fromJson = function(value) {
	if(value == null) {
		return null;
	}
	if(js.Boot.__instanceof(value,alphaTab.platform.model.Font)) {
		return value;
	}
	if(typeof(value) == "object" && value["family"]) {
		return new alphaTab.platform.model.Font(value["family"],value["size"],js.Boot.__cast(value["style"] , Int));
	}
	if(typeof(value) == "string" && $global.document) {
		var fontText = value;
		var el = window.document.createElement("span");
		el.setAttribute("style","font: " + fontText);
		var style = el.style;
		var s = style.fontFamily;
		if(s == null || s.length == 0) {
			style.fontFamily = "sans-serif";
		}
		var family = style.fontFamily;
		if(StringTools.startsWith(family,"'") && StringTools.endsWith(family,"'") || StringTools.startsWith(family,"\"") && StringTools.endsWith(family,"\"")) {
			family = HxOverrides.substr(family,1,family.length - 2);
		}
		var fontSizeString = style.fontSize.toLowerCase();
		var fontSize;
		switch(fontSizeString) {
		case "large":case "larger":
			fontSize = 18;
			break;
		case "medium":
			fontSize = 16;
			break;
		case "small":case "smaller":
			fontSize = 13;
			break;
		case "x-large":
			fontSize = 24;
			break;
		case "x-small":
			fontSize = 10;
			break;
		case "xx-large":
			fontSize = 32;
			break;
		case "xx-small":
			fontSize = 7;
			break;
		default:
			try {
				if(StringTools.endsWith(fontSizeString,"em")) {
					var s1 = HxOverrides.substr(fontSizeString,0,fontSizeString.length - 2);
					fontSize = parseFloat(s1) * 16;
				} else if(StringTools.endsWith(fontSizeString,"pt")) {
					var s2 = HxOverrides.substr(fontSizeString,0,fontSizeString.length - 2);
					var this1 = 16.0;
					var this2 = 12.0;
					fontSize = parseFloat(s2) * this1 / this2;
				} else if(StringTools.endsWith(fontSizeString,"px")) {
					var s3 = HxOverrides.substr(fontSizeString,0,fontSizeString.length - 2);
					fontSize = parseFloat(s3);
				} else {
					fontSize = 12;
				}
			} catch( __e ) {
				fontSize = 12;
			}
		}
		var fontStyle = 0;
		if(style.fontStyle == "italic") {
			fontStyle |= 2;
		}
		var fontWeightString = style.fontWeight.toLowerCase();
		switch(fontWeightString) {
		case "lighter":case "normal":
			break;
		default:
			fontStyle |= 1;
		}
		return new alphaTab.platform.model.Font(family,fontSize,fontStyle);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value for Font"));
};
alphaTab.platform.model.Font.toJson = function(font) {
	var json = {}
	json.family = font.family;
	json.size = font.size;
	json.style = font.style;
	return json;
};
alphaTab.platform.model.Font.prototype = {
	get_isBold: function() {
		return (this.style & 1) != 0;
	}
	,get_isItalic: function() {
		return (this.style & 2) != 0;
	}
	,clone: function() {
		return new alphaTab.platform.model.Font(this.family,this.size,this.style);
	}
	,toCssString: function(scale) {
		if(this._css == null || !(Math.abs(scale - this._cssScale) < 0.01)) {
			var this1 = "";
			var buf = this1;
			if(this.get_isBold()) {
				buf += Std.string("bold ");
			}
			if(this.get_isItalic()) {
				buf += Std.string("italic ");
			}
			buf += Std.string(this.size * scale);
			buf += Std.string("px ");
			buf += Std.string("'");
			buf += Std.string(this.family);
			buf += Std.string("'");
			this._css = buf;
			this._cssScale = scale;
		}
		return this._css;
	}
	,__class__: alphaTab.platform.model.Font
};
alphaTab.RenderEngineFactory = function(supportsWorkers,canvas) {
	this.supportsWorkers = false;
	this.createCanvas = null;
	this.supportsWorkers = supportsWorkers;
	this.createCanvas = canvas;
};
alphaTab.RenderEngineFactory.__name__ = ["alphaTab","RenderEngineFactory"];
alphaTab.RenderEngineFactory.prototype = {
	__class__: alphaTab.RenderEngineFactory
};
alphaTab.platform.javaScript = {};
alphaTab.platform.javaScript.Html5Canvas = function() {
	this._measureCanvas = null;
	this._measureContext = null;
	this._canvas = null;
	this._context = null;
	this._color = null;
	this._font = null;
	this._musicFont = null;
	this._lineWidth = 0.0;
	this.set_settings(null);
	this._color = new alphaTab.platform.model.Color(0,0,0,255);
	var fontElement = window.document.createElement("span");
	fontElement.classList.add("at");
	window.document.body.appendChild(fontElement);
	var style = window.getComputedStyle(fontElement);
	var family = style.fontFamily;
	if(StringTools.startsWith(family,"\"") || StringTools.startsWith(family,"'")) {
		family = HxOverrides.substr(family,1,family.length - 2);
	}
	var s = style.fontSize;
	this._musicFont = new alphaTab.platform.model.Font(family,parseFloat(s),0);
	this._measureCanvas = js.Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
	this._measureCanvas.width = 10;
	this._measureCanvas.height = 10;
	this._measureCanvas.style.width = 10 + "px";
	this._measureCanvas.style.height = 10 + "px";
	this._measureContext = this._measureCanvas.getContext("2d");
	this._measureContext.textBaseline = "top";
};
alphaTab.platform.javaScript.Html5Canvas.__name__ = ["alphaTab","platform","javaScript","Html5Canvas"];
alphaTab.platform.javaScript.Html5Canvas.__interfaces__ = [alphaTab.platform.ICanvas];
alphaTab.platform.javaScript.Html5Canvas.prototype = {
	get_settings: function() {
		return this.__Settings;
	}
	,set_settings: function(value) {
		return this.__Settings = value;
	}
	,onRenderFinished: function() {
		return null;
	}
	,beginRender: function(width,height) {
		this._canvas = js.Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
		var tmp = system.Convert.toInt32_Single(width);
		this._canvas.width = tmp;
		var tmp1 = system.Convert.toInt32_Single(height);
		this._canvas.height = tmp1;
		this._canvas.style.width = Std.string(width) + "px";
		this._canvas.style.height = Std.string(height) + "px";
		this._context = this._canvas.getContext("2d");
		this._context.textBaseline = "top";
		this._context.lineWidth = this._lineWidth;
	}
	,endRender: function() {
		var result = this._canvas;
		this._canvas = null;
		return result;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		if(this._color.rgba == value.rgba) {
			return this.get_color();
		}
		this._color = value;
		this._context.strokeStyle = value.rgba;
		this._context.fillStyle = value.rgba;
		return this.get_color();
	}
	,get_lineWidth: function() {
		return this._lineWidth;
	}
	,set_lineWidth: function(value) {
		this._lineWidth = value;
		if(this._context != null) {
			this._context.lineWidth = value;
		}
		return this.get_lineWidth();
	}
	,fillRect: function(x,y,w,h) {
		if(w > 0) {
			this._context.fillRect(system.Convert.toInt32_Single(x) - 0,system.Convert.toInt32_Single(y) - 0,w,h);
		}
	}
	,strokeRect: function(x,y,w,h) {
		this._context.strokeRect(x - 0,y - 0,w,h);
	}
	,beginPath: function() {
		this._context.beginPath();
	}
	,closePath: function() {
		this._context.closePath();
	}
	,moveTo: function(x,y) {
		this._context.moveTo(x - 0,y - 0);
	}
	,lineTo: function(x,y) {
		this._context.lineTo(x - 0,y - 0);
	}
	,quadraticCurveTo: function(cpx,cpy,x,y) {
		this._context.quadraticCurveTo(cpx,cpy,x,y);
	}
	,bezierCurveTo: function(cp1x,cp1y,cp2x,cp2y,x,y) {
		this._context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
	}
	,fillCircle: function(x,y,radius) {
		this._context.beginPath();
		this._context.arc(x,y,radius,0,6.28318530717958,true);
		this.fill();
	}
	,fill: function() {
		this._context.fill();
	}
	,stroke: function() {
		this._context.stroke();
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(value) {
		this._font = value;
		if(this._context != null) {
			var tmp = value.toCssString(this.get_settings().display.scale);
			this._context.font = tmp;
		}
		var tmp1 = value.toCssString(this.get_settings().display.scale);
		this._measureContext.font = tmp1;
		return this.get_font();
	}
	,get_textAlign: function() {
		var _g = this._context.textAlign;
		switch(_g) {
		case "center":
			return 1;
		case "left":
			return 0;
		case "right":
			return 2;
		default:
			return 0;
		}
	}
	,set_textAlign: function(value) {
		switch(value) {
		case 0:
			this._context.textAlign = "left";
			break;
		case 1:
			this._context.textAlign = "center";
			break;
		case 2:
			this._context.textAlign = "right";
			break;
		default:
		}
		return this.get_textAlign();
	}
	,get_textBaseline: function() {
		var _g = this._context.textBaseline;
		switch(_g) {
		case "bottom":
			return 2;
		case "middle":
			return 1;
		case "top":
			return 0;
		default:
			return 0;
		}
	}
	,set_textBaseline: function(value) {
		switch(value) {
		case 0:
			this._context.textBaseline = "top";
			break;
		case 1:
			this._context.textBaseline = "middle";
			break;
		case 2:
			this._context.textBaseline = "bottom";
			break;
		default:
		}
		return this.get_textBaseline();
	}
	,beginGroup: function(identifier) {
	}
	,endGroup: function() {
	}
	,fillText: function(text,x,y) {
		var this1 = system.Convert.toInt32_Single(x);
		x = this1;
		var this2 = system.Convert.toInt32_Single(y);
		y = this2;
		this._context.fillText(text,x,y);
	}
	,measureText: function(text) {
		return js.Boot.__cast(this._measureContext.measureText(text).width , Float);
	}
	,fillMusicFontSymbol: function(x,y,scale,symbol,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		if(symbol == -1) {
			return;
		}
		this.fillMusicFontSymbolText(x,y,scale,String.fromCharCode(symbol),centerAtPosition);
	}
	,fillMusicFontSymbols: function(x,y,scale,symbols,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		var s = "";
		var symbol = HxOverrides.iter(symbols);
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1 != -1) {
				s = s + String.fromCharCode(symbol1);
			}
		}
		this.fillMusicFontSymbolText(x,y,scale,s,centerAtPosition);
	}
	,fillMusicFontSymbolText: function(x,y,scale,symbols,centerAtPosition) {
		if(centerAtPosition == null) {
			centerAtPosition = false;
		}
		var this1 = system.Convert.toInt32_Single(x);
		x = this1;
		var this2 = system.Convert.toInt32_Single(y);
		y = this2;
		var textAlign = this._context.textAlign;
		var baseLine = this._context.textBaseline;
		var font = this._context.font;
		var tmp = this._musicFont.toCssString(scale);
		this._context.font = tmp;
		this._context.textBaseline = "middle";
		if(centerAtPosition) {
			this._context.textAlign = "center";
		}
		this._context.fillText(symbols,x,y);
		this._context.textBaseline = baseLine;
		this._context.font = font;
		this._context.textAlign = textAlign;
	}
	,beginRotate: function(centerX,centerY,angle) {
		this._context.save();
		this._context.translate(centerX,centerY);
		var this1 = 180.0;
		this._context.rotate(angle * 3.14159265358979 / this1);
	}
	,endRotate: function() {
		this._context.restore();
	}
	,__class__: alphaTab.platform.javaScript.Html5Canvas
};
alphaTab.platform.javaScript.JQueryAlphaTab = function() {
	var this1 = [];
	this._initListeners = this1;
};
alphaTab.platform.javaScript.JQueryAlphaTab.__name__ = ["alphaTab","platform","javaScript","JQueryAlphaTab"];
alphaTab.platform.javaScript.JQueryAlphaTab.Restore = function(selector) {
	$(selector).empty().removeData("alphaTab");
};
alphaTab.platform.javaScript.JQueryAlphaTab.prototype = {
	exec: function(element,method,args) {
		if(typeof(method) != 'string') {
			args = [method];
			method = "init";
		}
		var tmp;
		var this1 = system.Convert.toUInt16(HxOverrides.cca(method,0));
		if(!(this1 == 95)) {
			tmp = method == "Exec";
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var jElement = $(element);
		var context = jElement.data("alphaTab");
		if(method == "destroy" && !(!(!context))) {
			return null;
		}
		if(method != "init" && !(!(!context))) {
			throw new Error("alphaTab not initialized");
		}
		var apiMethod = this[method];
		if(!(!apiMethod)) {
			var realArgs = [ jElement, context ].concat(args);
			return apiMethod.apply(this,realArgs);
		} else {
			alphaTab.util.Logger.error("Api","Method '" + method + "' does not exist on jQuery.alphaTab",null);
			return null;
		}
	}
	,init: function(element,context,options) {
		if(!(!(!context))) {
			context = new alphaTab.platform.javaScript.AlphaTabApi(element[0],options);
			element.data("alphaTab",context);
			var listener = $iterator(this._initListeners)();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1(element,context,options);
			}
		}
	}
	,destroy: function(element,context) {
		element.removeData("alphaTab");
		context.destroy();
	}
	,print: function(element,context,width) {
		context.print(width);
	}
	,load: function(element,context,data,tracks) {
		return context.load(data,tracks);
	}
	,render: function(element,context) {
		context.render();
	}
	,renderScore: function(element,context,score,tracks) {
		context.renderScore(score,tracks);
	}
	,renderTracks: function(element,context,tracks) {
		context.renderTracks(tracks);
	}
	,invalidate: function(element,context) {
		context.render();
	}
	,tex: function(element,context,tex,tracks) {
		context.tex(tex,tracks);
	}
	,muteTrack: function(element,context,tracks,mute) {
		context.changeTrackMute(tracks,mute);
	}
	,soloTrack: function(element,context,tracks,solo) {
		context.changeTrackSolo(tracks,solo);
	}
	,trackVolume: function(element,context,tracks,volume) {
		context.changeTrackVolume(tracks,volume);
	}
	,loadSoundFont: function(element,context,value) {
		context.loadSoundFont(value);
	}
	,pause: function(element,context) {
		context.pause();
	}
	,play: function(element,context) {
		return context.play();
	}
	,playPause: function(element,context) {
		context.playPause();
	}
	,stop: function(element,context) {
		context.stop();
	}
	,api: function(element,context) {
		return context;
	}
	,player: function(element,context) {
		return context.player;
	}
	,isReadyForPlayback: function(element,context) {
		return context.get_isReadyForPlayback();
	}
	,playerState: function(element,context) {
		return context.get_playerState();
	}
	,masterVolume: function(element,context,masterVolume) {
		if(typeof(masterVolume) == "number") {
			context.set_masterVolume(masterVolume);
		}
		return context.get_masterVolume();
	}
	,metronomeVolume: function(element,context,metronomeVolume) {
		if(typeof(metronomeVolume) == "number") {
			context.set_metronomeVolume(metronomeVolume);
		}
		return context.get_metronomeVolume();
	}
	,playbackSpeed: function(element,context,playbackSpeed) {
		if(typeof(playbackSpeed) == "number") {
			context.set_playbackSpeed(playbackSpeed);
		}
		return context.get_playbackSpeed();
	}
	,tickPosition: function(element,context,tickPosition) {
		if(typeof(tickPosition) == "number") {
			context.set_tickPosition(tickPosition);
		}
		return context.get_tickPosition();
	}
	,timePosition: function(element,context,timePosition) {
		if(typeof(timePosition) == "number") {
			context.set_timePosition(timePosition);
		}
		return context.get_timePosition();
	}
	,loop: function(element,context,loop) {
		if(typeof(loop) == "boolean") {
			context.set_isLooping(loop);
		}
		return context.get_isLooping();
	}
	,renderer: function(element,context) {
		return context.renderer;
	}
	,score: function(element,context) {
		return context.score;
	}
	,settings: function(element,context) {
		return context.settings;
	}
	,tracks: function(element,context) {
		return context.tracks;
	}
	,_oninit: function(listener) {
		this._initListeners.push(listener);
	}
	,__class__: alphaTab.platform.javaScript.JQueryAlphaTab
};
alphaTab.util = {};
alphaTab.util.Logger = function() {
};
alphaTab.util.Logger.__name__ = ["alphaTab","util","Logger"];
alphaTab.util.Logger.debug = function(category,msg,details) {
	alphaTab.util.Logger.log(1,category,msg,details);
};
alphaTab.util.Logger.warning = function(category,msg,details) {
	alphaTab.util.Logger.log(3,category,msg,details);
};
alphaTab.util.Logger.info = function(category,msg,details) {
	alphaTab.util.Logger.log(2,category,msg,details);
};
alphaTab.util.Logger.error = function(category,msg,details) {
	alphaTab.util.Logger.log(4,category,msg,details);
};
alphaTab.util.Logger.log = function(logLevel,category,msg,details) {
	if(logLevel < alphaTab.util.Logger.logLevel || alphaTab.util.Logger.logLevel == 0) {
		return;
	}
	alphaTab.platform.Platform.log(logLevel,category,msg,details);
};
alphaTab.util.Logger.prototype = {
	__class__: alphaTab.util.Logger
};
alphaTab.platform.Platform = function() { };
alphaTab.platform.Platform.__name__ = ["alphaTab","platform","Platform"];
alphaTab.platform.Platform.parseFloat = function(s) {
	return parseFloat(s);
};
alphaTab.platform.Platform.parseHex = function(s) {
	return parseInt(s, 16);
};
alphaTab.platform.Platform.getCallerName = function() {
	return arguments.callee.caller.caller.name;
};
alphaTab.platform.Platform.equalsAny = function(value,values) {
	var x = HxOverrides.iter(values);
	while(x.hasNext()) {
		var x1 = x.next();
		if(value == x1) {
			return true;
		}
	}
	return false;
};
alphaTab.platform.Platform.findStartsWith = function(value,values) {
	var x = HxOverrides.iter(values);
	while(x.hasNext()) {
		var x1 = x.next();
		if(StringTools.startsWith(value,x1)) {
			return x1;
		}
	}
	return null;
};
alphaTab.platform.Platform.log = function(logLevel,category,msg,details) {
	msg = "[AlphaTab][" + category + "] " + msg;
	var $console = $global.console;
	switch(logLevel) {
	case 0:
		break;
	case 1:
		msg = "[Debug]" + msg;
		$console.debug(msg,details);
		break;
	case 2:
		msg = "[Info]" + msg;
		$console.info(msg,details);
		break;
	case 3:
		$console.warn(msg,details);
		break;
	case 4:
		var stack = haxe.CallStack.toString(haxe.CallStack.callStack());
		$console.error(msg,stack,details);
		break;
	default:
	}
};
alphaTab.platform.Platform.newObject = function() {
	return {}
};
alphaTab.platform.Platform.jsonExists = function(json,property) {
	return (json && property in json);
};
alphaTab.platform.Platform.jsonKeys = function(json) {
	return Object.keys(json);
};
alphaTab.platform.Platform.log2 = function(f) {
	return Math.log2(f);
};
alphaTab.platform.Platform.parseIntMinValue = function(s) {
	var val = parseInt(s);
	if(isNaN(val)) {
		return -2147483648;
	} else {
		return val;
	}
};
alphaTab.platform.Platform.cloneArray = function(array) {
	return new Int32Array(array);
};
alphaTab.platform.Platform.blockCopy = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.stringFromCharCode = function(c) {
	return String.fromCharCode(c);
};
alphaTab.platform.Platform.readSignedByte = function(readable) {
	var n = readable.readByte();
	if(n >= 128) {
		return system.Convert.toInt8(n - 256);
	}
	return system.Convert.toInt8(n);
};
alphaTab.platform.Platform.toString = function(data,encoding) {
	if(!(!$global.textDecoder)) {
		var detectedEncoding = alphaTab.platform.Platform.detectEncoding(data);
		if(detectedEncoding != null) {
			encoding = detectedEncoding;
		}
		if(encoding == null) {
			encoding = "utf-8";
		}
		var decoder = new TextDecoder(encoding);
		return decoder.decode(data);
	} else {
		var this1 = "";
		var s = this1;
		var i = 0;
		while(i < data.length) {
			var c = data[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += String.fromCharCode(c);
			} else if(c < 224) {
				s += String.fromCharCode((c & 63) << 6 | data[i++] & 127);
			} else if(c < 240) {
				s += String.fromCharCode((c & 31) << 12 | (data[i++] & 127) << 6 | data[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (data[i++] & 127) << 12 | (data[i++] & 127) << 6 | data[i++] & 127;
				s += String.fromCharCode((u >> 18) + 55232);
				s += String.fromCharCode(u & 1023 | 56320);
			}
		}
		return s;
	}
};
alphaTab.platform.Platform.stringToByteArray = function(contents) {
	var this1 = new Uint8Array(contents.length);
	var byteArray = this1;
	var i = 0;
	while(i < contents.length) {
		var this2 = system.Convert.toUInt16(HxOverrides.cca(contents,i));
		byteArray[i] = system.Convert.toUInt8(this2);
		++i;
	}
	return byteArray;
};
alphaTab.platform.Platform.s4 = function() {
	return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
};
alphaTab.platform.Platform.newGuid = function() {
	var lhs = alphaTab.platform.Platform.s4() + alphaTab.platform.Platform.s4();
	var this1 = system.Convert.toUInt16(45);
	var lhs1 = lhs + String.fromCharCode(this1) + alphaTab.platform.Platform.s4();
	var this2 = system.Convert.toUInt16(45);
	var lhs2 = lhs1 + String.fromCharCode(this2) + alphaTab.platform.Platform.s4();
	var this3 = system.Convert.toUInt16(45);
	var lhs3 = lhs2 + String.fromCharCode(this3) + alphaTab.platform.Platform.s4();
	var this4 = system.Convert.toUInt16(45);
	return lhs3 + String.fromCharCode(this4) + alphaTab.platform.Platform.s4() + alphaTab.platform.Platform.s4() + alphaTab.platform.Platform.s4();
};
alphaTab.platform.Platform.member_Object_CsString1 = function(s,name) {
	return s[name];
};
alphaTab.platform.Platform.hasMember = function(s,name) {
	return name in s;
};
alphaTab.platform.Platform.member_Object_CsString_T1 = function(s,name,value) {
	return s[name] = value;
};
alphaTab.platform.Platform.match = function(s,regex) {
	return s.match(regex);
};
alphaTab.platform.Platform.isTruthy = function(o) {
	return !(!o);
};
alphaTab.platform.Platform.isNaN = function(v) {
	return isNaN(v);
};
alphaTab.platform.Platform.typeOf = function(o) {
	return typeof(o);
};
alphaTab.platform.Platform.arrayBufferToByteArray = function(data) {
	return new Uint8Array(data);
};
alphaTab.platform.Platform.toDouble = function(bytes) {
	var array = new Float64Array(bytes.buffer);
	return array[0];
};
alphaTab.platform.Platform.toFloat = function(bytes) {
	var array = new Float32Array(bytes.buffer);
	return array[0];
};
alphaTab.platform.Platform.clearIntArray = function(array) {
	var i = 0;
	while(i < array.length) {
		array[i] = 0;
		++i;
	}
};
alphaTab.platform.Platform.clearShortArray = function(array) {
	var i = 0;
	while(i < array.length) {
		array[i] = 0;
		++i;
	}
};
alphaTab.platform.Platform.random = function(max) {
	var m = max;
	return Math.random() * m | 0;
};
alphaTab.platform.Platform.randomDouble = function() {
	return Math.random();
};
alphaTab.platform.Platform.get_supportsWebAudio = function() {
	return !!window.ScriptProcessorNode;
};
alphaTab.platform.Platform.get_supportsWebWorkers = function() {
	return !!window.Worker;
};
alphaTab.platform.Platform.get_forceFlash = function() {
	return !!window.ForceFlash;
};
alphaTab.platform.Platform.get_supportsTextDecoder = function() {
	return !(!$global.textDecoder);
};
alphaTab.platform.Platform.arrayCopy_SingleArray_Int32_SingleArray_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.arrayCopy_Int32Array_Int32_Int32Array_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.arrayCopy_Int16Array_Int32_Int16Array_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.arrayCopy_ByteArray_Int32_ByteArray_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.arrayCopy_TArray_Int32_TArray_Int32_Int321 = function(src,srcOffset,dst,dstOffset,count) {
	var i = 0;
	while(i < count) {
		dst[dstOffset + i] = src[srcOffset + i];
		++i;
	}
};
alphaTab.platform.Platform.reverse = function(array) {
	array.reverse();
};
alphaTab.platform.Platform.getTypeName = function(obj) {
	return Type.getClassName(obj == null ? null : js.Boot.getClass(obj));
};
alphaTab.platform.Platform.throttle = function(action,delay) {
	var timeoutId = 0;
	return function() {
		window.clearTimeout(timeoutId);
		timeoutId = window.setTimeout(action,delay);
	};
};
alphaTab.platform.Platform.getCurrentMilliseconds = function() {
	return Date.now();
};
alphaTab.platform.Platform.isStringNumber = function(s,allowSign) {
	if(allowSign == null) {
		allowSign = true;
	}
	if(s.length == 0) {
		return false;
	}
	var this1 = system.Convert.toUInt16(HxOverrides.cca(s,0));
	var c = this1;
	return alphaTab.platform.Platform.isCharNumber(c,allowSign);
};
alphaTab.platform.Platform.isCharNumber = function(c,allowSign) {
	if(allowSign == null) {
		allowSign = true;
	}
	if(!(allowSign && c == 45)) {
		if(c >= 48) {
			return c <= 57;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
alphaTab.platform.Platform.isWhiteSpace = function(c) {
	if(!(c == 32 || c == 11 || c == 13 || c == 10)) {
		return c == 9;
	} else {
		return true;
	}
};
alphaTab.platform.Platform.isAlmostEqualTo = function(a,b) {
	var this1 = 0.00001;
	return Math.abs(a - b) < this1;
};
alphaTab.platform.Platform.toHexString = function(n,digits) {
	if(digits == null) {
		digits = 0;
	}
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		var this1 = system.Convert.toUInt16(HxOverrides.cca(hexChars,n & 15));
		s = String.fromCharCode(this1) + s;
		n = n >> 4;
		if(!(n > 0)) {
			break;
		}
	}
	while(s.length < digits) s = "0" + s;
	return s;
};
alphaTab.platform.Platform.toUInt32 = function(i) {
	return system.Convert.toUInt32(i);
};
alphaTab.platform.Platform.toInt16 = function(i) {
	return system.Convert.toInt16(i);
};
alphaTab.platform.Platform.toUInt16 = function(i) {
	return system.Convert.toUInt16(i);
};
alphaTab.platform.Platform.toUInt8 = function(i) {
	return system.Convert.toUInt8(i);
};
alphaTab.platform.Platform.detectEncoding = function(data) {
	if(data.length > 2 && data[0] == 254 && data[1] == 255) {
		return "utf-16be";
	}
	if(data.length > 2 && data[0] == 255 && data[1] == 254) {
		return "utf-16le";
	}
	if(data.length > 4 && data[0] == 0 && data[1] == 0 && data[2] == 254 && data[3] == 255) {
		return "utf-32be";
	}
	if(data.length > 4 && data[0] == 255 && data[1] == 254 && data[2] == 0 && data[3] == 0) {
		return "utf-32le";
	}
	return null;
};
var haxe = {};
haxe.CallStack = function() { };
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe.CallStack.wrapCallSite != null) {
				site = haxe.CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		if (e instanceof js._Boot.HaxeError) e = e.val;
		var a = haxe.CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function" ? haxe.StackItem.LocalFunction() : meth == "Global code" ? null : haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe.StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var js = {};
js.Boot = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js.Boot.__nativeClassName(o);
		if(name != null) {
			return js.Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js.Boot.__string_rec(o[i],s);
					} else {
						str += js.Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js._Boot.HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
haxe.StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
alphaTab.utils = {};
alphaTab.utils.FontLoadingChecker = function(family,fallbackText) {
	this._family = null;
	this._fallbackText = null;
	this._isStarted = false;
	this.isFontLoaded = false;
	this._family = family;
	this._fallbackText = fallbackText == null ? "BESbwy" : fallbackText;
};
alphaTab.utils.FontLoadingChecker.__name__ = ["alphaTab","utils","FontLoadingChecker"];
alphaTab.utils.FontLoadingChecker.prototype = {
	addFontLoaded: function(value) {
		this.fontLoaded = system._EventAction1.EventAction1_Impl_.add(this.fontLoaded,value);
	}
	,removeFontLoaded: function(value) {
		this.fontLoaded = system._EventAction1.EventAction1_Impl_.sub(this.fontLoaded,value);
	}
	,onFontLoaded: function() {
		var _e = this.fontLoaded;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(this._family);
		}
	}
	,checkForFontAvailability: function() {
		var _gthis = this;
		var isWorker = typeof(WorkerGlobalScope) !== 'undefined' && self instanceof WorkerGlobalScope;
		if(isWorker) {
			this.isFontLoaded = false;
			return;
		}
		if(this._isStarted) {
			return;
		}
		this._isStarted = true;
		var failCounter = 0;
		var failCounterId = window.setInterval(function() {
			failCounter += 1;
			alphaTab.util.Logger.warning("Rendering","Could not load font '" + _gthis._family + "' within " + Std.string(failCounter * 5) + " seconds",null);
		},5000);
		alphaTab.util.Logger.debug("Font","Start checking for font availablility: " + this._family,null);
		var cssFontLoadingModuleSupported = !(!window.document.fonts) && !(!window.document.fonts["load"]);
		if(cssFontLoadingModuleSupported) {
			alphaTab.util.Logger.debug("Font","[" + this._family + "] Font API available",null);
			var checkFont = null;
			checkFont = function() {
				var checkFont1 = "1em " + _gthis._family;
				window.document.fonts.load(checkFont1).then(function(_) {
					alphaTab.util.Logger.debug("Font","[" + _gthis._family + "] Font API signaled loaded",null);
					var checkFont2 = "1em " + _gthis._family;
					if(window.document.fonts.check(checkFont2)) {
						alphaTab.util.Logger.info("Rendering","[" + _gthis._family + "] Font API signaled available",null);
						_gthis.isFontLoaded = true;
						window.clearInterval(failCounterId);
						_gthis.onFontLoaded();
					} else {
						alphaTab.util.Logger.debug("Font","[" + _gthis._family + "] Font API loaded reported, but font not available, checking later again",null);
						window.setTimeout(function() {
							checkFont();
						},250);
					}
					return true;
				});
			};
			checkFont();
		} else {
			alphaTab.util.Logger.debug("Font","[" + this._family + "] Font API not available, using resize trick",null);
			var sans = null;
			var serif = null;
			var monospace = null;
			var initialSansWidth = -1;
			var initialSerifWidth = -1;
			var initialMonospaceWidth = -1;
			var checkFont3 = null;
			checkFont3 = function() {
				if(sans == null) {
					sans = _gthis.createCheckerElement("sans-serif");
					serif = _gthis.createCheckerElement("serif");
					monospace = _gthis.createCheckerElement("monospace");
					window.document.body.appendChild(sans);
					window.document.body.appendChild(serif);
					window.document.body.appendChild(monospace);
					initialSansWidth = sans.offsetWidth;
					initialSerifWidth = serif.offsetWidth;
					initialMonospaceWidth = monospace.offsetWidth;
					sans.style.fontFamily = "'" + _gthis._family + "',sans-serif";
					serif.style.fontFamily = "'" + _gthis._family + "',serif";
					monospace.style.fontFamily = "'" + _gthis._family + "',monospace";
				}
				var sansWidth = sans.offsetWidth;
				var serifWidth = serif.offsetWidth;
				var monospaceWidth = monospace.offsetWidth;
				if(sansWidth != initialSansWidth && serifWidth != initialSerifWidth || sansWidth != initialSansWidth && monospaceWidth != initialMonospaceWidth || serifWidth != initialSerifWidth && monospaceWidth != initialMonospaceWidth) {
					if(sansWidth == serifWidth || sansWidth == monospaceWidth || serifWidth == monospaceWidth) {
						window.document.body.removeChild(sans);
						window.document.body.removeChild(serif);
						window.document.body.removeChild(monospace);
						_gthis.isFontLoaded = true;
						window.clearInterval(failCounterId);
						_gthis.onFontLoaded();
					} else {
						window.setTimeout(checkFont3,250);
					}
				} else {
					window.setTimeout(checkFont3,250);
				}
			};
			window.addEventListener("DOMContentLoaded",function() {
				checkFont3();
			});
		}
	}
	,createCheckerElement: function(family) {
		var document = window.document;
		var checkerElement = document.createElement("span");
		checkerElement.style.display = "inline-block";
		checkerElement.style.position = "absolute";
		checkerElement.style.overflow = "hidden";
		checkerElement.style.top = "-1000px";
		checkerElement.style.fontSize = "100px";
		checkerElement.style.fontFamily = family;
		checkerElement.innerHTML = this._fallbackText;
		document.body.appendChild(checkerElement);
		return checkerElement;
	}
	,__class__: alphaTab.utils.FontLoadingChecker
};
alphaTab.platform.javaScript.AlphaTabWebWorker = function(main) {
	this._renderer = null;
	this._main = null;
	this._main = main;
	this._main.addEventListener("message",$bind(this,this.handleMessage),false);
};
alphaTab.platform.javaScript.AlphaTabWebWorker.__name__ = ["alphaTab","platform","javaScript","AlphaTabWebWorker"];
alphaTab.platform.javaScript.AlphaTabWebWorker.init = function() {
	new alphaTab.platform.javaScript.AlphaTabWebWorker($global);
};
alphaTab.platform.javaScript.AlphaTabWebWorker.prototype = {
	handleMessage: function(e) {
		var _gthis = this;
		var data = (js.Boot.__cast(e , MessageEvent)).data;
		var cmd = data ? data.cmd : "";
		switch(cmd) {
		case "alphaTab.initialize":
			var settings = new alphaTab.Settings();
			settings.fillFromJson(data.settings);
			alphaTab.util.Logger.logLevel = settings.core.logLevel;
			this._renderer = new alphaTab.rendering.ScoreRenderer(settings);
			this._renderer.addPartialRenderFinished(function(result) {
				_gthis._main.postMessage({ cmd : "alphaTab.partialRenderFinished", result : result});
			});
			this._renderer.addRenderFinished(function(result1) {
				_gthis._main.postMessage({ cmd : "alphaTab.renderFinished", result : result1});
			});
			this._renderer.addPostRenderFinished(function() {
				_gthis._main.postMessage({ cmd : "alphaTab.postRenderFinished", boundsLookup : _gthis._renderer.get_boundsLookup().toJson()});
			});
			this._renderer.addPreRender(function(resize) {
				_gthis._main.postMessage({ cmd : "alphaTab.preRender", resize : resize});
			});
			this._renderer.addError($bind(this,this.error));
			break;
		case "alphaTab.invalidate":
			this._renderer.render();
			break;
		case "alphaTab.renderScore":
			this.updateFontSizes(data.fontSizes);
			var score = alphaTab.model.JsonConverter.jsObjectToScore(data.score,this._renderer.settings);
			this.renderMultiple(score,data.trackIndexes);
			break;
		case "alphaTab.resizeRender":
			this._renderer.resizeRender();
			break;
		case "alphaTab.setWidth":
			this._renderer.set_width(data.width);
			break;
		case "alphaTab.updateSettings":
			this.updateSettings(data.settings);
			break;
		default:
		}
	}
	,updateFontSizes: function(fontSizes) {
		if(fontSizes != null) {
			if(alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
				var this1 = {}
				alphaTab.platform.svg.FontSizes.FontSizeLookupTables = this1;
			}
			var keys = Object.keys(fontSizes);
			var font = HxOverrides.iter(keys);
			while(font.hasNext()) {
				var font1 = font.next();
				alphaTab.platform.svg.FontSizes.FontSizeLookupTables[font1] = fontSizes[font1];
			}
		}
	}
	,updateSettings: function(json) {
		this._renderer.settings.fillFromJson(json);
	}
	,renderMultiple: function(score,trackIndexes) {
		try {
			this._renderer.renderScore(score,trackIndexes);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.error("render",e);
			} else throw(e);
		}
	}
	,error: function(type,e) {
		alphaTab.util.Logger.error(type,"An unexpected error occurred in worker",e);
		var error = JSON.parse(JSON.stringify(e));
		var e2 = e;
		if(e2.message) {
			error.message = e2.message;
		}
		if(e2.stack) {
			error.stack = e2.stack;
		}
		if(e2.constructor && e2.constructor.name) {
			error.type = e2.constructor.name;
		}
		this._main.postMessage({ cmd : "alphaTab.error", error : { type : type, detail : error}});
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabWebWorker
};
alphaTab.platform.javaScript.AlphaSynthWebWorker = function(main,id) {
	this._player = null;
	this._main = null;
	this._main = main;
	this._main.addEventListener("message",$bind(this,this.handleMessage));
	this._player = new alphaTab.audio.synth.AlphaSynth(new alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput());
	this._player.addPositionChanged($bind(this,this.onPositionChanged));
	this._player.addStateChanged($bind(this,this.onPlayerStateChanged));
	this._player.addFinished($bind(this,this.onFinished));
	this._player.addSoundFontLoaded($bind(this,this.onSoundFontLoaded));
	this._player.addSoundFontLoadFailed($bind(this,this.onSoundFontLoadFailed));
	this._player.addSoundFontLoadFailed($bind(this,this.onSoundFontLoadFailed));
	this._player.addMidiLoaded($bind(this,this.onMidiLoaded));
	this._player.addMidiLoadFailed($bind(this,this.onMidiLoadFailed));
	this._player.addReadyForPlayback($bind(this,this.onReadyForPlayback));
	this._main.postMessage({ cmd : "alphaSynth." + "ready"});
};
alphaTab.platform.javaScript.AlphaSynthWebWorker.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebWorker"];
alphaTab.platform.javaScript.AlphaSynthWebWorker.init = function() {
	var main = $global;
	main.addEventListener("message",function(e) {
		var data = e.data;
		var cmd = data.cmd;
		if(cmd == "alphaSynth.initialize") {
			alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.preferredSampleRate = data.sampleRate;
			alphaTab.util.Logger.logLevel = data.logLevel;
			new alphaTab.platform.javaScript.AlphaSynthWebWorker(main,data.id);
		}
	});
};
alphaTab.platform.javaScript.AlphaSynthWebWorker.prototype = {
	handleMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.loadMidi":
			this._player.loadMidiFile(alphaTab.model.JsonConverter.jsObjectToMidiFile(data.midi));
			break;
		case "alphaSynth.loadSoundFontBytes":
			this._player.loadSoundFont(data.data);
			break;
		case "alphaSynth.pause":
			this._player.pause();
			break;
		case "alphaSynth.play":
			this._player.play();
			break;
		case "alphaSynth.playPause":
			this._player.playPause();
			break;
		case "alphaSynth.resetChannelStates":
			this._player.resetChannelStates();
			break;
		case "alphaSynth.setChannelMute":
			this._player.setChannelMute(data.channel,data.mute);
			break;
		case "alphaSynth.setChannelProgram":
			this._player.setChannelProgram(data.channel,data.program);
			break;
		case "alphaSynth.setChannelSolo":
			this._player.setChannelSolo(data.channel,data.solo);
			break;
		case "alphaSynth.setChannelVolume":
			this._player.setChannelVolume(data.channel,data.volume);
			break;
		case "alphaSynth.setIsLooping":
			this._player.set_isLooping(data.value);
			break;
		case "alphaSynth.setLogLevel":
			alphaTab.util.Logger.logLevel = data.value;
			break;
		case "alphaSynth.setMasterVolume":
			this._player.set_masterVolume(data.value);
			break;
		case "alphaSynth.setMetronomeVolume":
			this._player.set_metronomeVolume(data.value);
			break;
		case "alphaSynth.setPlaybackRange":
			this._player.set_playbackRange(data.value);
			break;
		case "alphaSynth.setPlaybackSpeed":
			this._player.set_playbackSpeed(data.value);
			break;
		case "alphaSynth.setTickPosition":
			this._player.set_tickPosition(data.value);
			break;
		case "alphaSynth.setTimePosition":
			this._player.set_timePosition(data.value);
			break;
		case "alphaSynth.stop":
			this._player.stop();
			break;
		default:
		}
	}
	,onPositionChanged: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "positionChanged", currentTime : e.currentTime, endTime : e.endTime, currentTick : e.currentTick, endTick : e.endTick});
	}
	,onPlayerStateChanged: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "playerStateChanged", state : e.state, stopped : e.stopped});
	}
	,onFinished: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "finished"});
	}
	,onSoundFontLoaded: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "soundFontLoaded"});
	}
	,onSoundFontLoadFailed: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "soundFontLoadFailed", error : this.serializeException(e)});
	}
	,serializeException: function(e) {
		var error = JSON.parse(JSON.stringify(e));
		var e2 = e;
		if(e2.message) {
			error.message = e2.message;
		}
		if(e2.stack) {
			error.stack = e2.stack;
		}
		if(e2.constructor && e2.constructor.name) {
			error.type = e2.constructor.name;
		}
		return error;
	}
	,onMidiLoaded: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "midiLoaded"});
	}
	,onMidiLoadFailed: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "midiLoaded", error : this.serializeException(e)});
	}
	,onReadyForPlayback: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "readyForPlayback"});
	}
	,sendLog: function(level,s) {
		this._main.postMessage({ cmd : "alphaSynth." + "log", level : level, message : s});
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebWorker
};
alphaTab.audio = {};
alphaTab.audio.synth = {};
alphaTab.audio.synth.ISynthOutput = $hx_exports["alphaTab"]["audio"]["synth"]["ISynthOutput"] = function() { };
alphaTab.audio.synth.ISynthOutput.__name__ = ["alphaTab","audio","synth","ISynthOutput"];
alphaTab.audio.synth.ISynthOutput.prototype = {
	__class__: alphaTab.audio.synth.ISynthOutput
};
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput = function() {
	this._worker = null;
};
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWorkerSynthOutput"];
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.prototype = {
	get_sampleRate: function() {
		return alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.preferredSampleRate;
	}
	,open: function() {
		alphaTab.util.Logger.debug("AlphaSynth","Initializing webworker worker",null);
		this._worker = $global;
		this._worker.addEventListener("message",$bind(this,this.handleMessage));
		system._EventAction.EventAction_Impl_.invoke(this.ready);
	}
	,handleMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.output.finished":
			system._EventAction.EventAction_Impl_.invoke(this.finished);
			break;
		case "alphaSynth.output.sampleRequest":
			system._EventAction.EventAction_Impl_.invoke(this.sampleRequest);
			break;
		case "alphaSynth.output.samplesPlayed":
			system._EventAction1.EventAction1_Impl_.invoke(this.samplesPlayed,data.samples);
			break;
		default:
		}
	}
	,addReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.add(this.ready,value);
	}
	,removeReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.sub(this.ready,value);
	}
	,addSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.samplesPlayed,value);
	}
	,removeSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.samplesPlayed,value);
	}
	,addSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.add(this.sampleRequest,value);
	}
	,removeSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.sub(this.sampleRequest,value);
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,sequencerFinished: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "sequencerFinished"});
	}
	,addSamples: function(samples) {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "addSamples", samples : samples});
	}
	,play: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "play"});
	}
	,pause: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "pause"});
	}
	,resetSamples: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "resetSamples"});
	}
	,activate: function() {
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput
};
alphaTab.audio.synth.IAlphaSynth = $hx_exports["alphaTab"]["audio"]["synth"]["IAlphaSynth"] = function() { };
alphaTab.audio.synth.IAlphaSynth.__name__ = ["alphaTab","audio","synth","IAlphaSynth"];
alphaTab.audio.synth.IAlphaSynth.prototype = {
	__class__: alphaTab.audio.synth.IAlphaSynth
};
alphaTab.audio.synth.AlphaSynth = $hx_exports["alphaTab"]["audio"]["synth"]["AlphaSynth"] = function(output) {
	var _gthis = this;
	this._sequencer = null;
	this._synthesizer = null;
	this._isSoundFontLoaded = false;
	this._isMidiLoaded = false;
	this._tickPosition = 0;
	this._timePosition = 0.0;
	this._metronomeVolume = 0.0;
	this.output = null;
	this.set_isReady(false);
	this.set_state(0);
	alphaTab.util.Logger.debug("AlphaSynth","Initializing player",null);
	this.set_state(0);
	alphaTab.util.Logger.debug("AlphaSynth","Creating output",null);
	this.output = output;
	this.output.addReady(function() {
		_gthis.set_isReady(true);
		_gthis.onReady();
		_gthis.checkReadyForPlayback();
	});
	this.output.addFinished(function() {
		_gthis.stop();
		alphaTab.util.Logger.debug("AlphaSynth","Finished playback",null);
		_gthis.onFinished();
		if(_gthis._sequencer.isLooping) {
			_gthis.play();
		}
	});
	this.output.addSampleRequest(function() {
		_gthis._sequencer.fillMidiEventQueue();
		var samples = _gthis._synthesizer.synthesize();
		_gthis.output.addSamples(samples);
		_gthis._sequencer.checkForStop();
	});
	this.output.addSamplesPlayed($bind(this,this.onSamplesPlayed));
	alphaTab.util.Logger.debug("AlphaSynth","Creating synthesizer",null);
	var this1 = this.output.get_sampleRate();
	this._synthesizer = new alphaTab.audio.synth.synthesis.TinySoundFont(this1);
	this._sequencer = new alphaTab.audio.synth.MidiFileSequencer(this._synthesizer);
	this._sequencer.addFinished(($_=this.output,$bind($_,$_.sequencerFinished)));
	alphaTab.util.Logger.debug("AlphaSynth","Opening output",null);
	this.output.open();
};
alphaTab.audio.synth.AlphaSynth.__name__ = ["alphaTab","audio","synth","AlphaSynth"];
alphaTab.audio.synth.AlphaSynth.__interfaces__ = [alphaTab.audio.synth.IAlphaSynth];
alphaTab.audio.synth.AlphaSynth.prototype = {
	get_isReady: function() {
		return this.__IsReady;
	}
	,set_isReady: function(value) {
		return this.__IsReady = value;
	}
	,get_isReadyForPlayback: function() {
		if(this.get_isReady() && this._isSoundFontLoaded) {
			return this._isMidiLoaded;
		} else {
			return false;
		}
	}
	,get_state: function() {
		return this.__State;
	}
	,set_state: function(value) {
		return this.__State = value;
	}
	,get_logLevel: function() {
		return alphaTab.util.Logger.logLevel;
	}
	,set_logLevel: function(value) {
		return alphaTab.util.Logger.logLevel = value;
	}
	,get_masterVolume: function() {
		return this._synthesizer.globalGainDb;
	}
	,set_masterVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampF(value,0,1);
		this._synthesizer.globalGainDb = value;
		return this.get_masterVolume();
	}
	,get_metronomeVolume: function() {
		return this._metronomeVolume;
	}
	,set_metronomeVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampF(value,0,1);
		this._metronomeVolume = value;
		this._synthesizer.set_metronomeVolume(value);
		return this.get_metronomeVolume();
	}
	,get_playbackSpeed: function() {
		return this._sequencer.playbackSpeed;
	}
	,set_playbackSpeed: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampD(value,0.125,8);
		var oldSpeed = this._sequencer.playbackSpeed;
		this._sequencer.playbackSpeed = value;
		this.updateTimePosition(this._timePosition * (oldSpeed / value));
		return this.get_playbackSpeed();
	}
	,get_tickPosition: function() {
		return this._tickPosition;
	}
	,set_tickPosition: function(value) {
		this.set_timePosition(this._sequencer.tickPositionToTimePosition(value));
		return this.get_tickPosition();
	}
	,get_timePosition: function() {
		return this._timePosition;
	}
	,set_timePosition: function(value) {
		alphaTab.util.Logger.debug("AlphaSynth","Seeking to position " + Std.string(value) + "ms",null);
		this._sequencer.seek(value);
		this.updateTimePosition(value);
		this.output.resetSamples();
		return this.get_timePosition();
	}
	,get_playbackRange: function() {
		return this._sequencer.get_playbackRange();
	}
	,set_playbackRange: function(value) {
		this._sequencer.set_playbackRange(value);
		if(value != null) {
			this.set_tickPosition(value.startTick);
		}
		return this.get_playbackRange();
	}
	,get_isLooping: function() {
		return this._sequencer.isLooping;
	}
	,set_isLooping: function(value) {
		return this._sequencer.isLooping = value;
	}
	,destroy: function() {
		alphaTab.util.Logger.debug("AlphaSynth","Destroying player",null);
		this.stop();
	}
	,play: function() {
		if(this.get_state() == 1 || !this.get_isReadyForPlayback()) {
			return false;
		}
		this.output.activate();
		this._synthesizer.setupMetronomeChannel(this.get_metronomeVolume());
		alphaTab.util.Logger.debug("AlphaSynth","Starting playback",null);
		this.set_state(1);
		this.onStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(this.get_state(),false));
		this.output.play();
		return true;
	}
	,pause: function() {
		if(this.get_state() == 0 || !this.get_isReadyForPlayback()) {
			return;
		}
		alphaTab.util.Logger.debug("AlphaSynth","Pausing playback",null);
		this.set_state(0);
		this.onStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(this.get_state(),false));
		this.output.pause();
		this._synthesizer.noteOffAll(false);
	}
	,playPause: function() {
		if(this.get_state() == 1 || !this.get_isReadyForPlayback()) {
			this.pause();
		} else {
			this.play();
		}
	}
	,stop: function() {
		if(!this.get_isReadyForPlayback()) {
			return;
		}
		alphaTab.util.Logger.debug("AlphaSynth","Stopping playback",null);
		this.set_state(0);
		this.output.pause();
		this._sequencer.stop();
		this._synthesizer.noteOffAll(true);
		this.set_tickPosition(this._sequencer.get_playbackRange() != null ? this._sequencer.get_playbackRange().startTick : 0);
		this.onStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(this.get_state(),true));
	}
	,loadSoundFont: function(data) {
		this.pause();
		var input = alphaTab.io.ByteBuffer.fromBuffer(data);
		try {
			alphaTab.util.Logger.info("AlphaSynth","Loading soundfont from bytes",null);
			var soundFont = new alphaTab.audio.synth.soundFont.Hydra();
			soundFont.load(input);
			this._synthesizer.loadPresets(soundFont);
			this._isSoundFontLoaded = true;
			this.onSoundFontLoaded();
			alphaTab.util.Logger.info("AlphaSynth","soundFont successfully loaded",null);
			this.checkReadyForPlayback();
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.error("AlphaSynth","Could not load soundfont from bytes " + Std.string(e),null);
				this.onSoundFontLoadFailed(e);
			} else throw(e);
		}
	}
	,checkReadyForPlayback: function() {
		if(this.get_isReadyForPlayback()) {
			this._synthesizer.setupMetronomeChannel(this.get_metronomeVolume());
			this.onReadyForPlayback();
		}
	}
	,loadMidiFile: function(midiFile) {
		this.stop();
		try {
			alphaTab.util.Logger.info("AlphaSynth","Loading midi from model",null);
			this._sequencer.loadMidi(midiFile);
			this._isMidiLoaded = true;
			this.onMidiLoaded();
			alphaTab.util.Logger.info("AlphaSynth","Midi successfully loaded",null);
			this.checkReadyForPlayback();
			this.set_tickPosition(0);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.error("AlphaSynth","Could not load midi from model " + Std.string(e),null);
				this.onMidiLoadFailed(e);
			} else throw(e);
		}
	}
	,setChannelMute: function(channel,mute) {
		this._synthesizer.channelSetMute(channel,mute);
	}
	,resetChannelStates: function() {
		this._synthesizer.resetChannelStates();
	}
	,setChannelSolo: function(channel,solo) {
		this._synthesizer.channelSetSolo(channel,solo);
	}
	,setChannelVolume: function(channel,volume) {
		volume = alphaTab.audio.synth.util.SynthHelper.clampF(volume,0,1);
		this._synthesizer.channelSetMixVolume(channel,volume);
	}
	,setChannelProgram: function(channel,program) {
		program = alphaTab.audio.synth.util.SynthHelper.clampB(program,0,127);
		this._sequencer.setChannelProgram(channel,program);
		this._synthesizer.channelSetPresetNumber(channel,program,false);
	}
	,onSamplesPlayed: function(sampleCount) {
		var playedMillis = sampleCount / js.Boot.__cast(this._synthesizer.outSampleRate , Float) * 1000;
		this.updateTimePosition(this._timePosition + playedMillis);
	}
	,updateTimePosition: function(timePosition) {
		var currentTime = this._timePosition = timePosition;
		var currentTick = this._tickPosition = this._sequencer.timePositionToTickPosition(currentTime);
		var endTime = this._sequencer.get_endTime();
		var endTick = this._sequencer.endTick;
		alphaTab.util.Logger.debug("AlphaSynth","Position changed: (time: " + Std.string(currentTime) + "/" + Std.string(endTime) + ", tick: " + Std.string(currentTick) + "/" + Std.string(endTime) + ", Active Voices: " + Std.string(this._synthesizer.get_activeVoiceCount()),null);
		this.onPositionChanged(new alphaTab.audio.synth.PositionChangedEventArgs(currentTime,endTime,currentTick,endTick));
	}
	,addReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.add(this.ready,value);
	}
	,removeReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.sub(this.ready,value);
	}
	,onReady: function() {
		var _e = this.ready;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,onFinished: function() {
		var _e = this.finished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addStateChanged: function(value) {
		this.stateChanged = system._EventAction1.EventAction1_Impl_.add(this.stateChanged,value);
	}
	,removeStateChanged: function(value) {
		this.stateChanged = system._EventAction1.EventAction1_Impl_.sub(this.stateChanged,value);
	}
	,onStateChanged: function(e) {
		var _e = this.stateChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.add(this.soundFontLoaded,value);
	}
	,removeSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.sub(this.soundFontLoaded,value);
	}
	,onSoundFontLoaded: function() {
		var _e = this.soundFontLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.add(this.readyForPlayback,value);
	}
	,removeReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.sub(this.readyForPlayback,value);
	}
	,onReadyForPlayback: function() {
		var _e = this.readyForPlayback;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addSoundFontLoadFailed: function(value) {
		this.soundFontLoadFailed = system._EventAction1.EventAction1_Impl_.add(this.soundFontLoadFailed,value);
	}
	,removeSoundFontLoadFailed: function(value) {
		this.soundFontLoadFailed = system._EventAction1.EventAction1_Impl_.sub(this.soundFontLoadFailed,value);
	}
	,onSoundFontLoadFailed: function(e) {
		var _e = this.soundFontLoadFailed;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.add(this.midiLoaded,value);
	}
	,removeMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.sub(this.midiLoaded,value);
	}
	,onMidiLoaded: function() {
		var _e = this.midiLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addMidiLoadFailed: function(value) {
		this.midiLoadFailed = system._EventAction1.EventAction1_Impl_.add(this.midiLoadFailed,value);
	}
	,removeMidiLoadFailed: function(value) {
		this.midiLoadFailed = system._EventAction1.EventAction1_Impl_.sub(this.midiLoadFailed,value);
	}
	,onMidiLoadFailed: function(e) {
		var _e = this.midiLoadFailed;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addPositionChanged: function(value) {
		this.positionChanged = system._EventAction1.EventAction1_Impl_.add(this.positionChanged,value);
	}
	,removePositionChanged: function(value) {
		this.positionChanged = system._EventAction1.EventAction1_Impl_.sub(this.positionChanged,value);
	}
	,onPositionChanged: function(e) {
		var _e = this.positionChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,__class__: alphaTab.audio.synth.AlphaSynth
};
alphaTab.audio.synth.synthesis = {};
alphaTab.audio.synth.synthesis.TinySoundFont = function(sampleRate) {
	var this1 = {}
	this._soloChannels = this1;
	var this11 = {}
	this._mutedChannels = this11;
	var this12 = new Int32Array(32);
	this._midiEventCounts = this12;
	this._midiEventQueue = new alphaTab.audio.synth.ds.LinkedList();
	this._isAnySolo = false;
	this._presets = null;
	this._voices = null;
	this._channels = null;
	this._voicePlayIndex = 0;
	this.fontSamples = null;
	this.outputMode = 0;
	this.outSampleRate = 0.0;
	this.globalGainDb = 0.0;
	this.outSampleRate = sampleRate;
	this.outputMode = 0;
	var this13 = [];
	this._voices = this13;
};
alphaTab.audio.synth.synthesis.TinySoundFont.__name__ = ["alphaTab","audio","synth","synthesis","TinySoundFont"];
alphaTab.audio.synth.synthesis.TinySoundFont.prototype = {
	synthesize: function() {
		return this.fillWorkingBuffer(false);
	}
	,synthesizeSilent: function() {
		this.fillWorkingBuffer(true);
	}
	,channelGetMixVolume: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].mixVolume;
		} else {
			return 1.0;
		}
	}
	,channelSetMixVolume: function(channel,volume) {
		var c = this.channelInit(channel);
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingChannel == channel && v1.playingPreset != -1) {
				v1.mixVolume = volume;
			}
		}
		c.mixVolume = volume;
	}
	,channelSetMute: function(channel,mute) {
		if(mute) {
			this._mutedChannels[channel] = true;
		} else {
			var this1 = this._mutedChannels;
			delete this1[channel];
		}
	}
	,channelSetSolo: function(channel,solo) {
		if(solo) {
			this._soloChannels[channel] = true;
		} else {
			var this1 = this._soloChannels;
			delete this1[channel];
		}
		var this2 = this._soloChannels;
		this._isAnySolo = Object.keys(this2).length > 0;
	}
	,resetChannelStates: function() {
		var this1 = {}
		this._mutedChannels = this1;
		var this2 = {}
		this._soloChannels = this2;
		this._isAnySolo = false;
	}
	,dispatchEvent: function(i,synthEvent) {
		this._midiEventQueue.addFirst(synthEvent);
		var tmp = i;
		var tmp1 = this._midiEventCounts[tmp];
		this._midiEventCounts[tmp] = tmp1 + 1;
	}
	,fillWorkingBuffer: function(silent) {
		var this1 = new Float32Array(64 * 32 * 2);
		var buffer = this1;
		var bufferPos = 0;
		var anySolo = this._isAnySolo;
		var x = 0;
		while(x < 32) {
			if(this._midiEventQueue.length > 0) {
				var i = 0;
				while(i < this._midiEventCounts[x]) {
					var m = this._midiEventQueue.removeLast();
					if(m.isMetronome) {
						this.channelNoteOff(17 - 1,33);
						var this2 = 127;
						this.channelNoteOn(17 - 1,33,95 / this2);
					} else {
						this.processMidiMessage(m.event);
					}
					++i;
				}
			}
			var voice = $iterator(this._voices)();
			while(voice.hasNext()) {
				var voice1 = voice.next();
				if(voice1.playingPreset != -1) {
					var channel = voice1.playingChannel;
					var isChannelMuted = this._mutedChannels.hasOwnProperty(channel) || anySolo && !this._soloChannels.hasOwnProperty(channel);
					if(silent) {
						voice1.kill();
					} else {
						voice1.render(this,buffer,bufferPos,64,isChannelMuted);
					}
				}
			}
			bufferPos = bufferPos + 64 * 2;
			++x;
		}
		alphaTab.platform.Platform.clearIntArray(this._midiEventCounts);
		return buffer;
	}
	,processMidiMessage: function(e) {
		alphaTab.util.Logger.debug("Midi","Processing midi " + e.get_command(),null);
		var command = e.get_command();
		var channel = e.get_channel();
		var data1 = e.get_data1();
		var data2 = e.get_data2();
		switch(command) {
		case 128:
			this.channelNoteOff(channel,data1);
			break;
		case 144:
			var this1 = 127;
			this.channelNoteOn(channel,data1,data2 / this1);
			break;
		case 160:
			break;
		case 176:
			this.channelMidiControl(channel,data1,data2);
			break;
		case 192:
			this.channelSetPresetNumber(channel,data1,channel == 9);
			break;
		case 208:
			break;
		case 224:
			var this2 = system.Convert.toInt16(data1 | data2 << 8);
			this.channelSetPitchWheel(channel,this2);
			break;
		default:
		}
	}
	,get_metronomeVolume: function() {
		return this.channelGetMixVolume(17 - 1);
	}
	,set_metronomeVolume: function(value) {
		this.channelSetMixVolume(17 - 1,value);
		return this.get_metronomeVolume();
	}
	,setupMetronomeChannel: function(volume) {
		this.channelSetVolume(17 - 1,1);
		this.channelSetMixVolume(17 - 1,volume);
		this.channelSetPresetNumber(17 - 1,0,true);
	}
	,resetSoft: function() {
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != -1 && (v1.ampEnv.segment < 6 || v1.ampEnv.parameters.release != 0)) {
				v1.endQuick(this.outSampleRate);
			}
		}
		if(this._channels != null) {
			var c = $iterator(this._channels.channelList)();
			while(c.hasNext()) {
				var c1 = c.next();
				c1.presetIndex = c1.bank = 0;
				c1.pitchWheel = c1.midiPan = 8192;
				c1.midiVolume = c1.midiExpression = 16383;
				c1.midiRpn = 65535;
				c1.midiData = 0;
				c1.panOffset = 0.0;
				c1.gainDb = 0.0;
				c1.pitchRange = 2.0;
				c1.tuning = 0.0;
			}
		}
	}
	,get_presetCount: function() {
		return this._presets.length;
	}
	,reset: function() {
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != -1 && (v1.ampEnv.segment < 6 || v1.ampEnv.parameters.release != 0)) {
				v1.endQuick(this.outSampleRate);
			}
		}
		this._channels = null;
	}
	,setOutput: function(outputMode,sampleRate,globalGainDb) {
		this.outputMode = outputMode;
		var tmp;
		if(sampleRate >= 1) {
			var this1 = sampleRate;
			tmp = this1;
		} else {
			tmp = 44100.0;
		}
		this.outSampleRate = tmp;
		this.globalGainDb = globalGainDb;
	}
	,noteOn: function(presetIndex,key,vel) {
		var midiVelocity = system.Convert.toInt32_Single(vel * 127);
		if(presetIndex < 0 || presetIndex >= this._presets.length) {
			return;
		}
		var this1 = 0.0;
		if(vel <= this1) {
			this.noteOff(presetIndex,key);
			return;
		}
		var voicePlayIndex = this._voicePlayIndex++;
		var region = HxOverrides.iter(this._presets[presetIndex].regions);
		while(region.hasNext()) {
			var region1 = region.next();
			if(key < region1.loKey || key > region1.hiKey || midiVelocity < region1.loVel || midiVelocity > region1.hiVel) {
				continue;
			}
			var voice = null;
			if(region1.group != 0) {
				var v = $iterator(this._voices)();
				while(v.hasNext()) {
					var v1 = v.next();
					if(v1.playingPreset == presetIndex && v1.region.group == region1.group) {
						v1.endQuick(this.outSampleRate);
					} else if(v1.playingPreset == -1 && voice == null) {
						voice = v1;
					}
				}
			} else {
				var v2 = $iterator(this._voices)();
				while(v2.hasNext()) {
					var v3 = v2.next();
					if(v3.playingPreset == -1) {
						voice = v3;
					}
				}
			}
			if(voice == null) {
				var i = 0;
				while(i < 4) {
					var _tmp = new alphaTab.audio.synth.synthesis.Voice();
					_tmp.playingPreset = -1;
					var newVoice = _tmp;
					this._voices.push(newVoice);
					++i;
				}
				voice = this._voices[this._voices.length - 4];
			}
			voice.region = region1;
			voice.playingPreset = presetIndex;
			voice.playingKey = key;
			voice.playIndex = voicePlayIndex;
			var this2 = 1.0;
			voice.noteGainDb = this.globalGainDb - region1.attenuation - alphaTab.audio.synth.util.SynthHelper.gainToDecibels(this2 / vel);
			if(this._channels != null) {
				this._channels.setupVoice(this,voice);
			} else {
				voice.calcPitchRatio(0,this.outSampleRate);
				var this3 = 0.5;
				var this4 = this3 - region1.pan;
				voice.panFactorLeft = js.Boot.__cast(Math.sqrt(this4) , Float);
				var this5 = 0.5;
				var this6 = this5 + region1.pan;
				voice.panFactorRight = js.Boot.__cast(Math.sqrt(this6) , Float);
			}
			var this7 = region1.offset;
			voice.sourceSamplePosition = this7;
			var doLoop = region1.loopMode != 0 && region1.loopStart < region1.loopEnd;
			voice.loopStart = doLoop ? region1.loopStart : 0;
			voice.loopEnd = doLoop ? region1.loopEnd : 0;
			voice.ampEnv.setup(region1.ampEnv,key,midiVelocity,true,this.outSampleRate);
			voice.modEnv.setup(region1.modEnv,key,midiVelocity,false,this.outSampleRate);
			var this8 = 10.0;
			var filterQDB = region1.initialFilterQ / this8;
			var this9 = filterQDB / 20.0;
			voice.lowPass.qInv = 1.0 / Math.pow(10.0,this9);
			voice.lowPass.z1 = voice.lowPass.z2 = 0;
			voice.lowPass.active = region1.initialFilterFc <= 13500;
			if(voice.lowPass.active) {
				var this10 = region1.initialFilterFc;
				voice.lowPass.setup(alphaTab.audio.synth.util.SynthHelper.cents2Hertz(this10) / this.outSampleRate);
			}
			voice.modLfo.setup(region1.delayModLFO,region1.freqModLFO,this.outSampleRate);
			voice.vibLfo.setup(region1.delayVibLFO,region1.freqVibLFO,this.outSampleRate);
		}
	}
	,bankNoteOn: function(bank,presetNumber,key,vel) {
		var presetIndex = this.getPresetIndex(bank,presetNumber);
		if(presetIndex == -1) {
			return false;
		}
		this.noteOn(presetIndex,key,vel);
		return true;
	}
	,noteOff: function(presetIndex,key) {
		var matchFirst = null;
		var matchLast = null;
		var this1 = [];
		var matches = this1;
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != presetIndex || v1.playingKey != key || v1.ampEnv.segment >= 6) {
				continue;
			} else if(matchFirst == null || v1.playIndex < matchFirst.playIndex) {
				matchFirst = v1;
				matchLast = v1;
				matches.push(v1);
			} else if(v1.playIndex == matchFirst.playIndex) {
				matchLast = v1;
				matches.push(v1);
			}
		}
		if(matchFirst == null) {
			return;
		}
		var v2 = $iterator(matches)();
		while(v2.hasNext()) {
			var v3 = v2.next();
			if(v3 != matchFirst && v3 != matchLast && (v3.playIndex != matchFirst.playIndex || v3.playingPreset != presetIndex || v3.playingKey != key || v3.ampEnv.segment >= 6)) {
				continue;
			}
			v3.end(this.outSampleRate);
		}
	}
	,bankNoteOff: function(bank,presetNumber,key) {
		var presetIndex = this.getPresetIndex(bank,presetNumber);
		if(presetIndex == -1) {
			return false;
		}
		this.noteOff(presetIndex,key);
		return true;
	}
	,noteOffAll: function(immediate) {
		var voice = $iterator(this._voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(voice1.playingPreset != -1 && voice1.ampEnv.segment < 6) {
				if(immediate) {
					voice1.endQuick(this.outSampleRate);
				} else {
					voice1.end(this.outSampleRate);
				}
			}
		}
	}
	,get_activeVoiceCount: function() {
		var count = 0;
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != -1) {
				++count;
			}
		}
		return count;
	}
	,channelInit: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel];
		}
		if(this._channels == null) {
			this._channels = new alphaTab.audio.synth.synthesis.Channels();
		}
		var i = this._channels.channelList.length;
		while(i <= channel) {
			var c = new alphaTab.audio.synth.synthesis.Channel();
			c.presetIndex = c.bank = 0;
			c.pitchWheel = c.midiPan = 8192;
			c.midiVolume = c.midiExpression = 16383;
			c.midiRpn = 65535;
			c.midiData = 0;
			c.panOffset = 0.0;
			c.gainDb = 0.0;
			c.pitchRange = 2.0;
			c.tuning = 0.0;
			c.mixVolume = 1;
			this._channels.channelList.push(c);
			++i;
		}
		return this._channels.channelList[channel];
	}
	,getPresetIndex: function(bank,presetNumber) {
		var i = 0;
		while(i < this._presets.length) {
			var preset = this._presets[i];
			if(preset.presetNumber == presetNumber && preset.bank == bank) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getPresetName: function(presetIndex) {
		if(presetIndex < 0 || presetIndex >= this._presets.length) {
			return null;
		} else {
			return this._presets[presetIndex].name;
		}
	}
	,bankGetPresetName: function(bank,presetNumber) {
		return this.getPresetName(this.getPresetIndex(bank,presetNumber));
	}
	,channelNoteOn: function(channel,key,vel) {
		if(this._channels == null || channel > this._channels.channelList.length) {
			return;
		}
		this._channels.activeChannel = channel;
		this.noteOn(this._channels.channelList[channel].presetIndex,key,vel);
	}
	,channelNoteOff: function(channel,key) {
		var this1 = [];
		var matches = this1;
		var matchFirst = null;
		var matchLast = null;
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset == -1 || v1.playingChannel != channel || v1.playingKey != key || v1.ampEnv.segment >= 6) {
				continue;
			}
			if(matchFirst == null || v1.playIndex < matchFirst.playIndex) {
				matchLast = v1;
				matchFirst = matchLast;
				matches.push(v1);
			} else if(v1.playIndex == matchFirst.playIndex) {
				matchLast = v1;
				matches.push(v1);
			}
		}
		if(matchFirst == null) {
			return;
		}
		var v2 = $iterator(matches)();
		while(v2.hasNext()) {
			var v3 = v2.next();
			if(v3 != matchFirst && v3 != matchLast && (v3.playIndex != matchFirst.playIndex || v3.playingPreset == -1 || v3.playingChannel != channel || v3.playingKey != key || v3.ampEnv.segment >= 6)) {
				continue;
			}
			v3.end(this.outSampleRate);
		}
	}
	,channelNoteOffAll: function(channel) {
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != -1 && v1.playingChannel == channel && v1.ampEnv.segment < 6) {
				v1.end(this.outSampleRate);
			}
		}
	}
	,channelSoundsOffAll: function(channel) {
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingPreset != -1 && v1.playingChannel == channel && (v1.ampEnv.segment < 6 || v1.ampEnv.parameters.release == 0)) {
				v1.endQuick(this.outSampleRate);
			}
		}
	}
	,channelSetPresetIndex: function(channel,presetIndex) {
		this.channelInit(channel).presetIndex = system.Convert.toUInt16(presetIndex);
	}
	,channelSetPresetNumber: function(channel,presetNumber,midiDrums) {
		if(midiDrums == null) {
			midiDrums = false;
		}
		var c = this.channelInit(channel);
		var presetIndex;
		if(midiDrums) {
			presetIndex = this.getPresetIndex(128 | c.bank & 32767,presetNumber);
			if(presetIndex == -1) {
				presetIndex = this.getPresetIndex(128,presetNumber);
			}
			if(presetIndex == -1) {
				presetIndex = this.getPresetIndex(128,0);
			}
			if(presetIndex == -1) {
				presetIndex = this.getPresetIndex(c.bank & 2047,presetNumber);
			}
		} else {
			presetIndex = this.getPresetIndex(c.bank & 2047,presetNumber);
		}
		if(presetIndex == -1) {
			presetIndex = this.getPresetIndex(0,presetNumber);
		}
		if(presetIndex != -1) {
			c.presetIndex = system.Convert.toUInt16(presetIndex);
			return true;
		}
		return false;
	}
	,channelSetBank: function(channel,bank) {
		this.channelInit(channel).bank = system.Convert.toUInt16(bank);
	}
	,channelSetBankPreset: function(channel,bank,presetNumber) {
		var c = this.channelInit(channel);
		var presetIndex = this.getPresetIndex(bank,presetNumber);
		if(presetIndex == -1) {
			return false;
		}
		c.presetIndex = system.Convert.toUInt16(presetIndex);
		c.bank = system.Convert.toUInt16(bank);
		return true;
	}
	,channelSetPan: function(channel,pan) {
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingChannel == channel && v1.playingPreset != -1) {
				var this1 = 0.5;
				var newPan = v1.region.pan + pan - this1;
				if(newPan <= -0.5) {
					v1.panFactorLeft = 1;
					v1.panFactorRight = 0;
				} else {
					var this2 = 0.5;
					if(newPan >= this2) {
						v1.panFactorLeft = 0;
						v1.panFactorRight = 1;
					} else {
						var this3 = 0.5;
						var this4 = this3 - newPan;
						v1.panFactorLeft = js.Boot.__cast(Math.sqrt(this4) , Float);
						var this5 = 0.5;
						var this6 = this5 + newPan;
						v1.panFactorRight = js.Boot.__cast(Math.sqrt(this6) , Float);
					}
				}
			}
		}
		var this7 = 0.5;
		this.channelInit(channel).panOffset = pan - this7;
	}
	,channelSetVolume: function(channel,volume) {
		var c = this.channelInit(channel);
		var gainDb = alphaTab.audio.synth.util.SynthHelper.gainToDecibels(volume);
		var gainDBChange = gainDb - c.gainDb;
		if(gainDBChange == 0) {
			return;
		}
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingChannel == channel && v1.playingPreset != -1) {
				v1.noteGainDb = v1.noteGainDb + gainDBChange;
			}
		}
		c.gainDb = gainDb;
	}
	,channelSetPitchWheel: function(channel,pitchWheel) {
		var c = this.channelInit(channel);
		if(c.pitchWheel == pitchWheel) {
			return;
		}
		c.pitchWheel = system.Convert.toUInt16(pitchWheel);
		this.channelApplyPitch(channel,c);
	}
	,channelApplyPitch: function(channel,c) {
		var pitchShift;
		if(c.pitchWheel == 8192) {
			pitchShift = c.tuning;
		} else {
			var this1 = 16383.0;
			var this2 = 2;
			pitchShift = c.pitchWheel / this1 * c.pitchRange * this2 - c.pitchRange + c.tuning;
		}
		var v = $iterator(this._voices)();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.playingChannel == channel && v1.playingPreset != -1) {
				v1.calcPitchRatio(pitchShift,this.outSampleRate);
			}
		}
	}
	,channelSetPitchRange: function(channel,pitchRange) {
		var c = this.channelInit(channel);
		if(c.pitchRange == pitchRange) {
			return;
		}
		c.pitchRange = pitchRange;
		if(c.pitchWheel != 8192) {
			this.channelApplyPitch(channel,c);
		}
	}
	,channelSetTuning: function(channel,tuning) {
		var c = this.channelInit(channel);
		if(c.tuning == tuning) {
			return;
		}
		c.tuning = tuning;
		this.channelApplyPitch(channel,c);
	}
	,channelMidiControl: function(channel,controller,controlValue) {
		var c = this.channelInit(channel);
		switch(controller) {
		case 0:
			c.bank = system.Convert.toUInt16(32768 | controlValue);
			return;
		case 6:
			c.midiData = system.Convert.toUInt16(c.midiData & 127 | controlValue << 7);
			if(c.midiRpn == 0) {
				var this1 = 0.01;
				this.channelSetPitchRange(channel,(c.midiData >> 7) + this1 * (c.midiData & 127));
			} else if(c.midiRpn == 1) {
				var this2 = 8192.0;
				var this3 = 8192.0;
				this.channelSetTuning(channel,system.Convert.toInt32_Single(c.tuning) + (c.midiData - this2) / this3);
			} else if(c.midiRpn == 2 && controller == 6) {
				var this4 = 64.0;
				this.channelSetTuning(channel,controlValue - this4 + (c.tuning - system.Convert.toInt32_Single(c.tuning)));
			}
			return;
		case 7:
			c.midiVolume = system.Convert.toUInt16(c.midiVolume & 127 | controlValue << 7);
			var this5 = 16383.0;
			var this6 = 16383.0;
			var this7 = c.midiVolume / this5 * (c.midiExpression / this6);
			this.channelSetVolume(channel,js.Boot.__cast(Math.pow(this7,3.0) , Float));
			return;
		case 10:
			c.midiPan = system.Convert.toUInt16(c.midiPan & 127 | controlValue << 7);
			var this8 = 16383.0;
			this.channelSetPan(channel,c.midiPan / this8);
			return;
		case 11:
			c.midiExpression = system.Convert.toUInt16(c.midiExpression & 127 | controlValue << 7);
			var this9 = 16383.0;
			var this10 = 16383.0;
			var this11 = c.midiVolume / this9 * (c.midiExpression / this10);
			this.channelSetVolume(channel,js.Boot.__cast(Math.pow(this11,3.0) , Float));
			return;
		case 32:
			c.bank = system.Convert.toUInt16(((c.bank & 32768) != 0 ? (c.bank & 127) << 7 : 0) | controlValue);
			return;
		case 38:
			c.midiData = system.Convert.toUInt16(c.midiData & 16256 | controlValue);
			if(c.midiRpn == 0) {
				var this12 = 0.01;
				this.channelSetPitchRange(channel,(c.midiData >> 7) + this12 * (c.midiData & 127));
			} else if(c.midiRpn == 1) {
				var this13 = 8192.0;
				var this14 = 8192.0;
				this.channelSetTuning(channel,system.Convert.toInt32_Single(c.tuning) + (c.midiData - this13) / this14);
			} else if(c.midiRpn == 2 && controller == 6) {
				var this15 = 64.0;
				this.channelSetTuning(channel,controlValue - this15 + (c.tuning - system.Convert.toInt32_Single(c.tuning)));
			}
			return;
		case 39:
			c.midiVolume = system.Convert.toUInt16(c.midiVolume & 16256 | controlValue);
			var this16 = 16383.0;
			var this17 = 16383.0;
			var this18 = c.midiVolume / this16 * (c.midiExpression / this17);
			this.channelSetVolume(channel,js.Boot.__cast(Math.pow(this18,3.0) , Float));
			return;
		case 42:
			c.midiPan = system.Convert.toUInt16(c.midiPan & 16256 | controlValue);
			var this19 = 16383.0;
			this.channelSetPan(channel,c.midiPan / this19);
			return;
		case 43:
			c.midiExpression = system.Convert.toUInt16(c.midiExpression & 16256 | controlValue);
			var this20 = 16383.0;
			var this21 = 16383.0;
			var this22 = c.midiVolume / this20 * (c.midiExpression / this21);
			this.channelSetVolume(channel,js.Boot.__cast(Math.pow(this22,3.0) , Float));
			return;
		case 98:
			c.midiRpn = 65535;
			return;
		case 99:
			c.midiRpn = 65535;
			return;
		case 100:
			c.midiRpn = system.Convert.toUInt16((c.midiRpn == 65535 ? 0 : c.midiRpn) & 16256 | controlValue);
			return;
		case 101:
			c.midiRpn = system.Convert.toUInt16((c.midiRpn == 65535 ? 0 : c.midiRpn) & 127 | controlValue << 7);
			return;
		case 120:
			this.channelSoundsOffAll(channel);
			return;
		case 121:
			c.midiVolume = c.midiExpression = 16383;
			c.midiPan = 8192;
			c.bank = 0;
			this.channelSetVolume(channel,1);
			this.channelSetPan(channel,0.5);
			this.channelSetPitchRange(channel,2);
			return;
		case 123:
			this.channelNoteOffAll(channel);
			return;
		case 5:case 64:case 65:case 66:case 96:case 97:case 122:case 124:case 125:case 126:case 127:
			return;
		default:
		}
	}
	,channelGetPresetIndex: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].presetIndex;
		} else {
			return 0;
		}
	}
	,channelGetPresetBank: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].bank & 32767;
		} else {
			return 0;
		}
	}
	,channelGetPan: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			var this1 = 0.5;
			return this._channels.channelList[channel].panOffset - this1;
		} else {
			return 0.5;
		}
	}
	,channelGetVolume: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return alphaTab.audio.synth.util.SynthHelper.decibelsToGain(this._channels.channelList[channel].gainDb);
		} else {
			return 1.0;
		}
	}
	,channelGetPitchWheel: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].pitchWheel;
		} else {
			return 8192;
		}
	}
	,channelGetPitchRange: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].pitchRange;
		} else {
			return 2.0;
		}
	}
	,channelGetTuning: function(channel) {
		if(this._channels != null && channel < this._channels.channelList.length) {
			return this._channels.channelList[channel].tuning;
		} else {
			return 0.0;
		}
	}
	,loadPresets: function(hydra) {
		var size = hydra.phdrs.length - 1;
		var this1 = new Array(size);
		this._presets = this1;
		this.fontSamples = hydra.fontSamples;
		var phdrIndex = 0;
		while(phdrIndex < hydra.phdrs.length - 1) {
			var sortedIndex = 0;
			var phdr = hydra.phdrs[phdrIndex];
			var otherPhdrIndex = 0;
			while(otherPhdrIndex < hydra.phdrs.length) {
				var otherPhdr = hydra.phdrs[otherPhdrIndex];
				if(otherPhdrIndex == phdrIndex || otherPhdr.bank > phdr.bank) {
					++otherPhdrIndex;
					continue;
				} else if(otherPhdr.bank < phdr.bank) {
					++sortedIndex;
				} else if(otherPhdr.preset > phdr.preset) {
					++otherPhdrIndex;
					continue;
				} else if(otherPhdr.preset < phdr.preset) {
					++sortedIndex;
				} else if(otherPhdrIndex < phdrIndex) {
					++sortedIndex;
				}
				++otherPhdrIndex;
			}
			var regionIndex = 0;
			var preset = this._presets[sortedIndex] = new alphaTab.audio.synth.synthesis.Preset();
			preset.name = phdr.presetName;
			preset.bank = phdr.bank;
			preset.presetNumber = phdr.preset;
			var regionNum = 0;
			var pbagIndex = phdr.presetBagNdx;
			while(pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx) {
				var pbag = hydra.pbags[pbagIndex];
				var plokey = 0;
				var phikey = 127;
				var plovel = 0;
				var phivel = 127;
				var pgenIndex = pbag.genNdx;
				while(pgenIndex < hydra.pbags[pbagIndex + 1].genNdx) {
					var pgen = hydra.pgens[pgenIndex];
					if(pgen.genOper == 43) {
						plokey = pgen.genAmount.get_lowByteAmount();
						phikey = pgen.genAmount.get_highByteAmount();
						++pgenIndex;
						continue;
					}
					if(pgen.genOper == 44) {
						plovel = pgen.genAmount.get_lowByteAmount();
						phivel = pgen.genAmount.get_highByteAmount();
						++pgenIndex;
						continue;
					}
					if(pgen.genOper != 41) {
						++pgenIndex;
						continue;
					}
					if(pgen.genAmount.wordAmount >= hydra.insts.length) {
						++pgenIndex;
						continue;
					}
					var pinst = hydra.insts[pgen.genAmount.wordAmount];
					var ibagIndex = pinst.instBagNdx;
					while(ibagIndex < hydra.insts[pgen.genAmount.wordAmount + 1].instBagNdx) {
						var ibag = hydra.ibags[ibagIndex];
						var ilokey = 0;
						var ihikey = 127;
						var ilovel = 0;
						var ihivel = 127;
						var igenIndex = ibag.instGenNdx;
						while(igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx) {
							var igen = hydra.igens[igenIndex];
							if(igen.genOper == 43) {
								ilokey = igen.genAmount.get_lowByteAmount();
								ihikey = igen.genAmount.get_highByteAmount();
								++igenIndex;
								continue;
							}
							if(igen.genOper == 44) {
								ilovel = igen.genAmount.get_lowByteAmount();
								ihivel = igen.genAmount.get_highByteAmount();
								++igenIndex;
								continue;
							}
							if(igen.genOper == 53 && ihikey >= plokey && ilokey <= phikey && ihivel >= plovel && ilovel <= phivel) {
								++regionNum;
							}
							++igenIndex;
						}
						++ibagIndex;
					}
					++pgenIndex;
				}
				++pbagIndex;
			}
			var this2 = new Array(regionNum);
			preset.regions = this2;
			var globalRegion = new alphaTab.audio.synth.synthesis.Region().Region();
			globalRegion.clear(true);
			var pbagIndex1 = phdr.presetBagNdx;
			while(pbagIndex1 < hydra.phdrs[phdrIndex + 1].presetBagNdx) {
				var pbag1 = hydra.pbags[pbagIndex1];
				var presetRegion = new alphaTab.audio.synth.synthesis.Region().Region_Region(globalRegion);
				var hadGenInstrument = false;
				var pgenIndex1 = pbag1.genNdx;
				while(pgenIndex1 < hydra.pbags[pbagIndex1 + 1].genNdx) {
					var pgen1 = hydra.pgens[pgenIndex1];
					if(pgen1.genOper == 41) {
						var whichInst = pgen1.genAmount.wordAmount;
						if(whichInst >= hydra.insts.length) {
							++pgenIndex1;
							continue;
						}
						var instRegion = new alphaTab.audio.synth.synthesis.Region().Region();
						instRegion.clear(false);
						var inst = hydra.insts[whichInst];
						var ibagIndex1 = inst.instBagNdx;
						while(ibagIndex1 < hydra.insts[whichInst + 1].instBagNdx) {
							var ibag1 = hydra.ibags[ibagIndex1];
							var zoneRegion = new alphaTab.audio.synth.synthesis.Region().Region_Region(instRegion);
							var hadSampleId = false;
							var igenIndex1 = ibag1.instGenNdx;
							while(igenIndex1 < hydra.ibags[ibagIndex1 + 1].instGenNdx) {
								var igen1 = hydra.igens[igenIndex1];
								if(igen1.genOper == 53) {
									if(zoneRegion.hiKey < presetRegion.loKey || zoneRegion.loKey > presetRegion.hiKey) {
										++igenIndex1;
										continue;
									}
									if(zoneRegion.hiVel < presetRegion.loVel || zoneRegion.loVel > presetRegion.hiVel) {
										++igenIndex1;
										continue;
									}
									if(presetRegion.loKey > zoneRegion.loKey) {
										zoneRegion.loKey = presetRegion.loKey;
									}
									if(presetRegion.hiKey < zoneRegion.hiKey) {
										zoneRegion.hiKey = presetRegion.hiKey;
									}
									if(presetRegion.loVel > zoneRegion.loVel) {
										zoneRegion.loVel = presetRegion.loVel;
									}
									if(presetRegion.hiVel < zoneRegion.hiVel) {
										zoneRegion.hiVel = presetRegion.hiVel;
									}
									zoneRegion.offset = zoneRegion.offset + presetRegion.offset;
									zoneRegion.end = zoneRegion.end + presetRegion.end;
									zoneRegion.loopStart = zoneRegion.loopStart + presetRegion.loopStart;
									zoneRegion.loopEnd = zoneRegion.loopEnd + presetRegion.loopEnd;
									zoneRegion.transpose = zoneRegion.transpose + presetRegion.transpose;
									zoneRegion.tune = zoneRegion.tune + presetRegion.tune;
									zoneRegion.pitchKeyTrack = zoneRegion.pitchKeyTrack + presetRegion.pitchKeyTrack;
									zoneRegion.attenuation = zoneRegion.attenuation + presetRegion.attenuation;
									zoneRegion.pan = zoneRegion.pan + presetRegion.pan;
									zoneRegion.ampEnv.delay = zoneRegion.ampEnv.delay + presetRegion.ampEnv.delay;
									zoneRegion.ampEnv.attack = zoneRegion.ampEnv.attack + presetRegion.ampEnv.attack;
									zoneRegion.ampEnv.hold = zoneRegion.ampEnv.hold + presetRegion.ampEnv.hold;
									zoneRegion.ampEnv.decay = zoneRegion.ampEnv.decay + presetRegion.ampEnv.decay;
									zoneRegion.ampEnv.sustain = zoneRegion.ampEnv.sustain + presetRegion.ampEnv.sustain;
									zoneRegion.ampEnv.release = zoneRegion.ampEnv.release + presetRegion.ampEnv.release;
									zoneRegion.modEnv.delay = zoneRegion.modEnv.delay + presetRegion.modEnv.delay;
									zoneRegion.modEnv.attack = zoneRegion.modEnv.attack + presetRegion.modEnv.attack;
									zoneRegion.modEnv.hold = zoneRegion.modEnv.hold + presetRegion.modEnv.hold;
									zoneRegion.modEnv.decay = zoneRegion.modEnv.decay + presetRegion.modEnv.decay;
									zoneRegion.modEnv.sustain = zoneRegion.modEnv.sustain + presetRegion.modEnv.sustain;
									zoneRegion.modEnv.release = zoneRegion.modEnv.release + presetRegion.modEnv.release;
									zoneRegion.initialFilterQ = zoneRegion.initialFilterQ + presetRegion.initialFilterQ;
									zoneRegion.initialFilterFc = zoneRegion.initialFilterFc + presetRegion.initialFilterFc;
									zoneRegion.modEnvToPitch = zoneRegion.modEnvToPitch + presetRegion.modEnvToPitch;
									zoneRegion.modEnvToFilterFc = zoneRegion.modEnvToFilterFc + presetRegion.modEnvToFilterFc;
									zoneRegion.delayModLFO = zoneRegion.delayModLFO + presetRegion.delayModLFO;
									zoneRegion.freqModLFO = zoneRegion.freqModLFO + presetRegion.freqModLFO;
									zoneRegion.modLfoToPitch = zoneRegion.modLfoToPitch + presetRegion.modLfoToPitch;
									zoneRegion.modLfoToFilterFc = zoneRegion.modLfoToFilterFc + presetRegion.modLfoToFilterFc;
									zoneRegion.modLfoToVolume = zoneRegion.modLfoToVolume + presetRegion.modLfoToVolume;
									zoneRegion.delayVibLFO = zoneRegion.delayVibLFO + presetRegion.delayVibLFO;
									zoneRegion.freqVibLFO = zoneRegion.freqVibLFO + presetRegion.freqVibLFO;
									zoneRegion.vibLfoToPitch = zoneRegion.vibLfoToPitch + presetRegion.vibLfoToPitch;
									zoneRegion.ampEnv.envToSecs(true);
									zoneRegion.modEnv.envToSecs(false);
									zoneRegion.delayModLFO = zoneRegion.delayModLFO < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(zoneRegion.delayModLFO);
									zoneRegion.delayVibLFO = zoneRegion.delayVibLFO < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(zoneRegion.delayVibLFO);
									if(zoneRegion.pan < -0.5) {
										zoneRegion.pan = -0.5;
									} else {
										var this3 = 0.5;
										if(zoneRegion.pan > this3) {
											zoneRegion.pan = 0.5;
										}
									}
									if(zoneRegion.initialFilterQ < 1500 || zoneRegion.initialFilterQ > 13500) {
										zoneRegion.initialFilterQ = 0;
									}
									var shdr = hydra.sHdrs[igen1.genAmount.wordAmount];
									zoneRegion.offset = zoneRegion.offset + shdr.start;
									zoneRegion.end = zoneRegion.end + shdr.end;
									zoneRegion.loopStart = zoneRegion.loopStart + shdr.startLoop;
									zoneRegion.loopEnd = zoneRegion.loopEnd + shdr.endLoop;
									if(shdr.endLoop > 0) {
										zoneRegion.loopEnd = zoneRegion.loopEnd - 1;
									}
									if(zoneRegion.pitchKeyCenter == -1) {
										zoneRegion.pitchKeyCenter = shdr.originalPitch;
									}
									zoneRegion.tune = zoneRegion.tune + shdr.pitchCorrection;
									zoneRegion.sampleRate = shdr.sampleRate;
									if(zoneRegion.end != 0 && zoneRegion.end < this.fontSamples.length) {
										zoneRegion.end++;
									} else {
										zoneRegion.end = system.Convert.toUInt32(this.fontSamples.length);
									}
									preset.regions[regionIndex] = new alphaTab.audio.synth.synthesis.Region().Region_Region(zoneRegion);
									++regionIndex;
									hadSampleId = true;
								} else {
									zoneRegion.operator(igen1.genOper,igen1.genAmount);
								}
								++igenIndex1;
							}
							if(ibag1 == hydra.ibags[inst.instBagNdx] && !hadSampleId) {
								instRegion = new alphaTab.audio.synth.synthesis.Region().Region_Region(zoneRegion);
							}
							++ibagIndex1;
						}
						hadGenInstrument = true;
					} else {
						presetRegion.operator(pgen1.genOper,pgen1.genAmount);
					}
					++pgenIndex1;
				}
				if(pbag1 == hydra.pbags[phdr.presetBagNdx] && !hadGenInstrument) {
					globalRegion = presetRegion;
				}
				++pbagIndex1;
			}
			++phdrIndex;
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.TinySoundFont
};
alphaTab.audio.synth.MidiFileSequencer = function(synthesizer) {
	this._synthesizer = null;
	this._tempoChanges = null;
	this._firstProgramEventPerChannel = null;
	this._synthData = null;
	this._division = 0;
	this._eventIndex = 0;
	this._currentTime = 0.0;
	this._playbackRange = null;
	this._playbackRangeStartTime = 0.0;
	this._playbackRangeEndTime = 0.0;
	this._endTime = 0.0;
	this.isLooping = false;
	this.endTick = 0;
	this.playbackSpeed = 0.0;
	this._synthesizer = synthesizer;
	var this1 = {}
	this._firstProgramEventPerChannel = this1;
	var this2 = [];
	this._tempoChanges = this2;
	this.playbackSpeed = 1;
};
alphaTab.audio.synth.MidiFileSequencer.__name__ = ["alphaTab","audio","synth","MidiFileSequencer"];
alphaTab.audio.synth.MidiFileSequencer.prototype = {
	get_playbackRange: function() {
		return this._playbackRange;
	}
	,set_playbackRange: function(value) {
		this._playbackRange = value;
		if(value != null) {
			this._playbackRangeStartTime = this.tickPositionToTimePositionWithSpeed(value.startTick,1);
			this._playbackRangeEndTime = this.tickPositionToTimePositionWithSpeed(value.endTick,1);
		}
		return this.get_playbackRange();
	}
	,get_endTime: function() {
		return this._endTime / this.playbackSpeed;
	}
	,seek: function(timePosition) {
		timePosition = timePosition * this.playbackSpeed;
		if(this.get_playbackRange() != null) {
			if(timePosition < this._playbackRangeStartTime) {
				timePosition = this._playbackRangeStartTime;
			} else if(timePosition > this._playbackRangeEndTime) {
				timePosition = this._playbackRangeEndTime;
			}
		}
		timePosition = timePosition - 25;
		if(timePosition < 0) {
			timePosition = 0;
		}
		if(timePosition > this._currentTime) {
			this.silentProcess(timePosition - this._currentTime);
		} else if(timePosition < this._currentTime) {
			this._currentTime = 0;
			this._eventIndex = 0;
			var metronomeVolume = this._synthesizer.get_metronomeVolume();
			this._synthesizer.noteOffAll(true);
			this._synthesizer.resetSoft();
			this._synthesizer.setupMetronomeChannel(metronomeVolume);
			this.silentProcess(timePosition);
		}
	}
	,silentProcess: function(milliseconds) {
		if(milliseconds <= 0) {
			return;
		}
		var start = Date.now();
		var finalTime = this._currentTime + milliseconds;
		while(this._currentTime < finalTime) if(this.fillMidiEventQueueLimited(finalTime - this._currentTime)) {
			this._synthesizer.synthesizeSilent();
		}
		var duration = Date.now() - start;
		alphaTab.util.Logger.debug("Sequencer","Silent seek finished in " + Std.string(duration) + "ms",null);
	}
	,loadMidi: function(midiFile) {
		var this1 = [];
		this._tempoChanges = this1;
		this._division = midiFile.division;
		this._eventIndex = 0;
		this._currentTime = 0;
		var this2 = [];
		this._synthData = this2;
		var bpm = 120;
		var absTick = 0;
		var absTime = 0.0;
		var metronomeLength = 0;
		var metronomeTick = 0;
		var metronomeTime = 0.0;
		var previousTick = 0;
		var mEvent = $iterator(midiFile.events)();
		while(mEvent.hasNext()) {
			var mEvent1 = mEvent.next();
			var synthData = new alphaTab.audio.synth.synthesis.SynthEvent(this._synthData.length,mEvent1);
			this._synthData.push(synthData);
			var deltaTick = mEvent1.tick - previousTick;
			absTick = absTick + deltaTick;
			absTime = absTime + deltaTick * (60000.0 / (bpm * midiFile.division));
			synthData.time = absTime;
			previousTick = mEvent1.tick;
			if(mEvent1.get_command() == 255 && mEvent1.get_data1() == 81) {
				var meta = js.Boot.__cast(mEvent1 , alphaTab.audio.synth.midi.event.MetaNumberEvent);
				bpm = 60000000 / js.Boot.__cast(meta.value , Float);
				this._tempoChanges.push(new alphaTab.audio.synth.MidiFileSequencerTempoChange(bpm,absTick,system.Convert.toInt32_Double(absTime)));
			} else if(mEvent1.get_command() == 255 && mEvent1.get_data1() == 88) {
				var meta1 = js.Boot.__cast(mEvent1 , alphaTab.audio.synth.midi.event.MetaDataEvent);
				var this3 = meta1.data[1];
				var timeSignatureDenominator = system.Convert.toInt32_Double(Math.pow(2,this3));
				metronomeLength = system.Convert.toInt32_Double(this._division * (4.0 / timeSignatureDenominator));
			} else if(mEvent1.get_command() == 192) {
				var channel = mEvent1.get_channel();
				if(!this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
					this._firstProgramEventPerChannel[channel] = synthData;
				}
			}
			if(metronomeLength > 0) {
				while(metronomeTick < absTick) {
					var metronome = alphaTab.audio.synth.synthesis.SynthEvent.newMetronomeEvent(this._synthData.length,metronomeLength);
					this._synthData.push(metronome);
					metronome.time = metronomeTime;
					metronomeTick = metronomeTick + metronomeLength;
					metronomeTime = metronomeTime + metronomeLength * (60000.0 / (bpm * midiFile.division));
				}
			}
		}
		var comparison = function(a,b) {
			if(a.time > b.time) {
				return 1;
			}
			if(a.time < b.time) {
				return -1;
			}
			return a.eventIndex - b.eventIndex;
		};
		this._synthData.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		this._endTime = absTime;
		this.endTick = absTick;
	}
	,fillMidiEventQueue: function() {
		return this.fillMidiEventQueueLimited(-1);
	}
	,fillMidiEventQueueLimited: function(maxMilliseconds) {
		var millisecondsPerBuffer = 64 / js.Boot.__cast(this._synthesizer.outSampleRate , Float) * 1000 * this.playbackSpeed;
		if(maxMilliseconds > 0 && maxMilliseconds < millisecondsPerBuffer) {
			millisecondsPerBuffer = maxMilliseconds;
		}
		var anyEventsDispatched = false;
		var endTime = this.get_internalEndTime();
		var i = 0;
		while(i < 32) {
			this._currentTime = this._currentTime + millisecondsPerBuffer;
			while(this._eventIndex < this._synthData.length && this._synthData[this._eventIndex].time < this._currentTime && this._currentTime < endTime) {
				this._synthesizer.dispatchEvent(i,this._synthData[this._eventIndex]);
				this._eventIndex++;
				anyEventsDispatched = true;
			}
			++i;
		}
		return anyEventsDispatched;
	}
	,tickPositionToTimePosition: function(tickPosition) {
		return this.tickPositionToTimePositionWithSpeed(tickPosition,this.playbackSpeed);
	}
	,timePositionToTickPosition: function(timePosition) {
		return this.timePositionToTickPositionWithSpeed(timePosition,this.playbackSpeed);
	}
	,tickPositionToTimePositionWithSpeed: function(tickPosition,playbackSpeed) {
		var timePosition = 0.0;
		var bpm = 120.0;
		var lastChange = 0;
		var i = 0;
		while(i < this._tempoChanges.length) {
			var c = this._tempoChanges[i];
			if(tickPosition < c.ticks) {
				break;
			}
			var this1 = c.time;
			timePosition = this1;
			bpm = c.bpm;
			lastChange = c.ticks;
			++i;
		}
		tickPosition = tickPosition - lastChange;
		timePosition = timePosition + tickPosition * (60000.0 / (bpm * this._division));
		return timePosition / playbackSpeed;
	}
	,timePositionToTickPositionWithSpeed: function(timePosition,playbackSpeed) {
		timePosition = timePosition * playbackSpeed;
		var ticks = 0;
		var bpm = 120.0;
		var lastChange = 0;
		var i = 0;
		while(i < this._tempoChanges.length) {
			var c = this._tempoChanges[i];
			if(timePosition < c.time) {
				break;
			}
			ticks = c.ticks;
			bpm = c.bpm;
			lastChange = c.time;
			++i;
		}
		timePosition = timePosition - lastChange;
		ticks = ticks + system.Convert.toInt32_Double(timePosition / (60000.0 / (bpm * this._division)));
		return ticks + 1;
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,onFinished: function() {
		var _e = this.finished;
		var finished = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(finished != null) {
			finished();
		}
	}
	,get_internalEndTime: function() {
		if(this.get_playbackRange() == null) {
			return this._endTime;
		} else {
			return this._playbackRangeEndTime;
		}
	}
	,checkForStop: function() {
		if(this._currentTime >= this.get_internalEndTime()) {
			var metronomeVolume = this._synthesizer.get_metronomeVolume();
			this._synthesizer.noteOffAll(true);
			this._synthesizer.resetSoft();
			this._synthesizer.setupMetronomeChannel(metronomeVolume);
			this.onFinished();
		}
	}
	,stop: function() {
		if(this.get_playbackRange() == null) {
			this._currentTime = 0;
			this._eventIndex = 0;
		} else if(this.get_playbackRange() != null) {
			var this1 = this.get_playbackRange().startTick;
			this._currentTime = this1;
			this._eventIndex = 0;
		}
	}
	,setChannelProgram: function(channel,program) {
		if(this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
			this._firstProgramEventPerChannel[channel].event.set_data1(program);
		}
	}
	,__class__: alphaTab.audio.synth.MidiFileSequencer
};
alphaTab.rendering = {};
alphaTab.rendering.layout = {};
alphaTab.rendering.layout.ScoreLayout = function(renderer) {
	this._barRendererLookup = null;
	this.renderer = null;
	this.width = 0.0;
	this.height = 0.0;
	this.ScoreInfoGlyphs = null;
	this.ChordDiagrams = null;
	this.TuningGlyph = null;
	this.firstBarIndex = 0;
	this.lastBarIndex = 0;
	this.renderer = renderer;
	var this1 = {}
	this._barRendererLookup = this1;
};
alphaTab.rendering.layout.ScoreLayout.__name__ = ["alphaTab","rendering","layout","ScoreLayout"];
alphaTab.rendering.layout.ScoreLayout.prototype = {
	get_name: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_supportsResize: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,resize: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,layoutAndRender: function() {
		var score = this.renderer.score;
		var startIndex = this.renderer.settings.display.startBar;
		--startIndex;
		startIndex = Math.min(score.masterBars.length - 1,Math.max(0,startIndex));
		this.firstBarIndex = startIndex;
		var endBarIndex = this.renderer.settings.display.barCount;
		if(endBarIndex < 0) {
			endBarIndex = score.masterBars.length;
		}
		endBarIndex = startIndex + endBarIndex - 1;
		endBarIndex = Math.min(score.masterBars.length - 1,Math.max(0,endBarIndex));
		this.lastBarIndex = endBarIndex;
		this.createScoreInfoGlyphs();
		this.doLayoutAndRender();
	}
	,doLayoutAndRender: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,createScoreInfoGlyphs: function() {
		alphaTab.util.Logger.info("ScoreLayout","Creating score info glyphs",null);
		var flags = this.renderer.settings.notation.hideInfo ? 0 : 511;
		var score = this.renderer.score;
		var res = this.renderer.settings.display.resources;
		var this1 = {}
		this.ScoreInfoGlyphs = this1;
		var tmp;
		var s = score.title;
		if(!(s == null || s.length == 0)) {
			tmp = (flags & 1) != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.ScoreInfoGlyphs[1] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.title,res.titleFont,1);
		}
		var tmp1;
		var s1 = score.subTitle;
		if(!(s1 == null || s1.length == 0)) {
			tmp1 = (flags & 2) != 0;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			this.ScoreInfoGlyphs[2] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.subTitle,res.subTitleFont,1);
		}
		var tmp2;
		var s2 = score.artist;
		if(!(s2 == null || s2.length == 0)) {
			tmp2 = (flags & 4) != 0;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this.ScoreInfoGlyphs[4] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.artist,res.subTitleFont,1);
		}
		var tmp3;
		var s3 = score.album;
		if(!(s3 == null || s3.length == 0)) {
			tmp3 = (flags & 8) != 0;
		} else {
			tmp3 = false;
		}
		if(tmp3) {
			this.ScoreInfoGlyphs[8] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.album,res.subTitleFont,1);
		}
		var tmp4;
		var tmp5;
		var s4 = score.music;
		if(!(s4 == null || s4.length == 0)) {
			tmp5 = score.music == score.words;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			tmp4 = (flags & 64) != 0;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			this.ScoreInfoGlyphs[64] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Music and Words by " + score.words,res.wordsFont,1);
		} else {
			var tmp6;
			var s5 = score.music;
			if(!(s5 == null || s5.length == 0)) {
				tmp6 = (flags & 32) != 0;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				this.ScoreInfoGlyphs[32] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Music by " + score.music,res.wordsFont,2);
			}
			var tmp7;
			var s6 = score.words;
			if(!(s6 == null || s6.length == 0)) {
				tmp7 = (flags & 16) != 0;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				this.ScoreInfoGlyphs[16] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Words by " + score.words,res.wordsFont,0);
			}
		}
		if(!this.renderer.settings.notation.hideTuning) {
			var staffWithTuning = null;
			var track = HxOverrides.iter(this.renderer.tracks);
			while(track.hasNext()) {
				var track1 = track.next();
				var staff = $iterator(track1.staves)();
				while(staff.hasNext()) {
					var staff1 = staff.next();
					if(!staff1.isPercussion && staff1.get_isStringed() && staff1.tuning.length > 0) {
						staffWithTuning = staff1;
						break;
					}
				}
				if(staffWithTuning != null) {
					break;
				}
			}
			if(staffWithTuning != null) {
				var tuning = alphaTab.model.Tuning.findTuning(staffWithTuning.tuning);
				if(tuning != null) {
					this.TuningGlyph = new alphaTab.rendering.glyphs.TuningGlyph(0,0,this.get_scale(),res,tuning);
				}
			}
		}
		if(!this.renderer.settings.notation.hideChordDiagrams) {
			this.ChordDiagrams = new alphaTab.rendering.glyphs.ChordDiagramContainerGlyph(0,0);
			this.ChordDiagrams.renderer = new alphaTab.rendering.BarRendererBase(this.renderer,null);
			var this2 = {}
			var chords = this2;
			var track2 = HxOverrides.iter(this.renderer.tracks);
			while(track2.hasNext()) {
				var track3 = track2.next();
				var staff2 = $iterator(track3.staves)();
				while(staff2.hasNext()) {
					var staff3 = staff2.next();
					var this3 = staff3.chords;
					var chordId = $iterator(Object.keys(this3))();
					while(chordId.hasNext()) {
						var chordId1 = chordId.next();
						if(!chords.hasOwnProperty(chordId1)) {
							var chord = staff3.chords[chordId1];
							if(chord.showDiagram) {
								chords[chordId1] = chord;
								this.ChordDiagrams.addChord(chord);
							}
						}
					}
				}
			}
		}
	}
	,get_scale: function() {
		return this.renderer.settings.display.scale;
	}
	,createEmptyStaveGroup: function() {
		var group = new alphaTab.rendering.staves.StaveGroup();
		group.layout = this;
		var trackIndex = 0;
		while(trackIndex < this.renderer.tracks.length) {
			var track = this.renderer.tracks[trackIndex];
			var hasScore = false;
			var staff = $iterator(track.staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				if(staff1.showStandardNotation) {
					hasScore = true;
					break;
				}
			}
			var staffIndex = 0;
			while(staffIndex < track.staves.length) {
				var staff2 = track.staves[staffIndex];
				var staveProfile;
				if(staff2.isPercussion) {
					staveProfile = 2;
				} else if(this.renderer.settings.display.staveProfile != 0) {
					staveProfile = this.renderer.settings.display.staveProfile;
				} else if(staff2.showTablature && staff2.showStandardNotation) {
					staveProfile = 1;
				} else if(staff2.showTablature) {
					if(hasScore) {
						staveProfile = 4;
					} else {
						staveProfile = 3;
					}
				} else if(staff2.showStandardNotation) {
					staveProfile = 2;
				} else {
					++staffIndex;
					continue;
				}
				var profile = alphaTab.Environment.StaveProfiles[staveProfile];
				var factory = HxOverrides.iter(profile);
				while(factory.hasNext()) {
					var factory1 = factory.next();
					if(factory1.canCreate(track,staff2)) {
						group.addStaff(track,new alphaTab.rendering.staves.Staff(trackIndex,staff2,factory1));
					}
				}
				++staffIndex;
			}
			++trackIndex;
		}
		return group;
	}
	,registerBarRenderer: function(key,renderer) {
		if(!this._barRendererLookup.hasOwnProperty(key)) {
			var this1 = this._barRendererLookup;
			var this2 = {}
			this1[key] = this2;
		}
		this._barRendererLookup[key][renderer.bar.id] = renderer;
	}
	,unregisterBarRenderer: function(key,renderer) {
		if(this._barRendererLookup.hasOwnProperty(key)) {
			var lookup = this._barRendererLookup[key];
			var key1 = renderer.bar.id;
			delete lookup[key1];
		}
	}
	,getRendererForBar: function(key,bar) {
		var barRendererId = bar.id;
		if(this._barRendererLookup.hasOwnProperty(key) && this._barRendererLookup[key].hasOwnProperty(barRendererId)) {
			return this._barRendererLookup[key][barRendererId];
		}
		return null;
	}
	,renderAnnotation: function() {
		var _gthis = this;
		var msg = "rendered by alphaTab (https://alphaTab.net)";
		var canvas = this.renderer.canvas;
		var resources = this.renderer.settings.display.resources;
		var size = 12 * this.renderer.settings.display.scale;
		var height = size * 2;
		this.height = this.height + height;
		var x = this.width / 2;
		canvas.beginRender(this.width,height);
		canvas.set_color(resources.mainGlyphColor);
		canvas.set_font(new alphaTab.platform.model.Font(resources.copyrightFont.family,size,1));
		canvas.set_textAlign(1);
		canvas.fillText(msg,x,size);
		var result = canvas.endRender();
		var tmp = this.renderer;
		var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
		_tmp.width = _gthis.width;
		_tmp.height = height;
		_tmp.renderResult = result;
		_tmp.totalWidth = _gthis.width;
		_tmp.totalHeight = height;
		_tmp.firstMasterBarIndex = -1;
		_tmp.lastMasterBarIndex = -1;
		tmp.onPartialRenderFinished(_tmp);
	}
	,__class__: alphaTab.rendering.layout.ScoreLayout
};
alphaTab.rendering.layout.PageViewLayout = function(renderer) {
	alphaTab.rendering.layout.ScoreLayout.call(this,renderer);
	this._groups = null;
	this._allMasterBarRenderers = null;
	this._barsFromPreviousGroup = null;
	this._pagePadding = null;
	var this1 = [];
	this._barsFromPreviousGroup = this1;
};
alphaTab.rendering.layout.PageViewLayout.__name__ = ["alphaTab","rendering","layout","PageViewLayout"];
alphaTab.rendering.layout.PageViewLayout.__super__ = alphaTab.rendering.layout.ScoreLayout;
alphaTab.rendering.layout.PageViewLayout.prototype = $extend(alphaTab.rendering.layout.ScoreLayout.prototype,{
	get_name: function() {
		return "PageView";
	}
	,doLayoutAndRender: function() {
		this._pagePadding = this.renderer.settings.display.padding;
		if(this._pagePadding == null) {
			this._pagePadding = alphaTab.rendering.layout.PageViewLayout.PagePadding;
		}
		if(this._pagePadding.length == 1) {
			this._pagePadding = new Float32Array([this._pagePadding[0],this._pagePadding[0],this._pagePadding[0],this._pagePadding[0]]);
		} else if(this._pagePadding.length == 2) {
			this._pagePadding = new Float32Array([this._pagePadding[0],this._pagePadding[1],this._pagePadding[0],this._pagePadding[1]]);
		}
		var x = this._pagePadding[0];
		var y = this._pagePadding[1];
		var this1 = this.renderer.get_width();
		this.width = this1;
		var this2 = [];
		this._allMasterBarRenderers = this2;
		y = this.layoutAndRenderScoreInfo(x,y,-1);
		y = this.layoutAndRenderChordDiagrams(y,-1);
		y = this.layoutAndRenderScore(x,y);
		this.height = y + this._pagePadding[3];
	}
	,get_supportsResize: function() {
		return true;
	}
	,resize: function() {
		var x = this._pagePadding[0];
		var y = this._pagePadding[1];
		var this1 = this.renderer.get_width();
		this.width = this1;
		var oldHeight = this.height;
		y = this.layoutAndRenderScoreInfo(x,y,oldHeight);
		y = this.layoutAndRenderChordDiagrams(y,oldHeight);
		y = this.resizeAndRenderScore(x,y,oldHeight);
		this.height = y + this._pagePadding[3];
	}
	,layoutAndRenderChordDiagrams: function(y,totalHeight) {
		if(totalHeight == null) {
			totalHeight = -1;
		}
		var _gthis = this;
		if(this.ChordDiagrams == null) {
			return y;
		}
		var res = this.renderer.settings.display.resources;
		this.ChordDiagrams.width = this.width;
		this.ChordDiagrams.doLayout();
		var canvas = this.renderer.canvas;
		canvas.beginRender(this.width,this.ChordDiagrams.height);
		canvas.set_color(res.scoreInfoColor);
		canvas.set_textAlign(1);
		this.ChordDiagrams.paint(0,0,canvas);
		var result = canvas.endRender();
		y = y + this.ChordDiagrams.height;
		var tmp = this.renderer;
		var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
		_tmp.width = _gthis.width;
		_tmp.height = _gthis.ChordDiagrams.height;
		_tmp.renderResult = result;
		_tmp.totalWidth = _gthis.width;
		_tmp.totalHeight = totalHeight < 0 ? y : totalHeight;
		_tmp.firstMasterBarIndex = -1;
		_tmp.lastMasterBarIndex = -1;
		tmp.onPartialRenderFinished(_tmp);
		return y;
	}
	,layoutAndRenderScoreInfo: function(x,y,totalHeight) {
		if(totalHeight == null) {
			totalHeight = -1;
		}
		var _gthis = this;
		alphaTab.util.Logger.debug(this.get_name(),"Layouting score info",null);
		var scale = this.get_scale();
		var res = this.renderer.settings.display.resources;
		var centeredGlyphs = [1,2,4,8,64];
		var i = 0;
		while(i < centeredGlyphs.length) {
			if(this.ScoreInfoGlyphs.hasOwnProperty(centeredGlyphs[i])) {
				var glyph = this.ScoreInfoGlyphs[centeredGlyphs[i]];
				var this1 = 2;
				glyph.x = this.width / this1;
				glyph.y = y;
				glyph.textAlign = 1;
				y = y + glyph.font.size;
			}
			++i;
		}
		var musicOrWords = false;
		var musicOrWordsHeight = 0;
		if(this.ScoreInfoGlyphs.hasOwnProperty(32)) {
			var glyph1 = this.ScoreInfoGlyphs[32];
			glyph1.x = this.width - this._pagePadding[2];
			glyph1.y = y;
			glyph1.textAlign = 2;
			musicOrWords = true;
			musicOrWordsHeight = glyph1.font.size;
		}
		if(this.ScoreInfoGlyphs.hasOwnProperty(16)) {
			var glyph2 = this.ScoreInfoGlyphs[16];
			glyph2.x = x;
			glyph2.y = y;
			glyph2.textAlign = 0;
			musicOrWords = true;
			musicOrWordsHeight = glyph2.font.size;
		}
		if(musicOrWords) {
			y = y + musicOrWordsHeight;
		}
		if(this.TuningGlyph != null) {
			y = y + 20 * scale;
			this.TuningGlyph.x = x;
			this.TuningGlyph.y = y;
			y = y + this.TuningGlyph.height;
		}
		y = y + 20 * scale;
		var canvas = this.renderer.canvas;
		canvas.beginRender(this.width,y);
		canvas.set_color(res.scoreInfoColor);
		canvas.set_textAlign(1);
		var this2 = this.ScoreInfoGlyphs;
		var key = $iterator(Object.keys(this2))();
		while(key.hasNext()) {
			var key1 = key.next();
			this.ScoreInfoGlyphs[key1].paint(0,0,canvas);
		}
		if(this.TuningGlyph != null) {
			this.TuningGlyph.paint(0,0,canvas);
		}
		var result = canvas.endRender();
		var tmp = this.renderer;
		var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
		_tmp.width = _gthis.width;
		_tmp.height = y;
		_tmp.renderResult = result;
		_tmp.totalWidth = _gthis.width;
		_tmp.totalHeight = totalHeight < 0 ? y : totalHeight;
		_tmp.firstMasterBarIndex = -1;
		_tmp.lastMasterBarIndex = -1;
		tmp.onPartialRenderFinished(_tmp);
		return y;
	}
	,resizeAndRenderScore: function(x,y,oldHeight) {
		var canvas = this.renderer.canvas;
		if(this.renderer.settings.display.barsPerRow != -1) {
			var i = 0;
			while(i < this._groups.length) {
				var group = this._groups[i];
				this.fitGroup(group);
				group.finalizeGroup();
				y = y + this.paintGroup(group,oldHeight,canvas);
				++i;
			}
		} else {
			var this1 = [];
			this._groups = this1;
			var currentIndex = 0;
			var maxWidth = this.get_maxWidth();
			var group1 = this.createEmptyStaveGroup();
			group1.index = this._groups.length;
			group1.x = x;
			group1.y = y;
			while(currentIndex < this._allMasterBarRenderers.length) {
				var renderers = this._allMasterBarRenderers[currentIndex];
				if(group1.width + renderers.width <= maxWidth || group1.masterBarsRenderers.length == 0) {
					group1.addMasterBarRenderers(this.renderer.tracks,renderers);
					++currentIndex;
				} else {
					while(renderers != null && !renderers.canWrap && group1.masterBarsRenderers.length > 1) {
						renderers = group1.revertLastBar();
						--currentIndex;
					}
					group1.isFull = true;
					group1.isLast = this.lastBarIndex == group1.get_lastBarIndex();
					this._groups.push(group1);
					this.fitGroup(group1);
					group1.finalizeGroup();
					y = y + this.paintGroup(group1,oldHeight,canvas);
					group1 = this.createEmptyStaveGroup();
					group1.index = this._groups.length;
					group1.x = x;
					group1.y = y;
				}
			}
			group1.isLast = this.lastBarIndex == group1.get_lastBarIndex();
			this.fitGroup(group1);
			group1.finalizeGroup();
			y = y + this.paintGroup(group1,oldHeight,canvas);
		}
		return y;
	}
	,layoutAndRenderScore: function(x,y) {
		var canvas = this.renderer.canvas;
		var startIndex = this.firstBarIndex;
		var currentBarIndex = startIndex;
		var endBarIndex = this.lastBarIndex;
		var this1 = [];
		this._groups = this1;
		while(currentBarIndex <= endBarIndex) {
			var group = this.createStaveGroup(currentBarIndex,endBarIndex);
			this._groups.push(group);
			group.x = x;
			group.y = y;
			currentBarIndex = group.get_lastBarIndex() + 1;
			this.fitGroup(group);
			group.finalizeGroup();
			alphaTab.util.Logger.info(this.get_name(),"Rendering partial from bar " + Std.string(group.get_firstBarIndex()) + " to " + Std.string(group.get_lastBarIndex()),null);
			y = y + this.paintGroup(group,y,canvas);
		}
		return y;
	}
	,paintGroup: function(group,totalHeight,canvas) {
		var height = group.get_height() + 20 * this.get_scale();
		canvas.beginRender(this.width,height);
		this.renderer.canvas.set_color(this.renderer.settings.display.resources.mainGlyphColor);
		this.renderer.canvas.set_textAlign(0);
		group.paint(0,-group.y,canvas);
		totalHeight = totalHeight + height;
		var result = canvas.endRender();
		var args = new alphaTab.rendering.RenderFinishedEventArgs();
		args.totalWidth = this.width;
		args.totalHeight = totalHeight;
		args.width = this.width;
		args.height = height;
		args.renderResult = result;
		args.firstMasterBarIndex = group.get_firstBarIndex();
		args.lastMasterBarIndex = group.get_lastBarIndex();
		this.renderer.onPartialRenderFinished(args);
		return height;
	}
	,fitGroup: function(group) {
		if(group.isFull || group.width > this.get_maxWidth()) {
			group.scaleToWidth(this.get_maxWidth());
		}
		this.width = Math.max(this.width,group.width);
	}
	,createStaveGroup: function(currentBarIndex,endIndex) {
		var group = this.createEmptyStaveGroup();
		group.index = this._groups.length;
		var barsPerRow = this.renderer.settings.display.barsPerRow;
		var maxWidth = this.get_maxWidth();
		var end = endIndex + 1;
		var i = currentBarIndex;
		while(i < end) {
			if(this._barsFromPreviousGroup.length > 0) {
				var renderer = $iterator(this._barsFromPreviousGroup)();
				while(renderer.hasNext()) {
					var renderer1 = renderer.next();
					group.addMasterBarRenderers(this.renderer.tracks,renderer1);
					i = renderer1.masterBar.index;
				}
			} else {
				var renderers = group.addBars(this.renderer.tracks,i);
				this._allMasterBarRenderers.push(renderers);
			}
			var this1 = [];
			this._barsFromPreviousGroup = this1;
			var groupIsFull = false;
			if(barsPerRow == -1 && group.width >= maxWidth && group.masterBarsRenderers.length != 0) {
				groupIsFull = true;
			} else if(group.masterBarsRenderers.length == barsPerRow + 1) {
				groupIsFull = true;
			}
			if(groupIsFull) {
				var reverted = group.revertLastBar();
				if(reverted != null) {
					this._barsFromPreviousGroup.push(reverted);
					while(reverted != null && !reverted.canWrap && group.masterBarsRenderers.length > 1) {
						reverted = group.revertLastBar();
						this._barsFromPreviousGroup.push(reverted);
					}
				}
				group.isFull = true;
				group.isLast = false;
				this._barsFromPreviousGroup.reverse();
				return group;
			}
			group.x = 0;
			++i;
		}
		group.isLast = endIndex == group.get_lastBarIndex();
		return group;
	}
	,get_maxWidth: function() {
		return this.renderer.get_width() - this._pagePadding[0] - this._pagePadding[2];
	}
	,__class__: alphaTab.rendering.layout.PageViewLayout
});
alphaTab.LayoutEngineFactory = function(vertical,layout) {
	this.vertical = false;
	this.createLayout = null;
	this.vertical = vertical;
	this.createLayout = layout;
};
alphaTab.LayoutEngineFactory.__name__ = ["alphaTab","LayoutEngineFactory"];
alphaTab.LayoutEngineFactory.prototype = {
	__class__: alphaTab.LayoutEngineFactory
};
alphaTab.rendering.layout.HorizontalScreenLayout = function(renderer) {
	alphaTab.rendering.layout.ScoreLayout.call(this,renderer);
	this._group = null;
	this._pagePadding = null;
};
alphaTab.rendering.layout.HorizontalScreenLayout.__name__ = ["alphaTab","rendering","layout","HorizontalScreenLayout"];
alphaTab.rendering.layout.HorizontalScreenLayout.__super__ = alphaTab.rendering.layout.ScoreLayout;
alphaTab.rendering.layout.HorizontalScreenLayout.prototype = $extend(alphaTab.rendering.layout.ScoreLayout.prototype,{
	get_name: function() {
		return "HorizontalScreen";
	}
	,get_supportsResize: function() {
		return false;
	}
	,resize: function() {
	}
	,doLayoutAndRender: function() {
		var _gthis = this;
		this._pagePadding = this.renderer.settings.display.padding;
		if(this._pagePadding == null) {
			this._pagePadding = alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding;
		}
		if(this._pagePadding.length == 1) {
			this._pagePadding = new Float32Array([this._pagePadding[0],this._pagePadding[0],this._pagePadding[0],this._pagePadding[0]]);
		} else if(this._pagePadding.length == 2) {
			this._pagePadding = new Float32Array([this._pagePadding[0],this._pagePadding[1],this._pagePadding[0],this._pagePadding[1]]);
		}
		var score = this.renderer.score;
		var canvas = this.renderer.canvas;
		var startIndex = this.renderer.settings.display.startBar;
		--startIndex;
		startIndex = Math.min(score.masterBars.length - 1,Math.max(0,startIndex));
		var currentBarIndex = startIndex;
		var endBarIndex = this.renderer.settings.display.barCount;
		if(endBarIndex <= 0) {
			endBarIndex = score.masterBars.length;
		}
		endBarIndex = startIndex + endBarIndex - 1;
		endBarIndex = Math.min(score.masterBars.length - 1,Math.max(0,endBarIndex));
		this._group = this.createEmptyStaveGroup();
		this._group.isLast = true;
		this._group.x = this._pagePadding[0];
		this._group.y = this._pagePadding[1];
		var countPerPartial = this.renderer.settings.display.barCountPerPartial;
		var this1 = [];
		var partials = this1;
		var currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
		while(currentBarIndex <= endBarIndex) {
			var result = this._group.addBars(this.renderer.tracks,currentBarIndex);
			if(currentPartial.masterBars.length == 0 && result.isLinkedToPrevious && partials.length > 0) {
				var previousPartial = partials[partials.length - 1];
				previousPartial.masterBars.push(score.masterBars[currentBarIndex]);
				previousPartial.width = previousPartial.width + result.width;
			} else {
				currentPartial.masterBars.push(score.masterBars[currentBarIndex]);
				currentPartial.width = currentPartial.width + result.width;
				if(currentPartial.masterBars.length >= countPerPartial) {
					if(partials.length == 0) {
						currentPartial.width = currentPartial.width + (this._group.x + this._group.accoladeSpacing);
					}
					partials.push(currentPartial);
					alphaTab.util.Logger.info(this.get_name(),"Finished partial from bar " + Std.string(currentPartial.masterBars[0].index) + " to " + Std.string(currentPartial.masterBars[currentPartial.masterBars.length - 1].index),null);
					currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
				}
			}
			++currentBarIndex;
		}
		if(currentPartial.masterBars.length > 0) {
			if(partials.length == 0) {
				currentPartial.width = currentPartial.width + (this._group.x + this._group.accoladeSpacing);
			}
			partials.push(currentPartial);
			alphaTab.util.Logger.info(this.get_name(),"Finished partial from bar " + Std.string(currentPartial.masterBars[0].index) + " to " + Std.string(currentPartial.masterBars[currentPartial.masterBars.length - 1].index),null);
		}
		this._group.finalizeGroup();
		this.height = this._group.y + this._group.get_height() + this._pagePadding[3];
		this.width = this._group.x + this._group.width + this._pagePadding[2];
		currentBarIndex = 0;
		var i = 0;
		while(i < partials.length) {
			var partial = partials[i];
			canvas.beginRender(partial.width,this.height);
			canvas.set_color(this.renderer.settings.display.resources.mainGlyphColor);
			canvas.set_textAlign(0);
			var renderX = this._group.getBarX(partial.masterBars[0].index) + this._group.accoladeSpacing;
			if(i == 0) {
				renderX = renderX - (this._group.x + this._group.accoladeSpacing);
			}
			alphaTab.util.Logger.info(this.get_name(),"Rendering partial from bar " + Std.string(partial.masterBars[0].index) + " to " + Std.string(partial.masterBars[partial.masterBars.length - 1].index),null);
			this._group.paintPartial(-renderX,this._group.y,this.renderer.canvas,currentBarIndex,partial.masterBars.length);
			var result1 = canvas.endRender();
			var tmp = this.renderer;
			var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
			_tmp.totalWidth = _gthis.width;
			_tmp.totalHeight = _gthis.height;
			_tmp.width = partial.width;
			_tmp.height = _gthis.height;
			_tmp.renderResult = result1;
			_tmp.firstMasterBarIndex = partial.masterBars[0].index;
			_tmp.lastMasterBarIndex = partial.masterBars[partial.masterBars.length - 1].index;
			tmp.onPartialRenderFinished(_tmp);
			currentBarIndex = currentBarIndex + partial.masterBars.length;
			++i;
		}
	}
	,__class__: alphaTab.rendering.layout.HorizontalScreenLayout
});
alphaTab.rendering.IEffectBarRendererInfo = function() { };
alphaTab.rendering.IEffectBarRendererInfo.__name__ = ["alphaTab","rendering","IEffectBarRendererInfo"];
alphaTab.rendering.IEffectBarRendererInfo.prototype = {
	__class__: alphaTab.rendering.IEffectBarRendererInfo
};
alphaTab.rendering.effects = {};
alphaTab.rendering.effects.TempoEffectInfo = function() {
};
alphaTab.rendering.effects.TempoEffectInfo.__name__ = ["alphaTab","rendering","effects","TempoEffectInfo"];
alphaTab.rendering.effects.TempoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TempoEffectInfo.prototype = {
	get_effectId: function() {
		return "tempo";
	}
	,get_hideOnMultiTrack: function() {
		return true;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 0;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.voice.bar.staff.index == 0 && beat.voice.index == 0 && beat.index == 0) {
			if(beat.voice.bar.get_masterBar().tempoAutomation == null) {
				return beat.voice.bar.index == 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		var tempo;
		if(beat.voice.bar.get_masterBar().tempoAutomation != null) {
			tempo = system.Convert.toInt32_Single(beat.voice.bar.get_masterBar().tempoAutomation.value);
		} else {
			tempo = beat.voice.bar.staff.track.score.tempo;
		}
		return new alphaTab.rendering.glyphs.TempoGlyph(0,0,tempo);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TempoEffectInfo
};
alphaTab.rendering.effects.TripletFeelEffectInfo = function() {
};
alphaTab.rendering.effects.TripletFeelEffectInfo.__name__ = ["alphaTab","rendering","effects","TripletFeelEffectInfo"];
alphaTab.rendering.effects.TripletFeelEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TripletFeelEffectInfo.prototype = {
	get_effectId: function() {
		return "triplet-feel";
	}
	,get_hideOnMultiTrack: function() {
		return true;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 0;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.index == 0) {
			if(!(beat.voice.bar.get_masterBar().index == 0 && beat.voice.bar.get_masterBar().tripletFeel != 0)) {
				if(beat.voice.bar.get_masterBar().index > 0) {
					return beat.voice.bar.get_masterBar().tripletFeel != beat.voice.bar.get_masterBar().previousMasterBar.tripletFeel;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TripletFeelGlyph(beat.voice.bar.get_masterBar().tripletFeel);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TripletFeelEffectInfo
};
alphaTab.rendering.effects.MarkerEffectInfo = function() {
};
alphaTab.rendering.effects.MarkerEffectInfo.__name__ = ["alphaTab","rendering","effects","MarkerEffectInfo"];
alphaTab.rendering.effects.MarkerEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.MarkerEffectInfo.prototype = {
	get_effectId: function() {
		return "marker";
	}
	,get_hideOnMultiTrack: function() {
		return true;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 0;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.voice.bar.staff.index == 0 && beat.voice.index == 0 && beat.index == 0) {
			return beat.voice.bar.get_masterBar().get_isSectionStart();
		} else {
			return false;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		var tmp;
		var s = beat.voice.bar.get_masterBar().section.marker;
		if(s == null || s.length == 0) {
			tmp = beat.voice.bar.get_masterBar().section.text;
		} else {
			tmp = "[" + beat.voice.bar.get_masterBar().section.marker + "] " + beat.voice.bar.get_masterBar().section.text;
		}
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,tmp,renderer.get_resources().markerFont,0);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.MarkerEffectInfo
};
alphaTab.rendering.effects.TextEffectInfo = function() {
};
alphaTab.rendering.effects.TextEffectInfo.__name__ = ["alphaTab","rendering","effects","TextEffectInfo"];
alphaTab.rendering.effects.TextEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TextEffectInfo.prototype = {
	get_effectId: function() {
		return "text";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		var s = beat.text;
		return !(s == null || StringTools.trim(s).length == 0);
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,beat.text,renderer.get_resources().effectFont,0);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TextEffectInfo
};
alphaTab.rendering.effects.ChordsEffectInfo = function() {
};
alphaTab.rendering.effects.ChordsEffectInfo.__name__ = ["alphaTab","rendering","effects","ChordsEffectInfo"];
alphaTab.rendering.effects.ChordsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.ChordsEffectInfo.prototype = {
	get_effectId: function() {
		return "chords";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.get_hasChord();
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,beat.get_chord().name,renderer.get_resources().effectFont,1);
	}
	,canExpand: function(from,to) {
		return false;
	}
	,__class__: alphaTab.rendering.effects.ChordsEffectInfo
};
alphaTab.rendering.effects.FermataEffectInfo = function() {
};
alphaTab.rendering.effects.FermataEffectInfo.__name__ = ["alphaTab","rendering","effects","FermataEffectInfo"];
alphaTab.rendering.effects.FermataEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.FermataEffectInfo.prototype = {
	get_effectId: function() {
		return "fermata";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.fermata != null;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.FermataGlyph(0,0,beat.fermata.type);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.FermataEffectInfo
};
alphaTab.rendering.effects.WhammyBarEffectInfo = function() {
};
alphaTab.rendering.effects.WhammyBarEffectInfo.__name__ = ["alphaTab","rendering","effects","WhammyBarEffectInfo"];
alphaTab.rendering.effects.WhammyBarEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.WhammyBarEffectInfo.prototype = {
	get_effectId: function() {
		return "whammy";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 4;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.get_hasWhammyBar();
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("w/bar");
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.WhammyBarEffectInfo
};
alphaTab.rendering.effects.NoteEffectInfoBase = function() {
	this.LastCreateInfo = null;
};
alphaTab.rendering.effects.NoteEffectInfoBase.__name__ = ["alphaTab","rendering","effects","NoteEffectInfoBase"];
alphaTab.rendering.effects.NoteEffectInfoBase.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.NoteEffectInfoBase.prototype = {
	shouldCreateGlyph: function(settings,beat) {
		var this1 = [];
		this.LastCreateInfo = this1;
		var i = 0;
		var j = beat.notes.length;
		while(i < j) {
			var n = beat.notes[i];
			if(this.shouldCreateGlyphForNote(n)) {
				this.LastCreateInfo.push(n);
			}
			++i;
		}
		return this.LastCreateInfo.length > 0;
	}
	,shouldCreateGlyphForNote: function(note) {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_effectId: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,createNewGlyph: function(renderer,beat) {
		throw new js._Boot.HaxeError("abstract");
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.NoteEffectInfoBase
};
alphaTab.rendering.effects.TrillEffectInfo = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.TrillEffectInfo.__name__ = ["alphaTab","rendering","effects","TrillEffectInfo"];
alphaTab.rendering.effects.TrillEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.TrillEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return "trill";
	}
	,shouldCreateGlyphForNote: function(note) {
		return note.get_isTrill();
	}
	,get_sizingMode: function() {
		return 1;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TrillGlyph(0,0);
	}
	,__class__: alphaTab.rendering.effects.TrillEffectInfo
});
alphaTab.rendering.effects.OttaviaEffectInfo = function(aboveStaff) {
	this._aboveStaff = false;
	this._aboveStaff = aboveStaff;
};
alphaTab.rendering.effects.OttaviaEffectInfo.__name__ = ["alphaTab","rendering","effects","OttaviaEffectInfo"];
alphaTab.rendering.effects.OttaviaEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.OttaviaEffectInfo.prototype = {
	get_effectId: function() {
		return "ottavia-" + (this._aboveStaff ? "above" : "below");
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 4;
	}
	,shouldCreateGlyph: function(settings,beat) {
		var _g = beat.ottava;
		switch(_g) {
		case 0:
			return this._aboveStaff;
		case 1:
			return this._aboveStaff;
		case 3:
			return !this._aboveStaff;
		case 4:
			return !this._aboveStaff;
		default:
		}
		return false;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.OttavaGlyph(beat.ottava,this._aboveStaff);
	}
	,canExpand: function(from,to) {
		return from.ottava == to.ottava;
	}
	,__class__: alphaTab.rendering.effects.OttaviaEffectInfo
};
alphaTab.rendering.effects.WideBeatVibratoEffectInfo = function() {
};
alphaTab.rendering.effects.WideBeatVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","WideBeatVibratoEffectInfo"];
alphaTab.rendering.effects.WideBeatVibratoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.WideBeatVibratoEffectInfo.prototype = {
	get_effectId: function() {
		return "wide-beat-vibrato";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 5;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.vibrato == 2;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.BeatVibratoGlyph(2);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.WideBeatVibratoEffectInfo
};
alphaTab.rendering.effects.SlightBeatVibratoEffectInfo = function() {
};
alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","SlightBeatVibratoEffectInfo"];
alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.SlightBeatVibratoEffectInfo.prototype = {
	get_effectId: function() {
		return "slight-beat-vibrato";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 5;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.vibrato == 1;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.BeatVibratoGlyph(1);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.SlightBeatVibratoEffectInfo
};
alphaTab.rendering.effects.WideNoteVibratoEffectInfo = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.WideNoteVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","WideNoteVibratoEffectInfo"];
alphaTab.rendering.effects.WideNoteVibratoEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.WideNoteVibratoEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return "wide-note-vibrato";
	}
	,shouldCreateGlyphForNote: function(note) {
		if(!(note.vibrato == 2)) {
			if(note.isTieDestination) {
				return note.tieOrigin.vibrato == 2;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_sizingMode: function() {
		return 5;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,2,1.2);
	}
	,__class__: alphaTab.rendering.effects.WideNoteVibratoEffectInfo
});
alphaTab.rendering.effects.SlightNoteVibratoEffectInfo = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","SlightNoteVibratoEffectInfo"];
alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.SlightNoteVibratoEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return "slight-note-vibrato";
	}
	,shouldCreateGlyphForNote: function(note) {
		if(!(note.vibrato == 1)) {
			if(note.isTieDestination) {
				return note.tieOrigin.vibrato == 1;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_sizingMode: function() {
		return 5;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
	}
	,__class__: alphaTab.rendering.effects.SlightNoteVibratoEffectInfo
});
alphaTab.rendering.effects.AlternateEndingsEffectInfo = function() {
};
alphaTab.rendering.effects.AlternateEndingsEffectInfo.__name__ = ["alphaTab","rendering","effects","AlternateEndingsEffectInfo"];
alphaTab.rendering.effects.AlternateEndingsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.AlternateEndingsEffectInfo.prototype = {
	get_effectId: function() {
		return "alternate-feel";
	}
	,get_hideOnMultiTrack: function() {
		return true;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 6;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.index == 0) {
			return beat.voice.bar.get_masterBar().alternateEndings != 0;
		} else {
			return false;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.AlternateEndingsGlyph(0,0,beat.voice.bar.get_masterBar().alternateEndings);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.AlternateEndingsEffectInfo
};
alphaTab.rendering.BarRendererFactory = function() {
	this.isInAccolade = false;
	this.isRelevantForBoundsLookup = false;
	this.hideOnMultiTrack = false;
	this.hideOnPercussionTrack = false;
	this.isInAccolade = true;
	this.isRelevantForBoundsLookup = true;
	this.hideOnPercussionTrack = false;
	this.hideOnMultiTrack = false;
};
alphaTab.rendering.BarRendererFactory.__name__ = ["alphaTab","rendering","BarRendererFactory"];
alphaTab.rendering.BarRendererFactory.prototype = {
	get_staffId: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,canCreate: function(track,staff) {
		if(!(!this.hideOnPercussionTrack)) {
			return !staff.isPercussion;
		} else {
			return true;
		}
	}
	,create: function(renderer,bar) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.rendering.BarRendererFactory
};
alphaTab.rendering.EffectBarRendererFactory = function(staffId,infos) {
	alphaTab.rendering.BarRendererFactory.call(this);
	this._infos = null;
	this._staffId = null;
	this._infos = infos;
	this._staffId = staffId;
	this.isInAccolade = false;
	this.isRelevantForBoundsLookup = false;
};
alphaTab.rendering.EffectBarRendererFactory.__name__ = ["alphaTab","rendering","EffectBarRendererFactory"];
alphaTab.rendering.EffectBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.EffectBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_staffId: function() {
		return this._staffId;
	}
	,create: function(renderer,bar) {
		return new alphaTab.rendering.EffectBarRenderer(renderer,bar,this._infos);
	}
	,__class__: alphaTab.rendering.EffectBarRendererFactory
});
alphaTab.rendering.ScoreBarRendererFactory = function() {
	alphaTab.rendering.BarRendererFactory.call(this);
};
alphaTab.rendering.ScoreBarRendererFactory.__name__ = ["alphaTab","rendering","ScoreBarRendererFactory"];
alphaTab.rendering.ScoreBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.ScoreBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_staffId: function() {
		return "score";
	}
	,create: function(renderer,bar) {
		return new alphaTab.rendering.ScoreBarRenderer(renderer,bar);
	}
	,__class__: alphaTab.rendering.ScoreBarRendererFactory
});
alphaTab.rendering.effects.CrescendoEffectInfo = function() {
};
alphaTab.rendering.effects.CrescendoEffectInfo.__name__ = ["alphaTab","rendering","effects","CrescendoEffectInfo"];
alphaTab.rendering.effects.CrescendoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.CrescendoEffectInfo.prototype = {
	get_effectId: function() {
		return "crescendo";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 5;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.crescendo != 0;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.CrescendoGlyph(0,0,beat.crescendo);
	}
	,canExpand: function(from,to) {
		return from.crescendo == to.crescendo;
	}
	,__class__: alphaTab.rendering.effects.CrescendoEffectInfo
};
alphaTab.rendering.effects.DynamicsEffectInfo = function() {
};
alphaTab.rendering.effects.DynamicsEffectInfo.__name__ = ["alphaTab","rendering","effects","DynamicsEffectInfo"];
alphaTab.rendering.effects.DynamicsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.DynamicsEffectInfo.prototype = {
	get_effectId: function() {
		return "dynamics";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return this.internalShouldCreateGlyph(beat);
	}
	,internalShouldCreateGlyph: function(beat) {
		if(beat.voice.bar.staff.track.score.stylesheet.hideDynamics || beat.isEmpty || beat.voice.isEmpty) {
			return false;
		}
		var show = beat.voice.index == 0 && beat.index == 0 && beat.voice.bar.index == 0 || beat.previousBeat != null && beat.dynamics != beat.previousBeat.dynamics;
		if(show && beat.voice.index > 0) {
			var voice = $iterator(beat.voice.bar.voices)();
			while(voice.hasNext()) {
				var voice1 = voice.next();
				if(voice1.index < beat.voice.index) {
					var beatAtSamePos = voice1.getBeatAtDisplayStart(beat.displayStart);
					if(beatAtSamePos != null && beat.dynamics == beatAtSamePos.dynamics && this.internalShouldCreateGlyph(beatAtSamePos)) {
						show = false;
					}
				}
			}
		}
		return show;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.DynamicsGlyph(0,0,beat.dynamics);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.DynamicsEffectInfo
};
alphaTab.rendering.effects.LyricsEffectInfo = function() {
};
alphaTab.rendering.effects.LyricsEffectInfo.__name__ = ["alphaTab","rendering","effects","LyricsEffectInfo"];
alphaTab.rendering.effects.LyricsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.LyricsEffectInfo.prototype = {
	get_effectId: function() {
		return "lyrics";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.lyrics != null;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LyricsGlyph(0,0,beat.lyrics,renderer.get_resources().effectFont,1);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.LyricsEffectInfo
};
alphaTab.rendering.effects.TapEffectInfo = function() {
};
alphaTab.rendering.effects.TapEffectInfo.__name__ = ["alphaTab","rendering","effects","TapEffectInfo"];
alphaTab.rendering.effects.TapEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TapEffectInfo.prototype = {
	get_effectId: function() {
		return "tap";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(!(beat.slap || beat.pop)) {
			return beat.tap;
		} else {
			return true;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		var res = renderer.get_resources();
		if(beat.slap) {
			return new alphaTab.rendering.glyphs.TextGlyph(0,0,"S",res.effectFont,0);
		}
		if(beat.pop) {
			return new alphaTab.rendering.glyphs.TextGlyph(0,0,"P",res.effectFont,0);
		}
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,"T",res.effectFont,0);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TapEffectInfo
};
alphaTab.rendering.effects.FadeInEffectInfo = function() {
};
alphaTab.rendering.effects.FadeInEffectInfo.__name__ = ["alphaTab","rendering","effects","FadeInEffectInfo"];
alphaTab.rendering.effects.FadeInEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.FadeInEffectInfo.prototype = {
	get_effectId: function() {
		return "fade-in";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.fadeIn;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.FadeInGlyph(0,0);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.FadeInEffectInfo
};
alphaTab.rendering.effects.HarmonicsEffectInfo = function(harmonicType) {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
	this._harmonicType = 0;
	this._beat = null;
	this._effectId = null;
	this._harmonicType = harmonicType;
	switch(harmonicType) {
	case 1:
		this._effectId = "harmonics-natural";
		break;
	case 2:
		this._effectId = "harmonics-artificial";
		break;
	case 3:
		this._effectId = "harmonics-pinch";
		break;
	case 4:
		this._effectId = "harmonics-tap";
		break;
	case 5:
		this._effectId = "harmonics-semi";
		break;
	case 6:
		this._effectId = "harmonics-feedback";
		break;
	default:
	}
};
alphaTab.rendering.effects.HarmonicsEffectInfo.__name__ = ["alphaTab","rendering","effects","HarmonicsEffectInfo"];
alphaTab.rendering.effects.HarmonicsEffectInfo.harmonicToString = function(type) {
	switch(type) {
	case 1:
		return "N.H.";
	case 2:
		return "A.H.";
	case 3:
		return "P.H.";
	case 4:
		return "T.H.";
	case 5:
		return "S.H.";
	case 6:
		return "Fdbk.";
	default:
	}
	return "";
};
alphaTab.rendering.effects.HarmonicsEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.HarmonicsEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return this._effectId;
	}
	,shouldCreateGlyphForNote: function(note) {
		if(!note.get_isHarmonic() || note.harmonicType != this._harmonicType) {
			return false;
		}
		if(note.beat != this._beat) {
			this._beat = note.beat;
		}
		return true;
	}
	,get_sizingMode: function() {
		return 4;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph(alphaTab.rendering.effects.HarmonicsEffectInfo.harmonicToString(this._harmonicType));
	}
	,__class__: alphaTab.rendering.effects.HarmonicsEffectInfo
});
alphaTab.rendering.effects.LetRingEffectInfo = function() {
};
alphaTab.rendering.effects.LetRingEffectInfo.__name__ = ["alphaTab","rendering","effects","LetRingEffectInfo"];
alphaTab.rendering.effects.LetRingEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.LetRingEffectInfo.prototype = {
	get_effectId: function() {
		return "let-ring";
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.isLetRing;
	}
	,get_sizingMode: function() {
		return 4;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("LetRing");
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.LetRingEffectInfo
};
alphaTab.rendering.effects.CapoEffectInfo = function() {
};
alphaTab.rendering.effects.CapoEffectInfo.__name__ = ["alphaTab","rendering","effects","CapoEffectInfo"];
alphaTab.rendering.effects.CapoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.CapoEffectInfo.prototype = {
	get_effectId: function() {
		return "capo";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return false;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.index == 0 && beat.voice.bar.index == 0) {
			return beat.voice.bar.staff.capo != 0;
		} else {
			return false;
		}
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,"Capo. fret " + Std.string(beat.voice.bar.staff.capo),renderer.get_resources().effectFont,0);
	}
	,canExpand: function(from,to) {
		return false;
	}
	,__class__: alphaTab.rendering.effects.CapoEffectInfo
};
alphaTab.rendering.effects.FingeringEffectInfo = function() {
};
alphaTab.rendering.effects.FingeringEffectInfo.__name__ = ["alphaTab","rendering","effects","FingeringEffectInfo"];
alphaTab.rendering.effects.FingeringEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.FingeringEffectInfo.prototype = {
	get_effectId: function() {
		return "fingering";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		if(beat.voice.index != 0 || beat.get_isRest() || settings.notation.fingeringMode != 2 || settings.notation.fingeringMode != 3) {
			return false;
		}
		if(beat.notes.length != 1) {
			return false;
		}
		return beat.notes[0].isFingering;
	}
	,createNewGlyph: function(renderer,beat) {
		var finger = -2;
		var isLeft = false;
		var note = beat.notes[0];
		if(note.leftHandFinger != -2) {
			finger = note.leftHandFinger;
			isLeft = true;
		} else if(note.rightHandFinger != -2) {
			finger = note.rightHandFinger;
		}
		var s = alphaTab.model.ModelUtils.fingerToString(renderer.get_settings(),beat,finger,isLeft);
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,s,renderer.get_resources().fingeringFont,0);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.FingeringEffectInfo
};
alphaTab.rendering.effects.PalmMuteEffectInfo = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.PalmMuteEffectInfo.__name__ = ["alphaTab","rendering","effects","PalmMuteEffectInfo"];
alphaTab.rendering.effects.PalmMuteEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.PalmMuteEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return "palm-mute";
	}
	,shouldCreateGlyphForNote: function(note) {
		return note.isPalmMute;
	}
	,get_sizingMode: function() {
		return 4;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("P.M.");
	}
	,__class__: alphaTab.rendering.effects.PalmMuteEffectInfo
});
alphaTab.rendering.effects.PickStrokeEffectInfo = function() {
};
alphaTab.rendering.effects.PickStrokeEffectInfo.__name__ = ["alphaTab","rendering","effects","PickStrokeEffectInfo"];
alphaTab.rendering.effects.PickStrokeEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.PickStrokeEffectInfo.prototype = {
	get_effectId: function() {
		return "pick-stroke";
	}
	,get_hideOnMultiTrack: function() {
		return false;
	}
	,get_canShareBand: function() {
		return true;
	}
	,get_sizingMode: function() {
		return 1;
	}
	,shouldCreateGlyph: function(settings,beat) {
		return beat.pickStroke != 0;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.PickStrokeGlyph(0,0,beat.pickStroke);
	}
	,canExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.PickStrokeEffectInfo
};
alphaTab.rendering.effects.PickSlideEffectInfo = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.PickSlideEffectInfo.__name__ = ["alphaTab","rendering","effects","PickSlideEffectInfo"];
alphaTab.rendering.effects.PickSlideEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.PickSlideEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_effectId: function() {
		return "pick-slide";
	}
	,shouldCreateGlyphForNote: function(note) {
		if(!(note.slideOutType == 5)) {
			return note.slideOutType == 6;
		} else {
			return true;
		}
	}
	,get_sizingMode: function() {
		return 4;
	}
	,createNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("P.S.");
	}
	,__class__: alphaTab.rendering.effects.PickSlideEffectInfo
});
alphaTab.rendering.TabBarRendererFactory = function(showTimeSignature,showRests,showTiedNotes) {
	alphaTab.rendering.BarRendererFactory.call(this);
	this._showTimeSignature = false;
	this._showRests = false;
	this._showTiedNotes = false;
	this._showTimeSignature = showTimeSignature;
	this._showRests = showRests;
	this._showTiedNotes = showTiedNotes;
	this.hideOnPercussionTrack = true;
};
alphaTab.rendering.TabBarRendererFactory.__name__ = ["alphaTab","rendering","TabBarRendererFactory"];
alphaTab.rendering.TabBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.TabBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_staffId: function() {
		return "tab";
	}
	,canCreate: function(track,staff) {
		if(staff.tuning.length > 0) {
			return alphaTab.rendering.BarRendererFactory.prototype.canCreate.call(this,track,staff);
		} else {
			return false;
		}
	}
	,create: function(renderer,bar) {
		var tabBarRenderer = new alphaTab.rendering.TabBarRenderer(renderer,bar);
		tabBarRenderer.showRests = this._showRests;
		tabBarRenderer.showTimeSignature = this._showTimeSignature;
		tabBarRenderer.showTiedNotes = this._showTiedNotes;
		return tabBarRenderer;
	}
	,__class__: alphaTab.rendering.TabBarRendererFactory
});
alphaTab.Environment = function() {
};
alphaTab.Environment.__name__ = ["alphaTab","Environment"];
alphaTab.Environment.platformInit = function() {
	alphaTab.Environment.RenderEngines["svg"] = new alphaTab.RenderEngineFactory(true,function() {
		return new alphaTab.platform.svg.CssFontSvgCanvas();
	});
	alphaTab.Environment.RenderEngines["html5"] = new alphaTab.RenderEngineFactory(false,function() {
		return new alphaTab.platform.javaScript.Html5Canvas();
	});
	alphaTab.Environment.RenderEngines["default"] = alphaTab.Environment.RenderEngines["svg"];
	alphaTab.Environment.registerJQueryPlugin();
	Math.log2 = Math.log2 || function(x) { return Math.log(x) * Math.LOG2E; };
	Int32Array.prototype.slice = Int32Array.prototype.slice || function(begin, end) { return new Int32Array(Array.prototype.slice.call(this, begin, end)) };
	if($global.document) {
		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		var document = window.document;
		var this1 = "";
		var vbAjaxLoader = this1;
		vbAjaxLoader = vbAjaxLoader + ("Function VbAjaxLoader(method, fileName)" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Dim xhr" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Set xhr = CreateObject(\"Microsoft.XMLHTTP\")" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.Open method, fileName, False" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.setRequestHeader \"Accept-Charset\", \"x-user-defined\"" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.send" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Dim byteArray()" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    if xhr.Status = 200 Then" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Dim byteString" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Dim i" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        byteString=xhr.responseBody" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        ReDim byteArray(LenB(byteString))" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        For i = 1 To LenB(byteString)" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("            byteArray(i-1) = AscB(MidB(byteString, i, 1))" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Next" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    End If" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    VbAjaxLoader=byteArray" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("End Function" + "\r\n");
		var vbAjaxLoaderScript = document.createElement("script");
		vbAjaxLoaderScript.setAttribute("type","text/vbscript");
		var inlineScript = document.createTextNode(vbAjaxLoader);
		vbAjaxLoaderScript.appendChild(inlineScript);
		document.addEventListener("DOMContentLoaded",function() {
			document.body.appendChild(vbAjaxLoaderScript);
		},false);
		var scriptElement = document.currentScript;
		if(!(!(!scriptElement))) {
			try {
				var error = new Error();
				var stack = error.stack;
				if(!(!(!stack))) {
					throw error;
				}
				alphaTab.Environment.scriptFile = alphaTab.Environment.scriptFileFromStack(stack);
			} catch( e ) {
				if (e instanceof js._Boot.HaxeError) e = e.val;
				if( js.Boot.__instanceof(e,Error) ) {
					var stack1 = e.stack;
					if(!(!(!stack1))) {
						scriptElement = document.querySelector("script[data-alphatab]");
					} else {
						alphaTab.Environment.scriptFile = alphaTab.Environment.scriptFileFromStack(stack1);
					}
				} else throw(e);
			}
		}
		var s = alphaTab.Environment.scriptFile;
		if(s == null || s.length == 0) {
			if(!(!(!scriptElement))) {
				alphaTab.util.Logger.warning("Environment","Could not automatically find alphaTab script file for worker, please add the data-alphatab attribute to the script tag that includes alphaTab or provide it when initializing alphaTab",null);
			} else {
				alphaTab.Environment.scriptFile = scriptElement.src;
			}
		}
		alphaTab.Environment.bravuraFontChecker = new alphaTab.utils.FontLoadingChecker("alphaTab","&#" + Std.string(57424) + ";");
		alphaTab.Environment.bravuraFontChecker.checkForFontAvailability();
	} else {
		var isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
		if(isWebWorker) {
			alphaTab.platform.javaScript.AlphaTabWebWorker.init();
			alphaTab.platform.javaScript.AlphaSynthWebWorker.init();
		}
	}
};
alphaTab.Environment.registerJQueryPlugin = function() {
	var json = $global;
	if((json && "jQuery" in json)) {
		var jquery = window["jQuery"];
		var api = new alphaTab.platform.javaScript.JQueryAlphaTab();
		jquery.fn.alphaTab = function(method) {
			var _this = this;
			if(_this.length == 1) {
				var _this1 = _this[0];
				var tmp = Array.prototype.slice.call(arguments, 1);
				return api.exec(_this1,method,tmp);
			}
			return this.each(function() {
				var tmp1 = Array.prototype.slice.call(arguments, 1);
				api.exec(this,method,tmp1);
			});
		};
		jquery.alphaTab = { restore : alphaTab.platform.javaScript.JQueryAlphaTab.Restore};
		jquery.fn.alphaTab.fn = api;
	}
};
alphaTab.Environment.scriptFileFromStack = function(stack) {
	var matches = stack.match("(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
	if(!(!(!matches))) {
		matches = stack.match("^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
		if(!(!(!matches))) {
			matches = stack.match("\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
			if(!(!(!matches))) {
				return null;
			}
		}
	}
	return matches[1];
};
alphaTab.Environment.createScoreRenderer = function(settings) {
	return new alphaTab.rendering.ScoreRenderer(settings);
};
alphaTab.Environment.getRenderEngineFactory = function(settings) {
	if(settings.core.engine == null || !alphaTab.Environment.RenderEngines.hasOwnProperty(settings.core.engine)) {
		return alphaTab.Environment.RenderEngines["default"];
	}
	return alphaTab.Environment.RenderEngines[settings.core.engine];
};
alphaTab.Environment.getLayoutEngineFactory = function(settings) {
	return alphaTab.Environment.LayoutEngines[settings.display.layoutMode];
};
alphaTab.Environment.init = function() {
	var this1 = {}
	alphaTab.Environment.RenderEngines = this1;
	var this2 = {}
	alphaTab.Environment.LayoutEngines = this2;
	var this3 = {}
	alphaTab.Environment.StaveProfiles = this3;
	alphaTab.Environment.platformInit();
	alphaTab.Environment.LayoutEngines[0] = new alphaTab.LayoutEngineFactory(true,function(r) {
		return new alphaTab.rendering.layout.PageViewLayout(r);
	});
	alphaTab.Environment.LayoutEngines[1] = new alphaTab.LayoutEngineFactory(false,function(r1) {
		return new alphaTab.rendering.layout.HorizontalScreenLayout(r1);
	});
	alphaTab.Environment.StaveProfiles[1] = [new alphaTab.rendering.EffectBarRendererFactory("score-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.FermataEffectInfo(),new alphaTab.rendering.effects.WhammyBarEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.OttaviaEffectInfo(true),new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.ScoreBarRendererFactory(),new alphaTab.rendering.EffectBarRendererFactory("tab-effects",[new alphaTab.rendering.effects.CrescendoEffectInfo(),new alphaTab.rendering.effects.OttaviaEffectInfo(false),new alphaTab.rendering.effects.DynamicsEffectInfo(),new alphaTab.rendering.effects.LyricsEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),new alphaTab.rendering.effects.TapEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.HarmonicsEffectInfo(1),new alphaTab.rendering.effects.HarmonicsEffectInfo(2),new alphaTab.rendering.effects.HarmonicsEffectInfo(3),new alphaTab.rendering.effects.HarmonicsEffectInfo(4),new alphaTab.rendering.effects.HarmonicsEffectInfo(5),new alphaTab.rendering.effects.HarmonicsEffectInfo(6),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.CapoEffectInfo(),new alphaTab.rendering.effects.FingeringEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.PickSlideEffectInfo()]),new alphaTab.rendering.TabBarRendererFactory(false,false,false)];
	alphaTab.Environment.StaveProfiles[2] = [new alphaTab.rendering.EffectBarRendererFactory("score-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.FermataEffectInfo(),new alphaTab.rendering.effects.WhammyBarEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.OttaviaEffectInfo(true),new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.PickSlideEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.ScoreBarRendererFactory(),new alphaTab.rendering.EffectBarRendererFactory("score-bottom-effects",[new alphaTab.rendering.effects.CrescendoEffectInfo(),new alphaTab.rendering.effects.OttaviaEffectInfo(false),new alphaTab.rendering.effects.DynamicsEffectInfo(),new alphaTab.rendering.effects.LyricsEffectInfo()])];
	var tabEffectInfos = [new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.FermataEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.WideBeatVibratoEffectInfo(),new alphaTab.rendering.effects.SlightBeatVibratoEffectInfo(),new alphaTab.rendering.effects.WideNoteVibratoEffectInfo(),new alphaTab.rendering.effects.SlightNoteVibratoEffectInfo(),new alphaTab.rendering.effects.TapEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.HarmonicsEffectInfo(2),new alphaTab.rendering.effects.HarmonicsEffectInfo(3),new alphaTab.rendering.effects.HarmonicsEffectInfo(4),new alphaTab.rendering.effects.HarmonicsEffectInfo(5),new alphaTab.rendering.effects.HarmonicsEffectInfo(6),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.CapoEffectInfo(),new alphaTab.rendering.effects.FingeringEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.PickSlideEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()];
	alphaTab.Environment.StaveProfiles[3] = [new alphaTab.rendering.EffectBarRendererFactory("tab-effects",tabEffectInfos),new alphaTab.rendering.TabBarRendererFactory(true,true,true),new alphaTab.rendering.EffectBarRendererFactory("tab-bottom-effects",[new alphaTab.rendering.effects.LyricsEffectInfo()])];
	alphaTab.Environment.StaveProfiles[4] = [new alphaTab.rendering.EffectBarRendererFactory("tab-effects",tabEffectInfos),new alphaTab.rendering.TabBarRendererFactory(false,false,false),new alphaTab.rendering.EffectBarRendererFactory("tab-bottom-effects",[new alphaTab.rendering.effects.LyricsEffectInfo()])];
};
alphaTab.Environment.prototype = {
	__class__: alphaTab.Environment
};
alphaTab._FingeringMode = {};
alphaTab._FingeringMode.FingeringMode_Impl_ = $hx_exports["alphaTab"]["_FingeringMode"]["FingeringMode_Impl_"] = {};
alphaTab._FingeringMode.FingeringMode_Impl_.__name__ = ["alphaTab","_FingeringMode","FingeringMode_Impl_"];
alphaTab._FingeringMode.FingeringMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._FingeringMode.FingeringMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._FingeringMode.FingeringMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._FingeringMode.FingeringMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._FingeringMode.FingeringMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._FingeringMode.FingeringMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._FingeringMode.FingeringMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "ScoreDefault";
	case 1:
		return "ScoreForcePiano";
	case 2:
		return "SingleNoteEffectBand";
	case 3:
		return "SingleNoteEffectBandForcePiano";
	}
	return "";
};
alphaTab._FingeringMode.FingeringMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "scoredefault":
		return 0;
	case "scoreforcepiano":
		return 1;
	case "singlenoteeffectband":
		return 2;
	case "singlenoteeffectbandforcepiano":
		return 3;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._FingeringMode.FingeringMode_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._FingeringMode.FingeringMode_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._FingeringMode.FingeringMode_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.ImporterSettings = $hx_exports["alphaTab"]["ImporterSettings"] = function() {
	this.mergePartGroupsInMusicXml = false;
	this.encoding = "utf-8";
};
alphaTab.ImporterSettings.__name__ = ["alphaTab","ImporterSettings"];
alphaTab.ImporterSettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.ImporterSettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.ImporterSettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.ImporterSettings.prototype = {
	fillToJson: function(json) {
		json.encoding = this.encoding;
		json.mergePartGroupsInMusicXml = this.mergePartGroupsInMusicXml;
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "encoding":
			this.encoding = value;
			return true;
		case "mergepartgroupsinmusicxml":
			this.mergePartGroupsInMusicXml = value;
			return true;
		default:
		}
		return false;
	}
	,__class__: alphaTab.ImporterSettings
};
alphaTab._LayoutMode = {};
alphaTab._LayoutMode.LayoutMode_Impl_ = $hx_exports["alphaTab"]["_LayoutMode"]["LayoutMode_Impl_"] = {};
alphaTab._LayoutMode.LayoutMode_Impl_.__name__ = ["alphaTab","_LayoutMode","LayoutMode_Impl_"];
alphaTab._LayoutMode.LayoutMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._LayoutMode.LayoutMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._LayoutMode.LayoutMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._LayoutMode.LayoutMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._LayoutMode.LayoutMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._LayoutMode.LayoutMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._LayoutMode.LayoutMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Page";
	case 1:
		return "Horizontal";
	}
	return "";
};
alphaTab._LayoutMode.LayoutMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "horizontal":
		return 1;
	case "page":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._LayoutMode.LayoutMode_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._LayoutMode.LayoutMode_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._LayoutMode.LayoutMode_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.Main = function() { };
alphaTab.Main.__name__ = ["alphaTab","Main"];
alphaTab.Main.main = function() {
};
alphaTab._NotationMode = {};
alphaTab._NotationMode.NotationMode_Impl_ = $hx_exports["alphaTab"]["_NotationMode"]["NotationMode_Impl_"] = {};
alphaTab._NotationMode.NotationMode_Impl_.__name__ = ["alphaTab","_NotationMode","NotationMode_Impl_"];
alphaTab._NotationMode.NotationMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._NotationMode.NotationMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._NotationMode.NotationMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._NotationMode.NotationMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._NotationMode.NotationMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._NotationMode.NotationMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._NotationMode.NotationMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "GuitarPro";
	case 1:
		return "SongBook";
	}
	return "";
};
alphaTab._NotationMode.NotationMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "guitarpro":
		return 0;
	case "songbook":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._NotationMode.NotationMode_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._NotationMode.NotationMode_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._NotationMode.NotationMode_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.NotationSettings = $hx_exports["alphaTab"]["NotationSettings"] = function() {
	this.slurHeight = 7.0;
	this.extendLineEffectsToBeatEnd = false;
	this.showZeroOnDiveWhammy = false;
	this.showTabNoteOnTiedBend = true;
	this.showParenthesisForTiedBends = true;
	this.extendBendArrowsOnTiedNotes = true;
	this.smallGraceTabNotes = true;
	var this1 = new Int32Array(0);
	this.displayTranspositionPitches = this1;
	var this11 = new Int32Array(0);
	this.transpositionPitches = this11;
	this.rhythmHeight = 15;
	this.rhythmMode = 0;
	this.hideChordDiagrams = false;
	this.hideTrackNames = false;
	this.hideTuning = false;
	this.hideInfo = false;
	this.fingeringMode = 0;
	this.notationMode = 0;
};
alphaTab.NotationSettings.__name__ = ["alphaTab","NotationSettings"];
alphaTab.NotationSettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.NotationSettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.NotationSettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.NotationSettings.prototype = {
	fillToJson: function(json) {
		json.notationMode = alphaTab._NotationMode.NotationMode_Impl_.toJson(this.notationMode);
		json.fingeringMode = alphaTab._FingeringMode.FingeringMode_Impl_.toJson(this.fingeringMode);
		json.hideInfo = this.hideInfo;
		json.hideTuning = this.hideTuning;
		json.hideTrackNames = this.hideTrackNames;
		json.hideChordDiagrams = this.hideChordDiagrams;
		json.rhythmMode = alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toJson(this.rhythmMode);
		json.rhythmHeight = this.rhythmHeight;
		json.transpositionPitches = this.transpositionPitches == null ? null : this.transpositionPitches.slice();
		json.displayTranspositionPitches = this.displayTranspositionPitches == null ? null : this.displayTranspositionPitches.slice();
		json.smallGraceTabNotes = this.smallGraceTabNotes;
		json.extendBendArrowsOnTiedNotes = this.extendBendArrowsOnTiedNotes;
		json.showParenthesisForTiedBends = this.showParenthesisForTiedBends;
		json.showTabNoteOnTiedBend = this.showTabNoteOnTiedBend;
		json.showZeroOnDiveWhammy = this.showZeroOnDiveWhammy;
		json.extendLineEffectsToBeatEnd = this.extendLineEffectsToBeatEnd;
		json.slurHeight = this.slurHeight;
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "displaytranspositionpitches":
			this.displayTranspositionPitches = value == null ? null : value.slice();
			return true;
		case "extendbendarrowsontiednotes":
			this.extendBendArrowsOnTiedNotes = value;
			return true;
		case "extendlineeffectstobeatend":
			this.extendLineEffectsToBeatEnd = value;
			return true;
		case "fingeringmode":
			this.fingeringMode = alphaTab._FingeringMode.FingeringMode_Impl_.fromJson(value);
			return true;
		case "hidechorddiagrams":
			this.hideChordDiagrams = value;
			return true;
		case "hideinfo":
			this.hideInfo = value;
			return true;
		case "hidetracknames":
			this.hideTrackNames = value;
			return true;
		case "hidetuning":
			this.hideTuning = value;
			return true;
		case "notationmode":
			this.notationMode = alphaTab._NotationMode.NotationMode_Impl_.fromJson(value);
			return true;
		case "rhythmheight":
			this.rhythmHeight = value;
			return true;
		case "rhythmmode":
			this.rhythmMode = alphaTab._TabRhythmMode.TabRhythmMode_Impl_.fromJson(value);
			return true;
		case "showparenthesisfortiedbends":
			this.showParenthesisForTiedBends = value;
			return true;
		case "showtabnoteontiedbend":
			this.showTabNoteOnTiedBend = value;
			return true;
		case "showzeroondivewhammy":
			this.showZeroOnDiveWhammy = value;
			return true;
		case "slurheight":
			this.slurHeight = value;
			return true;
		case "smallgracetabnotes":
			this.smallGraceTabNotes = value;
			return true;
		case "transpositionpitches":
			this.transpositionPitches = value == null ? null : value.slice();
			return true;
		default:
		}
		return false;
	}
	,__class__: alphaTab.NotationSettings
};
alphaTab.PlayerSettings = $hx_exports["alphaTab"]["PlayerSettings"] = function() {
	this.playTripletFeel = true;
	this.vibrato = new alphaTab.VibratoPlaybackSettings();
	this.songBookDipDuration = 150;
	this.songBookBendDuration = 75;
	this.scrollSpeed = 300;
	this.scrollMode = 1;
	this.scrollOffsetY = 0;
	this.scrollOffsetX = 0;
	this.enableCursor = true;
	this.enablePlayer = false;
	this.scrollElement = "html,body";
	this.soundFont = null;
};
alphaTab.PlayerSettings.__name__ = ["alphaTab","PlayerSettings"];
alphaTab.PlayerSettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.PlayerSettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.PlayerSettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.PlayerSettings.prototype = {
	fillToJson: function(json) {
		json.soundFont = this.soundFont;
		json.scrollElement = this.scrollElement;
		json.enablePlayer = this.enablePlayer;
		json.enableCursor = this.enableCursor;
		json.scrollOffsetX = this.scrollOffsetX;
		json.scrollOffsetY = this.scrollOffsetY;
		json.scrollMode = alphaTab._ScrollMode.ScrollMode_Impl_.toJson(this.scrollMode);
		json.scrollSpeed = this.scrollSpeed;
		json.songBookBendDuration = this.songBookBendDuration;
		json.songBookDipDuration = this.songBookDipDuration;
		if(json.vibrato == null) {
			json.vibrato = alphaTab.VibratoPlaybackSettings.toJson(this.vibrato);
		} else {
			this.vibrato.fillToJson(json.vibrato);
		}
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "enablecursor":
			this.enableCursor = value;
			return true;
		case "enableplayer":
			this.enablePlayer = value;
			return true;
		case "scrollelement":
			this.scrollElement = value;
			return true;
		case "scrollmode":
			this.scrollMode = alphaTab._ScrollMode.ScrollMode_Impl_.fromJson(value);
			return true;
		case "scrolloffsetx":
			this.scrollOffsetX = value;
			return true;
		case "scrolloffsety":
			this.scrollOffsetY = value;
			return true;
		case "scrollspeed":
			this.scrollSpeed = value;
			return true;
		case "songbookbendduration":
			this.songBookBendDuration = value;
			return true;
		case "songbookdipduration":
			this.songBookDipDuration = value;
			return true;
		case "soundfont":
			this.soundFont = value;
			return true;
		default:
		}
		if(alphaTab.platform.Platform.equalsAny(property,["vibrato"])) {
			if(this.vibrato == null) {
				this.vibrato = alphaTab.VibratoPlaybackSettings.fromJson(value);
			} else {
				this.vibrato.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch = alphaTab.platform.Platform.findStartsWith(property,["vibrato"]);
			if(partialMatch != null) {
				if(this.vibrato == null) {
					this.vibrato = new alphaTab.VibratoPlaybackSettings();
				}
				if(this.vibrato.setProperty(HxOverrides.substr(property,partialMatch.length,null),value)) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: alphaTab.PlayerSettings
};
alphaTab.ProgressEventArgs = $hx_exports["alphaTab"]["ProgressEventArgs"] = function(loaded,total) {
	this.loaded = 0;
	this.total = 0;
	this.loaded = loaded;
	this.total = total;
};
alphaTab.ProgressEventArgs.__name__ = ["alphaTab","ProgressEventArgs"];
alphaTab.ProgressEventArgs.prototype = {
	__class__: alphaTab.ProgressEventArgs
};
alphaTab.RenderingResources = $hx_exports["alphaTab"]["RenderingResources"] = function() {
	this.copyrightFont = null;
	this.titleFont = null;
	this.subTitleFont = null;
	this.wordsFont = null;
	this.effectFont = null;
	this.fretboardNumberFont = null;
	this.tablatureFont = null;
	this.graceFont = null;
	this.staffLineColor = null;
	this.barSeparatorColor = null;
	this.barNumberFont = null;
	this.barNumberColor = null;
	this.fingeringFont = null;
	this.markerFont = null;
	this.mainGlyphColor = null;
	this.secondaryGlyphColor = null;
	this.scoreInfoColor = null;
	var sansFont = "Arial";
	var serifFont = "Georgia";
	this.effectFont = new alphaTab.platform.model.Font(serifFont,12,2);
	this.copyrightFont = new alphaTab.platform.model.Font(sansFont,12,1);
	this.fretboardNumberFont = new alphaTab.platform.model.Font(sansFont,11,0);
	this.titleFont = new alphaTab.platform.model.Font(serifFont,32,0);
	this.subTitleFont = new alphaTab.platform.model.Font(serifFont,20,0);
	this.wordsFont = new alphaTab.platform.model.Font(serifFont,15,0);
	this.tablatureFont = new alphaTab.platform.model.Font(sansFont,13,0);
	this.graceFont = new alphaTab.platform.model.Font(sansFont,11,0);
	this.staffLineColor = new alphaTab.platform.model.Color(165,165,165,255);
	this.barSeparatorColor = new alphaTab.platform.model.Color(34,34,17,255);
	this.barNumberFont = new alphaTab.platform.model.Font(sansFont,11,0);
	this.barNumberColor = new alphaTab.platform.model.Color(200,0,0,255);
	this.fingeringFont = new alphaTab.platform.model.Font(serifFont,14,0);
	this.markerFont = new alphaTab.platform.model.Font(serifFont,14,1);
	this.scoreInfoColor = new alphaTab.platform.model.Color(0,0,0,255);
	this.mainGlyphColor = new alphaTab.platform.model.Color(0,0,0,255);
	this.secondaryGlyphColor = new alphaTab.platform.model.Color(0,0,0,100);
};
alphaTab.RenderingResources.__name__ = ["alphaTab","RenderingResources"];
alphaTab.RenderingResources.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.RenderingResources.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.RenderingResources();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.RenderingResources.prototype = {
	fillToJson: function(json) {
		json.copyrightFont = alphaTab.platform.model.Font.toJson(this.copyrightFont);
		json.titleFont = alphaTab.platform.model.Font.toJson(this.titleFont);
		json.subTitleFont = alphaTab.platform.model.Font.toJson(this.subTitleFont);
		json.wordsFont = alphaTab.platform.model.Font.toJson(this.wordsFont);
		json.effectFont = alphaTab.platform.model.Font.toJson(this.effectFont);
		json.fretboardNumberFont = alphaTab.platform.model.Font.toJson(this.fretboardNumberFont);
		json.tablatureFont = alphaTab.platform.model.Font.toJson(this.tablatureFont);
		json.graceFont = alphaTab.platform.model.Font.toJson(this.graceFont);
		json.staffLineColor = alphaTab.platform.model.Color.toJson(this.staffLineColor);
		json.barSeparatorColor = alphaTab.platform.model.Color.toJson(this.barSeparatorColor);
		json.barNumberFont = alphaTab.platform.model.Font.toJson(this.barNumberFont);
		json.barNumberColor = alphaTab.platform.model.Color.toJson(this.barNumberColor);
		json.fingeringFont = alphaTab.platform.model.Font.toJson(this.fingeringFont);
		json.markerFont = alphaTab.platform.model.Font.toJson(this.markerFont);
		json.mainGlyphColor = alphaTab.platform.model.Color.toJson(this.mainGlyphColor);
		json.secondaryGlyphColor = alphaTab.platform.model.Color.toJson(this.secondaryGlyphColor);
		json.scoreInfoColor = alphaTab.platform.model.Color.toJson(this.scoreInfoColor);
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "barnumbercolor":
			this.barNumberColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "barnumberfont":
			this.barNumberFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "barseparatorcolor":
			this.barSeparatorColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "copyrightfont":
			this.copyrightFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "effectfont":
			this.effectFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "fingeringfont":
			this.fingeringFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "fretboardnumberfont":
			this.fretboardNumberFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "gracefont":
			this.graceFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "mainglyphcolor":
			this.mainGlyphColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "markerfont":
			this.markerFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "scoreinfocolor":
			this.scoreInfoColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "secondaryglyphcolor":
			this.secondaryGlyphColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "stafflinecolor":
			this.staffLineColor = alphaTab.platform.model.Color.fromJson(value);
			return true;
		case "subtitlefont":
			this.subTitleFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "tablaturefont":
			this.tablatureFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "titlefont":
			this.titleFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		case "wordsfont":
			this.wordsFont = alphaTab.platform.model.Font.fromJson(value);
			return true;
		default:
		}
		return false;
	}
	,__class__: alphaTab.RenderingResources
};
alphaTab.ResizeEventArgs = $hx_exports["alphaTab"]["ResizeEventArgs"] = function() {
	this.oldWidth = 0;
	this.newWidth = 0;
	this.settings = null;
};
alphaTab.ResizeEventArgs.__name__ = ["alphaTab","ResizeEventArgs"];
alphaTab.ResizeEventArgs.prototype = {
	__class__: alphaTab.ResizeEventArgs
};
alphaTab._ScrollMode = {};
alphaTab._ScrollMode.ScrollMode_Impl_ = $hx_exports["alphaTab"]["_ScrollMode"]["ScrollMode_Impl_"] = {};
alphaTab._ScrollMode.ScrollMode_Impl_.__name__ = ["alphaTab","_ScrollMode","ScrollMode_Impl_"];
alphaTab._ScrollMode.ScrollMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._ScrollMode.ScrollMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._ScrollMode.ScrollMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._ScrollMode.ScrollMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._ScrollMode.ScrollMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._ScrollMode.ScrollMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._ScrollMode.ScrollMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Off";
	case 1:
		return "Continuous";
	case 2:
		return "OffScreen";
	}
	return "";
};
alphaTab._ScrollMode.ScrollMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "continuous":
		return 1;
	case "off":
		return 0;
	case "offscreen":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._ScrollMode.ScrollMode_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._ScrollMode.ScrollMode_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._ScrollMode.ScrollMode_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.SelectionInfo = function(beat) {
	this.beat = null;
	this.bounds = null;
	this.beat = beat;
};
alphaTab.SelectionInfo.__name__ = ["alphaTab","SelectionInfo"];
alphaTab.SelectionInfo.prototype = {
	__class__: alphaTab.SelectionInfo
};
alphaTab.Settings = $hx_exports["alphaTab"]["Settings"] = function() {
	this.player = new alphaTab.PlayerSettings();
	this.importer = new alphaTab.ImporterSettings();
	this.notation = new alphaTab.NotationSettings();
	this.display = new alphaTab.DisplaySettings();
	this.core = new alphaTab.CoreSettings();
};
alphaTab.Settings.__name__ = ["alphaTab","Settings"];
alphaTab.Settings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.Settings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.Settings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.Settings.get_songBook = function() {
	var settings = new alphaTab.Settings();
	settings.setSongBookModeSettings();
	return settings;
};
alphaTab.Settings.prototype = {
	fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,fillFromDataAttributes: function(dataAttributes) {
		var dataAttributesObject = dataAttributes;
		var keys = Object.keys(dataAttributesObject);
		var key = HxOverrides.iter(keys);
		while(key.hasNext()) {
			var key1 = key.next();
			this.setProperty(key1.toLowerCase(),dataAttributes[key1]);
		}
	}
	,setProperty: function(property,value) {
		if(alphaTab.platform.Platform.equalsAny(property,["core",""])) {
			if(this.core == null) {
				this.core = alphaTab.CoreSettings.fromJson(value);
			} else {
				this.core.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch = alphaTab.platform.Platform.findStartsWith(property,["core",""]);
			if(partialMatch != null) {
				if(this.core == null) {
					this.core = new alphaTab.CoreSettings();
				}
				if(this.core.setProperty(HxOverrides.substr(property,partialMatch.length,null),value)) {
					return true;
				}
			}
		}
		if(alphaTab.platform.Platform.equalsAny(property,["display",""])) {
			if(this.display == null) {
				this.display = alphaTab.DisplaySettings.fromJson(value);
			} else {
				this.display.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch1 = alphaTab.platform.Platform.findStartsWith(property,["display",""]);
			if(partialMatch1 != null) {
				if(this.display == null) {
					this.display = new alphaTab.DisplaySettings();
				}
				if(this.display.setProperty(HxOverrides.substr(property,partialMatch1.length,null),value)) {
					return true;
				}
			}
		}
		if(alphaTab.platform.Platform.equalsAny(property,["notation"])) {
			if(this.notation == null) {
				this.notation = alphaTab.NotationSettings.fromJson(value);
			} else {
				this.notation.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch2 = alphaTab.platform.Platform.findStartsWith(property,["notation"]);
			if(partialMatch2 != null) {
				if(this.notation == null) {
					this.notation = new alphaTab.NotationSettings();
				}
				if(this.notation.setProperty(HxOverrides.substr(property,partialMatch2.length,null),value)) {
					return true;
				}
			}
		}
		if(alphaTab.platform.Platform.equalsAny(property,["importer"])) {
			if(this.importer == null) {
				this.importer = alphaTab.ImporterSettings.fromJson(value);
			} else {
				this.importer.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch3 = alphaTab.platform.Platform.findStartsWith(property,["importer"]);
			if(partialMatch3 != null) {
				if(this.importer == null) {
					this.importer = new alphaTab.ImporterSettings();
				}
				if(this.importer.setProperty(HxOverrides.substr(property,partialMatch3.length,null),value)) {
					return true;
				}
			}
		}
		if(alphaTab.platform.Platform.equalsAny(property,["player"])) {
			if(this.player == null) {
				this.player = alphaTab.PlayerSettings.fromJson(value);
			} else {
				this.player.fillFromJson(value);
			}
			return true;
		} else {
			var partialMatch4 = alphaTab.platform.Platform.findStartsWith(property,["player"]);
			if(partialMatch4 != null) {
				if(this.player == null) {
					this.player = new alphaTab.PlayerSettings();
				}
				if(this.player.setProperty(HxOverrides.substr(property,partialMatch4.length,null),value)) {
					return true;
				}
			}
		}
		return false;
	}
	,setSongBookModeSettings: function() {
		this.notation.notationMode = 1;
		this.notation.smallGraceTabNotes = false;
		this.notation.fingeringMode = 2;
		this.notation.extendBendArrowsOnTiedNotes = false;
		this.notation.showParenthesisForTiedBends = false;
		this.notation.showTabNoteOnTiedBend = false;
		this.notation.showZeroOnDiveWhammy = true;
	}
	,fillToJson: function(json) {
		if(json.core == null) {
			json.core = alphaTab.CoreSettings.toJson(this.core);
		} else {
			this.core.fillToJson(json.core);
		}
		if(json.display == null) {
			json.display = alphaTab.DisplaySettings.toJson(this.display);
		} else {
			this.display.fillToJson(json.display);
		}
		if(json.notation == null) {
			json.notation = alphaTab.NotationSettings.toJson(this.notation);
		} else {
			this.notation.fillToJson(json.notation);
		}
		if(json.importer == null) {
			json.importer = alphaTab.ImporterSettings.toJson(this.importer);
		} else {
			this.importer.fillToJson(json.importer);
		}
		if(json.player == null) {
			json.player = alphaTab.PlayerSettings.toJson(this.player);
		} else {
			this.player.fillToJson(json.player);
		}
	}
	,__class__: alphaTab.Settings
};
alphaTab._StaveProfile = {};
alphaTab._StaveProfile.StaveProfile_Impl_ = $hx_exports["alphaTab"]["_StaveProfile"]["StaveProfile_Impl_"] = {};
alphaTab._StaveProfile.StaveProfile_Impl_.__name__ = ["alphaTab","_StaveProfile","StaveProfile_Impl_"];
alphaTab._StaveProfile.StaveProfile_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._StaveProfile.StaveProfile_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._StaveProfile.StaveProfile_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._StaveProfile.StaveProfile_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._StaveProfile.StaveProfile_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._StaveProfile.StaveProfile_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._StaveProfile.StaveProfile_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Default";
	case 1:
		return "ScoreTab";
	case 2:
		return "Score";
	case 3:
		return "Tab";
	case 4:
		return "TabMixed";
	}
	return "";
};
alphaTab._StaveProfile.StaveProfile_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "default":
		return 0;
	case "score":
		return 2;
	case "scoretab":
		return 1;
	case "tab":
		return 3;
	case "tabmixed":
		return 4;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._StaveProfile.StaveProfile_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._StaveProfile.StaveProfile_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._StaveProfile.StaveProfile_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab._TabRhythmMode = {};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_ = $hx_exports["alphaTab"]["_TabRhythmMode"]["TabRhythmMode_Impl_"] = {};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.__name__ = ["alphaTab","_TabRhythmMode","TabRhythmMode_Impl_"];
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Hidden";
	case 1:
		return "ShowWithBeams";
	case 2:
		return "ShowWithBars";
	}
	return "";
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "hidden":
		return 0;
	case "showwithbars":
		return 2;
	case "showwithbeams":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab._TabRhythmMode.TabRhythmMode_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.VibratoPlaybackSettings = $hx_exports["alphaTab"]["VibratoPlaybackSettings"] = function() {
	this.beatSlightAmplitude = 3;
	this.beatSlightLength = 240;
	this.beatWideAmplitude = 3;
	this.beatWideLength = 240;
	this.noteSlightAmplitude = 2;
	this.noteSlightLength = 480;
	this.noteWideAmplitude = 2;
	this.noteWideLength = 480;
};
alphaTab.VibratoPlaybackSettings.__name__ = ["alphaTab","VibratoPlaybackSettings"];
alphaTab.VibratoPlaybackSettings.toJson = function(obj) {
	var json = { };
	obj.fillToJson(json);
	return json;
};
alphaTab.VibratoPlaybackSettings.fromJson = function(json) {
	if(json == null) {
		return null;
	}
	var obj = new alphaTab.VibratoPlaybackSettings();
	obj.fillFromJson(json);
	return obj;
};
alphaTab.VibratoPlaybackSettings.prototype = {
	fillToJson: function(json) {
		json.noteWideLength = this.noteWideLength;
		json.noteWideAmplitude = this.noteWideAmplitude;
		json.noteSlightLength = this.noteSlightLength;
		json.noteSlightAmplitude = this.noteSlightAmplitude;
		json.beatWideLength = this.beatWideLength;
		json.beatWideAmplitude = this.beatWideAmplitude;
		json.beatSlightLength = this.beatSlightLength;
		json.beatSlightAmplitude = this.beatSlightAmplitude;
	}
	,fillFromJson: function(json) {
		var _gthis = this;
		if(json == null) {
			return;
		}
		for( var $k in json ) _gthis.setProperty($k.toLowerCase(),json[$k]);
	}
	,setProperty: function(property,value) {
		switch(property) {
		case "beatslightamplitude":
			this.beatSlightAmplitude = value;
			return true;
		case "beatslightlength":
			this.beatSlightLength = value;
			return true;
		case "beatwideamplitude":
			this.beatWideAmplitude = value;
			return true;
		case "beatwidelength":
			this.beatWideLength = value;
			return true;
		case "noteslightamplitude":
			this.noteSlightAmplitude = value;
			return true;
		case "noteslightlength":
			this.noteSlightLength = value;
			return true;
		case "notewideamplitude":
			this.noteWideAmplitude = value;
			return true;
		case "notewidelength":
			this.noteWideLength = value;
			return true;
		default:
		}
		return false;
	}
	,__class__: alphaTab.VibratoPlaybackSettings
};
alphaTab.audio.BeatTickLookup = $hx_exports["alphaTab"]["audio"]["BeatTickLookup"] = function() {
	this._highlightedBeats = null;
	this.start = 0;
	this.end = 0;
	this.beat = null;
	this.isEmptyBar = false;
	this.beatsToHighlight = null;
	var this1 = {}
	this._highlightedBeats = this1;
	var this2 = [];
	this.beatsToHighlight = this2;
};
alphaTab.audio.BeatTickLookup.__name__ = ["alphaTab","audio","BeatTickLookup"];
alphaTab.audio.BeatTickLookup.prototype = {
	highlightBeat: function(beat) {
		if(!this._highlightedBeats.hasOwnProperty(beat.id)) {
			this._highlightedBeats[beat.id] = true;
			this.beatsToHighlight.push(beat);
		}
	}
	,__class__: alphaTab.audio.BeatTickLookup
};
alphaTab.audio.GeneralMidi = function() {
};
alphaTab.audio.GeneralMidi.__name__ = ["alphaTab","audio","GeneralMidi"];
alphaTab.audio.GeneralMidi.getValue = function(name) {
	if(alphaTab.audio.GeneralMidi._values == null) {
		var this1 = {}
		alphaTab.audio.GeneralMidi._values = this1;
		alphaTab.audio.GeneralMidi._values["acousticgrandpiano"] = 0;
		alphaTab.audio.GeneralMidi._values["brightacousticpiano"] = 1;
		alphaTab.audio.GeneralMidi._values["electricgrandpiano"] = 2;
		alphaTab.audio.GeneralMidi._values["honkytonkpiano"] = 3;
		alphaTab.audio.GeneralMidi._values["electricpiano1"] = 4;
		alphaTab.audio.GeneralMidi._values["electricpiano2"] = 5;
		alphaTab.audio.GeneralMidi._values["harpsichord"] = 6;
		alphaTab.audio.GeneralMidi._values["clavinet"] = 7;
		alphaTab.audio.GeneralMidi._values["celesta"] = 8;
		alphaTab.audio.GeneralMidi._values["glockenspiel"] = 9;
		alphaTab.audio.GeneralMidi._values["musicbox"] = 10;
		alphaTab.audio.GeneralMidi._values["vibraphone"] = 11;
		alphaTab.audio.GeneralMidi._values["marimba"] = 12;
		alphaTab.audio.GeneralMidi._values["xylophone"] = 13;
		alphaTab.audio.GeneralMidi._values["tubularbells"] = 14;
		alphaTab.audio.GeneralMidi._values["dulcimer"] = 15;
		alphaTab.audio.GeneralMidi._values["drawbarorgan"] = 16;
		alphaTab.audio.GeneralMidi._values["percussiveorgan"] = 17;
		alphaTab.audio.GeneralMidi._values["rockorgan"] = 18;
		alphaTab.audio.GeneralMidi._values["churchorgan"] = 19;
		alphaTab.audio.GeneralMidi._values["reedorgan"] = 20;
		alphaTab.audio.GeneralMidi._values["accordion"] = 21;
		alphaTab.audio.GeneralMidi._values["harmonica"] = 22;
		alphaTab.audio.GeneralMidi._values["tangoaccordion"] = 23;
		alphaTab.audio.GeneralMidi._values["acousticguitarnylon"] = 24;
		alphaTab.audio.GeneralMidi._values["acousticguitarsteel"] = 25;
		alphaTab.audio.GeneralMidi._values["electricguitarjazz"] = 26;
		alphaTab.audio.GeneralMidi._values["electricguitarclean"] = 27;
		alphaTab.audio.GeneralMidi._values["electricguitarmuted"] = 28;
		alphaTab.audio.GeneralMidi._values["overdrivenguitar"] = 29;
		alphaTab.audio.GeneralMidi._values["distortionguitar"] = 30;
		alphaTab.audio.GeneralMidi._values["guitarharmonics"] = 31;
		alphaTab.audio.GeneralMidi._values["acousticbass"] = 32;
		alphaTab.audio.GeneralMidi._values["electricbassfinger"] = 33;
		alphaTab.audio.GeneralMidi._values["electricbasspick"] = 34;
		alphaTab.audio.GeneralMidi._values["fretlessbass"] = 35;
		alphaTab.audio.GeneralMidi._values["slapbass1"] = 36;
		alphaTab.audio.GeneralMidi._values["slapbass2"] = 37;
		alphaTab.audio.GeneralMidi._values["synthbass1"] = 38;
		alphaTab.audio.GeneralMidi._values["synthbass2"] = 39;
		alphaTab.audio.GeneralMidi._values["violin"] = 40;
		alphaTab.audio.GeneralMidi._values["viola"] = 41;
		alphaTab.audio.GeneralMidi._values["cello"] = 42;
		alphaTab.audio.GeneralMidi._values["contrabass"] = 43;
		alphaTab.audio.GeneralMidi._values["tremolostrings"] = 44;
		alphaTab.audio.GeneralMidi._values["pizzicatostrings"] = 45;
		alphaTab.audio.GeneralMidi._values["orchestralharp"] = 46;
		alphaTab.audio.GeneralMidi._values["timpani"] = 47;
		alphaTab.audio.GeneralMidi._values["stringensemble1"] = 48;
		alphaTab.audio.GeneralMidi._values["stringensemble2"] = 49;
		alphaTab.audio.GeneralMidi._values["synthstrings1"] = 50;
		alphaTab.audio.GeneralMidi._values["synthstrings2"] = 51;
		alphaTab.audio.GeneralMidi._values["choiraahs"] = 52;
		alphaTab.audio.GeneralMidi._values["voiceoohs"] = 53;
		alphaTab.audio.GeneralMidi._values["synthvoice"] = 54;
		alphaTab.audio.GeneralMidi._values["orchestrahit"] = 55;
		alphaTab.audio.GeneralMidi._values["trumpet"] = 56;
		alphaTab.audio.GeneralMidi._values["trombone"] = 57;
		alphaTab.audio.GeneralMidi._values["tuba"] = 58;
		alphaTab.audio.GeneralMidi._values["mutedtrumpet"] = 59;
		alphaTab.audio.GeneralMidi._values["frenchhorn"] = 60;
		alphaTab.audio.GeneralMidi._values["brasssection"] = 61;
		alphaTab.audio.GeneralMidi._values["synthbrass1"] = 62;
		alphaTab.audio.GeneralMidi._values["synthbrass2"] = 63;
		alphaTab.audio.GeneralMidi._values["sopranosax"] = 64;
		alphaTab.audio.GeneralMidi._values["altosax"] = 65;
		alphaTab.audio.GeneralMidi._values["tenorsax"] = 66;
		alphaTab.audio.GeneralMidi._values["baritonesax"] = 67;
		alphaTab.audio.GeneralMidi._values["oboe"] = 68;
		alphaTab.audio.GeneralMidi._values["englishhorn"] = 69;
		alphaTab.audio.GeneralMidi._values["bassoon"] = 70;
		alphaTab.audio.GeneralMidi._values["clarinet"] = 71;
		alphaTab.audio.GeneralMidi._values["piccolo"] = 72;
		alphaTab.audio.GeneralMidi._values["flute"] = 73;
		alphaTab.audio.GeneralMidi._values["recorder"] = 74;
		alphaTab.audio.GeneralMidi._values["panflute"] = 75;
		alphaTab.audio.GeneralMidi._values["blownbottle"] = 76;
		alphaTab.audio.GeneralMidi._values["shakuhachi"] = 77;
		alphaTab.audio.GeneralMidi._values["whistle"] = 78;
		alphaTab.audio.GeneralMidi._values["ocarina"] = 79;
		alphaTab.audio.GeneralMidi._values["lead1square"] = 80;
		alphaTab.audio.GeneralMidi._values["lead2sawtooth"] = 81;
		alphaTab.audio.GeneralMidi._values["lead3calliope"] = 82;
		alphaTab.audio.GeneralMidi._values["lead4chiff"] = 83;
		alphaTab.audio.GeneralMidi._values["lead5charang"] = 84;
		alphaTab.audio.GeneralMidi._values["lead6voice"] = 85;
		alphaTab.audio.GeneralMidi._values["lead7fifths"] = 86;
		alphaTab.audio.GeneralMidi._values["lead8bassandlead"] = 87;
		alphaTab.audio.GeneralMidi._values["pad1newage"] = 88;
		alphaTab.audio.GeneralMidi._values["pad2warm"] = 89;
		alphaTab.audio.GeneralMidi._values["pad3polysynth"] = 90;
		alphaTab.audio.GeneralMidi._values["pad4choir"] = 91;
		alphaTab.audio.GeneralMidi._values["pad5bowed"] = 92;
		alphaTab.audio.GeneralMidi._values["pad6metallic"] = 93;
		alphaTab.audio.GeneralMidi._values["pad7halo"] = 94;
		alphaTab.audio.GeneralMidi._values["pad8sweep"] = 95;
		alphaTab.audio.GeneralMidi._values["fx1rain"] = 96;
		alphaTab.audio.GeneralMidi._values["fx2soundtrack"] = 97;
		alphaTab.audio.GeneralMidi._values["fx3crystal"] = 98;
		alphaTab.audio.GeneralMidi._values["fx4atmosphere"] = 99;
		alphaTab.audio.GeneralMidi._values["fx5brightness"] = 100;
		alphaTab.audio.GeneralMidi._values["fx6goblins"] = 101;
		alphaTab.audio.GeneralMidi._values["fx7echoes"] = 102;
		alphaTab.audio.GeneralMidi._values["fx8scifi"] = 103;
		alphaTab.audio.GeneralMidi._values["sitar"] = 104;
		alphaTab.audio.GeneralMidi._values["banjo"] = 105;
		alphaTab.audio.GeneralMidi._values["shamisen"] = 106;
		alphaTab.audio.GeneralMidi._values["koto"] = 107;
		alphaTab.audio.GeneralMidi._values["kalimba"] = 108;
		alphaTab.audio.GeneralMidi._values["bagpipe"] = 109;
		alphaTab.audio.GeneralMidi._values["fiddle"] = 110;
		alphaTab.audio.GeneralMidi._values["shanai"] = 111;
		alphaTab.audio.GeneralMidi._values["tinklebell"] = 112;
		alphaTab.audio.GeneralMidi._values["agogo"] = 113;
		alphaTab.audio.GeneralMidi._values["steeldrums"] = 114;
		alphaTab.audio.GeneralMidi._values["woodblock"] = 115;
		alphaTab.audio.GeneralMidi._values["taikodrum"] = 116;
		alphaTab.audio.GeneralMidi._values["melodictom"] = 117;
		alphaTab.audio.GeneralMidi._values["synthdrum"] = 118;
		alphaTab.audio.GeneralMidi._values["reversecymbal"] = 119;
		alphaTab.audio.GeneralMidi._values["guitarfretnoise"] = 120;
		alphaTab.audio.GeneralMidi._values["breathnoise"] = 121;
		alphaTab.audio.GeneralMidi._values["seashore"] = 122;
		alphaTab.audio.GeneralMidi._values["birdtweet"] = 123;
		alphaTab.audio.GeneralMidi._values["telephonering"] = 124;
		alphaTab.audio.GeneralMidi._values["helicopter"] = 125;
		alphaTab.audio.GeneralMidi._values["applause"] = 126;
		alphaTab.audio.GeneralMidi._values["gunshot"] = 127;
	}
	name = StringTools.replace(name.toLowerCase()," ","");
	if(alphaTab.audio.GeneralMidi._values.hasOwnProperty(name)) {
		return alphaTab.audio.GeneralMidi._values[name];
	} else {
		return 0;
	}
};
alphaTab.audio.GeneralMidi.isPiano = function(program) {
	if(!(program <= 7)) {
		if(program >= 16) {
			return program <= 23;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
alphaTab.audio.GeneralMidi.isGuitar = function(program) {
	if(!(program >= 24 && program <= 39 || program == 105)) {
		return program == 43;
	} else {
		return true;
	}
};
alphaTab.audio.GeneralMidi.prototype = {
	__class__: alphaTab.audio.GeneralMidi
};
alphaTab.audio.MasterBarTickLookup = $hx_exports["alphaTab"]["audio"]["MasterBarTickLookup"] = function() {
	this.start = 0;
	this.end = 0;
	this.tempo = 0;
	this.masterBar = null;
	this.beats = null;
	this.nextMasterBar = null;
	var this1 = [];
	this.beats = this1;
};
alphaTab.audio.MasterBarTickLookup.__name__ = ["alphaTab","audio","MasterBarTickLookup"];
alphaTab.audio.MasterBarTickLookup.prototype = {
	finish: function() {
		var comparison = function(a,b) {
			return a.start - b.start;
		};
		this.beats.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
	}
	,addBeat: function(beat) {
		this.beats.push(beat);
	}
	,__class__: alphaTab.audio.MasterBarTickLookup
};
alphaTab.audio.MidiTickLookup = $hx_exports["alphaTab"]["audio"]["MidiTickLookup"] = function() {
	this._currentMasterBar = null;
	this.masterBarLookup = null;
	this.masterBars = null;
	var this1 = [];
	this.masterBars = this1;
	var this2 = {}
	this.masterBarLookup = this2;
};
alphaTab.audio.MidiTickLookup.__name__ = ["alphaTab","audio","MidiTickLookup"];
alphaTab.audio.MidiTickLookup.prototype = {
	finish: function() {
		var previous = null;
		var this1 = [];
		var activeBeats = this1;
		var bar = $iterator(this.masterBars)();
		while(bar.hasNext()) {
			var bar1 = bar.next();
			bar1.finish();
			if(previous != null) {
				previous.nextMasterBar = bar1;
			}
			var beat = $iterator(bar1.beats)();
			while(beat.hasNext()) {
				var beat1 = beat.next();
				var this2 = [];
				var newActiveBeats = this2;
				var activeBeat = $iterator(activeBeats)();
				while(activeBeat.hasNext()) {
					var activeBeat1 = activeBeat.next();
					if(activeBeat1.end > beat1.start) {
						newActiveBeats.push(activeBeat1);
						beat1.highlightBeat(activeBeat1.beat);
						if(beat1.start <= activeBeat1.start) {
							activeBeat1.highlightBeat(beat1.beat);
						}
					}
				}
				newActiveBeats.push(beat1);
				activeBeats = newActiveBeats;
			}
			previous = bar1;
		}
	}
	,findBeat: function(tracks,tick) {
		var masterBar = this.findMasterBar(tick);
		if(masterBar == null) {
			return null;
		}
		var this1 = {}
		var trackLookup = this1;
		var track = HxOverrides.iter(tracks);
		while(track.hasNext()) {
			var track1 = track.next();
			trackLookup[track1.index] = true;
		}
		var beat = null;
		var index = 0;
		var beats = masterBar.beats;
		var b = 0;
		while(b < beats.length) {
			var currentBeat = beats[b];
			if(!trackLookup.hasOwnProperty(currentBeat.beat.voice.bar.staff.track.index)) {
				++b;
				continue;
			}
			if(currentBeat.start <= tick && tick < currentBeat.end) {
				if(beat == null || beat.start < currentBeat.start) {
					beat = beats[b];
					index = b;
				}
			} else if(currentBeat.end > tick) {
				break;
			}
			++b;
		}
		if(beat == null) {
			return null;
		}
		var nextBeat = null;
		var b1 = index + 1;
		while(b1 < beats.length) {
			var currentBeat1 = beats[b1];
			if(currentBeat1.beat.graceType == 0 && currentBeat1.start > beat.start && trackLookup.hasOwnProperty(currentBeat1.beat.voice.bar.staff.track.index)) {
				nextBeat = currentBeat1;
				break;
			}
			++b1;
		}
		if(nextBeat == null && masterBar.nextMasterBar != null) {
			var nextBar = masterBar.nextMasterBar;
			beats = nextBar.beats;
			var b2 = 0;
			while(b2 < beats.length) {
				var currentBeat2 = beats[b2];
				if(currentBeat2.beat.graceType == 0 && trackLookup.hasOwnProperty(currentBeat2.beat.voice.bar.staff.track.index)) {
					nextBeat = currentBeat2;
					break;
				}
				++b2;
			}
		}
		var result = new alphaTab.audio.MidiTickLookupFindBeatResult();
		result.currentBeat = beat.beat;
		result.nextBeat = nextBeat == null ? null : nextBeat.beat;
		result.duration = nextBeat == null ? alphaTab.audio.MidiUtils.ticksToMillis(beat.end - beat.start,masterBar.tempo) : alphaTab.audio.MidiUtils.ticksToMillis(nextBeat.start - beat.start,masterBar.tempo);
		result.beatsToHighlight = beat.beatsToHighlight;
		return result;
	}
	,findMasterBar: function(tick) {
		var bars = this.masterBars;
		var bottom = 0;
		var top = bars.length - 1;
		while(bottom <= top) {
			var middle = (top + bottom) / 2 | 0;
			var bar = bars[middle];
			if(tick >= bar.start && tick < bar.end) {
				return bar;
			}
			if(tick < bar.start) {
				top = middle - 1;
			} else {
				bottom = middle + 1;
			}
		}
		return null;
	}
	,getMasterBar: function(bar) {
		if(!this.masterBarLookup.hasOwnProperty(bar.index)) {
			var _tmp = new alphaTab.audio.MasterBarTickLookup();
			_tmp.start = 0;
			_tmp.end = 0;
			var this1 = [];
			_tmp.beats = this1;
			_tmp.masterBar = bar;
			return _tmp;
		}
		return this.masterBarLookup[bar.index];
	}
	,getMasterBarStart: function(bar) {
		if(!this.masterBarLookup.hasOwnProperty(bar.index)) {
			return 0;
		}
		return this.masterBarLookup[bar.index].start;
	}
	,addMasterBar: function(masterBar) {
		this.masterBars.push(masterBar);
		this._currentMasterBar = masterBar;
		if(!this.masterBarLookup.hasOwnProperty(masterBar.masterBar.index)) {
			this.masterBarLookup[masterBar.masterBar.index] = masterBar;
		}
	}
	,addBeat: function(beat) {
		this._currentMasterBar.addBeat(beat);
	}
	,__class__: alphaTab.audio.MidiTickLookup
};
alphaTab.audio.MidiTickLookupFindBeatResult = $hx_exports["alphaTab"]["audio"]["MidiTickLookupFindBeatResult"] = function() {
	this.currentBeat = null;
	this.nextBeat = null;
	this.duration = 0;
	this.beatsToHighlight = null;
};
alphaTab.audio.MidiTickLookupFindBeatResult.__name__ = ["alphaTab","audio","MidiTickLookupFindBeatResult"];
alphaTab.audio.MidiTickLookupFindBeatResult.prototype = {
	__class__: alphaTab.audio.MidiTickLookupFindBeatResult
};
alphaTab.audio.MidiUtils = function() { };
alphaTab.audio.MidiUtils.__name__ = ["alphaTab","audio","MidiUtils"];
alphaTab.audio.MidiUtils.ticksToMillis = function(ticks,tempo) {
	return system.Convert.toInt32_Double(ticks * (60000.0 / (tempo * 960)));
};
alphaTab.audio.MidiUtils.millisToTicks = function(millis,tempo) {
	return system.Convert.toInt32_Double(millis / (60000.0 / (tempo * 960)));
};
alphaTab.audio.MidiUtils.toTicks = function(duration) {
	return alphaTab.audio.MidiUtils.valueToTicks(duration);
};
alphaTab.audio.MidiUtils.valueToTicks = function(duration) {
	var this1 = duration;
	var denomninator = this1;
	if(denomninator < 0) {
		denomninator = 1 / -denomninator;
	}
	return system.Convert.toInt32_Single(960 * (4.0 / denomninator));
};
alphaTab.audio.MidiUtils.applyDot = function(ticks,doubleDotted) {
	if(doubleDotted) {
		return ticks + (ticks / 4 | 0) * 3;
	}
	return ticks + (ticks / 2 | 0);
};
alphaTab.audio.MidiUtils.applyTuplet = function(ticks,numerator,denominator) {
	return ticks * denominator / numerator | 0;
};
alphaTab.audio.MidiUtils.removeTuplet = function(ticks,numerator,denominator) {
	return ticks * numerator / denominator | 0;
};
alphaTab.audio.MidiUtils.dynamicToVelocity = function(dyn) {
	return 15 + dyn * 16;
};
alphaTab.audio.generator = {};
alphaTab.audio.generator.IMidiFileHandler = $hx_exports["alphaTab"]["audio"]["generator"]["IMidiFileHandler"] = function() { };
alphaTab.audio.generator.IMidiFileHandler.__name__ = ["alphaTab","audio","generator","IMidiFileHandler"];
alphaTab.audio.generator.IMidiFileHandler.prototype = {
	__class__: alphaTab.audio.generator.IMidiFileHandler
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler = $hx_exports["alphaTab"]["audio"]["generator"]["AlphaSynthMidiFileHandler"] = function(midiFile) {
	this._midiFile = null;
	this._midiFile = midiFile;
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler.__name__ = ["alphaTab","audio","generator","AlphaSynthMidiFileHandler"];
alphaTab.audio.generator.AlphaSynthMidiFileHandler.__interfaces__ = [alphaTab.audio.generator.IMidiFileHandler];
alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue = function(value) {
	if(value > 127) {
		return 127;
	}
	if(value < 0) {
		return 0;
	}
	return system.Convert.toUInt8(value);
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler.prototype = {
	addTimeSignature: function(tick,timeSignatureNumerator,timeSignatureDenominator) {
		var denominatorIndex = 0;
		while(true) {
			timeSignatureDenominator = timeSignatureDenominator >> 1;
			if(!(timeSignatureDenominator > 0)) {
				break;
			}
			++denominatorIndex;
		}
		var message = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,255,system.Convert.toUInt8(88),new Uint8Array([system.Convert.toUInt8(timeSignatureNumerator & 255),system.Convert.toUInt8(denominatorIndex & 255),48,8]));
		this._midiFile.addEvent(message);
	}
	,addRest: function(track,tick,channel) {
		var message = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(tick,system.Convert.toUInt8(240),0,new Uint8Array([255]));
		this._midiFile.addEvent(message);
	}
	,addNote: function(track,start,length,key,dynamicValue,channel) {
		var velocity = alphaTab.audio.MidiUtils.dynamicToVelocity(dynamicValue);
		var noteOn = this.makeCommand(system.Convert.toUInt8(144),channel);
		var noteOn1 = alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(key);
		var this1 = system.Convert.toUInt8(velocity);
		var noteOn2 = new alphaTab.audio.synth.midi.event.MidiEvent(start,noteOn,noteOn1,alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(this1));
		this._midiFile.addEvent(noteOn2);
		var noteOff = this.makeCommand(system.Convert.toUInt8(128),channel);
		var noteOff1 = alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(key);
		var this2 = system.Convert.toUInt8(velocity);
		var noteOff2 = new alphaTab.audio.synth.midi.event.MidiEvent(start + length,noteOff,noteOff1,alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(this2));
		this._midiFile.addEvent(noteOff2);
	}
	,makeCommand: function(command,channel) {
		return system.Convert.toUInt8(command & 240 | channel & 15);
	}
	,addControlChange: function(track,tick,channel,controller,value) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.makeCommand(system.Convert.toUInt8(176),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(controller),alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(value));
		this._midiFile.addEvent(message);
	}
	,addProgramChange: function(track,tick,channel,program) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.makeCommand(system.Convert.toUInt8(192),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(program),0);
		this._midiFile.addEvent(message);
	}
	,addTempo: function(tick,tempo) {
		var tempoInUsq = 60000000 / tempo | 0;
		var message = new alphaTab.audio.synth.midi.event.MetaNumberEvent(tick,255,system.Convert.toUInt8(81),tempoInUsq);
		this._midiFile.addEvent(message);
	}
	,addBend: function(track,tick,channel,value) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.makeCommand(system.Convert.toUInt8(224),channel),0,alphaTab.audio.generator.AlphaSynthMidiFileHandler.fixValue(value));
		this._midiFile.addEvent(message);
	}
	,finishTrack: function(track,tick) {
		var message = system.Convert.toUInt8(47);
		var this1 = new Uint8Array(0);
		var message1 = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,255,message,this1);
		this._midiFile.addEvent(message1);
	}
	,__class__: alphaTab.audio.generator.AlphaSynthMidiFileHandler
};
alphaTab.audio.generator.MidiFileGenerator = $hx_exports["alphaTab"]["audio"]["generator"]["MidiFileGenerator"] = function(score,settings,handler) {
	this._score = null;
	this._settings = null;
	this._handler = null;
	this._currentTempo = 0;
	this._currentBarRepeatLookup = null;
	this.tickLookup = null;
	this._currentTripletFeel = null;
	this._score = score;
	this._settings = settings == null ? new alphaTab.Settings() : settings;
	this._currentTempo = this._score.tempo;
	this._handler = handler;
	this.tickLookup = new alphaTab.audio.MidiTickLookup();
};
alphaTab.audio.generator.MidiFileGenerator.__name__ = ["alphaTab","audio","generator","MidiFileGenerator"];
alphaTab.audio.generator.MidiFileGenerator.toChannelShort = function(data) {
	var value = Math.max(-32768,Math.min(32767,data * 8 - 1));
	return Math.max(value,-1) + 1;
};
alphaTab.audio.generator.MidiFileGenerator.prototype = {
	generate: function() {
		var i = 0;
		var j = this._score.tracks.length;
		while(i < j) {
			this.generateTrack(this._score.tracks[i]);
			++i;
		}
		alphaTab.util.Logger.info("Midi","Begin midi generation",null);
		var controller = new alphaTab.audio.generator.MidiPlaybackController(this._score);
		var previousMasterBar = null;
		while(!controller.get_finished()) {
			var index = controller.index;
			var bar = this._score.masterBars[index];
			var currentTick = controller.currentTick;
			controller.processCurrent();
			if(controller.shouldPlay) {
				this.generateMasterBar(bar,previousMasterBar,currentTick);
				var i1 = 0;
				var j1 = this._score.tracks.length;
				while(i1 < j1) {
					var track = this._score.tracks[i1];
					var k = 0;
					var l = track.staves.length;
					while(k < l) {
						var staff = track.staves[k];
						if(index < staff.bars.length) {
							this.generateBar(staff.bars[index],currentTick);
						}
						++k;
					}
					++i1;
				}
			}
			controller.moveNext();
			previousMasterBar = bar;
		}
		var i2 = 0;
		var j2 = this._score.tracks.length;
		while(i2 < j2) {
			this._handler.finishTrack(this._score.tracks[i2].index,controller.currentTick);
			++i2;
		}
		this.tickLookup.finish();
		alphaTab.util.Logger.info("Midi","Midi generation done",null);
	}
	,generateTrack: function(track) {
		this.generateChannel(track,system.Convert.toUInt8(track.playbackInfo.primaryChannel),track.playbackInfo);
		if(track.playbackInfo.primaryChannel != track.playbackInfo.secondaryChannel) {
			this.generateChannel(track,system.Convert.toUInt8(track.playbackInfo.secondaryChannel),track.playbackInfo);
		}
	}
	,generateChannel: function(track,channel,playbackInfo) {
		var volume = alphaTab.audio.generator.MidiFileGenerator.toChannelShort(playbackInfo.volume);
		var balance = alphaTab.audio.generator.MidiFileGenerator.toChannelShort(playbackInfo.balance);
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(7),system.Convert.toUInt8(volume));
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(10),system.Convert.toUInt8(balance));
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(11),127);
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(100),0);
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(101),0);
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(38),0);
		this._handler.addControlChange(track.index,0,channel,system.Convert.toUInt8(6),12);
		this._handler.addProgramChange(track.index,0,channel,system.Convert.toUInt8(playbackInfo.program));
	}
	,generateMasterBar: function(masterBar,previousMasterBar,currentTick) {
		if(previousMasterBar == null || previousMasterBar.timeSignatureDenominator != masterBar.timeSignatureDenominator || previousMasterBar.timeSignatureNumerator != masterBar.timeSignatureNumerator) {
			this._handler.addTimeSignature(currentTick,masterBar.timeSignatureNumerator,masterBar.timeSignatureDenominator);
		}
		if(previousMasterBar == null) {
			this._handler.addTempo(currentTick,masterBar.score.tempo);
			this._currentTempo = masterBar.score.tempo;
		} else if(masterBar.tempoAutomation != null) {
			this._handler.addTempo(currentTick,system.Convert.toInt32_Single(masterBar.tempoAutomation.value));
			this._currentTempo = system.Convert.toInt32_Single(masterBar.tempoAutomation.value);
		}
		var masterBarLookup = new alphaTab.audio.MasterBarTickLookup();
		masterBarLookup.masterBar = masterBar;
		masterBarLookup.start = currentTick;
		masterBarLookup.tempo = this._currentTempo;
		masterBarLookup.end = masterBarLookup.start + masterBar.calculateDuration();
		this.tickLookup.addMasterBar(masterBarLookup);
	}
	,generateBar: function(bar,barStartTick) {
		var playbackBar = this.getPlaybackBar(bar);
		this._currentBarRepeatLookup = null;
		var i = 0;
		var j = playbackBar.voices.length;
		while(i < j) {
			this.generateVoice(playbackBar.voices[i],barStartTick,bar);
			++i;
		}
	}
	,getPlaybackBar: function(bar) {
		var _g = bar.simileMark;
		switch(_g) {
		case 1:
			if(bar.previousBar != null) {
				bar = this.getPlaybackBar(bar.previousBar);
			}
			break;
		case 2:
			if(bar.previousBar != null && bar.previousBar.previousBar != null) {
				bar = this.getPlaybackBar(bar.previousBar.previousBar);
			}
			break;
		case 3:
			if(bar.previousBar != null && bar.previousBar.previousBar != null) {
				bar = this.getPlaybackBar(bar.previousBar.previousBar);
			}
			break;
		default:
		}
		return bar;
	}
	,generateVoice: function(voice,barStartTick,realBar) {
		if(voice.isEmpty && (!voice.bar.get_isEmpty() || voice.index != 0)) {
			return;
		}
		var i = 0;
		var j = voice.beats.length;
		while(i < j) {
			this.generateBeat(voice.beats[i],barStartTick,realBar);
			++i;
		}
	}
	,generateBeat: function(beat,barStartTick,realBar) {
		var beatStart = beat.playbackStart;
		var audioDuration = beat.playbackDuration;
		if(beat.voice.bar.get_isEmpty()) {
			audioDuration = beat.voice.bar.get_masterBar().calculateDuration();
		} else if(beat.voice.bar.get_masterBar().tripletFeel != 0 && this._settings.player.playTripletFeel) {
			if(this._currentTripletFeel != null) {
				beatStart = beatStart - this._currentTripletFeel.secondBeatStartOffset;
				audioDuration = this._currentTripletFeel.secondBeatDuration;
				this._currentTripletFeel = null;
			} else {
				this._currentTripletFeel = this.calculateTripletFeelInfo(beatStart,audioDuration,beat);
				if(this._currentTripletFeel != null) {
					audioDuration = this._currentTripletFeel.firstBeatDuration;
				}
			}
		}
		var beatLookup = new alphaTab.audio.BeatTickLookup();
		beatLookup.start = barStartTick + beatStart;
		var realTickOffset = beat.nextBeat == null ? audioDuration : beat.nextBeat.get_absolutePlaybackStart() - beat.get_absolutePlaybackStart();
		beatLookup.end = barStartTick + beatStart;
		beatLookup.highlightBeat(beat);
		beatLookup.end = beatLookup.end + (realTickOffset > audioDuration ? realTickOffset : audioDuration);
		if(realBar == beat.voice.bar) {
			beatLookup.beat = beat;
			this.tickLookup.addBeat(beatLookup);
		} else {
			beatLookup.isEmptyBar = true;
			beatLookup.beat = realBar.voices[0].beats[0];
			if(this._currentBarRepeatLookup == null) {
				this._currentBarRepeatLookup = beatLookup;
				this.tickLookup.addBeat(this._currentBarRepeatLookup);
			} else {
				this._currentBarRepeatLookup.end = beatLookup.end;
			}
		}
		var track = beat.voice.bar.staff.track;
		var i = 0;
		var j = beat.automations.length;
		while(i < j) {
			this.generateAutomation(beat,beat.automations[i],barStartTick);
			++i;
		}
		if(beat.get_isRest()) {
			this._handler.addRest(track.index,barStartTick + beatStart,track.playbackInfo.primaryChannel);
		} else {
			var brushInfo = this.getBrushInfo(beat);
			var i1 = 0;
			var j1 = beat.notes.length;
			while(i1 < j1) {
				var n = beat.notes[i1];
				this.generateNote(n,barStartTick + beatStart,audioDuration,brushInfo);
				++i1;
			}
		}
		if(beat.vibrato != 0) {
			var phaseLength = 240;
			var bendAmplitude = 3;
			var _g = beat.vibrato;
			switch(_g) {
			case 1:
				phaseLength = this._settings.player.vibrato.beatSlightLength;
				bendAmplitude = this._settings.player.vibrato.beatSlightAmplitude;
				break;
			case 2:
				phaseLength = this._settings.player.vibrato.beatWideLength;
				bendAmplitude = this._settings.player.vibrato.beatWideAmplitude;
				break;
			default:
			}
			this.generateVibratorWithParams(beat.voice.bar.staff.track,barStartTick + beatStart,beat.playbackDuration,phaseLength,bendAmplitude,track.playbackInfo.secondaryChannel);
		}
	}
	,calculateTripletFeelInfo: function(beatStart,audioDuration,beat) {
		var initialDuration;
		var _g = beat.voice.bar.get_masterBar().tripletFeel;
		switch(_g) {
		case 1:case 3:case 5:
			initialDuration = 16;
			break;
		case 2:case 4:case 6:
			initialDuration = 8;
			break;
		default:
			return null;
		}
		var interval = alphaTab.audio.MidiUtils.toTicks(initialDuration);
		if(audioDuration != interval) {
			return null;
		}
		if(beatStart % interval != 0) {
			return null;
		}
		if(beat.nextBeat == null || beat.nextBeat.voice != beat.voice || beat.playbackDuration != interval) {
			return null;
		}
		var durations = new alphaTab.audio.generator.MidiFileGenerator_TripletFeelDurations();
		var _g1 = beat.voice.bar.get_masterBar().tripletFeel;
		switch(_g1) {
		case 1:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.applyTuplet(alphaTab.audio.MidiUtils.toTicks(8),3,2);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.applyTuplet(alphaTab.audio.MidiUtils.toTicks(16),3,2);
			break;
		case 2:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.applyTuplet(alphaTab.audio.MidiUtils.toTicks(4),3,2);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.applyTuplet(alphaTab.audio.MidiUtils.toTicks(8),3,2);
			break;
		case 3:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.applyDot(alphaTab.audio.MidiUtils.toTicks(16),false);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.toTicks(32);
			break;
		case 4:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.applyDot(alphaTab.audio.MidiUtils.toTicks(8),false);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.toTicks(16);
			break;
		case 5:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.toTicks(32);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.applyDot(alphaTab.audio.MidiUtils.toTicks(16),false);
			break;
		case 6:
			durations.firstBeatDuration = alphaTab.audio.MidiUtils.toTicks(16);
			durations.secondBeatDuration = alphaTab.audio.MidiUtils.applyDot(alphaTab.audio.MidiUtils.toTicks(8),false);
			break;
		default:
		}
		durations.secondBeatStartOffset = audioDuration - durations.firstBeatDuration;
		return durations;
	}
	,generateNote: function(note,beatStart,beatDuration,brushInfo) {
		var track = note.beat.voice.bar.staff.track;
		var staff = note.beat.voice.bar.staff;
		var noteKey = note.get_realValue();
		var brushOffset = note.get_isStringed() && note.string <= brushInfo.length ? brushInfo[note.string - 1] : 0;
		var noteStart = beatStart + brushOffset;
		var noteDuration = this.getNoteDuration(note,beatDuration);
		noteDuration.untilTieEnd = noteDuration.untilTieEnd - brushOffset;
		noteDuration.noteOnly = noteDuration.noteOnly - brushOffset;
		noteDuration.letRingEnd = noteDuration.letRingEnd - brushOffset;
		var dynamicValue = this.getDynamicValue(note);
		var channel = note.get_hasBend() || note.beat.get_hasWhammyBar() || note.beat.vibrato != 0 ? track.playbackInfo.secondaryChannel : track.playbackInfo.primaryChannel;
		var initialBend = 32;
		if(note.get_hasBend()) {
			var this1 = note.bendPoints[0].value * 2.75;
			initialBend = initialBend + system.Convert.toInt32_Double(Math.round(this1));
		} else if(note.beat.get_hasWhammyBar()) {
			var this2 = note.beat.whammyBarPoints[0].value * 2.75;
			initialBend = initialBend + system.Convert.toInt32_Double(Math.round(this2));
		} else if(note.isTieDestination) {
			initialBend = 0;
		}
		if(initialBend > 0) {
			this._handler.addBend(track.index,noteStart,system.Convert.toUInt8(channel),initialBend);
		}
		if(note.beat.fadeIn) {
			this.generateFadeIn(note,noteStart,noteDuration);
		}
		if(note.get_isTrill() && !staff.isPercussion) {
			this.generateTrill(note,noteStart,noteDuration,noteKey,dynamicValue,channel);
			return;
		}
		if(note.beat.get_isTremolo()) {
			this.generateTremoloPicking(note,noteStart,noteDuration,noteKey,dynamicValue,channel);
			return;
		}
		if(note.get_hasBend()) {
			this.generateBend(note,noteStart,noteDuration,channel);
		} else if(note.beat.get_hasWhammyBar() && note.index == 0) {
			this.generateWhammy(note.beat,noteStart,noteDuration,channel);
		} else if(!(note.slideInType != 0 || note.slideOutType != 0)) {
			if(note.vibrato != 0) {
				this.generateVibrato(note,noteStart,noteDuration,channel);
			}
		}
		if(!note.isTieDestination) {
			var noteSoundDuration = Math.max(noteDuration.untilTieEnd,noteDuration.letRingEnd);
			this._handler.addNote(track.index,noteStart,noteSoundDuration,system.Convert.toUInt8(noteKey),dynamicValue,system.Convert.toUInt8(channel));
		}
	}
	,getNoteDuration: function(note,duration) {
		var durationWithEffects = new alphaTab.audio.generator.MidiNoteDuration();
		durationWithEffects.noteOnly = duration;
		durationWithEffects.untilTieEnd = duration;
		durationWithEffects.letRingEnd = duration;
		if(note.isDead) {
			durationWithEffects.noteOnly = this.applyStaticDuration(30,duration);
			durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
			durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
			return durationWithEffects;
		}
		if(note.isPalmMute) {
			durationWithEffects.noteOnly = this.applyStaticDuration(80,duration);
			durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
			durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
			return durationWithEffects;
		}
		if(note.isStaccato) {
			durationWithEffects.noteOnly = duration / 2 | 0;
			durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
			durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
			return durationWithEffects;
		}
		if(note.get_isTieOrigin()) {
			var endNote = note.tieDestination;
			if(endNote != null) {
				if(!note.isTieDestination) {
					var startTick = note.beat.get_absolutePlaybackStart();
					var tieDestinationDuration = this.getNoteDuration(endNote,endNote.beat.playbackDuration);
					var endTick = endNote.beat.get_absolutePlaybackStart() + tieDestinationDuration.untilTieEnd;
					durationWithEffects.untilTieEnd = endTick - startTick;
				} else {
					var tieDestinationDuration1 = this.getNoteDuration(endNote,endNote.beat.playbackDuration);
					durationWithEffects.untilTieEnd = duration + tieDestinationDuration1.untilTieEnd;
				}
			}
		}
		if(note.isLetRing && this._settings.notation.notationMode == 0) {
			var lastLetRingBeat = note.beat;
			var letRingEnd = 0;
			var maxDuration = note.beat.voice.bar.get_masterBar().calculateDuration();
			while(lastLetRingBeat.nextBeat != null) {
				var next = lastLetRingBeat.nextBeat;
				if(next.get_isRest()) {
					break;
				}
				if(note.get_isStringed() && next.hasNoteOnString(note.string)) {
					break;
				}
				lastLetRingBeat = lastLetRingBeat.nextBeat;
				letRingEnd = lastLetRingBeat.get_absolutePlaybackStart() - note.beat.get_absolutePlaybackStart() + lastLetRingBeat.playbackDuration;
				if(letRingEnd > maxDuration) {
					letRingEnd = maxDuration;
					break;
				}
			}
			if(lastLetRingBeat == note.beat) {
				durationWithEffects.letRingEnd = duration;
			} else {
				durationWithEffects.letRingEnd = letRingEnd;
			}
		} else {
			durationWithEffects.letRingEnd = durationWithEffects.untilTieEnd;
		}
		return durationWithEffects;
	}
	,applyStaticDuration: function(duration,maximum) {
		var value = this._currentTempo * duration / 60 | 0;
		return Math.min(value,maximum);
	}
	,getDynamicValue: function(note) {
		var dynamicValue = note.dynamics;
		if(!note.beat.voice.bar.staff.isPercussion && note.hammerPullOrigin != null) {
			--dynamicValue;
		}
		if(note.isGhost) {
			--dynamicValue;
		}
		var _g = note.accentuated;
		switch(_g) {
		case 1:
			++dynamicValue;
			break;
		case 2:
			dynamicValue += 2;
			break;
		default:
		}
		return dynamicValue;
	}
	,generateFadeIn: function(note,noteStart,noteDuration) {
		var track = note.beat.voice.bar.staff.track;
		var endVolume = alphaTab.audio.generator.MidiFileGenerator.toChannelShort(track.playbackInfo.volume);
		var volumeFactor = js.Boot.__cast(endVolume , Float) / noteDuration.noteOnly;
		var tickStep = 120;
		var steps = noteDuration.noteOnly / tickStep | 0;
		var endTick = noteStart + noteDuration.noteOnly;
		var i = steps - 1;
		while(i >= 0) {
			var tick = endTick - i * tickStep;
			var volume = (tick - noteStart) * volumeFactor;
			if(i == steps - 1) {
				this._handler.addControlChange(track.index,noteStart,system.Convert.toUInt8(track.playbackInfo.primaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(system.Convert.toInt32_Single(volume)));
				this._handler.addControlChange(track.index,noteStart,system.Convert.toUInt8(track.playbackInfo.secondaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(system.Convert.toInt32_Single(volume)));
			}
			this._handler.addControlChange(track.index,tick,system.Convert.toUInt8(track.playbackInfo.primaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(system.Convert.toInt32_Single(volume)));
			this._handler.addControlChange(track.index,tick,system.Convert.toUInt8(track.playbackInfo.secondaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(system.Convert.toInt32_Single(volume)));
			--i;
		}
	}
	,generateVibrato: function(note,noteStart,noteDuration,channel) {
		var phaseLength;
		var bendAmplitude;
		var _g = note.vibrato;
		switch(_g) {
		case 1:
			phaseLength = this._settings.player.vibrato.noteSlightLength;
			bendAmplitude = this._settings.player.vibrato.noteSlightAmplitude;
			break;
		case 2:
			phaseLength = this._settings.player.vibrato.noteWideLength;
			bendAmplitude = this._settings.player.vibrato.noteWideAmplitude;
			break;
		default:
			return;
		}
		var track = note.beat.voice.bar.staff.track;
		this.generateVibratorWithParams(track,noteStart,noteDuration.noteOnly,phaseLength,bendAmplitude,channel);
	}
	,generateVibratorWithParams: function(track,noteStart,noteDuration,phaseLength,bendAmplitude,channel) {
		var resolution = 16;
		var phaseHalf = phaseLength / 2 | 0;
		noteStart = noteStart + phaseLength;
		var noteEnd = noteStart + noteDuration;
		while(noteStart < noteEnd) {
			var phase = 0;
			var phaseDuration = noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
			while(phase < phaseDuration) {
				var bend = bendAmplitude * Math.sin(phase * 3.14159265358979 / phaseHalf);
				this._handler.addBend(track.index,noteStart + phase,system.Convert.toUInt8(channel),system.Convert.toInt32_Double(32 + bend));
				phase = phase + resolution;
			}
			noteStart = noteStart + phaseLength;
		}
	}
	,generateBend: function(note,noteStart,noteDuration,channel) {
		var bendPoints = note.bendPoints;
		var track = note.beat.voice.bar.staff.track;
		var finalBendValue = null;
		var duration;
		if(note.get_isTieOrigin() && this._settings.notation.extendBendArrowsOnTiedNotes) {
			var endNote = note;
			while(endNote.get_isTieOrigin() && !endNote.tieDestination.get_hasBend()) endNote = endNote.tieDestination;
			var this1 = endNote.beat.get_absolutePlaybackStart() - note.beat.get_absolutePlaybackStart() + this.getNoteDuration(endNote,endNote.beat.playbackDuration).noteOnly;
			duration = this1;
		} else if(note.get_isTieOrigin() && note.beat.graceType != 0) {
			var _g = note.tieDestination.bendType;
			switch(_g) {
			case 2:case 4:case 7:
				finalBendValue = note.tieDestination.bendPoints[1].value;
				break;
			case 6:case 8:
				finalBendValue = note.tieDestination.bendPoints[0].value;
				break;
			default:
			}
			var this2 = Math.max(noteDuration.noteOnly,alphaTab.audio.MidiUtils.millisToTicks(this._settings.player.songBookBendDuration,this._currentTempo));
			duration = this2;
		} else {
			var this3 = noteDuration.noteOnly;
			duration = this3;
		}
		if(bendPoints[0].value > 0 && !note.isContinuedBend) {
			--noteStart;
		}
		var this4 = alphaTab.audio.MidiUtils.millisToTicks(this._settings.player.songBookBendDuration,this._currentTempo);
		var bendDuration = Math.min(duration,this4);
		var this5 = [];
		var playedBendPoints = this5;
		var _g1 = note.bendType;
		switch(_g1) {
		case 1:
			playedBendPoints = bendPoints;
			break;
		case 2:case 3:
			var _g2 = note.bendStyle;
			switch(_g2) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,note.bendPoints[0].value));
				if(finalBendValue == null || finalBendValue < note.bendPoints[1].value) {
					finalBendValue = note.bendPoints[1].value;
				}
				playedBendPoints.push(new alphaTab.model.BendPoint(60,finalBendValue));
				break;
			case 2:
				if(finalBendValue == null || finalBendValue < note.bendPoints[1].value) {
					finalBendValue = note.bendPoints[1].value;
				}
				if(note.beat.graceType == 3) {
					this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,true,new Int32Array([note.bendPoints[0].value,finalBendValue]),bendDuration);
				} else {
					this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([note.bendPoints[0].value,finalBendValue]),bendDuration);
				}
				return;
			default:
			}
			break;
		case 4:
			var _g3 = note.bendStyle;
			switch(_g3) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,note.bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60 / 2 | 0,note.bendPoints[1].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,note.bendPoints[2].value));
				break;
			case 2:
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([note.bendPoints[0].value,note.bendPoints[1].value,note.bendPoints[2].value]),bendDuration);
				return;
			default:
			}
			break;
		case 5:
			playedBendPoints = bendPoints;
			break;
		case 6:
			playedBendPoints = bendPoints;
			break;
		case 7:
			var _g4 = note.bendStyle;
			switch(_g4) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,note.bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,note.bendPoints[1].value));
				break;
			case 2:
				var preBendValue = 32 + note.bendPoints[0].value * 2.75;
				this._handler.addBend(track.index,noteStart,system.Convert.toUInt8(channel),system.Convert.toInt32_Single(preBendValue));
				if(finalBendValue == null || finalBendValue < note.bendPoints[1].value) {
					finalBendValue = note.bendPoints[1].value;
				}
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([note.bendPoints[0].value,finalBendValue]),bendDuration);
				return;
			default:
			}
			break;
		case 8:
			var _g5 = note.bendStyle;
			switch(_g5) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,note.bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,note.bendPoints[1].value));
				break;
			case 2:
				var preBendValue1 = 32 + note.bendPoints[0].value * 2.75;
				this._handler.addBend(track.index,noteStart,system.Convert.toUInt8(channel),system.Convert.toInt32_Single(preBendValue1));
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([note.bendPoints[0].value,note.bendPoints[1].value]),bendDuration);
				return;
			default:
			}
			break;
		default:
		}
		this.generateWhammyOrBend(noteStart,channel,duration,playedBendPoints,track);
	}
	,generateSongBookWhammyOrBend: function(noteStart,channel,duration,track,bendAtBeginning,bendValues,bendDuration) {
		var startTick;
		if(bendAtBeginning) {
			var this1 = noteStart;
			startTick = this1;
		} else {
			startTick = noteStart + duration - bendDuration;
		}
		var ticksBetweenPoints = bendDuration / (bendValues.length - 1);
		var i = 0;
		while(i < bendValues.length - 1) {
			var currentBendValue = 32 + bendValues[i] * 2.75;
			var nextBendValue = 32 + bendValues[i + 1] * 2.75;
			var tick = startTick + ticksBetweenPoints * i;
			this.generateBendValues(tick,channel,track,ticksBetweenPoints,currentBendValue,nextBendValue);
			++i;
		}
	}
	,generateWhammy: function(beat,noteStart,noteDuration,channel) {
		var bendPoints = beat.whammyBarPoints;
		var track = beat.voice.bar.staff.track;
		var this1 = noteDuration.noteOnly;
		var duration = this1;
		if(bendPoints[0].value > 0 && !beat.isContinuedWhammy) {
			--noteStart;
		}
		var this2 = [];
		var playedBendPoints = this2;
		var _g = beat.whammyBarType;
		switch(_g) {
		case 1:
			playedBendPoints = bendPoints;
			break;
		case 2:
			var _g1 = beat.whammyStyle;
			switch(_g1) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,bendPoints[1].value));
				break;
			case 2:
				var this3 = alphaTab.audio.MidiUtils.millisToTicks(this._settings.player.songBookBendDuration,this._currentTempo);
				var whammyDuration = Math.min(duration,this3);
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([bendPoints[0].value,bendPoints[1].value]),whammyDuration);
				return;
			default:
			}
			break;
		case 3:
			var _g2 = beat.whammyStyle;
			switch(_g2) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60 / 2 | 0,bendPoints[1].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,bendPoints[2].value));
				break;
			case 2:
				var this4 = alphaTab.audio.MidiUtils.millisToTicks(this._settings.player.songBookDipDuration,this._currentTempo);
				var whammyDuration1 = Math.min(duration,this4);
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,true,new Int32Array([bendPoints[0].value,bendPoints[1].value,bendPoints[2].value]),whammyDuration1);
				return;
			default:
			}
			break;
		case 4:
			playedBendPoints = bendPoints;
			break;
		case 5:
			playedBendPoints = bendPoints;
			break;
		case 6:
			var _g3 = beat.whammyStyle;
			switch(_g3) {
			case 0:
				playedBendPoints = bendPoints;
				break;
			case 1:
				playedBendPoints.push(new alphaTab.model.BendPoint(0,bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60 / 2 | 0,bendPoints[0].value));
				playedBendPoints.push(new alphaTab.model.BendPoint(60,bendPoints[1].value));
				break;
			case 2:
				var preDiveValue = 32 + bendPoints[0].value * 2.75;
				this._handler.addBend(track.index,noteStart,system.Convert.toUInt8(channel),system.Convert.toInt32_Single(preDiveValue));
				var this5 = alphaTab.audio.MidiUtils.millisToTicks(this._settings.player.songBookBendDuration,this._currentTempo);
				var whammyDuration2 = Math.min(duration,this5);
				this.generateSongBookWhammyOrBend(noteStart,channel,duration,track,false,new Int32Array([bendPoints[0].value,bendPoints[1].value]),whammyDuration2);
				return;
			default:
			}
			break;
		default:
		}
		this.generateWhammyOrBend(noteStart,channel,duration,playedBendPoints,track);
	}
	,generateWhammyOrBend: function(noteStart,channel,duration,playedBendPoints,track) {
		var ticksPerPosition = duration / 60;
		var i = 0;
		while(i < playedBendPoints.length - 1) {
			var currentPoint = playedBendPoints[i];
			var nextPoint = playedBendPoints[i + 1];
			var currentBendValue = 32 + currentPoint.value * 2.75;
			var nextBendValue = 32 + nextPoint.value * 2.75;
			var ticksBetweenPoints = ticksPerPosition * (nextPoint.offset - currentPoint.offset);
			var tick = noteStart + ticksPerPosition * currentPoint.offset;
			this.generateBendValues(tick,channel,track,ticksBetweenPoints,currentBendValue,nextBendValue);
			++i;
		}
	}
	,generateBendValues: function(currentTick,channel,track,ticksBetweenPoints,currentBendValue,nextBendValue) {
		var ticksPerValue = ticksBetweenPoints / Math.abs(nextBendValue - currentBendValue);
		if(currentBendValue < nextBendValue) {
			while(currentBendValue <= nextBendValue) {
				var this1 = currentBendValue;
				this._handler.addBend(track.index,system.Convert.toInt32_Double(currentTick),system.Convert.toUInt8(channel),system.Convert.toInt32_Double(Math.round(this1)));
				++currentBendValue;
				currentTick = currentTick + ticksPerValue;
			}
		} else if(currentBendValue > nextBendValue) {
			while(currentBendValue >= nextBendValue) {
				var this2 = currentBendValue;
				this._handler.addBend(track.index,system.Convert.toInt32_Double(currentTick),system.Convert.toUInt8(channel),system.Convert.toInt32_Double(Math.round(this2)));
				--currentBendValue;
				currentTick = currentTick + ticksPerValue;
			}
		} else {
			var this3 = currentBendValue;
			this._handler.addBend(track.index,system.Convert.toInt32_Double(currentTick),system.Convert.toUInt8(channel),system.Convert.toInt32_Double(Math.round(this3)));
		}
	}
	,generateTrill: function(note,noteStart,noteDuration,noteKey,dynamicValue,channel) {
		var track = note.beat.voice.bar.staff.track;
		var trillKey = note.get_stringTuning() + note.get_trillFret();
		var trillLength = alphaTab.audio.MidiUtils.toTicks(note.trillSpeed);
		var realKey = true;
		var tick = noteStart;
		var end = noteStart + noteDuration.untilTieEnd;
		while(tick + 10 < end) {
			if(tick + trillLength >= end) {
				trillLength = end - tick;
			}
			this._handler.addNote(track.index,tick,trillLength,system.Convert.toUInt8(realKey ? trillKey : noteKey),dynamicValue,system.Convert.toUInt8(channel));
			realKey = !realKey;
			tick = tick + trillLength;
		}
	}
	,generateTremoloPicking: function(note,noteStart,noteDuration,noteKey,dynamicValue,channel) {
		var track = note.beat.voice.bar.staff.track;
		var tpLength = alphaTab.audio.MidiUtils.toTicks(note.beat.tremoloSpeed);
		var tick = noteStart;
		var end = noteStart + noteDuration.untilTieEnd;
		while(tick + 10 < end) {
			if(tick + tpLength >= end) {
				tpLength = end - tick;
			}
			this._handler.addNote(track.index,tick,tpLength,system.Convert.toUInt8(noteKey),dynamicValue,system.Convert.toUInt8(channel));
			tick = tick + tpLength;
		}
	}
	,getBrushInfo: function(beat) {
		var this1 = new Int32Array(beat.voice.bar.staff.tuning.length);
		var brushInfo = this1;
		if(beat.brushType != 0) {
			var stringUsed = 0;
			var stringCount = 0;
			var i = 0;
			var j = beat.notes.length;
			while(i < j) {
				var n = beat.notes[i];
				if(n.isTieDestination) {
					++i;
					continue;
				}
				stringUsed = stringUsed | 1 << n.string - 1;
				++stringCount;
				++i;
			}
			if(beat.notes.length > 0) {
				var brushMove = 0;
				var brushIncrement = beat.brushDuration / (stringCount - 1) | 0;
				var i1 = 0;
				var j1 = beat.voice.bar.staff.tuning.length;
				while(i1 < j1) {
					var index = beat.brushType == 4 || beat.brushType == 2 ? i1 : brushInfo.length - 1 - i1;
					if((stringUsed & 1 << index) != 0) {
						brushInfo[index] = brushMove;
						brushMove = brushMove + brushIncrement;
					}
					++i1;
				}
			}
		}
		return brushInfo;
	}
	,generateAutomation: function(beat,automation,startMove) {
		var _g = automation.type;
		switch(_g) {
		case 1:
			var volume = alphaTab.audio.generator.MidiFileGenerator.toChannelShort(system.Convert.toInt32_Single(automation.value));
			this._handler.addControlChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.primaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(volume));
			this._handler.addControlChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.secondaryChannel),system.Convert.toUInt8(7),system.Convert.toUInt8(volume));
			break;
		case 2:
			this._handler.addProgramChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.primaryChannel),system.Convert.toUInt8(system.Convert.toInt32_Single(automation.value)));
			this._handler.addProgramChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.secondaryChannel),system.Convert.toUInt8(system.Convert.toInt32_Single(automation.value)));
			break;
		case 3:
			var balance = alphaTab.audio.generator.MidiFileGenerator.toChannelShort(system.Convert.toInt32_Single(automation.value));
			this._handler.addControlChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.primaryChannel),system.Convert.toUInt8(10),system.Convert.toUInt8(balance));
			this._handler.addControlChange(beat.voice.bar.staff.track.index,beat.playbackStart + startMove,system.Convert.toUInt8(beat.voice.bar.staff.track.playbackInfo.secondaryChannel),system.Convert.toUInt8(10),system.Convert.toUInt8(balance));
			break;
		default:
		}
	}
	,__class__: alphaTab.audio.generator.MidiFileGenerator
};
alphaTab.audio.generator.MidiFileGenerator_TripletFeelDurations = function() {
	this.firstBeatDuration = 0;
	this.secondBeatStartOffset = 0;
	this.secondBeatDuration = 0;
};
alphaTab.audio.generator.MidiFileGenerator_TripletFeelDurations.__name__ = ["alphaTab","audio","generator","MidiFileGenerator_TripletFeelDurations"];
alphaTab.audio.generator.MidiFileGenerator_TripletFeelDurations.prototype = {
	__class__: alphaTab.audio.generator.MidiFileGenerator_TripletFeelDurations
};
alphaTab.audio.generator.MidiNoteDuration = function() {
	this.noteOnly = 0;
	this.untilTieEnd = 0;
	this.letRingEnd = 0;
};
alphaTab.audio.generator.MidiNoteDuration.__name__ = ["alphaTab","audio","generator","MidiNoteDuration"];
alphaTab.audio.generator.MidiNoteDuration.prototype = {
	__class__: alphaTab.audio.generator.MidiNoteDuration
};
alphaTab.audio.generator.MidiPlaybackController = function(score) {
	this._score = null;
	this._repeatStartIndex = 0;
	this._repeatNumber = 0;
	this._repeatOpen = false;
	this.shouldPlay = false;
	this.index = 0;
	this.currentTick = 0;
	this._score = score;
	this.shouldPlay = true;
	this.index = 0;
	this.currentTick = 0;
};
alphaTab.audio.generator.MidiPlaybackController.__name__ = ["alphaTab","audio","generator","MidiPlaybackController"];
alphaTab.audio.generator.MidiPlaybackController.prototype = {
	get_finished: function() {
		return this.index >= this._score.masterBars.length;
	}
	,processCurrent: function() {
		var masterBar = this._score.masterBars[this.index];
		var masterBarAlternateEndings = masterBar.alternateEndings;
		if(!masterBar.repeatGroup.isClosed && masterBar.repeatGroup.openings[masterBar.repeatGroup.openings.length - 1] == masterBar) {
			this._repeatNumber = 0;
			this._repeatOpen = false;
		}
		if((masterBar.isRepeatStart || masterBar.index == 0) && this._repeatNumber == 0) {
			this._repeatStartIndex = this.index;
			this._repeatOpen = true;
		} else if(masterBar.isRepeatStart) {
			this.shouldPlay = true;
		}
		if(this._repeatOpen && masterBarAlternateEndings > 0) {
			if((masterBarAlternateEndings & 1 << this._repeatNumber) == 0) {
				this.shouldPlay = false;
			} else {
				this.shouldPlay = true;
			}
		}
		if(this.shouldPlay) {
			this.currentTick = this.currentTick + masterBar.calculateDuration();
		}
	}
	,moveNext: function() {
		var masterBar = this._score.masterBars[this.index];
		var masterBarRepeatCount = masterBar.repeatCount - 1;
		if(this._repeatOpen && masterBarRepeatCount > 0) {
			if(this._repeatNumber < masterBarRepeatCount) {
				this.index = this._repeatStartIndex;
				this._repeatNumber++;
			} else {
				this._repeatNumber = 0;
				this._repeatOpen = false;
				this.shouldPlay = true;
				this.index++;
			}
		} else {
			this.index++;
		}
	}
	,__class__: alphaTab.audio.generator.MidiPlaybackController
};
alphaTab.audio.synth.MidiFileSequencerTempoChange = function(bpm,ticks,time) {
	this.bpm = 0.0;
	this.ticks = 0;
	this.time = 0;
	this.bpm = bpm;
	this.ticks = ticks;
	this.time = time;
};
alphaTab.audio.synth.MidiFileSequencerTempoChange.__name__ = ["alphaTab","audio","synth","MidiFileSequencerTempoChange"];
alphaTab.audio.synth.MidiFileSequencerTempoChange.prototype = {
	__class__: alphaTab.audio.synth.MidiFileSequencerTempoChange
};
alphaTab.audio.synth.PlaybackRange = $hx_exports["alphaTab"]["audio"]["synth"]["PlaybackRange"] = function() {
	this.startTick = 0;
	this.endTick = 0;
};
alphaTab.audio.synth.PlaybackRange.__name__ = ["alphaTab","audio","synth","PlaybackRange"];
alphaTab.audio.synth.PlaybackRange.prototype = {
	__class__: alphaTab.audio.synth.PlaybackRange
};
alphaTab.audio.synth._PlayerState = {};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"]["PlayerState_Impl_"] = {};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.__name__ = ["alphaTab","audio","synth","_PlayerState","PlayerState_Impl_"];
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Paused";
	case 1:
		return "Playing";
	}
	return "";
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "paused":
		return 0;
	case "playing":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.PlayerStateChangedEventArgs = $hx_exports["alphaTab"]["audio"]["synth"]["PlayerStateChangedEventArgs"] = function(state,stopped) {
	this.state = 0;
	this.stopped = false;
	this.state = state;
	this.stopped = stopped;
};
alphaTab.audio.synth.PlayerStateChangedEventArgs.__name__ = ["alphaTab","audio","synth","PlayerStateChangedEventArgs"];
alphaTab.audio.synth.PlayerStateChangedEventArgs.prototype = {
	__class__: alphaTab.audio.synth.PlayerStateChangedEventArgs
};
alphaTab.audio.synth.PositionChangedEventArgs = $hx_exports["alphaTab"]["audio"]["synth"]["PositionChangedEventArgs"] = function(currentTime,endTime,currentTick,endTick) {
	this.currentTime = 0.0;
	this.endTime = 0.0;
	this.currentTick = 0;
	this.endTick = 0;
	this.currentTime = currentTime;
	this.endTime = endTime;
	this.currentTick = currentTick;
	this.endTick = endTick;
};
alphaTab.audio.synth.PositionChangedEventArgs.__name__ = ["alphaTab","audio","synth","PositionChangedEventArgs"];
alphaTab.audio.synth.PositionChangedEventArgs.prototype = {
	__class__: alphaTab.audio.synth.PositionChangedEventArgs
};
alphaTab.audio.synth.ds = {};
alphaTab.audio.synth.ds.CircularSampleBuffer = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["CircularSampleBuffer"] = function(size) {
	this._buffer = null;
	this._writePosition = 0;
	this._readPosition = 0;
	this.count = 0;
	var this1 = new Float32Array(size);
	this._buffer = this1;
	this._writePosition = 0;
	this._readPosition = 0;
	this.count = 0;
};
alphaTab.audio.synth.ds.CircularSampleBuffer.__name__ = ["alphaTab","audio","synth","ds","CircularSampleBuffer"];
alphaTab.audio.synth.ds.CircularSampleBuffer.prototype = {
	clear: function() {
		this._readPosition = 0;
		this._writePosition = 0;
		this.count = 0;
		var this1 = new Float32Array(this._buffer.length);
		this._buffer = this1;
	}
	,write: function(data,offset,count) {
		var samplesWritten = 0;
		if(count > this._buffer.length - this.count) {
			count = this._buffer.length - this.count;
		}
		var writeToEnd = Math.min(this._buffer.length - this._writePosition,count);
		var dst = this._buffer;
		var dstOffset = this._writePosition;
		dst.set(data.subarray(offset,offset+writeToEnd), dstOffset);
		this._writePosition = this._writePosition + writeToEnd;
		this._writePosition = this._writePosition % this._buffer.length;
		samplesWritten = samplesWritten + writeToEnd;
		if(samplesWritten < count) {
			var dst1 = this._buffer;
			var dstOffset1 = this._writePosition;
			dst1.set(data.subarray(offset + samplesWritten,offset + samplesWritten+count - samplesWritten), dstOffset1);
			this._writePosition = this._writePosition + (count - samplesWritten);
			samplesWritten = count;
		}
		this.count = this.count + samplesWritten;
		return samplesWritten;
	}
	,read: function(data,offset,count) {
		if(count > this.count) {
			count = this.count;
		}
		var samplesRead = 0;
		var readToEnd = Math.min(this._buffer.length - this._readPosition,count);
		var src = this._buffer;
		var srcOffset = this._readPosition;
		data.set(src.subarray(srcOffset,srcOffset+readToEnd), offset);
		samplesRead = samplesRead + readToEnd;
		this._readPosition = this._readPosition + readToEnd;
		this._readPosition = this._readPosition % this._buffer.length;
		if(samplesRead < count) {
			var src1 = this._buffer;
			var srcOffset1 = this._readPosition;
			data.set(src1.subarray(srcOffset1,srcOffset1+count - samplesRead), offset + samplesRead);
			this._readPosition = this._readPosition + (count - samplesRead);
			samplesRead = count;
		}
		this.count = this.count - samplesRead;
		return samplesRead;
	}
	,__class__: alphaTab.audio.synth.ds.CircularSampleBuffer
};
alphaTab.audio.synth.ds.LinkedList = function() {
	this.first = null;
	this.length = 0;
	this.length = 0;
};
alphaTab.audio.synth.ds.LinkedList.__name__ = ["alphaTab","audio","synth","ds","LinkedList"];
alphaTab.audio.synth.ds.LinkedList.prototype = {
	addFirst: function(value) {
		var node = new alphaTab.audio.synth.ds.LinkedListNode();
		node.value = value;
		if(this.first == null) {
			this.insertNodeToEmptyList(node);
		} else {
			this.insertNodeBefore(this.first,node);
			this.first = node;
		}
	}
	,addLast: function(value) {
		var node = new alphaTab.audio.synth.ds.LinkedListNode();
		node.value = value;
		if(this.first == null) {
			this.insertNodeToEmptyList(node);
		} else {
			this.insertNodeBefore(this.first,node);
		}
	}
	,removeFirst: function() {
		if(this.first == null) {
			return null;
		}
		var v = this.first.value;
		this.remove(this.first);
		return v;
	}
	,removeLast: function() {
		if(this.first == null) {
			return null;
		}
		var v = this.first.PrevInternal != null ? this.first.PrevInternal.value : null;
		this.remove(this.first.PrevInternal);
		return v;
	}
	,remove: function(n) {
		if(n.NextInternal == n) {
			this.first = null;
		} else {
			n.NextInternal.PrevInternal = n.PrevInternal;
			n.PrevInternal.NextInternal = n.NextInternal;
			if(this.first == n) {
				this.first = n.NextInternal;
			}
		}
		n.invalidate();
		this.length--;
	}
	,insertNodeBefore: function(node,newNode) {
		newNode.NextInternal = node;
		newNode.PrevInternal = node.PrevInternal;
		node.PrevInternal.NextInternal = newNode;
		node.PrevInternal = newNode;
		newNode.List = this;
		this.length++;
	}
	,insertNodeToEmptyList: function(node) {
		node.NextInternal = node;
		node.PrevInternal = node;
		node.List = this;
		this.first = node;
		this.length++;
	}
	,__class__: alphaTab.audio.synth.ds.LinkedList
};
alphaTab.audio.synth.ds.LinkedListNode = function() {
	this.List = null;
	this.NextInternal = null;
	this.PrevInternal = null;
	this.value = null;
};
alphaTab.audio.synth.ds.LinkedListNode.__name__ = ["alphaTab","audio","synth","ds","LinkedListNode"];
alphaTab.audio.synth.ds.LinkedListNode.prototype = {
	get_next: function() {
		if(this.NextInternal == null || this.List.first == this.NextInternal) {
			return null;
		} else {
			return this.NextInternal;
		}
	}
	,get_prev: function() {
		if(this.PrevInternal == null || this == this.List.first) {
			return null;
		} else {
			return this.PrevInternal;
		}
	}
	,invalidate: function() {
		this.List = null;
		this.NextInternal = null;
		this.PrevInternal = null;
	}
	,__class__: alphaTab.audio.synth.ds.LinkedListNode
};
alphaTab.audio.synth.midi = {};
alphaTab.audio.synth.midi.MidiFile = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["MidiFile"] = function() {
	this.division = 0;
	this.events = null;
	this.division = 960;
	var this1 = [];
	this.events = this1;
};
alphaTab.audio.synth.midi.MidiFile.__name__ = ["alphaTab","audio","synth","midi","MidiFile"];
alphaTab.audio.synth.midi.MidiFile.writeVariableInt = function(s,value) {
	var this1 = new Uint8Array(4);
	var array = this1;
	var n = 0;
	while(true) {
		array[n++] = system.Convert.toUInt8(value & 127 & 255);
		value = value >> 7;
		if(!(value > 0)) {
			break;
		}
	}
	while(n > 0) {
		--n;
		if(n > 0) {
			s.writeByte(system.Convert.toUInt8(array[n] | 128));
		} else {
			s.writeByte(array[n]);
		}
	}
};
alphaTab.audio.synth.midi.MidiFile.prototype = {
	addEvent: function(e) {
		if(this.events.length == 0) {
			this.events.push(e);
		} else {
			var insertPos = this.events.length;
			while(insertPos > 0) {
				var prevItem = this.events[insertPos - 1];
				if(prevItem.tick > e.tick) {
					--insertPos;
				} else {
					break;
				}
			}
			this.events.splice(insertPos,0,e);
		}
	}
	,toBinary: function() {
		var data = alphaTab.io.ByteBuffer.empty();
		this.writeTo(data);
		return data.toArray();
	}
	,writeTo: function(s) {
		var b = new Uint8Array([77,84,104,100]);
		s.write(b,0,b.length);
		b = new Uint8Array([0,0,0,6]);
		s.write(b,0,b.length);
		b = new Uint8Array([0,0]);
		s.write(b,0,b.length);
		var v = 1;
		b = new Uint8Array([system.Convert.toUInt8(v >> 8 & 255),system.Convert.toUInt8(v & 255)]);
		s.write(b,0,b.length);
		v = system.Convert.toInt16(960);
		b = new Uint8Array([system.Convert.toUInt8(v >> 8 & 255),system.Convert.toUInt8(v & 255)]);
		s.write(b,0,b.length);
		var trackData = alphaTab.io.ByteBuffer.empty();
		var previousTick = 0;
		var midiEvent = $iterator(this.events)();
		while(midiEvent.hasNext()) {
			var midiEvent1 = midiEvent.next();
			var delta = midiEvent1.tick - previousTick;
			alphaTab.audio.synth.midi.MidiFile.writeVariableInt(trackData,delta);
			midiEvent1.writeTo(trackData);
			previousTick = midiEvent1.tick;
		}
		b = new Uint8Array([77,84,114,107]);
		s.write(b,0,b.length);
		var data = trackData.toArray();
		var l = data.length;
		b = new Uint8Array([system.Convert.toUInt8(l >> 24 & 255),system.Convert.toUInt8(l >> 16 & 255),system.Convert.toUInt8(l >> 8 & 255),system.Convert.toUInt8(l & 255)]);
		s.write(b,0,b.length);
		s.write(data,0,data.length);
	}
	,__class__: alphaTab.audio.synth.midi.MidiFile
};
alphaTab.audio.synth.midi.MidiHelper = function() { };
alphaTab.audio.synth.midi.MidiHelper.__name__ = ["alphaTab","audio","synth","midi","MidiHelper"];
alphaTab.audio.synth.midi.event = {};
alphaTab.audio.synth.midi.event._ControllerType = {};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerType"]["ControllerType_Impl_"] = {};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_ControllerType","ControllerType_Impl_"];
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "BankSelectCoarse";
	case 1:
		return "ModulationCoarse";
	case 6:
		return "DataEntryCoarse";
	case 7:
		return "VolumeCoarse";
	case 10:
		return "PanCoarse";
	case 11:
		return "ExpressionControllerCoarse";
	case 33:
		return "ModulationFine";
	case 38:
		return "DataEntryFine";
	case 39:
		return "VolumeFine";
	case 42:
		return "PanFine";
	case 43:
		return "ExpressionControllerFine";
	case 64:
		return "HoldPedal";
	case 68:
		return "LegatoPedal";
	case 98:
		return "NonRegisteredParameterFine";
	case 99:
		return "NonRegisteredParameterCourse";
	case 100:
		return "RegisteredParameterFine";
	case 101:
		return "RegisteredParameterCourse";
	case 121:
		return "ResetControllers";
	case 123:
		return "AllNotesOff";
	}
	return "";
};
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "allnotesoff":
		return 123;
	case "bankselectcoarse":
		return 0;
	case "dataentrycoarse":
		return 6;
	case "dataentryfine":
		return 38;
	case "expressioncontrollercoarse":
		return 11;
	case "expressioncontrollerfine":
		return 43;
	case "holdpedal":
		return 64;
	case "legatopedal":
		return 68;
	case "modulationcoarse":
		return 1;
	case "modulationfine":
		return 33;
	case "nonregisteredparametercourse":
		return 99;
	case "nonregisteredparameterfine":
		return 98;
	case "pancoarse":
		return 10;
	case "panfine":
		return 42;
	case "registeredparametercourse":
		return 101;
	case "registeredparameterfine":
		return 100;
	case "resetcontrollers":
		return 121;
	case "volumecoarse":
		return 7;
	case "volumefine":
		return 39;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.midi.event.MidiEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MidiEvent"] = function(tick,status,data1,data2) {
	this.message = 0;
	this.tick = 0;
	this.tick = tick;
	this.message = status | data1 << 8 | data2 << 16;
};
alphaTab.audio.synth.midi.event.MidiEvent.__name__ = ["alphaTab","audio","synth","midi","event","MidiEvent"];
alphaTab.audio.synth.midi.event.MidiEvent.prototype = {
	get_channel: function() {
		return this.message & 15;
	}
	,get_command: function() {
		return js.Boot.__cast(this.message & 240 , Int);
	}
	,get_data1: function() {
		return (this.message & 65280) >> 8;
	}
	,set_data1: function(value) {
		this.message = this.message & -65281;
		this.message = this.message | value << 8;
		return this.get_data1();
	}
	,get_data2: function() {
		return (this.message & 16711680) >> 16;
	}
	,set_data2: function(value) {
		this.message = this.message & -16711681;
		this.message = this.message | value << 16;
		return this.get_data2();
	}
	,writeTo: function(s) {
		var b = new Uint8Array([system.Convert.toUInt8(this.message >> 24 & 255),system.Convert.toUInt8(this.message >> 16 & 255),system.Convert.toUInt8(this.message >> 8 & 255),system.Convert.toUInt8(this.message & 255)]);
		s.write(b,0,b.length);
	}
	,__class__: alphaTab.audio.synth.midi.event.MidiEvent
};
alphaTab.audio.synth.midi.event.MetaEvent = function(delta,status,data1,data2) {
	alphaTab.audio.synth.midi.event.MidiEvent.call(this,delta,status,data1,data2);
};
alphaTab.audio.synth.midi.event.MetaEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaEvent"];
alphaTab.audio.synth.midi.event.MetaEvent.__super__ = alphaTab.audio.synth.midi.event.MidiEvent;
alphaTab.audio.synth.midi.event.MetaEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MidiEvent.prototype,{
	get_channel: function() {
		return -1;
	}
	,get_command: function() {
		return js.Boot.__cast(this.message & 255 , Int);
	}
	,get_metaStatus: function() {
		return this.get_data1();
	}
	,__class__: alphaTab.audio.synth.midi.event.MetaEvent
});
alphaTab.audio.synth.midi.event.MetaDataEvent = function(delta,status,metaId,data) {
	alphaTab.audio.synth.midi.event.MetaEvent.call(this,delta,status,metaId,0);
	this.data = null;
	this.data = data;
};
alphaTab.audio.synth.midi.event.MetaDataEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaDataEvent"];
alphaTab.audio.synth.midi.event.MetaDataEvent.__super__ = alphaTab.audio.synth.midi.event.MetaEvent;
alphaTab.audio.synth.midi.event.MetaDataEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MetaEvent.prototype,{
	writeTo: function(s) {
		s.writeByte(255);
		s.writeByte(system.Convert.toUInt8(this.get_metaStatus()));
		var l = this.data.length;
		alphaTab.audio.synth.midi.MidiFile.writeVariableInt(s,l);
		s.write(this.data,0,this.data.length);
	}
	,__class__: alphaTab.audio.synth.midi.event.MetaDataEvent
});
alphaTab.audio.synth.midi.event._MetaEventTypeEnum = {};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_ = {};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_MetaEventTypeEnum","MetaEventTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "SequenceNumber";
	case 1:
		return "TextEvent";
	case 2:
		return "CopyrightNotice";
	case 3:
		return "SequenceOrTrackName";
	case 4:
		return "InstrumentName";
	case 5:
		return "LyricText";
	case 6:
		return "MarkerText";
	case 7:
		return "CuePoint";
	case 8:
		return "PatchName";
	case 9:
		return "PortName";
	case 32:
		return "MidiChannel";
	case 33:
		return "MidiPort";
	case 47:
		return "EndOfTrack";
	case 81:
		return "Tempo";
	case 84:
		return "SmpteOffset";
	case 88:
		return "TimeSignature";
	case 89:
		return "KeySignature";
	case 127:
		return "SequencerSpecific";
	}
	return "";
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "copyrightnotice":
		return 2;
	case "cuepoint":
		return 7;
	case "endoftrack":
		return 47;
	case "instrumentname":
		return 4;
	case "keysignature":
		return 89;
	case "lyrictext":
		return 5;
	case "markertext":
		return 6;
	case "midichannel":
		return 32;
	case "midiport":
		return 33;
	case "patchname":
		return 8;
	case "portname":
		return 9;
	case "sequencenumber":
		return 0;
	case "sequenceortrackname":
		return 3;
	case "sequencerspecific":
		return 127;
	case "smpteoffset":
		return 84;
	case "tempo":
		return 81;
	case "textevent":
		return 1;
	case "timesignature":
		return 88;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.midi.event.MetaNumberEvent = function(delta,status,metaId,number) {
	alphaTab.audio.synth.midi.event.MetaEvent.call(this,delta,status,metaId,0);
	this.value = 0;
	this.value = number;
};
alphaTab.audio.synth.midi.event.MetaNumberEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaNumberEvent"];
alphaTab.audio.synth.midi.event.MetaNumberEvent.__super__ = alphaTab.audio.synth.midi.event.MetaEvent;
alphaTab.audio.synth.midi.event.MetaNumberEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MetaEvent.prototype,{
	writeTo: function(s) {
		s.writeByte(255);
		s.writeByte(system.Convert.toUInt8(this.get_metaStatus()));
		alphaTab.audio.synth.midi.MidiFile.writeVariableInt(s,3);
		var b = new Uint8Array([system.Convert.toUInt8(this.value >> 16 & 255),system.Convert.toUInt8(this.value >> 8 & 255),system.Convert.toUInt8(this.value & 255)]);
		s.write(b,0,b.length);
	}
	,__class__: alphaTab.audio.synth.midi.event.MetaNumberEvent
});
alphaTab.audio.synth.midi.event._MidiEventType = {};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventType"]["MidiEventType_Impl_"] = {};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_MidiEventType","MidiEventType_Impl_"];
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.toString = function(this1) {
	switch(this1) {
	case 128:
		return "NoteOff";
	case 144:
		return "NoteOn";
	case 160:
		return "NoteAftertouch";
	case 176:
		return "Controller";
	case 192:
		return "ProgramChange";
	case 208:
		return "ChannelAftertouch";
	case 224:
		return "PitchBend";
	case 255:
		return "Meta";
	}
	return "";
};
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "channelaftertouch":
		return 208;
	case "controller":
		return 176;
	case "meta":
		return 255;
	case "noteaftertouch":
		return 160;
	case "noteoff":
		return 128;
	case "noteon":
		return 144;
	case "pitchbend":
		return 224;
	case "programchange":
		return 192;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.midi.event.SystemCommonEvent = function(delta,status,data1,data2) {
	alphaTab.audio.synth.midi.event.MidiEvent.call(this,delta,status,data1,data2);
};
alphaTab.audio.synth.midi.event.SystemCommonEvent.__name__ = ["alphaTab","audio","synth","midi","event","SystemCommonEvent"];
alphaTab.audio.synth.midi.event.SystemCommonEvent.__super__ = alphaTab.audio.synth.midi.event.MidiEvent;
alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MidiEvent.prototype,{
	get_channel: function() {
		return -1;
	}
	,get_command: function() {
		return js.Boot.__cast(this.message & 255 , Int);
	}
	,__class__: alphaTab.audio.synth.midi.event.SystemCommonEvent
});
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum = {};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_ = {};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_SystemCommonTypeEnum","SystemCommonTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 240:
		return "SystemExclusive";
	case 241:
		return "MtcQuarterFrame";
	case 242:
		return "SongPosition";
	case 243:
		return "SongSelect";
	case 246:
		return "TuneRequest";
	case 247:
		return "SystemExclusive2";
	}
	return "";
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "mtcquarterframe":
		return 241;
	case "songposition":
		return 242;
	case "songselect":
		return 243;
	case "systemexclusive":
		return 240;
	case "systemexclusive2":
		return 247;
	case "tunerequest":
		return 246;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.midi.event.SystemExclusiveEvent = function(delta,status,id,data) {
	alphaTab.audio.synth.midi.event.SystemCommonEvent.call(this,delta,status,system.Convert.toUInt8(id & 255),system.Convert.toUInt8(id >> 8));
	this.data = null;
	this.data = data;
};
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__name__ = ["alphaTab","audio","synth","midi","event","SystemExclusiveEvent"];
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__super__ = alphaTab.audio.synth.midi.event.SystemCommonEvent;
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.prototype = $extend(alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype,{
	get_manufacturerId: function() {
		return this.message >> 8;
	}
	,writeTo: function(s) {
		s.writeByte(240);
		var l = this.data.length + 2;
		s.writeByte(system.Convert.toUInt8(this.get_manufacturerId()));
		var b = new Uint8Array([system.Convert.toUInt8(l >> 24 & 255),system.Convert.toUInt8(l >> 16 & 255),system.Convert.toUInt8(l >> 8 & 255),system.Convert.toUInt8(l & 255)]);
		s.write(b,0,b.length);
		s.writeByte(247);
	}
	,__class__: alphaTab.audio.synth.midi.event.SystemExclusiveEvent
});
alphaTab.audio.synth.soundFont = {};
alphaTab.audio.synth.soundFont.Hydra = function() {
	this.phdrs = null;
	this.pbags = null;
	this.pmods = null;
	this.pgens = null;
	this.insts = null;
	this.ibags = null;
	this.imods = null;
	this.igens = null;
	this.sHdrs = null;
	this.fontSamples = null;
	var this1 = [];
	this.phdrs = this1;
	var this2 = [];
	this.pbags = this2;
	var this3 = [];
	this.pmods = this3;
	var this4 = [];
	this.pgens = this4;
	var this5 = [];
	this.insts = this5;
	var this6 = [];
	this.ibags = this6;
	var this7 = [];
	this.imods = this7;
	var this8 = [];
	this.igens = this8;
	var this9 = [];
	this.sHdrs = this9;
};
alphaTab.audio.synth.soundFont.Hydra.__name__ = ["alphaTab","audio","synth","soundFont","Hydra"];
alphaTab.audio.synth.soundFont.Hydra.loadSamples = function(chunk,reader) {
	var samplesLeft = system.Convert.toInt32(chunk.size / 2 | 0);
	var this1 = new Float32Array(samplesLeft);
	var samples = this1;
	var samplesPos = 0;
	var this2 = new Uint8Array(2048);
	var sampleBuffer = this2;
	var this3 = new Int16Array(sampleBuffer.length / 2 | 0);
	var testBuffer = this3;
	while(samplesLeft > 0) {
		var samplesToRead = Math.min(samplesLeft,sampleBuffer.length / 2 | 0);
		reader.read(sampleBuffer,0,samplesToRead * 2);
		var i = 0;
		while(i < samplesToRead) {
			var this4 = sampleBuffer[i * 2];
			testBuffer[i] = alphaTab.platform.Platform.toInt16(sampleBuffer[i * 2 + 1] << 8 | this4);
			var this5 = 32767;
			samples[samplesPos + i] = testBuffer[i] / this5;
			++i;
		}
		samplesLeft = samplesLeft - samplesToRead;
		samplesPos = samplesPos + samplesToRead;
	}
	return samples;
};
alphaTab.audio.synth.soundFont.Hydra.prototype = {
	load: function(readable) {
		var chunkHead = new alphaTab.audio.synth.soundFont.RiffChunk();
		var chunkFastList = new alphaTab.audio.synth.soundFont.RiffChunk();
		if(!alphaTab.audio.synth.soundFont.RiffChunk.load(null,chunkHead,readable) || chunkHead.id != "sfbk") {
			return;
		}
		while(alphaTab.audio.synth.soundFont.RiffChunk.load(chunkHead,chunkFastList,readable)) {
			var chunk = new alphaTab.audio.synth.soundFont.RiffChunk();
			if(chunkFastList.id == "pdta") {
				while(alphaTab.audio.synth.soundFont.RiffChunk.load(chunkFastList,chunk,readable)) {
					var _g = chunk.id;
					switch(_g) {
					case "ibag":
						var i = 0;
						var count = chunk.size / system.Convert.toUInt32(4) | 0;
						while(i < count) {
							this.ibags.push(alphaTab.audio.synth.soundFont.HydraIbag.load(readable));
							++i;
						}
						break;
					case "igen":
						var i1 = 0;
						var count1 = chunk.size / system.Convert.toUInt32(4) | 0;
						while(i1 < count1) {
							this.igens.push(alphaTab.audio.synth.soundFont.HydraIgen.load(readable));
							++i1;
						}
						break;
					case "imod":
						var i2 = 0;
						var count2 = chunk.size / system.Convert.toUInt32(10) | 0;
						while(i2 < count2) {
							this.imods.push(alphaTab.audio.synth.soundFont.HydraImod.load(readable));
							++i2;
						}
						break;
					case "inst":
						var i3 = 0;
						var count3 = chunk.size / system.Convert.toUInt32(22) | 0;
						while(i3 < count3) {
							this.insts.push(alphaTab.audio.synth.soundFont.HydraInst.load(readable));
							++i3;
						}
						break;
					case "pbag":
						var i4 = 0;
						var count4 = chunk.size / system.Convert.toUInt32(4) | 0;
						while(i4 < count4) {
							this.pbags.push(alphaTab.audio.synth.soundFont.HydraPbag.load(readable));
							++i4;
						}
						break;
					case "pgen":
						var i5 = 0;
						var count5 = chunk.size / system.Convert.toUInt32(4) | 0;
						while(i5 < count5) {
							this.pgens.push(alphaTab.audio.synth.soundFont.HydraPgen.load(readable));
							++i5;
						}
						break;
					case "phdr":
						var i6 = 0;
						var count6 = chunk.size / system.Convert.toUInt32(38) | 0;
						while(i6 < count6) {
							this.phdrs.push(alphaTab.audio.synth.soundFont.HydraPhdr.load(readable));
							++i6;
						}
						break;
					case "pmod":
						var i7 = 0;
						var count7 = chunk.size / system.Convert.toUInt32(10) | 0;
						while(i7 < count7) {
							this.pmods.push(alphaTab.audio.synth.soundFont.HydraPmod.load(readable));
							++i7;
						}
						break;
					case "shdr":
						var i8 = 0;
						var count8 = chunk.size / system.Convert.toUInt32(46) | 0;
						while(i8 < count8) {
							this.sHdrs.push(alphaTab.audio.synth.soundFont.HydraShdr.load(readable));
							++i8;
						}
						break;
					default:
						readable.set_position(readable.get_position() + system.Convert.toInt32(chunk.size));
					}
				}
			} else if(chunkFastList.id == "sdta") {
				while(alphaTab.audio.synth.soundFont.RiffChunk.load(chunkFastList,chunk,readable)) {
					var _g1 = chunk.id;
					if(_g1 == "smpl") {
						this.fontSamples = alphaTab.audio.synth.soundFont.Hydra.loadSamples(chunk,readable);
					} else {
						readable.set_position(readable.get_position() + system.Convert.toInt32(chunk.size));
					}
				}
			} else {
				readable.set_position(readable.get_position() + system.Convert.toInt32(chunkFastList.size));
			}
		}
	}
	,__class__: alphaTab.audio.synth.soundFont.Hydra
};
alphaTab.audio.synth.soundFont.HydraGenAmount = function() {
	this.wordAmount = 0;
};
alphaTab.audio.synth.soundFont.HydraGenAmount.__name__ = ["alphaTab","audio","synth","soundFont","HydraGenAmount"];
alphaTab.audio.synth.soundFont.HydraGenAmount.load = function(reader) {
	var genAmount = new alphaTab.audio.synth.soundFont.HydraGenAmount();
	genAmount.wordAmount = alphaTab.io.IOHelper.readUInt16LE(reader);
	return genAmount;
};
alphaTab.audio.synth.soundFont.HydraGenAmount.prototype = {
	get_shortAmount: function() {
		return system.Convert.toInt16(this.wordAmount);
	}
	,get_lowByteAmount: function() {
		return system.Convert.toUInt8(this.wordAmount & 255);
	}
	,set_lowByteAmount: function(value) {
		this.wordAmount = system.Convert.toUInt16(this.wordAmount & 65280 | value);
		return this.get_lowByteAmount();
	}
	,get_highByteAmount: function() {
		return system.Convert.toUInt8((this.wordAmount & 65280) >> 8);
	}
	,set_highByteAmount: function(value) {
		this.wordAmount = system.Convert.toUInt16(value & 65280 | this.wordAmount & 255);
		return this.get_highByteAmount();
	}
	,__class__: alphaTab.audio.synth.soundFont.HydraGenAmount
};
alphaTab.audio.synth.soundFont.HydraIbag = function() {
	this.instGenNdx = 0;
	this.instModNdx = 0;
};
alphaTab.audio.synth.soundFont.HydraIbag.__name__ = ["alphaTab","audio","synth","soundFont","HydraIbag"];
alphaTab.audio.synth.soundFont.HydraIbag.load = function(reader) {
	var ibag = new alphaTab.audio.synth.soundFont.HydraIbag();
	ibag.instGenNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	ibag.instModNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	return ibag;
};
alphaTab.audio.synth.soundFont.HydraIbag.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraIbag
};
alphaTab.audio.synth.soundFont.HydraIgen = function() {
	this.genOper = 0;
	this.genAmount = null;
};
alphaTab.audio.synth.soundFont.HydraIgen.__name__ = ["alphaTab","audio","synth","soundFont","HydraIgen"];
alphaTab.audio.synth.soundFont.HydraIgen.load = function(reader) {
	var igen = new alphaTab.audio.synth.soundFont.HydraIgen();
	igen.genOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	igen.genAmount = alphaTab.audio.synth.soundFont.HydraGenAmount.load(reader);
	return igen;
};
alphaTab.audio.synth.soundFont.HydraIgen.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraIgen
};
alphaTab.audio.synth.soundFont.HydraImod = function() {
	this.modSrcOper = 0;
	this.modDestOper = 0;
	this.modAmount = 0;
	this.modAmtSrcOper = 0;
	this.modTransOper = 0;
};
alphaTab.audio.synth.soundFont.HydraImod.__name__ = ["alphaTab","audio","synth","soundFont","HydraImod"];
alphaTab.audio.synth.soundFont.HydraImod.load = function(reader) {
	var imod = new alphaTab.audio.synth.soundFont.HydraImod();
	imod.modSrcOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	imod.modDestOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	imod.modAmount = alphaTab.io.IOHelper.readInt16LE(reader);
	imod.modAmtSrcOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	imod.modTransOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	return imod;
};
alphaTab.audio.synth.soundFont.HydraImod.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraImod
};
alphaTab.audio.synth.soundFont.HydraInst = function() {
	this.instName = null;
	this.instBagNdx = 0;
};
alphaTab.audio.synth.soundFont.HydraInst.__name__ = ["alphaTab","audio","synth","soundFont","HydraInst"];
alphaTab.audio.synth.soundFont.HydraInst.load = function(reader) {
	var inst = new alphaTab.audio.synth.soundFont.HydraInst();
	inst.instName = alphaTab.io.IOHelper.read8BitStringLength(reader,20);
	inst.instBagNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	return inst;
};
alphaTab.audio.synth.soundFont.HydraInst.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraInst
};
alphaTab.audio.synth.soundFont.HydraPbag = function() {
	this.genNdx = 0;
	this.modNdx = 0;
};
alphaTab.audio.synth.soundFont.HydraPbag.__name__ = ["alphaTab","audio","synth","soundFont","HydraPbag"];
alphaTab.audio.synth.soundFont.HydraPbag.load = function(reader) {
	var pbag = new alphaTab.audio.synth.soundFont.HydraPbag();
	pbag.genNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	pbag.modNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	return pbag;
};
alphaTab.audio.synth.soundFont.HydraPbag.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraPbag
};
alphaTab.audio.synth.soundFont.HydraPgen = function() {
	this.genOper = 0;
	this.genAmount = null;
};
alphaTab.audio.synth.soundFont.HydraPgen.__name__ = ["alphaTab","audio","synth","soundFont","HydraPgen"];
alphaTab.audio.synth.soundFont.HydraPgen.load = function(reader) {
	var pgen = new alphaTab.audio.synth.soundFont.HydraPgen();
	pgen.genOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	pgen.genAmount = alphaTab.audio.synth.soundFont.HydraGenAmount.load(reader);
	return pgen;
};
alphaTab.audio.synth.soundFont.HydraPgen.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraPgen
};
alphaTab.audio.synth.soundFont.HydraPhdr = function() {
	this.presetName = null;
	this.preset = 0;
	this.bank = 0;
	this.presetBagNdx = 0;
	this.library = 0;
	this.genre = 0;
	this.morphology = 0;
};
alphaTab.audio.synth.soundFont.HydraPhdr.__name__ = ["alphaTab","audio","synth","soundFont","HydraPhdr"];
alphaTab.audio.synth.soundFont.HydraPhdr.load = function(reader) {
	var phdr = new alphaTab.audio.synth.soundFont.HydraPhdr();
	phdr.presetName = alphaTab.io.IOHelper.read8BitStringLength(reader,20);
	phdr.preset = alphaTab.io.IOHelper.readUInt16LE(reader);
	phdr.bank = alphaTab.io.IOHelper.readUInt16LE(reader);
	phdr.presetBagNdx = alphaTab.io.IOHelper.readUInt16LE(reader);
	phdr.library = alphaTab.io.IOHelper.readUInt32LE(reader);
	phdr.genre = alphaTab.io.IOHelper.readUInt32LE(reader);
	phdr.morphology = alphaTab.io.IOHelper.readUInt32LE(reader);
	return phdr;
};
alphaTab.audio.synth.soundFont.HydraPhdr.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraPhdr
};
alphaTab.audio.synth.soundFont.HydraPmod = function() {
	this.modSrcOper = 0;
	this.modDestOper = 0;
	this.modAmount = 0;
	this.modAmtSrcOper = 0;
	this.modTransOper = 0;
};
alphaTab.audio.synth.soundFont.HydraPmod.__name__ = ["alphaTab","audio","synth","soundFont","HydraPmod"];
alphaTab.audio.synth.soundFont.HydraPmod.load = function(reader) {
	var pmod = new alphaTab.audio.synth.soundFont.HydraPmod();
	pmod.modSrcOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	pmod.modDestOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	pmod.modAmount = alphaTab.io.IOHelper.readUInt16LE(reader);
	pmod.modAmtSrcOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	pmod.modTransOper = alphaTab.io.IOHelper.readUInt16LE(reader);
	return pmod;
};
alphaTab.audio.synth.soundFont.HydraPmod.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraPmod
};
alphaTab.audio.synth.soundFont.HydraShdr = function() {
	this.sampleName = null;
	this.start = 0;
	this.end = 0;
	this.startLoop = 0;
	this.endLoop = 0;
	this.sampleRate = 0;
	this.originalPitch = 0;
	this.pitchCorrection = 0;
	this.sampleLink = 0;
	this.sampleType = 0;
};
alphaTab.audio.synth.soundFont.HydraShdr.__name__ = ["alphaTab","audio","synth","soundFont","HydraShdr"];
alphaTab.audio.synth.soundFont.HydraShdr.load = function(reader) {
	var shdr = new alphaTab.audio.synth.soundFont.HydraShdr();
	shdr.sampleName = alphaTab.io.IOHelper.read8BitStringLength(reader,20);
	shdr.start = alphaTab.io.IOHelper.readUInt32LE(reader);
	shdr.end = alphaTab.io.IOHelper.readUInt32LE(reader);
	shdr.startLoop = alphaTab.io.IOHelper.readUInt32LE(reader);
	shdr.endLoop = alphaTab.io.IOHelper.readUInt32LE(reader);
	shdr.sampleRate = alphaTab.io.IOHelper.readUInt32LE(reader);
	shdr.originalPitch = system.Convert.toUInt8(reader.readByte());
	shdr.pitchCorrection = alphaTab.platform.Platform.readSignedByte(reader);
	shdr.sampleLink = alphaTab.io.IOHelper.readUInt16LE(reader);
	shdr.sampleType = alphaTab.io.IOHelper.readUInt16LE(reader);
	return shdr;
};
alphaTab.audio.synth.soundFont.HydraShdr.prototype = {
	__class__: alphaTab.audio.synth.soundFont.HydraShdr
};
alphaTab.audio.synth.soundFont.RiffChunk = function() {
	this.id = null;
	this.size = 0;
};
alphaTab.audio.synth.soundFont.RiffChunk.__name__ = ["alphaTab","audio","synth","soundFont","RiffChunk"];
alphaTab.audio.synth.soundFont.RiffChunk.load = function(parent,chunk,stream) {
	if(parent != null && system.Convert.toUInt32(8) > parent.size) {
		return false;
	}
	if(stream.get_position() + 8 >= stream.get_length()) {
		return false;
	}
	chunk.id = alphaTab.io.IOHelper.read8BitStringLength(stream,4);
	var tmp;
	var this1 = system.Convert.toUInt16(HxOverrides.cca(chunk.id,0));
	if(!(this1 <= 32)) {
		var this2 = system.Convert.toUInt16(HxOverrides.cca(chunk.id,0));
		tmp = this2 >= 122;
	} else {
		tmp = true;
	}
	if(tmp) {
		return false;
	}
	chunk.size = alphaTab.io.IOHelper.readUInt32LE(stream);
	if(parent != null && system.Convert.toUInt32(8) + chunk.size > parent.size) {
		return false;
	}
	if(parent != null) {
		parent.size = parent.size - (system.Convert.toUInt32(8) + chunk.size);
	}
	var isRiff = chunk.id == "RIFF";
	var isList = chunk.id == "LIST";
	if(isRiff && parent != null) {
		return false;
	}
	if(!isRiff && !isList) {
		return true;
	}
	chunk.id = alphaTab.io.IOHelper.read8BitStringLength(stream,4);
	var tmp1;
	var this3 = system.Convert.toUInt16(HxOverrides.cca(chunk.id,0));
	if(!(this3 <= 32)) {
		var this4 = system.Convert.toUInt16(HxOverrides.cca(chunk.id,0));
		tmp1 = this4 >= 122;
	} else {
		tmp1 = true;
	}
	if(tmp1) {
		return false;
	}
	chunk.size = chunk.size - 4;
	return true;
};
alphaTab.audio.synth.soundFont.RiffChunk.prototype = {
	__class__: alphaTab.audio.synth.soundFont.RiffChunk
};
alphaTab.audio.synth.synthesis.Channel = function() {
	this.presetIndex = 0;
	this.bank = 0;
	this.pitchWheel = 0;
	this.midiPan = 0;
	this.midiVolume = 0;
	this.midiExpression = 0;
	this.midiRpn = 0;
	this.midiData = 0;
	this.panOffset = 0.0;
	this.gainDb = 0.0;
	this.pitchRange = 0.0;
	this.tuning = 0.0;
	this.mixVolume = 0.0;
	this.mute = false;
	this.solo = false;
};
alphaTab.audio.synth.synthesis.Channel.__name__ = ["alphaTab","audio","synth","synthesis","Channel"];
alphaTab.audio.synth.synthesis.Channel.prototype = {
	__class__: alphaTab.audio.synth.synthesis.Channel
};
alphaTab.audio.synth.synthesis.Channels = function() {
	this.activeChannel = 0;
	this.channelList = null;
	var this1 = [];
	this.channelList = this1;
};
alphaTab.audio.synth.synthesis.Channels.__name__ = ["alphaTab","audio","synth","synthesis","Channels"];
alphaTab.audio.synth.synthesis.Channels.prototype = {
	setupVoice: function(tinySoundFont,voice) {
		var c = this.channelList[this.activeChannel];
		var newpan = voice.region.pan + c.panOffset;
		voice.playingChannel = this.activeChannel;
		voice.mixVolume = c.mixVolume;
		voice.noteGainDb = voice.noteGainDb + c.gainDb;
		var tmp;
		if(c.pitchWheel == 8192) {
			tmp = c.tuning;
		} else {
			var this1 = 16383.0;
			var this2 = 2.0;
			tmp = c.pitchWheel / this1 * c.pitchRange * this2 - c.pitchRange + c.tuning;
		}
		voice.calcPitchRatio(tmp,tinySoundFont.outSampleRate);
		if(newpan <= -0.5) {
			voice.panFactorLeft = 1.0;
			voice.panFactorRight = 0.0;
		} else {
			var this3 = 0.5;
			if(newpan >= this3) {
				voice.panFactorLeft = 0.0;
				voice.panFactorRight = 1.0;
			} else {
				var this4 = 0.5;
				var this5 = this4 - newpan;
				voice.panFactorLeft = js.Boot.__cast(Math.sqrt(this5) , Float);
				var this6 = 0.5;
				var this7 = this6 + newpan;
				voice.panFactorRight = js.Boot.__cast(Math.sqrt(this7) , Float);
			}
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.Channels
};
alphaTab.audio.synth.synthesis.Envelope = function() {
	this.delay = 0.0;
	this.attack = 0.0;
	this.hold = 0.0;
	this.decay = 0.0;
	this.sustain = 0.0;
	this.release = 0.0;
	this.keynumToHold = 0.0;
	this.keynumToDecay = 0.0;
};
alphaTab.audio.synth.synthesis.Envelope.__name__ = ["alphaTab","audio","synth","synthesis","Envelope"];
alphaTab.audio.synth.synthesis.Envelope.prototype = {
	Envelope: function() {
		this.delay = 0.0;
		this.attack = 0.0;
		this.hold = 0.0;
		this.decay = 0.0;
		this.sustain = 0.0;
		this.release = 0.0;
		this.keynumToHold = 0.0;
		this.keynumToDecay = 0.0;
		return this;
	}
	,Envelope_Envelope: function(other) {
		this.delay = 0.0;
		this.attack = 0.0;
		this.hold = 0.0;
		this.decay = 0.0;
		this.sustain = 0.0;
		this.release = 0.0;
		this.keynumToHold = 0.0;
		this.keynumToDecay = 0.0;
		this.delay = other.delay;
		this.attack = other.attack;
		this.hold = other.hold;
		this.decay = other.decay;
		this.sustain = other.sustain;
		this.release = other.release;
		this.keynumToHold = other.keynumToHold;
		this.keynumToDecay = other.keynumToDecay;
		return this;
	}
	,clear: function() {
		this.delay = 0;
		this.attack = 0;
		this.hold = 0;
		this.decay = 0;
		this.sustain = 0;
		this.release = 0;
		this.keynumToHold = 0;
		this.keynumToDecay = 0;
	}
	,envToSecs: function(sustainIsGain) {
		this.delay = this.delay < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.delay);
		this.attack = this.attack < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.attack);
		this.release = this.release < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.release);
		if(this.keynumToHold == 0) {
			this.hold = this.hold < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.hold);
		}
		if(this.keynumToDecay == 0) {
			this.decay = this.decay < -11950.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.decay);
		}
		var this1 = 0.0;
		if(this.sustain < this1) {
			this.sustain = 0.0;
		} else if(sustainIsGain) {
			var this2 = 10.0;
			this.sustain = alphaTab.audio.synth.util.SynthHelper.decibelsToGain(-this.sustain / this2);
		} else {
			var this3 = 1.0;
			var this4 = 1000.0;
			this.sustain = this3 - this.sustain / this4;
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.Envelope
};
alphaTab.audio.synth.synthesis._LoopMode = {};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_ = {};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.__name__ = ["alphaTab","audio","synth","synthesis","_LoopMode","LoopMode_Impl_"];
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Continuous";
	case 2:
		return "Sustain";
	}
	return "";
};
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "continuous":
		return 1;
	case "none":
		return 0;
	case "sustain":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.synthesis._OutputMode = {};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_OutputMode"]["OutputMode_Impl_"] = {};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.__name__ = ["alphaTab","audio","synth","synthesis","_OutputMode","OutputMode_Impl_"];
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "StereoInterleaved";
	case 1:
		return "StereoUnweaved";
	case 2:
		return "Mono";
	}
	return "";
};
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "mono":
		return 2;
	case "stereointerleaved":
		return 0;
	case "stereounweaved":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.synthesis.Preset = function() {
	this.name = null;
	this.presetNumber = 0;
	this.bank = 0;
	this.regions = null;
};
alphaTab.audio.synth.synthesis.Preset.__name__ = ["alphaTab","audio","synth","synthesis","Preset"];
alphaTab.audio.synth.synthesis.Preset.prototype = {
	__class__: alphaTab.audio.synth.synthesis.Preset
};
alphaTab.audio.synth.synthesis.Region = function() {
	this.loopMode = 0;
	this.sampleRate = 0;
	this.loKey = 0;
	this.hiKey = 0;
	this.loVel = 0;
	this.hiVel = 0;
	this.group = 0;
	this.offset = 0;
	this.end = 0;
	this.loopStart = 0;
	this.loopEnd = 0;
	this.transpose = 0;
	this.tune = 0;
	this.pitchKeyCenter = 0;
	this.pitchKeyTrack = 0;
	this.attenuation = 0.0;
	this.pan = 0.0;
	this.ampEnv = null;
	this.modEnv = null;
	this.initialFilterQ = 0;
	this.initialFilterFc = 0;
	this.modEnvToPitch = 0;
	this.modEnvToFilterFc = 0;
	this.modLfoToFilterFc = 0;
	this.modLfoToVolume = 0;
	this.delayModLFO = 0.0;
	this.freqModLFO = 0;
	this.modLfoToPitch = 0;
	this.delayVibLFO = 0.0;
	this.freqVibLFO = 0;
	this.vibLfoToPitch = 0;
};
alphaTab.audio.synth.synthesis.Region.__name__ = ["alphaTab","audio","synth","synthesis","Region"];
alphaTab.audio.synth.synthesis.Region.prototype = {
	Region: function() {
		this.loopMode = 0;
		this.sampleRate = 0;
		this.loKey = 0;
		this.hiKey = 0;
		this.loVel = 0;
		this.hiVel = 0;
		this.group = 0;
		this.offset = 0;
		this.end = 0;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.transpose = 0;
		this.tune = 0;
		this.pitchKeyCenter = 0;
		this.pitchKeyTrack = 0;
		this.attenuation = 0.0;
		this.pan = 0.0;
		this.ampEnv = null;
		this.modEnv = null;
		this.initialFilterQ = 0;
		this.initialFilterFc = 0;
		this.modEnvToPitch = 0;
		this.modEnvToFilterFc = 0;
		this.modLfoToFilterFc = 0;
		this.modLfoToVolume = 0;
		this.delayModLFO = 0.0;
		this.freqModLFO = 0;
		this.modLfoToPitch = 0;
		this.delayVibLFO = 0.0;
		this.freqVibLFO = 0;
		this.vibLfoToPitch = 0;
		this.ampEnv = new alphaTab.audio.synth.synthesis.Envelope().Envelope();
		this.modEnv = new alphaTab.audio.synth.synthesis.Envelope().Envelope();
		return this;
	}
	,Region_Region: function(other) {
		this.loopMode = 0;
		this.sampleRate = 0;
		this.loKey = 0;
		this.hiKey = 0;
		this.loVel = 0;
		this.hiVel = 0;
		this.group = 0;
		this.offset = 0;
		this.end = 0;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.transpose = 0;
		this.tune = 0;
		this.pitchKeyCenter = 0;
		this.pitchKeyTrack = 0;
		this.attenuation = 0.0;
		this.pan = 0.0;
		this.ampEnv = null;
		this.modEnv = null;
		this.initialFilterQ = 0;
		this.initialFilterFc = 0;
		this.modEnvToPitch = 0;
		this.modEnvToFilterFc = 0;
		this.modLfoToFilterFc = 0;
		this.modLfoToVolume = 0;
		this.delayModLFO = 0.0;
		this.freqModLFO = 0;
		this.modLfoToPitch = 0;
		this.delayVibLFO = 0.0;
		this.freqVibLFO = 0;
		this.vibLfoToPitch = 0;
		this.loopMode = other.loopMode;
		this.sampleRate = other.sampleRate;
		this.loKey = other.loKey;
		this.hiKey = other.hiKey;
		this.loVel = other.loVel;
		this.hiVel = other.hiVel;
		this.group = other.group;
		this.offset = other.offset;
		this.end = other.end;
		this.loopStart = other.loopStart;
		this.loopEnd = other.loopEnd;
		this.transpose = other.transpose;
		this.tune = other.tune;
		this.pitchKeyCenter = other.pitchKeyCenter;
		this.pitchKeyTrack = other.pitchKeyTrack;
		this.attenuation = other.attenuation;
		this.pan = other.pan;
		this.ampEnv = new alphaTab.audio.synth.synthesis.Envelope().Envelope_Envelope(other.ampEnv);
		this.modEnv = new alphaTab.audio.synth.synthesis.Envelope().Envelope_Envelope(other.modEnv);
		this.initialFilterQ = other.initialFilterQ;
		this.initialFilterFc = other.initialFilterFc;
		this.modEnvToPitch = other.modEnvToPitch;
		this.modEnvToFilterFc = other.modEnvToFilterFc;
		this.modLfoToFilterFc = other.modLfoToFilterFc;
		this.modLfoToVolume = other.modLfoToVolume;
		this.delayModLFO = other.delayModLFO;
		this.freqModLFO = other.freqModLFO;
		this.modLfoToPitch = other.modLfoToPitch;
		this.delayVibLFO = other.delayVibLFO;
		this.freqVibLFO = other.freqVibLFO;
		this.vibLfoToPitch = other.vibLfoToPitch;
		return this;
	}
	,clear: function(forRelative) {
		this.loopMode = 0;
		this.sampleRate = 0;
		this.loKey = 0;
		this.hiKey = 0;
		this.loVel = 0;
		this.hiVel = 0;
		this.group = 0;
		this.offset = 0;
		this.end = 0;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.transpose = 0;
		this.tune = 0;
		this.pitchKeyCenter = 0;
		this.pitchKeyTrack = 0;
		this.attenuation = 0;
		this.pan = 0;
		this.ampEnv.clear();
		this.modEnv.clear();
		this.initialFilterQ = 0;
		this.initialFilterFc = 0;
		this.modEnvToPitch = 0;
		this.modEnvToFilterFc = 0;
		this.modLfoToFilterFc = 0;
		this.modLfoToVolume = 0;
		this.delayModLFO = 0;
		this.freqModLFO = 0;
		this.modLfoToPitch = 0;
		this.delayVibLFO = 0;
		this.freqVibLFO = 0;
		this.vibLfoToPitch = 0;
		this.hiKey = this.hiVel = 127;
		this.pitchKeyCenter = 60;
		if(forRelative) {
			return;
		}
		this.pitchKeyTrack = 100;
		this.pitchKeyCenter = -1;
		this.ampEnv.delay = this.ampEnv.attack = this.ampEnv.hold = this.ampEnv.decay = this.ampEnv.release = -12000.0;
		this.modEnv.delay = this.modEnv.attack = this.modEnv.hold = this.modEnv.decay = this.modEnv.release = -12000.0;
		this.initialFilterFc = 13500;
		this.delayModLFO = -12000.0;
		this.delayVibLFO = -12000.0;
	}
	,operator: function(genOper,amount) {
		var _g = js.Boot.__cast(genOper , Int);
		switch(_g) {
		case 0:
			this.offset = this.offset + system.Convert.toUInt32(amount.get_shortAmount());
			break;
		case 1:
			this.end = this.end + system.Convert.toUInt32(amount.get_shortAmount());
			break;
		case 2:
			this.loopStart = this.loopStart + system.Convert.toUInt32(amount.get_shortAmount());
			break;
		case 3:
			this.loopEnd = this.loopEnd + system.Convert.toUInt32(amount.get_shortAmount());
			break;
		case 4:
			this.offset = this.offset + system.Convert.toUInt32(amount.get_shortAmount()) * 32768;
			break;
		case 5:
			this.modLfoToPitch = amount.get_shortAmount();
			break;
		case 6:
			this.vibLfoToPitch = amount.get_shortAmount();
			break;
		case 7:
			this.modEnvToPitch = amount.get_shortAmount();
			break;
		case 8:
			this.initialFilterFc = amount.get_shortAmount();
			break;
		case 9:
			this.initialFilterQ = amount.get_shortAmount();
			break;
		case 10:
			this.modLfoToFilterFc = amount.get_shortAmount();
			break;
		case 11:
			this.modEnvToFilterFc = amount.get_shortAmount();
			break;
		case 12:
			this.end = this.end + system.Convert.toUInt32(amount.get_shortAmount()) * 32768;
			break;
		case 13:
			this.modLfoToVolume = amount.get_shortAmount();
			break;
		case 17:
			var this1 = 1000.0;
			this.pan = amount.get_shortAmount() / this1;
			break;
		case 21:
			var this2 = amount.get_shortAmount();
			this.delayModLFO = this2;
			break;
		case 22:
			this.freqModLFO = amount.get_shortAmount();
			break;
		case 23:
			var this3 = amount.get_shortAmount();
			this.delayVibLFO = this3;
			break;
		case 24:
			this.freqVibLFO = amount.get_shortAmount();
			break;
		case 25:
			var this4 = amount.get_shortAmount();
			this.modEnv.delay = this4;
			break;
		case 26:
			var this5 = amount.get_shortAmount();
			this.modEnv.attack = this5;
			break;
		case 27:
			var this6 = amount.get_shortAmount();
			this.modEnv.hold = this6;
			break;
		case 28:
			var this7 = amount.get_shortAmount();
			this.modEnv.decay = this7;
			break;
		case 29:
			var this8 = amount.get_shortAmount();
			this.modEnv.sustain = this8;
			break;
		case 30:
			var this9 = amount.get_shortAmount();
			this.modEnv.release = this9;
			break;
		case 31:
			var this10 = amount.get_shortAmount();
			this.modEnv.keynumToHold = this10;
			break;
		case 32:
			var this11 = amount.get_shortAmount();
			this.modEnv.keynumToDecay = this11;
			break;
		case 33:
			var this12 = amount.get_shortAmount();
			this.ampEnv.delay = this12;
			break;
		case 34:
			var this13 = amount.get_shortAmount();
			this.ampEnv.attack = this13;
			break;
		case 35:
			var this14 = amount.get_shortAmount();
			this.ampEnv.hold = this14;
			break;
		case 36:
			var this15 = amount.get_shortAmount();
			this.ampEnv.decay = this15;
			break;
		case 37:
			var this16 = amount.get_shortAmount();
			this.ampEnv.sustain = this16;
			break;
		case 38:
			var this17 = amount.get_shortAmount();
			this.ampEnv.release = this17;
			break;
		case 39:
			var this18 = amount.get_shortAmount();
			this.ampEnv.keynumToHold = this18;
			break;
		case 40:
			var this19 = amount.get_shortAmount();
			this.ampEnv.keynumToDecay = this19;
			break;
		case 43:
			this.loKey = amount.get_lowByteAmount();
			this.hiKey = amount.get_highByteAmount();
			break;
		case 44:
			this.loVel = amount.get_lowByteAmount();
			this.hiVel = amount.get_highByteAmount();
			break;
		case 45:
			this.loopStart = this.loopStart + system.Convert.toUInt32(amount.get_shortAmount()) * 32768;
			break;
		case 48:
			var this20 = 0.1;
			this.attenuation = this.attenuation + amount.get_shortAmount() * this20;
			break;
		case 50:
			this.loopEnd = this.loopEnd + system.Convert.toUInt32(amount.get_shortAmount()) * 32768;
			break;
		case 51:
			this.transpose = this.transpose + amount.get_shortAmount();
			break;
		case 52:
			this.tune = this.tune + amount.get_shortAmount();
			break;
		case 54:
			this.loopMode = (amount.wordAmount & 3) == 3 ? 2 : (amount.wordAmount & 3) == 1 ? 1 : 0;
			break;
		case 56:
			this.pitchKeyTrack = amount.get_shortAmount();
			break;
		case 57:
			this.group = amount.wordAmount;
			break;
		case 58:
			this.pitchKeyCenter = amount.get_shortAmount();
			break;
		default:
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.Region
};
alphaTab.audio.synth.synthesis._Region_GenOperators = {};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_ = {};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.__name__ = ["alphaTab","audio","synth","synthesis","_Region_GenOperators","Region_GenOperators_Impl_"];
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "StartAddrsOffset";
	case 1:
		return "EndAddrsOffset";
	case 2:
		return "StartloopAddrsOffset";
	case 3:
		return "EndloopAddrsOffset";
	case 4:
		return "StartAddrsCoarseOffset";
	case 5:
		return "ModLfoToPitch";
	case 6:
		return "VibLfoToPitch";
	case 7:
		return "ModEnvToPitch";
	case 8:
		return "InitialFilterFc";
	case 9:
		return "InitialFilterQ";
	case 10:
		return "ModLfoToFilterFc";
	case 11:
		return "ModEnvToFilterFc";
	case 12:
		return "EndAddrsCoarseOffset";
	case 13:
		return "ModLfoToVolume";
	case 14:
		return "Unused1";
	case 15:
		return "ChorusEffectsSend";
	case 16:
		return "ReverbEffectsSend";
	case 17:
		return "Pan";
	case 18:
		return "Unused2";
	case 19:
		return "Unused3";
	case 20:
		return "Unused4";
	case 21:
		return "DelayModLFO";
	case 22:
		return "FreqModLFO";
	case 23:
		return "DelayVibLFO";
	case 24:
		return "FreqVibLFO";
	case 25:
		return "DelayModEnv";
	case 26:
		return "AttackModEnv";
	case 27:
		return "HoldModEnv";
	case 28:
		return "DecayModEnv";
	case 29:
		return "SustainModEnv";
	case 30:
		return "ReleaseModEnv";
	case 31:
		return "KeynumToModEnvHold";
	case 32:
		return "KeynumToModEnvDecay";
	case 33:
		return "DelayVolEnv";
	case 34:
		return "AttackVolEnv";
	case 35:
		return "HoldVolEnv";
	case 36:
		return "DecayVolEnv";
	case 37:
		return "SustainVolEnv";
	case 38:
		return "ReleaseVolEnv";
	case 39:
		return "KeynumToVolEnvHold";
	case 40:
		return "KeynumToVolEnvDecay";
	case 41:
		return "Instrument";
	case 42:
		return "Reserved1";
	case 43:
		return "KeyRange";
	case 44:
		return "VelRange";
	case 45:
		return "StartloopAddrsCoarseOffset";
	case 46:
		return "Keynum";
	case 47:
		return "Velocity";
	case 48:
		return "InitialAttenuation";
	case 49:
		return "Reserved2";
	case 50:
		return "EndloopAddrsCoarseOffset";
	case 51:
		return "CoarseTune";
	case 52:
		return "FineTune";
	case 53:
		return "SampleID";
	case 54:
		return "SampleModes";
	case 55:
		return "Reserved3";
	case 56:
		return "ScaleTuning";
	case 57:
		return "ExclusiveClass";
	case 58:
		return "OverridingRootKey";
	case 59:
		return "Unused5";
	case 60:
		return "EndOper";
	}
	return "";
};
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "attackmodenv":
		return 26;
	case "attackvolenv":
		return 34;
	case "choruseffectssend":
		return 15;
	case "coarsetune":
		return 51;
	case "decaymodenv":
		return 28;
	case "decayvolenv":
		return 36;
	case "delaymodenv":
		return 25;
	case "delaymodlfo":
		return 21;
	case "delayviblfo":
		return 23;
	case "delayvolenv":
		return 33;
	case "endaddrscoarseoffset":
		return 12;
	case "endaddrsoffset":
		return 1;
	case "endloopaddrscoarseoffset":
		return 50;
	case "endloopaddrsoffset":
		return 3;
	case "endoper":
		return 60;
	case "exclusiveclass":
		return 57;
	case "finetune":
		return 52;
	case "freqmodlfo":
		return 22;
	case "freqviblfo":
		return 24;
	case "holdmodenv":
		return 27;
	case "holdvolenv":
		return 35;
	case "initialattenuation":
		return 48;
	case "initialfilterfc":
		return 8;
	case "initialfilterq":
		return 9;
	case "instrument":
		return 41;
	case "keynum":
		return 46;
	case "keynumtomodenvdecay":
		return 32;
	case "keynumtomodenvhold":
		return 31;
	case "keynumtovolenvdecay":
		return 40;
	case "keynumtovolenvhold":
		return 39;
	case "keyrange":
		return 43;
	case "modenvtofilterfc":
		return 11;
	case "modenvtopitch":
		return 7;
	case "modlfotofilterfc":
		return 10;
	case "modlfotopitch":
		return 5;
	case "modlfotovolume":
		return 13;
	case "overridingrootkey":
		return 58;
	case "pan":
		return 17;
	case "releasemodenv":
		return 30;
	case "releasevolenv":
		return 38;
	case "reserved1":
		return 42;
	case "reserved2":
		return 49;
	case "reserved3":
		return 55;
	case "reverbeffectssend":
		return 16;
	case "sampleid":
		return 53;
	case "samplemodes":
		return 54;
	case "scaletuning":
		return 56;
	case "startaddrscoarseoffset":
		return 4;
	case "startaddrsoffset":
		return 0;
	case "startloopaddrscoarseoffset":
		return 45;
	case "startloopaddrsoffset":
		return 2;
	case "sustainmodenv":
		return 29;
	case "sustainvolenv":
		return 37;
	case "unused1":
		return 14;
	case "unused2":
		return 18;
	case "unused3":
		return 19;
	case "unused4":
		return 20;
	case "unused5":
		return 59;
	case "velocity":
		return 47;
	case "velrange":
		return 44;
	case "viblfotopitch":
		return 6;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.synthesis.SynthEvent = function(eventIndex,e) {
	this.eventIndex = 0;
	this.event = null;
	this.isMetronome = false;
	this.time = 0.0;
	this.eventIndex = eventIndex;
	this.event = e;
};
alphaTab.audio.synth.synthesis.SynthEvent.__name__ = ["alphaTab","audio","synth","synthesis","SynthEvent"];
alphaTab.audio.synth.synthesis.SynthEvent.newMetronomeEvent = function(eventIndex,metronomeLength) {
	var x = new alphaTab.audio.synth.synthesis.SynthEvent(eventIndex,null);
	x.isMetronome = true;
	return x;
};
alphaTab.audio.synth.synthesis.SynthEvent.prototype = {
	__class__: alphaTab.audio.synth.synthesis.SynthEvent
};
alphaTab.audio.synth.synthesis.Voice = function() {
	this.playingPreset = 0;
	this.playingKey = 0;
	this.playingChannel = 0;
	this.region = null;
	this.pitchInputTimecents = 0.0;
	this.pitchOutputFactor = 0.0;
	this.sourceSamplePosition = 0.0;
	this.noteGainDb = 0.0;
	this.panFactorLeft = 0.0;
	this.panFactorRight = 0.0;
	this.playIndex = 0;
	this.loopStart = 0;
	this.loopEnd = 0;
	this.ampEnv = null;
	this.modEnv = null;
	this.lowPass = null;
	this.modLfo = null;
	this.vibLfo = null;
	this.mixVolume = 0.0;
	this.mute = false;
	this.ampEnv = new alphaTab.audio.synth.synthesis.VoiceEnvelope();
	this.modEnv = new alphaTab.audio.synth.synthesis.VoiceEnvelope();
	this.lowPass = new alphaTab.audio.synth.synthesis.VoiceLowPass().VoiceLowPass();
	this.modLfo = new alphaTab.audio.synth.synthesis.VoiceLfo();
	this.vibLfo = new alphaTab.audio.synth.synthesis.VoiceLfo();
};
alphaTab.audio.synth.synthesis.Voice.__name__ = ["alphaTab","audio","synth","synthesis","Voice"];
alphaTab.audio.synth.synthesis.Voice.prototype = {
	calcPitchRatio: function(pitchShift,outSampleRate) {
		var note = this.playingKey + this.region.transpose + this.region.tune / 100.0;
		var adjustedPitch = this.region.pitchKeyCenter + (note - this.region.pitchKeyCenter) * (this.region.pitchKeyTrack / 100.0);
		if(pitchShift != 0) {
			adjustedPitch = adjustedPitch + pitchShift;
		}
		this.pitchInputTimecents = adjustedPitch * 100.0;
		this.pitchOutputFactor = this.region.sampleRate / (alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Double(this.region.pitchKeyCenter * 100.0) * outSampleRate);
	}
	,end: function(outSampleRate) {
		this.ampEnv.nextSegment(5,outSampleRate);
		this.modEnv.nextSegment(5,outSampleRate);
		if(this.region.loopMode == 2) {
			this.loopEnd = this.loopStart;
		}
	}
	,endQuick: function(outSampleRate) {
		this.ampEnv.parameters.release = 0.0;
		this.ampEnv.nextSegment(5,outSampleRate);
		this.modEnv.parameters.release = 0.0;
		this.modEnv.nextSegment(5,outSampleRate);
	}
	,render: function(f,outputBuffer,offset,numSamples,isMuted) {
		var region = this.region;
		var input = f.fontSamples;
		var outL = 0;
		var outR = f.outputMode == 1 ? numSamples : -1;
		var updateModEnv = region.modEnvToPitch != 0 || region.modEnvToFilterFc != 0;
		var updateModLFO = this.modLfo.delta > 0 && (region.modLfoToPitch != 0 || region.modLfoToFilterFc != 0 || region.modLfoToVolume != 0);
		var updateVibLFO = this.vibLfo.delta > 0 && region.vibLfoToPitch != 0;
		var isLooping = this.loopStart < this.loopEnd;
		var tmpLoopStart = system.Convert.toInt32(this.loopStart);
		var tmpLoopEnd = system.Convert.toInt32(this.loopEnd);
		var tmpSampleEndDbl = js.Boot.__cast(region.end , Float);
		var tmpLoopEndDbl = js.Boot.__cast(tmpLoopEnd , Float) + 1.0;
		var tmpSourceSamplePosition = this.sourceSamplePosition;
		var tmpLowpass = new alphaTab.audio.synth.synthesis.VoiceLowPass().VoiceLowPass_VoiceLowPass(this.lowPass);
		var dynamicLowpass = region.modLfoToFilterFc != 0 || region.modEnvToFilterFc != 0;
		var tmpSampleRate;
		var tmpInitialFilterFc;
		var tmpModLfoToFilterFc;
		var tmpModEnvToFilterFc;
		var dynamicPitchRatio = region.modLfoToPitch != 0 || region.modEnvToPitch != 0 || region.vibLfoToPitch != 0;
		var pitchRatio;
		var tmpModLfoToPitch;
		var tmpVibLfoToPitch;
		var tmpModEnvToPitch;
		var dynamicGain = region.modLfoToVolume != 0;
		var noteGain = 0;
		var tmpModLfoToVolume;
		if(dynamicLowpass) {
			tmpSampleRate = f.outSampleRate;
			tmpInitialFilterFc = js.Boot.__cast(region.initialFilterFc , Float);
			tmpModLfoToFilterFc = js.Boot.__cast(region.modLfoToFilterFc , Float);
			tmpModEnvToFilterFc = js.Boot.__cast(region.modEnvToFilterFc , Float);
		} else {
			tmpSampleRate = 0;
			tmpInitialFilterFc = 0;
			tmpModLfoToFilterFc = 0;
			tmpModEnvToFilterFc = 0;
		}
		if(dynamicPitchRatio) {
			pitchRatio = 0;
			tmpModLfoToPitch = js.Boot.__cast(region.modLfoToPitch , Float);
			tmpVibLfoToPitch = js.Boot.__cast(region.vibLfoToPitch , Float);
			tmpModEnvToPitch = js.Boot.__cast(region.modEnvToPitch , Float);
		} else {
			pitchRatio = alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Double(this.pitchInputTimecents) * this.pitchOutputFactor;
			tmpModLfoToPitch = 0;
			tmpVibLfoToPitch = 0;
			tmpModEnvToPitch = 0;
		}
		if(dynamicGain) {
			var this1 = 0.1;
			tmpModLfoToVolume = js.Boot.__cast(region.modLfoToVolume , Float) * this1;
		} else {
			noteGain = alphaTab.audio.synth.util.SynthHelper.decibelsToGain(this.noteGainDb);
			tmpModLfoToVolume = 0;
		}
		while(numSamples > 0) {
			var gainMono;
			var gainLeft;
			var gainRight;
			var blockSamples = numSamples > 64 ? 64 : numSamples;
			numSamples = numSamples - blockSamples;
			if(dynamicLowpass) {
				var fres = tmpInitialFilterFc + this.modLfo.level * tmpModLfoToFilterFc + this.modEnv.level * tmpModEnvToFilterFc;
				var this2 = 13500.0;
				tmpLowpass.active = fres <= this2;
				if(tmpLowpass.active) {
					tmpLowpass.setup(alphaTab.audio.synth.util.SynthHelper.cents2Hertz(fres) / tmpSampleRate);
				}
			}
			if(dynamicPitchRatio) {
				pitchRatio = alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Double(this.pitchInputTimecents + (this.modLfo.level * tmpModLfoToPitch + this.vibLfo.level * tmpVibLfoToPitch + this.modEnv.level * tmpModEnvToPitch)) * this.pitchOutputFactor;
			}
			if(dynamicGain) {
				noteGain = alphaTab.audio.synth.util.SynthHelper.decibelsToGain(this.noteGainDb + this.modLfo.level * tmpModLfoToVolume);
			}
			gainMono = noteGain * this.ampEnv.level;
			if(isMuted) {
				gainMono = 0;
			} else {
				gainMono = gainMono * this.mixVolume;
			}
			this.ampEnv.process(blockSamples,f.outSampleRate);
			if(updateModEnv) {
				this.modEnv.process(blockSamples,f.outSampleRate);
			}
			if(updateModLFO) {
				this.modLfo.process(blockSamples);
			}
			if(updateVibLFO) {
				this.vibLfo.process(blockSamples);
			}
			var _g = f.outputMode;
			switch(_g) {
			case 0:
				gainLeft = gainMono * this.panFactorLeft;
				gainRight = gainMono * this.panFactorRight;
				while(blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
					var pos = system.Convert.toInt32_Double(tmpSourceSamplePosition);
					var nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
					var alpha = js.Boot.__cast(tmpSourceSamplePosition - pos , Float);
					var this3 = 1.0;
					var val = input[pos] * (this3 - alpha) + input[nextPos] * alpha;
					if(tmpLowpass.active) {
						val = tmpLowpass.process(val);
					}
					outputBuffer[offset + outL] = outputBuffer[offset + outL] + val * gainLeft;
					++outL;
					outputBuffer[offset + outL] = outputBuffer[offset + outL] + val * gainRight;
					++outL;
					tmpSourceSamplePosition = tmpSourceSamplePosition + pitchRatio;
					if(tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
						tmpSourceSamplePosition = tmpSourceSamplePosition - (tmpLoopEnd - tmpLoopStart + 1.0);
					}
				}
				break;
			case 1:
				gainLeft = gainMono * this.panFactorLeft;
				gainRight = gainMono * this.panFactorRight;
				while(blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
					var pos1 = system.Convert.toInt32_Double(tmpSourceSamplePosition);
					var nextPos1 = pos1 >= tmpLoopEnd && isLooping ? tmpLoopStart : pos1 + 1;
					var alpha1 = js.Boot.__cast(tmpSourceSamplePosition - pos1 , Float);
					var this4 = 1.0;
					var val1 = input[pos1] * (this4 - alpha1) + input[nextPos1] * alpha1;
					if(tmpLowpass.active) {
						val1 = tmpLowpass.process(val1);
					}
					outputBuffer[offset + outL] = outputBuffer[offset + outL] + val1 * gainLeft;
					++outL;
					outputBuffer[offset + outR] = outputBuffer[offset + outR] + val1 * gainRight;
					++outR;
					tmpSourceSamplePosition = tmpSourceSamplePosition + pitchRatio;
					if(tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
						tmpSourceSamplePosition = tmpSourceSamplePosition - (tmpLoopEnd - tmpLoopStart + 1.0);
					}
				}
				break;
			case 2:
				while(blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
					var pos2 = system.Convert.toInt32_Double(tmpSourceSamplePosition);
					var nextPos2 = pos2 >= tmpLoopEnd && isLooping ? tmpLoopStart : pos2 + 1;
					var alpha2 = js.Boot.__cast(tmpSourceSamplePosition - pos2 , Float);
					var this5 = 1.0;
					var val2 = input[pos2] * (this5 - alpha2) + input[nextPos2] * alpha2;
					if(tmpLowpass.active) {
						val2 = tmpLowpass.process(val2);
					}
					outputBuffer[offset + outL] = val2 * gainMono;
					++outL;
					tmpSourceSamplePosition = tmpSourceSamplePosition + pitchRatio;
					if(tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
						tmpSourceSamplePosition = tmpSourceSamplePosition - (tmpLoopEnd - tmpLoopStart + 1.0);
					}
				}
				break;
			default:
			}
			if(tmpSourceSamplePosition >= tmpSampleEndDbl || this.ampEnv.segment == 7) {
				this.kill();
				return;
			}
		}
		this.sourceSamplePosition = tmpSourceSamplePosition;
		if(tmpLowpass.active || dynamicLowpass) {
			this.lowPass = tmpLowpass;
		}
	}
	,kill: function() {
		this.playingPreset = -1;
	}
	,__class__: alphaTab.audio.synth.synthesis.Voice
};
alphaTab.audio.synth.synthesis.VoiceEnvelope = function() {
	this.level = 0.0;
	this.slope = 0.0;
	this.samplesUntilNextSegment = 0;
	this.segment = 0;
	this.midiVelocity = 0;
	this.parameters = null;
	this.segmentIsExponential = false;
	this.isAmpEnv = false;
};
alphaTab.audio.synth.synthesis.VoiceEnvelope.__name__ = ["alphaTab","audio","synth","synthesis","VoiceEnvelope"];
alphaTab.audio.synth.synthesis.VoiceEnvelope.prototype = {
	nextSegment: function(activeSegment,outSampleRate) {
		while(true) switch(activeSegment) {
		case 0:
			this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.delay * outSampleRate);
			if(this.samplesUntilNextSegment > 0) {
				this.segment = 1;
				this.segmentIsExponential = false;
				this.level = 0.0;
				this.slope = 0.0;
				return;
			}
			activeSegment = 1;
			break;
		case 1:
			this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.attack * outSampleRate);
			if(this.samplesUntilNextSegment > 0) {
				if(!this.isAmpEnv) {
					var this1 = 144.0;
					this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.attack * ((145 - this.midiVelocity) / this1) * outSampleRate);
				}
				this.segment = 2;
				this.segmentIsExponential = false;
				this.level = 0.0;
				var this2 = 1.0;
				this.slope = this2 / this.samplesUntilNextSegment;
				return;
			}
			activeSegment = 2;
			break;
		case 2:
			this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.hold * outSampleRate);
			if(this.samplesUntilNextSegment > 0) {
				this.segment = 3;
				this.segmentIsExponential = false;
				this.level = 1.0;
				this.slope = 0.0;
				return;
			}
			activeSegment = 3;
			break;
		case 3:
			this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.decay * outSampleRate);
			if(this.samplesUntilNextSegment > 0) {
				this.segment = 4;
				this.level = 1.0;
				if(this.isAmpEnv) {
					var mysterySlope = js.Boot.__cast(-9.226 / this.samplesUntilNextSegment , Float);
					var this3 = mysterySlope;
					this.slope = js.Boot.__cast(Math.exp(this3) , Float);
					this.segmentIsExponential = true;
					var this4 = 0.0;
					if(this.parameters.sustain > this4) {
						var this5 = this.parameters.sustain;
						this.samplesUntilNextSegment = system.Convert.toInt32_Double(Math.log(this5) / mysterySlope);
					}
				} else {
					this.slope = js.Boot.__cast(-1.0 / this.samplesUntilNextSegment , Float);
					var this6 = 1.0;
					this.samplesUntilNextSegment = system.Convert.toInt32_Single(this.parameters.decay * (this6 - this.parameters.sustain) * outSampleRate);
					this.segmentIsExponential = false;
				}
				return;
			}
			activeSegment = 4;
			break;
		case 4:
			this.segment = 5;
			this.level = this.parameters.sustain;
			this.slope = 0.0;
			this.samplesUntilNextSegment = 2147483647;
			this.segmentIsExponential = false;
			return;
		case 5:
			this.segment = 6;
			this.samplesUntilNextSegment = system.Convert.toInt32_Single((this.parameters.release <= 0 ? 0.01 : this.parameters.release) * outSampleRate);
			if(this.isAmpEnv) {
				var mysterySlope1 = js.Boot.__cast(-9.226 / this.samplesUntilNextSegment , Float);
				var this7 = mysterySlope1;
				this.slope = js.Boot.__cast(Math.exp(this7) , Float);
				this.segmentIsExponential = true;
			} else {
				this.slope = -this.level / this.samplesUntilNextSegment;
				this.segmentIsExponential = false;
			}
			return;
		default:
			this.segment = 7;
			this.segmentIsExponential = false;
			this.level = this.slope = 0.0;
			this.samplesUntilNextSegment = 134217727;
			return;
		}
	}
	,setup: function(newParameters,midiNoteNumber,midiVelocity,isAmpEnv,outSampleRate) {
		this.parameters = new alphaTab.audio.synth.synthesis.Envelope().Envelope_Envelope(newParameters);
		if(this.parameters.keynumToHold > 0) {
			var this1 = 60.0;
			this.parameters.hold = this.parameters.hold + this.parameters.keynumToHold * (this1 - midiNoteNumber);
			var tmp = this.parameters.hold < -10000.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.parameters.hold);
			this.parameters.hold = tmp;
		}
		if(this.parameters.keynumToDecay > 0) {
			var this2 = 60.0;
			this.parameters.decay = this.parameters.decay + this.parameters.keynumToDecay * (this2 - midiNoteNumber);
			var tmp1 = this.parameters.decay < -10000.0 ? 0.0 : alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single(this.parameters.decay);
			this.parameters.decay = tmp1;
		}
		this.midiVelocity = system.Convert.toInt16(midiVelocity);
		this.isAmpEnv = isAmpEnv;
		this.nextSegment(0,outSampleRate);
	}
	,process: function(numSamples,outSampleRate) {
		if(this.slope > 0) {
			if(this.segmentIsExponential) {
				var this1 = this.slope;
				var this2 = numSamples;
				this.level = this.level * js.Boot.__cast(Math.pow(this1,this2) , Float);
			} else {
				this.level = this.level + this.slope * numSamples;
			}
		}
		if((this.samplesUntilNextSegment = this.samplesUntilNextSegment - numSamples) <= 0) {
			this.nextSegment(this.segment,outSampleRate);
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.VoiceEnvelope
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment = {};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_ = {};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.__name__ = ["alphaTab","audio","synth","synthesis","_VoiceEnvelopeSegment","VoiceEnvelopeSegment_Impl_"];
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Delay";
	case 2:
		return "Attack";
	case 3:
		return "Hold";
	case 4:
		return "Decay";
	case 5:
		return "Sustain";
	case 6:
		return "Release";
	case 7:
		return "Done";
	}
	return "";
};
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "attack":
		return 2;
	case "decay":
		return 4;
	case "delay":
		return 1;
	case "done":
		return 7;
	case "hold":
		return 3;
	case "none":
		return 0;
	case "release":
		return 6;
	case "sustain":
		return 5;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.audio.synth.synthesis.VoiceLfo = function() {
	this.samplesUntil = 0;
	this.level = 0.0;
	this.delta = 0.0;
};
alphaTab.audio.synth.synthesis.VoiceLfo.__name__ = ["alphaTab","audio","synth","synthesis","VoiceLfo"];
alphaTab.audio.synth.synthesis.VoiceLfo.prototype = {
	setup: function(delay,freqCents,outSampleRate) {
		this.samplesUntil = system.Convert.toInt32_Single(delay * outSampleRate);
		var this1 = 4.0;
		var this2 = freqCents;
		this.delta = this1 * alphaTab.audio.synth.util.SynthHelper.cents2Hertz(this2) / outSampleRate;
		this.level = 0;
	}
	,process: function(blockSamples) {
		if(this.samplesUntil > blockSamples) {
			this.samplesUntil = this.samplesUntil - blockSamples;
			return;
		}
		this.level = this.level + this.delta * blockSamples;
		var this1 = 1.0;
		if(this.level > this1) {
			this.delta = -this.delta;
			var this2 = 2.0;
			this.level = this2 - this.level;
		} else if(this.level < -1.0) {
			this.delta = -this.delta;
			this.level = -2.0 - this.level;
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.VoiceLfo
};
alphaTab.audio.synth.synthesis.VoiceLowPass = function() {
	this.qInv = 0.0;
	this.a0 = 0.0;
	this.a1 = 0.0;
	this.b1 = 0.0;
	this.b2 = 0.0;
	this.z1 = 0.0;
	this.z2 = 0.0;
	this.active = false;
};
alphaTab.audio.synth.synthesis.VoiceLowPass.__name__ = ["alphaTab","audio","synth","synthesis","VoiceLowPass"];
alphaTab.audio.synth.synthesis.VoiceLowPass.prototype = {
	VoiceLowPass: function() {
		this.qInv = 0.0;
		this.a0 = 0.0;
		this.a1 = 0.0;
		this.b1 = 0.0;
		this.b2 = 0.0;
		this.z1 = 0.0;
		this.z2 = 0.0;
		this.active = false;
		return this;
	}
	,VoiceLowPass_VoiceLowPass: function(other) {
		this.qInv = 0.0;
		this.a0 = 0.0;
		this.a1 = 0.0;
		this.b1 = 0.0;
		this.b2 = 0.0;
		this.z1 = 0.0;
		this.z2 = 0.0;
		this.active = false;
		this.qInv = other.qInv;
		this.a0 = other.a0;
		this.a1 = other.a1;
		this.b1 = other.b1;
		this.b2 = other.b2;
		this.z1 = other.z1;
		this.z2 = other.z2;
		this.active = other.active;
		return this;
	}
	,setup: function(fc) {
		var this1 = 3.14159265358979 * fc;
		var k = Math.tan(this1);
		var KK = k * k;
		var norm = 1 / (1 + k * this.qInv + KK);
		this.a0 = KK * norm;
		this.a1 = 2 * this.a0;
		this.b1 = 2 * (KK - 1) * norm;
		this.b2 = (1 - k * this.qInv + KK) * norm;
	}
	,process: function(input) {
		var this1 = input * this.a0 + this.z1;
		var output = this1;
		var this2 = input * this.a1 + this.z2 - this.b1 * output;
		this.z1 = this2;
		var this3 = input * this.a0 - this.b2 * output;
		this.z2 = this3;
		return js.Boot.__cast(output , Float);
	}
	,__class__: alphaTab.audio.synth.synthesis.VoiceLowPass
};
alphaTab.audio.synth.util = {};
alphaTab.audio.synth.util.SynthConstants = function() { };
alphaTab.audio.synth.util.SynthConstants.__name__ = ["alphaTab","audio","synth","util","SynthConstants"];
alphaTab.audio.synth.util.SynthHelper = function() { };
alphaTab.audio.synth.util.SynthHelper.__name__ = ["alphaTab","audio","synth","util","SynthHelper"];
alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Single = function(timecents) {
	var this1 = 1200;
	var this2 = timecents / this1;
	return js.Boot.__cast(Math.pow(2,this2) , Float);
};
alphaTab.audio.synth.util.SynthHelper.timecents2Secs_Double = function(timecents) {
	return Math.pow(2.0,timecents / 1200.0);
};
alphaTab.audio.synth.util.SynthHelper.decibelsToGain = function(db) {
	if(db > -100) {
		var this1 = 0.05;
		var this2 = db * this1;
		return js.Boot.__cast(Math.pow(10.0,this2) , Float);
	} else {
		return 0;
	}
};
alphaTab.audio.synth.util.SynthHelper.gainToDecibels = function(gain) {
	var this1 = .00001;
	if(gain <= this1) {
		return -100;
	} else {
		var this2 = gain;
		return js.Boot.__cast(20.0 * (Math.log(this2) / Math.log(10)) , Float);
	}
};
alphaTab.audio.synth.util.SynthHelper.cents2Hertz = function(cents) {
	var this1 = 8.176;
	var this2 = 1200.0;
	var this3 = cents / this2;
	return this1 * js.Boot.__cast(Math.pow(2.0,this3) , Float);
};
alphaTab.audio.synth.util.SynthHelper.clampB = function(value,min,max) {
	if(value <= min) {
		return min;
	}
	if(value >= max) {
		return max;
	}
	return value;
};
alphaTab.audio.synth.util.SynthHelper.clampD = function(value,min,max) {
	if(value <= min) {
		return min;
	}
	if(value >= max) {
		return max;
	}
	return value;
};
alphaTab.audio.synth.util.SynthHelper.clampF = function(value,min,max) {
	if(value <= min) {
		return min;
	}
	if(value >= max) {
		return max;
	}
	return value;
};
alphaTab.collections = {};
alphaTab.collections._FastDictionary = {};
alphaTab.collections._FastDictionary.FastDictionary_Impl_ = $hx_exports["alphaTab"]["collections"]["_FastDictionary"]["FastDictionary_Impl_"] = {};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.__name__ = ["alphaTab","collections","_FastDictionary","FastDictionary_Impl_"];
alphaTab.collections._FastDictionary.FastDictionary_Impl_._new = function() {
	var this1 = {}
	return this1;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.get = function(this1,index) {
	return this1[index];
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.set = function(this1,index,value) {
	return this1[index] = value;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.get_count = function(this1) {
	return Object.keys(this1).length;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.getEnumerator = function(this1) {
	return Object.keys(this1);
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.remove = function(this1,key) {
	delete this1[key];
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.containsKey = function(this1,key) {
	return this1.hasOwnProperty(key);
};
alphaTab.collections._FastList = {};
alphaTab.collections._FastList.FastList_Impl_ = $hx_exports["alphaTab"]["collections"]["_FastList"]["FastList_Impl_"] = {};
alphaTab.collections._FastList.FastList_Impl_.__name__ = ["alphaTab","collections","_FastList","FastList_Impl_"];
alphaTab.collections._FastList.FastList_Impl_._new = function() {
	var this1 = [];
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.get_count = function(this1) {
	return this1.length;
};
alphaTab.collections._FastList.FastList_Impl_.get = function(this1,index) {
	return this1[index];
};
alphaTab.collections._FastList.FastList_Impl_.set = function(this1,index,value) {
	return this1[index] = value;
};
alphaTab.collections._FastList.FastList_Impl_.add = function(this1,item) {
	this1.push(item);
};
alphaTab.collections._FastList.FastList_Impl_.sort = function(this1,comparison) {
	this1.sort(function(a,b) {
		return comparison(a,b);
	});
};
alphaTab.collections._FastList.FastList_Impl_.clone = function(this1) {
	return this1.slice(0);
};
alphaTab.collections._FastList.FastList_Impl_.removeAt = function(this1,index) {
	if(index != -1) {
		this1.splice(index,1);
	}
};
alphaTab.collections._FastList.FastList_Impl_.toArray = function(this1) {
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.getEnumerator = function(this1) {
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.indexOf = function(this1,item) {
	return this1.indexOf(item);
};
alphaTab.collections._FastList.FastList_Impl_.reverse = function(this1) {
	this1.reverse();
};
alphaTab.collections._FastList.FastList_Impl_.toEnumerable = function(this1) {
	return new system.collections.generic.IterableEnumerable(this1);
};
alphaTab.collections._FastList.FastList_Impl_.insertAt = function(this1,insertPos,item) {
	this1.splice(insertPos,0,item);
};
alphaTab.collections._StringBuilder = {};
alphaTab.collections._StringBuilder.StringBuilder_Impl_ = {};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.__name__ = ["alphaTab","collections","_StringBuilder","StringBuilder_Impl_"];
alphaTab.collections._StringBuilder.StringBuilder_Impl_._new = function() {
	var this1 = "";
	return this1;
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.append = function(this1,s) {
	this1 += Std.string(s);
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.appendChar = function(this1,i) {
	this1 += String.fromCharCode(i);
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.appendLine = function(this1,s) {
	if(s == null) {
		s = "";
	}
	this1 = this1 + (s + "\r\n");
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.toString = function(this1) {
	return this1;
};
alphaTab.exporter = {};
alphaTab.exporter.AlphaTexExporter = $hx_exports["alphaTab"]["exporter"]["AlphaTexExporter"] = function() {
	this._builder = null;
	var this1 = "";
	this._builder = this1;
};
alphaTab.exporter.AlphaTexExporter.__name__ = ["alphaTab","exporter","AlphaTexExporter"];
alphaTab.exporter.AlphaTexExporter.prototype = {
	'export': function(track) {
		this.score(track);
	}
	,score: function(track) {
		this.metaData(track);
		this.bars(track);
	}
	,toTex: function() {
		return this._builder;
	}
	,metaData: function(track) {
		var score = track.score;
		this.stringMetaData("title",score.title);
		this.stringMetaData("subtitle",score.subTitle);
		this.stringMetaData("artist",score.artist);
		this.stringMetaData("album",score.album);
		this.stringMetaData("words",score.words);
		this.stringMetaData("music",score.music);
		this.stringMetaData("copyright",score.copyright);
		this._builder += Std.string("\\tempo ");
		this._builder += Std.string(score.tempo);
		this._builder = this._builder + ("" + "\r\n");
		var staff = track.staves[0];
		if(staff.capo > 0) {
			this._builder += Std.string("\\capo ");
			this._builder += Std.string(staff.capo);
			this._builder = this._builder + ("" + "\r\n");
		}
		this._builder += Std.string("\\tuning");
		var i = 0;
		while(i < staff.tuning.length) {
			this._builder += Std.string(" ");
			var s = alphaTab.model.Tuning.getTextForTuning(staff.tuning[i],true);
			this._builder += Std.string(s);
			++i;
		}
		this._builder += Std.string("\\instrument ");
		this._builder += Std.string(track.playbackInfo.program);
		this._builder = this._builder + ("" + "\r\n");
		this._builder += Std.string(".");
		this._builder = this._builder + ("" + "\r\n");
	}
	,stringMetaData: function(key,value) {
		if(!(value == null || StringTools.trim(value).length == 0)) {
			this._builder += Std.string("\\");
			this._builder += Std.string(key);
			this._builder += Std.string(" \"");
			var s = StringTools.replace(value,"\"","\\\"");
			this._builder += Std.string(s);
			this._builder += Std.string("\"");
			this._builder = this._builder + ("" + "\r\n");
		}
	}
	,bars: function(track) {
		var i = 0;
		while(i < 1) {
			var j = 0;
			while(j < track.staves[i].bars.length) {
				if(i > 0) {
					this._builder += Std.string(" |");
					this._builder = this._builder + ("" + "\r\n");
				}
				this.bar(track.staves[i].bars[j]);
				++j;
			}
			++i;
		}
	}
	,bar: function(bar) {
		this.barMeta(bar);
		this.voice(bar.voices[0]);
	}
	,voice: function(voice) {
		var i = 0;
		while(i < voice.beats.length) {
			this.beat(voice.beats[i]);
			++i;
		}
	}
	,beat: function(beat) {
		if(beat.get_isRest()) {
			this._builder += Std.string("r");
		} else {
			if(beat.notes.length > 1) {
				this._builder += Std.string("(");
			}
			var i = 0;
			while(i < beat.notes.length) {
				this.note(beat.notes[i]);
				++i;
			}
			if(beat.notes.length > 1) {
				this._builder += Std.string(")");
			}
		}
		this._builder += Std.string(".");
		this._builder += Std.string(beat.duration);
		this._builder += Std.string(" ");
		this.beatEffects(beat);
	}
	,note: function(note) {
		if(note.isDead) {
			this._builder += Std.string("x");
		} else if(note.isTieDestination) {
			this._builder += Std.string("-");
		} else {
			this._builder += Std.string(note.fret);
		}
		this._builder += Std.string(".");
		this._builder += Std.string(note.beat.voice.bar.staff.tuning.length - note.string + 1);
		this._builder += Std.string(" ");
		this.noteEffects(note);
	}
	,noteEffects: function(note) {
		var hasEffectOpen = false;
		if(note.get_hasBend()) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("be (");
			var i = 0;
			while(i < note.bendPoints.length) {
				this._builder += Std.string(note.bendPoints[i].offset);
				this._builder += Std.string(" ");
				this._builder += Std.string(note.bendPoints[i].value);
				this._builder += Std.string(" ");
				++i;
			}
			this._builder += Std.string(")");
		}
		var _g = note.harmonicType;
		switch(_g) {
		case 1:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("nh ");
			break;
		case 2:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("ah ");
			break;
		case 3:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("ph ");
			break;
		case 4:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("th ");
			break;
		case 5:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("sh ");
			break;
		default:
		}
		if(note.get_isTrill()) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("tr ");
			var s = note.get_trillFret();
			this._builder += Std.string(s);
			this._builder += Std.string(" ");
			var _g1 = note.trillSpeed;
			switch(_g1) {
			case 16:
				this._builder += Std.string("16 ");
				break;
			case 32:
				this._builder += Std.string("32 ");
				break;
			case 64:
				this._builder += Std.string("64 ");
				break;
			default:
			}
		}
		if(note.vibrato != 0) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("v ");
		}
		if(note.slideOutType == 2) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("sl ");
		}
		if(note.slideOutType == 1) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("ss ");
		}
		if(note.isHammerPullOrigin) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("h ");
		}
		if(note.isGhost) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("g ");
		}
		if(note.accentuated == 1) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("ac ");
		} else if(note.accentuated == 2) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("hac ");
		}
		if(note.isPalmMute) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("pm ");
		}
		if(note.isStaccato) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("st ");
		}
		if(note.isLetRing) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("lr ");
		}
		var _g11 = note.leftHandFinger;
		switch(_g11) {
		case 0:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("1 ");
			break;
		case 1:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("2 ");
			break;
		case 2:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("3 ");
			break;
		case 3:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("4 ");
			break;
		case 4:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("5 ");
			break;
		default:
		}
		var _g2 = note.rightHandFinger;
		switch(_g2) {
		case 0:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("1 ");
			break;
		case 1:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("2 ");
			break;
		case 2:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("3 ");
			break;
		case 3:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("4 ");
			break;
		case 4:
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("5 ");
			break;
		default:
		}
		this.effectClose(hasEffectOpen);
	}
	,effectOpen: function(hasBeatEffectOpen) {
		if(!hasBeatEffectOpen) {
			this._builder += Std.string("{");
		}
		return true;
	}
	,effectClose: function(hasBeatEffectOpen) {
		if(hasBeatEffectOpen) {
			this._builder += Std.string("}");
		}
	}
	,beatEffects: function(beat) {
		var hasEffectOpen = false;
		if(beat.fadeIn) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("f ");
		}
		var _g = beat.graceType;
		switch(_g) {
		case 1:
			this._builder += Std.string("gr ob ");
			break;
		case 2:
			this._builder += Std.string("gr ");
			break;
		case 3:
			this._builder += Std.string("gr b ");
			break;
		default:
		}
		if(beat.vibrato != 0) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("v ");
		}
		if(beat.slap) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("s ");
		}
		if(beat.pop) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("p ");
		}
		if(beat.dots == 2) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("dd ");
		} else if(beat.dots == 1) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("d ");
		}
		if(beat.pickStroke == 1) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("su ");
		} else if(beat.pickStroke == 2) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("sd ");
		}
		if(beat.get_hasTuplet()) {
			var tupletValue = 0;
			if(beat.tupletDenominator == 3 && beat.tupletNumerator == 2) {
				tupletValue = 3;
			} else if(beat.tupletDenominator == 5 && beat.tupletNumerator == 4) {
				tupletValue = 5;
			} else if(beat.tupletDenominator == 6 && beat.tupletNumerator == 4) {
				tupletValue = 6;
			} else if(beat.tupletDenominator == 7 && beat.tupletNumerator == 4) {
				tupletValue = 7;
			} else if(beat.tupletDenominator == 9 && beat.tupletNumerator == 8) {
				tupletValue = 9;
			} else if(beat.tupletDenominator == 10 && beat.tupletNumerator == 8) {
				tupletValue = 10;
			} else if(beat.tupletDenominator == 11 && beat.tupletNumerator == 8) {
				tupletValue = 11;
			} else if(beat.tupletDenominator == 12 && beat.tupletNumerator == 8) {
				tupletValue = 12;
			}
			if(tupletValue != 0) {
				hasEffectOpen = this.effectOpen(hasEffectOpen);
				this._builder += Std.string("tu ");
				this._builder += Std.string(tupletValue);
				this._builder += Std.string(" ");
			}
		}
		if(beat.get_hasWhammyBar()) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("tbe (");
			var i = 0;
			while(i < beat.whammyBarPoints.length) {
				this._builder += Std.string(beat.whammyBarPoints[i].offset);
				this._builder += Std.string(" ");
				this._builder += Std.string(beat.whammyBarPoints[i].value);
				this._builder += Std.string(" ");
				++i;
			}
			this._builder += Std.string(")");
		}
		if(beat.get_isTremolo()) {
			hasEffectOpen = this.effectOpen(hasEffectOpen);
			this._builder += Std.string("tp ");
			if(beat.tremoloSpeed == 8) {
				this._builder += Std.string("8 ");
			} else if(beat.tremoloSpeed == 16) {
				this._builder += Std.string("16 ");
			} else if(beat.tremoloSpeed == 32) {
				this._builder += Std.string("32 ");
			} else {
				this._builder += Std.string("8 ");
			}
		}
		this.effectClose(hasEffectOpen);
	}
	,barMeta: function(bar) {
		var masterBar = bar.get_masterBar();
		if(masterBar.index > 0) {
			var previousMasterBar = masterBar.previousMasterBar;
			var previousBar = bar.previousBar;
			if(previousMasterBar.timeSignatureDenominator != masterBar.timeSignatureDenominator || previousMasterBar.timeSignatureNumerator != masterBar.timeSignatureNumerator) {
				this._builder += Std.string("\\ts ");
				this._builder += Std.string(masterBar.timeSignatureNumerator);
				this._builder += Std.string(" ");
				this._builder += Std.string(masterBar.timeSignatureDenominator);
				this._builder = this._builder + ("" + "\r\n");
			}
			if(previousMasterBar.keySignature != masterBar.keySignature) {
				this._builder += Std.string("\\ks ");
				var _g = masterBar.keySignature;
				switch(_g) {
				case -7:
					this._builder += Std.string("cb");
					break;
				case -6:
					this._builder += Std.string("gb");
					break;
				case -5:
					this._builder += Std.string("db");
					break;
				case -4:
					this._builder += Std.string("ab");
					break;
				case -3:
					this._builder += Std.string("eb");
					break;
				case -2:
					this._builder += Std.string("bb");
					break;
				case -1:
					this._builder += Std.string("f");
					break;
				case 0:
					this._builder += Std.string("c");
					break;
				case 1:
					this._builder += Std.string("g");
					break;
				case 2:
					this._builder += Std.string("d");
					break;
				case 3:
					this._builder += Std.string("a");
					break;
				case 4:
					this._builder += Std.string("e");
					break;
				case 5:
					this._builder += Std.string("b");
					break;
				case 6:
					this._builder += Std.string("f#");
					break;
				case 7:
					this._builder += Std.string("c#");
					break;
				default:
				}
				this._builder = this._builder + ("" + "\r\n");
			}
			if(bar.clef != previousBar.clef) {
				this._builder += Std.string("\\clef ");
				var _g1 = bar.clef;
				switch(_g1) {
				case 0:
					this._builder += Std.string("n");
					break;
				case 1:
					this._builder += Std.string("c3");
					break;
				case 2:
					this._builder += Std.string("c4");
					break;
				case 3:
					this._builder += Std.string("f4");
					break;
				case 4:
					this._builder += Std.string("g2");
					break;
				default:
				}
				this._builder = this._builder + ("" + "\r\n");
			}
			if(masterBar.tempoAutomation != null) {
				this._builder += Std.string("\\tempo ");
				this._builder += Std.string(masterBar.tempoAutomation.value);
				this._builder = this._builder + ("" + "\r\n");
			}
		}
		if(masterBar.isRepeatStart) {
			this._builder += Std.string("\\ro ");
			this._builder = this._builder + ("" + "\r\n");
		}
		if(masterBar.get_isRepeatEnd()) {
			this._builder += Std.string("\\rc ");
			this._builder += Std.string(masterBar.repeatCount + 1);
			this._builder = this._builder + ("" + "\r\n");
		}
	}
	,__class__: alphaTab.exporter.AlphaTexExporter
};
alphaTab.importer = {};
alphaTab.importer.AlphaTexException = function() {
	alphaTab.AlphaTabException.call(this);
	this.position = 0;
	this.nonTerm = null;
	this.expected = 0;
	this.symbol = 0;
	this.symbolData = null;
};
alphaTab.importer.AlphaTexException.__name__ = ["alphaTab","importer","AlphaTexException"];
alphaTab.importer.AlphaTexException.symbolError = function(position,nonTerm,expected,symbol,symbolData) {
	var message;
	if(symbolData == null) {
		message = "MalFormed AlphaTex: @" + Std.string(position) + ": Error on block " + nonTerm + ", expected a " + alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(expected) + " found a " + alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(symbol);
	} else {
		message = "MalFormed AlphaTex: @" + Std.string(position) + ": Error on block " + nonTerm + ", invalid value: " + symbolData;
	}
	var exception = new alphaTab.importer.AlphaTexException().AlphaTexException(message);
	exception.position = position;
	exception.nonTerm = nonTerm;
	exception.expected = expected;
	exception.symbol = symbol;
	exception.symbolData = symbolData;
	return exception;
};
alphaTab.importer.AlphaTexException.errorMessage = function(position,message) {
	message = "MalFormed AlphaTex: @" + Std.string(position) + ": " + message;
	var exception = new alphaTab.importer.AlphaTexException().AlphaTexException(message);
	exception.position = position;
	return exception;
};
alphaTab.importer.AlphaTexException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.AlphaTexException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	AlphaTexException: function(message) {
		this.AlphaTabException(message);
		this.position = 0;
		this.nonTerm = null;
		this.expected = 0;
		this.symbol = 0;
		this.symbolData = null;
		return this;
	}
	,__class__: alphaTab.importer.AlphaTexException
});
alphaTab.importer.ScoreImporter = $hx_exports["alphaTab"]["importer"]["ScoreImporter"] = function() {
	this.Data = null;
	this.Settings = null;
};
alphaTab.importer.ScoreImporter.__name__ = ["alphaTab","importer","ScoreImporter"];
alphaTab.importer.ScoreImporter.buildImporters = function() {
	return [new alphaTab.importer.Gp3To5Importer(),new alphaTab.importer.GpxImporter(),new alphaTab.importer.Gp7Importer(),new alphaTab.importer.AlphaTexImporter(),new alphaTab.importer.MusicXmlImporter()];
};
alphaTab.importer.ScoreImporter.prototype = {
	init: function(data,settings) {
		this.Data = data;
		this.Settings = settings;
	}
	,get_name: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,readScore: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.importer.ScoreImporter
};
alphaTab.importer.AlphaTexImporter = function() {
	alphaTab.importer.ScoreImporter.call(this);
	this._trackChannel = 0;
	this._score = null;
	this._currentTrack = null;
	this._currentStaff = null;
	this._ch = 0;
	this._curChPos = 0;
	this._sy = 0;
	this._syData = null;
	this._allowNegatives = false;
	this._allowTuning = false;
	this._currentDuration = -4;
	this._currentDynamics = 0;
	this._currentTuplet = 0;
	this._lyrics = null;
	this._trackChannel = 0;
};
alphaTab.importer.AlphaTexImporter.__name__ = ["alphaTab","importer","AlphaTexImporter"];
alphaTab.importer.AlphaTexImporter.isLetter = function(code) {
	if(!alphaTab.importer.AlphaTexImporter.isTerminal(code)) {
		if(!(code >= 33 && code <= 47 || code >= 58 && code <= 126)) {
			return code > 128;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
alphaTab.importer.AlphaTexImporter.isTerminal = function(ch) {
	if(!(ch == 46 || ch == 123 || ch == 125 || ch == 91 || ch == 93 || ch == 40 || ch == 41 || ch == 124 || ch == 39 || ch == 34)) {
		return ch == 92;
	} else {
		return true;
	}
};
alphaTab.importer.AlphaTexImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.AlphaTexImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_name: function() {
		return "AlphaTex";
	}
	,readScore: function() {
		try {
			this._allowTuning = true;
			var this1 = {}
			this._lyrics = this1;
			this.createDefaultScore();
			this._curChPos = 0;
			this._currentDuration = 4;
			this._currentDynamics = 5;
			this._currentTuplet = 1;
			this.nextChar();
			this.newSy();
			if(this._sy == 14) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unknown start sign <"));
			}
			this.score();
			this.consolidate();
			this._score.finish(this.Settings);
			this._score.rebuildRepeatGroups();
			var this2 = this._lyrics;
			var track = $iterator(Object.keys(this2))();
			while(track.hasNext()) {
				var track1 = track.next();
				this._score.tracks[track1].applyLyrics(this._lyrics[track1]);
			}
			return this._score;
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,alphaTab.importer.AlphaTexException) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(e.message));
			} else throw(e);
		}
	}
	,consolidate: function() {
		var track = $iterator(this._score.tracks)();
		while(track.hasNext()) {
			var track1 = track.next();
			var staff = $iterator(track1.staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				while(staff1.bars.length < this._score.masterBars.length) {
					var bar = this.newBar(staff1);
					var emptyBeat = new alphaTab.model.Beat();
					emptyBeat.isEmpty = true;
					bar.voices[0].addBeat(emptyBeat);
				}
			}
		}
	}
	,error: function(nonterm,expected,symbolError) {
		if(symbolError == null) {
			symbolError = true;
		}
		var e;
		if(symbolError) {
			e = alphaTab.importer.AlphaTexException.symbolError(this._curChPos,nonterm,expected,this._sy,null);
		} else {
			e = alphaTab.importer.AlphaTexException.symbolError(this._curChPos,nonterm,expected,expected,this._syData);
		}
		alphaTab.util.Logger.error(this.get_name(),e.message,null);
		throw new js._Boot.HaxeError(e);
	}
	,errorMessage: function(message) {
		var e = alphaTab.importer.AlphaTexException.errorMessage(this._curChPos,message);
		alphaTab.util.Logger.error(this.get_name(),e.message,null);
		throw new js._Boot.HaxeError(e);
	}
	,createDefaultScore: function() {
		this._score = new alphaTab.model.Score();
		this._score.tempo = 120;
		this._score.tempoLabel = "";
		this.newTrack();
	}
	,newTrack: function() {
		this._currentTrack = new alphaTab.model.Track(1);
		this._currentTrack.playbackInfo.program = 25;
		this._currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
		this._currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
		this._currentStaff = this._currentTrack.staves[0];
		this._currentStaff.displayTranspositionPitch = -12;
		this._currentStaff.tuning = alphaTab.model.Tuning.getDefaultTuningFor(6).tunings;
		this._score.addTrack(this._currentTrack);
		var this1 = this._lyrics;
		var index = this._currentTrack.index;
		var this2 = [];
		this1[index] = this2;
		this._currentDynamics = 5;
	}
	,parseClefFromString: function(str) {
		var _g = str.toLowerCase();
		switch(_g) {
		case "c3":case "tenor":
			return 1;
		case "alto":case "c4":
			return 2;
		case "bass":case "f4":
			return 3;
		case "n":case "neutral":
			return 0;
		case "g2":case "treble":
			return 4;
		default:
			return 4;
		}
	}
	,parseClefFromInt: function(i) {
		switch(i) {
		case 43:
			return 4;
		case 48:
			return 1;
		case 60:
			return 2;
		case 65:
			return 3;
		default:
			return 4;
		}
	}
	,parseTripletFeelFromString: function(str) {
		var _g = str.toLowerCase();
		switch(_g) {
		case "d16":case "dotted-16th":
			return 3;
		case "d8":case "dotted-8th":
			return 4;
		case "no":case "none":
			return 0;
		case "s8":case "scottish-8th":
			return 6;
		case "s16":case "scottish-16th":
			return 5;
		case "t8":case "triplet-8th":
			return 2;
		case "t16":case "triplet-16th":
			return 1;
		default:
			return 0;
		}
	}
	,parseTripletFeelFromInt: function(i) {
		switch(i) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		default:
			return 0;
		}
	}
	,parseKeySignature: function(str) {
		var _g = str.toLowerCase();
		switch(_g) {
		case "a":
			return 3;
		case "ab":
			return -4;
		case "b":
			return 5;
		case "bb":
			return -2;
		case "c":
			return 0;
		case "c#":
			return 7;
		case "cb":
			return -7;
		case "d":
			return 2;
		case "db":
			return -5;
		case "e":
			return 4;
		case "eb":
			return -3;
		case "f":
			return -1;
		case "f#":
			return 6;
		case "g":
			return 1;
		case "gb":
			return -6;
		default:
			return 0;
		}
	}
	,nextChar: function() {
		var b = this.Data.readByte();
		if(b == -1) {
			this._ch = 0;
		} else {
			this._ch = b;
			this._curChPos++;
		}
	}
	,newSy: function() {
		this._sy = 0;
		while(true) {
			if(this._ch == 0) {
				this._sy = 1;
			} else if(alphaTab.platform.Platform.isWhiteSpace(this._ch)) {
				this.nextChar();
			} else if(this._ch == 47) {
				this.nextChar();
				if(this._ch == 47) {
					while(this._ch != 13 && this._ch != 10 && this._ch != 0) this.nextChar();
				} else if(this._ch == 42) {
					while(this._ch != 0) if(this._ch == 42) {
						this.nextChar();
						if(this._ch == 47) {
							this.nextChar();
							break;
						}
					} else {
						this.nextChar();
					}
				} else {
					this.error("symbol",5,false);
				}
			} else if(this._ch == 34 || this._ch == 39) {
				var startChar = this._ch;
				this.nextChar();
				var this1 = "";
				var s = this1;
				this._sy = 5;
				while(this._ch != startChar && this._ch != 0) {
					s += String.fromCharCode(this._ch);
					this.nextChar();
				}
				this._syData = s;
				this.nextChar();
			} else if(this._ch == 45) {
				if(this._allowNegatives && this.isDigit(this._ch)) {
					var number = this.readNumber();
					this._sy = 2;
					this._syData = number;
				} else {
					this._sy = 5;
					this._syData = this.readName();
				}
			} else if(this._ch == 46) {
				this._sy = 4;
				this.nextChar();
			} else if(this._ch == 58) {
				this._sy = 3;
				this.nextChar();
			} else if(this._ch == 40) {
				this._sy = 7;
				this.nextChar();
			} else if(this._ch == 92) {
				this.nextChar();
				var name = this.readName();
				this._sy = 12;
				this._syData = name;
			} else if(this._ch == 41) {
				this._sy = 8;
				this.nextChar();
			} else if(this._ch == 123) {
				this._sy = 9;
				this.nextChar();
			} else if(this._ch == 125) {
				this._sy = 10;
				this.nextChar();
			} else if(this._ch == 124) {
				this._sy = 11;
				this.nextChar();
			} else if(this._ch == 42) {
				this._sy = 13;
				this.nextChar();
			} else if(this._ch == 60) {
				this._sy = 14;
				this.nextChar();
			} else if(this.isDigit(this._ch)) {
				var number1 = this.readNumber();
				this._sy = 2;
				this._syData = number1;
			} else if(alphaTab.importer.AlphaTexImporter.isLetter(this._ch)) {
				var name1 = this.readName();
				var tuning = this._allowTuning ? alphaTab.model.TuningParser.parse(name1) : null;
				if(tuning != null) {
					this._sy = 6;
					this._syData = tuning;
				} else {
					this._sy = 5;
					this._syData = name1;
				}
			} else {
				this.error("symbol",5,false);
			}
			if(!(this._sy == 0)) {
				break;
			}
		}
	}
	,isDigit: function(code) {
		if(!(code >= 48 && code <= 57)) {
			if(code == 45) {
				return this._allowNegatives;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,readName: function() {
		var this1 = "";
		var str = this1;
		while(true) {
			str += String.fromCharCode(this._ch);
			this.nextChar();
			if(!(alphaTab.importer.AlphaTexImporter.isLetter(this._ch) || this.isDigit(this._ch) || this._ch == 35)) {
				break;
			}
		}
		return str;
	}
	,readNumber: function() {
		var this1 = "";
		var str = this1;
		while(true) {
			str += String.fromCharCode(this._ch);
			this.nextChar();
			if(!this.isDigit(this._ch)) {
				break;
			}
		}
		return alphaTab.platform.Platform.parseIntMinValue(str);
	}
	,score: function() {
		this.metaData();
		this.bars();
	}
	,metaData: function() {
		var anyMeta = false;
		var continueReading = true;
		while(this._sy == 12 && continueReading) {
			var syData = Std.string(this._syData).toLowerCase();
			switch(syData) {
			case "album":
				this.newSy();
				if(this._sy == 5) {
					this._score.album = Std.string(this._syData);
				} else {
					this.error("album",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "artist":
				this.newSy();
				if(this._sy == 5) {
					this._score.artist = Std.string(this._syData);
				} else {
					this.error("artist",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "copyright":
				this.newSy();
				if(this._sy == 5) {
					this._score.copyright = Std.string(this._syData);
				} else {
					this.error("copyright",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "music":
				this.newSy();
				if(this._sy == 5) {
					this._score.music = Std.string(this._syData);
				} else {
					this.error("music",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "subtitle":
				this.newSy();
				if(this._sy == 5) {
					this._score.subTitle = Std.string(this._syData);
				} else {
					this.error("subtitle",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "tempo":
				this.newSy();
				if(this._sy == 2) {
					this._score.tempo = this._syData;
				} else {
					this.error("tempo",2,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "title":
				this.newSy();
				if(this._sy == 5) {
					this._score.title = Std.string(this._syData);
				} else {
					this.error("title",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			case "words":
				this.newSy();
				if(this._sy == 5) {
					this._score.words = Std.string(this._syData);
				} else {
					this.error("words",5,true);
				}
				this.newSy();
				anyMeta = true;
				break;
			default:
				if(this.handleStaffMeta()) {
					anyMeta = true;
				} else if(anyMeta) {
					this.error("metaDataTags",5,false);
				} else {
					continueReading = false;
				}
			}
		}
		if(anyMeta) {
			if(this._sy != 4) {
				this.error("song",4,true);
			}
			this.newSy();
		} else if(this._sy == 4) {
			this.newSy();
		}
	}
	,handleStaffMeta: function() {
		var syData = Std.string(this._syData).toLowerCase();
		switch(syData) {
		case "capo":
			this.newSy();
			if(this._sy == 2) {
				this._currentStaff.capo = this._syData;
			} else {
				this.error("capo",2,true);
			}
			this.newSy();
			return true;
		case "chord":
			this.newSy();
			var chord = new alphaTab.model.Chord();
			this.chordProperties(chord);
			if(this._sy == 5) {
				chord.name = this._syData;
				this.newSy();
			} else {
				this.error("chord-name",2,true);
			}
			var i = 0;
			while(i < this._currentStaff.tuning.length) {
				if(this._sy == 2) {
					chord.strings.push(this._syData);
				} else if(this._sy == 5 && Std.string(this._syData).toLowerCase() == "x") {
					chord.strings.push(-1);
				}
				this.newSy();
				++i;
			}
			this._currentStaff.addChord(chord.name.toLowerCase(),chord);
			return true;
		case "instrument":
			this.newSy();
			if(this._sy == 2) {
				var instrument = this._syData;
				if(instrument >= 0 && instrument <= 128) {
					this._currentTrack.playbackInfo.program = this._syData;
				} else {
					this.error("instrument",2,false);
				}
			} else if(this._sy == 5) {
				var instrumentName = Std.string(this._syData).toLowerCase();
				this._currentTrack.playbackInfo.program = alphaTab.audio.GeneralMidi.getValue(instrumentName);
			} else {
				this.error("instrument",2,true);
			}
			var tmp = alphaTab.audio.GeneralMidi.isGuitar(this._currentTrack.playbackInfo.program) ? -12 : 0;
			this._currentStaff.displayTranspositionPitch = tmp;
			this.newSy();
			return true;
		case "lyrics":
			this.newSy();
			var lyrics = new alphaTab.model.Lyrics();
			lyrics.startBar = 0;
			lyrics.text = "";
			if(this._sy == 2) {
				lyrics.startBar = this._syData;
				this.newSy();
			}
			if(this._sy == 5) {
				lyrics.text = this._syData;
				this.newSy();
			} else {
				this.error("lyrics",5,true);
			}
			this._lyrics[this._currentTrack.index].push(lyrics);
			return true;
		case "tuning":
			this.newSy();
			var strings = this._currentStaff.tuning.length;
			var _g = this._sy;
			switch(_g) {
			case 5:
				var text = Std.string(this._syData).toLowerCase();
				if(text == "piano" || text == "none" || text == "voice") {
					var this1 = new Int32Array(0);
					this._currentStaff.tuning = this1;
				} else {
					this.error("tuning",6,true);
				}
				this.newSy();
				break;
			case 6:
				var this2 = [];
				var tuning = this2;
				while(true) {
					var t = this._syData;
					tuning.push(t.get_realValue());
					this.newSy();
					if(!(this._sy == 6)) {
						break;
					}
				}
				this._currentStaff.tuning = new Int32Array(tuning);
				break;
			default:
				this.error("tuning",6,true);
			}
			var tmp1;
			if(strings != this._currentStaff.tuning.length) {
				var this3 = this._currentStaff.chords;
				tmp1 = Object.keys(this3).length > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				this.errorMessage("Tuning must be defined before any chord");
			}
			return true;
		default:
			return false;
		}
	}
	,chordProperties: function(chord) {
		if(this._sy != 9) {
			return;
		}
		this.newSy();
		while(this._sy == 5) {
			var _g = Std.string(this._syData).toLowerCase();
			switch(_g) {
			case "barre":
				this.newSy();
				while(this._sy == 2) {
					chord.barreFrets.push(this._syData);
					this.newSy();
				}
				break;
			case "firstfret":
				this.newSy();
				var _g1 = this._sy;
				if(_g1 == 2) {
					chord.firstFret = this._syData;
				} else {
					this.error("chord-firstfret",2,true);
				}
				this.newSy();
				break;
			case "showdiagram":
				this.newSy();
				var _g2 = this._sy;
				switch(_g2) {
				case 2:
					chord.showDiagram = this._syData != 0;
					break;
				case 5:
					chord.showDiagram = Std.string(this._syData).toLowerCase() != "false";
					break;
				default:
					this.error("chord-showdiagram",5,true);
				}
				this.newSy();
				break;
			case "showfingering":
				this.newSy();
				var _g3 = this._sy;
				switch(_g3) {
				case 2:
					chord.showFingering = this._syData != 0;
					break;
				case 5:
					chord.showDiagram = Std.string(this._syData).toLowerCase() != "false";
					break;
				default:
					this.error("chord-showfingering",5,true);
				}
				this.newSy();
				break;
			case "showname":
				this.newSy();
				var _g4 = this._sy;
				switch(_g4) {
				case 2:
					chord.showName = this._syData != 0;
					break;
				case 5:
					chord.showName = Std.string(this._syData).toLowerCase() != "false";
					break;
				default:
					this.error("chord-showname",5,true);
				}
				this.newSy();
				break;
			default:
				this.error("chord-properties",5,false);
			}
		}
		if(this._sy != 10) {
			this.error("chord-properties",10,true);
		}
		this.newSy();
	}
	,bars: function() {
		this.bar();
		while(this._sy != 1) if(this._sy == 11) {
			this.newSy();
			this.bar();
		} else if(this._sy == 12) {
			this.bar();
		} else {
			break;
		}
	}
	,trackStaffMeta: function() {
		if(this._sy == 12) {
			var syData = Std.string(this._syData).toLowerCase();
			if(syData == "track") {
				this.newSy();
				if(this._score.masterBars.length > 0) {
					this.newTrack();
				}
				if(this._sy == 5) {
					this._currentTrack.name = Std.string(this._syData);
					this.newSy();
				}
				if(this._sy == 5) {
					this._currentTrack.shortName = Std.string(this._syData);
					this.newSy();
				}
			}
			syData = Std.string(this._syData).toLowerCase();
			if(syData == "staff") {
				this.newSy();
				if(this._currentTrack.staves[0].bars.length > 0) {
					this._currentTrack.ensureStaveCount(this._currentTrack.staves.length + 1);
					this._currentStaff = this._currentTrack.staves[this._currentTrack.staves.length - 1];
					this._currentDynamics = 5;
				}
				this.staffProperties();
			}
		}
	}
	,staffProperties: function() {
		if(this._sy != 9) {
			return;
		}
		this.newSy();
		var showStandardNotation = false;
		var showTabs = false;
		while(this._sy == 5) {
			var _g = Std.string(this._syData).toLowerCase();
			switch(_g) {
			case "score":
				showStandardNotation = true;
				this.newSy();
				break;
			case "tabs":
				showTabs = true;
				this.newSy();
				break;
			default:
				this.error("staff-properties",5,false);
			}
		}
		if(showStandardNotation || showTabs) {
			this._currentStaff.showStandardNotation = showStandardNotation;
			this._currentStaff.showTablature = showTabs;
		}
		if(this._sy != 10) {
			this.error("staff-properties",10,true);
		}
		this.newSy();
	}
	,bar: function() {
		this.trackStaffMeta();
		var bar = this.newBar(this._currentStaff);
		if(this._currentStaff.bars.length > this._score.masterBars.length) {
			var master = new alphaTab.model.MasterBar();
			this._score.addMasterBar(master);
			if(master.index > 0) {
				master.keySignature = master.previousMasterBar.keySignature;
				master.keySignatureType = master.previousMasterBar.keySignatureType;
				master.timeSignatureDenominator = master.previousMasterBar.timeSignatureDenominator;
				master.timeSignatureNumerator = master.previousMasterBar.timeSignatureNumerator;
				master.tripletFeel = master.previousMasterBar.tripletFeel;
			}
		}
		this.barMeta(bar);
		var voice = bar.voices[0];
		while(this._sy != 11 && this._sy != 1) if(!this.beat(voice)) {
			break;
		}
		if(voice.beats.length == 0) {
			var emptyBeat = new alphaTab.model.Beat();
			emptyBeat.isEmpty = true;
			voice.addBeat(emptyBeat);
		}
	}
	,newBar: function(staff) {
		var bar = new alphaTab.model.Bar();
		staff.addBar(bar);
		if(bar.index > 0) {
			bar.clef = bar.previousBar.clef;
		}
		var voice = new alphaTab.model.Voice();
		bar.addVoice(voice);
		return bar;
	}
	,beat: function(voice) {
		this.beatDuration();
		var beat = new alphaTab.model.Beat();
		voice.addBeat(beat);
		if(voice.bar.get_masterBar().tempoAutomation != null && voice.beats.length == 1) {
			beat.automations.push(voice.bar.get_masterBar().tempoAutomation);
		}
		if(this._sy == 7) {
			this.newSy();
			this.note(beat);
			while(this._sy != 8 && this._sy != 1) if(!this.note(beat)) {
				break;
			}
			if(this._sy != 8) {
				this.error("note-list",8,true);
			}
			this.newSy();
		} else if(this._sy == 5 && Std.string(this._syData).toLowerCase() == "r") {
			this.newSy();
		} else if(!this.note(beat)) {
			var index = voice.beats.length - 1;
			if(index != -1) {
				voice.beats.splice(index,1);
			}
			return false;
		}
		if(this._sy == 4) {
			this._allowNegatives = true;
			this.newSy();
			this._allowNegatives = false;
			if(this._sy != 2) {
				this.error("duration",2,true);
			}
			this._currentDuration = this.parseDuration(this._syData);
			this.newSy();
		}
		beat.duration = this._currentDuration;
		beat.dynamics = this._currentDynamics;
		if(this._currentTuplet != 1 && !beat.get_hasTuplet()) {
			this.applyTuplet(beat,this._currentTuplet);
		}
		var beatRepeat = 1;
		if(this._sy == 13) {
			this.newSy();
			if(this._sy != 2) {
				this.error("multiplier",2,true);
			} else {
				beatRepeat = this._syData;
			}
			this.newSy();
		}
		this.beatEffects(beat);
		var i = 0;
		while(i < beatRepeat - 1) {
			voice.addBeat(beat.clone());
			++i;
		}
		return true;
	}
	,beatDuration: function() {
		if(this._sy != 3) {
			return;
		}
		this._allowNegatives = true;
		this.newSy();
		this._allowNegatives = false;
		if(this._sy != 2) {
			this.error("duration",2,true);
		}
		this._currentDuration = this.parseDuration(this._syData);
		this._currentTuplet = 1;
		this.newSy();
		if(this._sy != 9) {
			return;
		}
		this.newSy();
		while(this._sy == 5) {
			var effect = Std.string(this._syData).toLowerCase();
			if(effect == "tu") {
				this.newSy();
				if(this._sy != 2) {
					this.error("duration-tuplet",2,true);
				}
				this._currentTuplet = this._syData;
				this.newSy();
			} else {
				this.error("beat-duration",5,false);
			}
		}
		if(this._sy != 10) {
			this.error("beat-duration",10,true);
		}
		this.newSy();
	}
	,beatEffects: function(beat) {
		if(this._sy != 9) {
			return;
		}
		this.newSy();
		while(this._sy == 5) {
			this._syData = Std.string(this._syData).toLowerCase();
			if(!this.applyBeatEffect(beat)) {
				this.error("beat-effects",5,false);
			}
		}
		if(this._sy != 10) {
			this.error("beat-effects",10,true);
		}
		this.newSy();
	}
	,applyBeatEffect: function(beat) {
		var syData = Std.string(this._syData).toLowerCase();
		if(syData == "f") {
			beat.fadeIn = true;
			this.newSy();
			return true;
		}
		if(syData == "v") {
			beat.vibrato = 1;
			this.newSy();
			return true;
		}
		if(syData == "s") {
			beat.slap = true;
			this.newSy();
			return true;
		}
		if(syData == "p") {
			beat.pop = true;
			this.newSy();
			return true;
		}
		if(syData == "tt") {
			beat.tap = true;
			this.newSy();
			return true;
		}
		if(syData == "dd") {
			beat.dots = 2;
			this.newSy();
			return true;
		}
		if(syData == "d") {
			beat.dots = 1;
			this.newSy();
			return true;
		}
		if(syData == "su") {
			beat.pickStroke = 1;
			this.newSy();
			return true;
		}
		if(syData == "sd") {
			beat.pickStroke = 2;
			this.newSy();
			return true;
		}
		if(syData == "tu") {
			this.newSy();
			if(this._sy != 2) {
				this.error("tuplet",2,true);
				return false;
			}
			this.applyTuplet(beat,this._syData);
			this.newSy();
			return true;
		}
		if(syData == "tb" || syData == "tbe") {
			var exact = syData == "tbe";
			this.newSy();
			if(this._sy != 7) {
				this.error("tremolobar-effect",7,true);
				return false;
			}
			this._allowNegatives = true;
			this.newSy();
			while(this._sy != 8 && this._sy != 1) {
				var offset;
				var value;
				if(exact) {
					if(this._sy != 2) {
						this.error("tremolobar-effect",2,true);
						return false;
					}
					offset = this._syData;
					this.newSy();
					if(this._sy != 2) {
						this.error("tremolobar-effect",2,true);
						return false;
					}
					value = this._syData;
				} else {
					if(this._sy != 2) {
						this.error("tremolobar-effect",2,true);
						return false;
					}
					offset = 0;
					value = this._syData;
				}
				beat.addWhammyBarPoint(new alphaTab.model.BendPoint(offset,value));
				this.newSy();
			}
			while(beat.whammyBarPoints.length > 60) beat.removeWhammyBarPoint(beat.whammyBarPoints.length - 1);
			if(!exact) {
				var count = beat.whammyBarPoints.length;
				var step = 60 / count | 0;
				var i = 0;
				while(i < count) {
					beat.whammyBarPoints[i].offset = Math.min(60,i * step);
					++i;
				}
			} else {
				var comparison = function(a,b) {
					return a.offset - b.offset;
				};
				beat.whammyBarPoints.sort(function(a1,b1) {
					return comparison(a1,b1);
				});
			}
			this._allowNegatives = false;
			if(this._sy != 8) {
				this.error("tremolobar-effect",8,true);
				return false;
			}
			this.newSy();
			return true;
		}
		if(syData == "ch") {
			this.newSy();
			var chordName = Std.string(this._syData);
			var chordId = chordName.toLowerCase();
			if(!this._currentStaff.chords.hasOwnProperty(chordId)) {
				var chord = new alphaTab.model.Chord();
				chord.showDiagram = false;
				chord.name = chordName;
				this._currentStaff.addChord(chordId,chord);
			}
			beat.chordId = chordId;
			this.newSy();
			return true;
		}
		if(syData == "gr") {
			this.newSy();
			if(Std.string(this._syData).toLowerCase() == "ob") {
				beat.graceType = 1;
				this.newSy();
			} else if(Std.string(this._syData).toLowerCase() == "b") {
				beat.graceType = 3;
				this.newSy();
			} else {
				beat.graceType = 2;
			}
			return true;
		}
		if(syData == "dy") {
			this.newSy();
			var _g = Std.string(this._syData).toLowerCase();
			switch(_g) {
			case "f":
				beat.dynamics = 5;
				break;
			case "ff":
				beat.dynamics = 6;
				break;
			case "fff":
				beat.dynamics = 7;
				break;
			case "mf":
				beat.dynamics = 4;
				break;
			case "mp":
				beat.dynamics = 3;
				break;
			case "p":
				beat.dynamics = 2;
				break;
			case "pp":
				beat.dynamics = 1;
				break;
			case "ppp":
				beat.dynamics = 0;
				break;
			default:
			}
			this._currentDynamics = beat.dynamics;
			this.newSy();
			return true;
		}
		if(syData == "cre") {
			beat.crescendo = 1;
			this.newSy();
			return true;
		}
		if(syData == "dec") {
			beat.crescendo = 2;
			this.newSy();
			return true;
		}
		if(syData == "tp") {
			this.newSy();
			var duration = 8;
			if(this._sy == 2) {
				var _g1 = this._syData;
				switch(_g1) {
				case 8:
					duration = 8;
					break;
				case 16:
					duration = 16;
					break;
				case 32:
					duration = 32;
					break;
				default:
					duration = 8;
				}
				this.newSy();
			}
			beat.tremoloSpeed = duration;
			return true;
		}
		return false;
	}
	,applyTuplet: function(beat,tuplet) {
		switch(tuplet) {
		case 3:
			beat.tupletNumerator = 3;
			beat.tupletDenominator = 2;
			break;
		case 5:
			beat.tupletNumerator = 5;
			beat.tupletDenominator = 4;
			break;
		case 6:
			beat.tupletNumerator = 6;
			beat.tupletDenominator = 4;
			break;
		case 7:
			beat.tupletNumerator = 7;
			beat.tupletDenominator = 4;
			break;
		case 9:
			beat.tupletNumerator = 9;
			beat.tupletDenominator = 8;
			break;
		case 10:
			beat.tupletNumerator = 10;
			beat.tupletDenominator = 8;
			break;
		case 11:
			beat.tupletNumerator = 11;
			beat.tupletDenominator = 8;
			break;
		case 12:
			beat.tupletNumerator = 12;
			beat.tupletDenominator = 8;
			break;
		default:
			beat.tupletNumerator = 1;
			beat.tupletDenominator = 1;
		}
	}
	,note: function(beat) {
		var isDead = Std.string(this._syData) == "x";
		var isTie = Std.string(this._syData) == "-";
		var fret = -1;
		var octave = -1;
		var tone = -1;
		var _g = this._sy;
		switch(_g) {
		case 2:
			fret = this._syData;
			break;
		case 5:
			if(isTie || isDead) {
				fret = 0;
			} else {
				this.error("note-fret",2,true);
			}
			break;
		case 6:
			var tuning = this._syData;
			octave = tuning.octave;
			tone = tuning.noteValue;
			break;
		default:
			return false;
		}
		this.newSy();
		var isFretted = octave == -1 && this._currentStaff.tuning.length > 0;
		var string = -1;
		if(isFretted) {
			if(this._sy != 4) {
				this.error("note",4,true);
			}
			this.newSy();
			if(this._sy != 2) {
				this.error("note-string",2,true);
			}
			string = this._syData;
			if(string < 1 || string > this._currentStaff.tuning.length) {
				this.error("note-string",2,false);
			}
			this.newSy();
		}
		var note = new alphaTab.model.Note();
		if(isFretted) {
			note.string = this._currentStaff.tuning.length - (string - 1);
			note.isDead = isDead;
			note.isTieDestination = isTie;
			if(!isTie) {
				note.fret = fret;
			}
		} else {
			note.octave = octave;
			note.tone = tone;
			note.isTieDestination = isTie;
		}
		beat.addNote(note);
		this.noteEffects(note);
		return true;
	}
	,noteEffects: function(note) {
		if(this._sy != 9) {
			return;
		}
		this.newSy();
		while(this._sy == 5) {
			var syData = Std.string(this._syData).toLowerCase();
			this._syData = syData;
			if(syData == "b" || syData == "be") {
				var exact = this._syData == "be";
				this.newSy();
				if(this._sy != 7) {
					this.error("bend-effect",7,true);
				}
				this.newSy();
				while(this._sy != 8 && this._sy != 1) {
					var offset = 0;
					var value = 0;
					if(exact) {
						if(this._sy != 2) {
							this.error("bend-effect-value",2,true);
						}
						offset = this._syData;
						this.newSy();
						if(this._sy != 2) {
							this.error("bend-effect-value",2,true);
						}
						value = this._syData;
					} else {
						if(this._sy != 2) {
							this.error("bend-effect-value",2,true);
						}
						value = this._syData;
					}
					note.addBendPoint(new alphaTab.model.BendPoint(offset,value));
					this.newSy();
				}
				while(note.bendPoints.length > 60) {
					var index = note.bendPoints.length - 1;
					if(index != -1) {
						note.bendPoints.splice(index,1);
					}
				}
				if(exact) {
					note.bendPoints.sort((function(comparison) {
						return function(a,b) {
							return comparison[0](a,b);
						};
					})([(function() {
						return function(a1,b1) {
							return a1.offset - b1.offset;
						};
					})()]));
				} else {
					var count = note.bendPoints.length;
					var step = 60 / (count - 1) | 0;
					var i = 0;
					while(i < count) {
						note.bendPoints[i].offset = Math.min(60,i * step);
						++i;
					}
				}
				if(this._sy != 8) {
					this.error("bend-effect",8,true);
				}
				this.newSy();
			} else if(syData == "nh") {
				note.harmonicType = 1;
				this.newSy();
			} else if(syData == "ah") {
				note.harmonicType = 2;
				this.newSy();
			} else if(syData == "th") {
				note.harmonicType = 4;
				this.newSy();
			} else if(syData == "ph") {
				note.harmonicType = 3;
				this.newSy();
			} else if(syData == "sh") {
				note.harmonicType = 5;
				this.newSy();
			} else if(syData == "tr") {
				this.newSy();
				if(this._sy != 2) {
					this.error("trill-effect",2,true);
				}
				var fret = this._syData;
				this.newSy();
				var duration = 16;
				if(this._sy == 2) {
					var _g = this._syData;
					switch(_g) {
					case 16:
						duration = 16;
						break;
					case 32:
						duration = 32;
						break;
					case 64:
						duration = 64;
						break;
					default:
						duration = 16;
					}
					this.newSy();
				}
				note.trillValue = fret + note.get_stringTuning();
				note.trillSpeed = duration;
			} else if(syData == "v") {
				this.newSy();
				note.vibrato = 1;
			} else if(syData == "sl") {
				this.newSy();
				note.slideOutType = 2;
			} else if(syData == "ss") {
				this.newSy();
				note.slideOutType = 1;
			} else if(syData == "sib") {
				this.newSy();
				note.slideInType = 1;
			} else if(syData == "sia") {
				this.newSy();
				note.slideInType = 2;
			} else if(syData == "sou") {
				this.newSy();
				note.slideOutType = 3;
			} else if(syData == "sod") {
				this.newSy();
				note.slideOutType = 4;
			} else if(syData == "psd") {
				this.newSy();
				note.slideOutType = 5;
			} else if(syData == "psu") {
				this.newSy();
				note.slideOutType = 6;
			} else if(syData == "h") {
				this.newSy();
				note.isHammerPullOrigin = true;
			} else if(syData == "g") {
				this.newSy();
				note.isGhost = true;
			} else if(syData == "ac") {
				this.newSy();
				note.accentuated = 1;
			} else if(syData == "hac") {
				this.newSy();
				note.accentuated = 2;
			} else if(syData == "pm") {
				this.newSy();
				note.isPalmMute = true;
			} else if(syData == "st") {
				this.newSy();
				note.isStaccato = true;
			} else if(syData == "lr") {
				this.newSy();
				note.isLetRing = true;
			} else if(syData == "x") {
				this.newSy();
				note.fret = 0;
				note.isDead = true;
			} else if(syData == "-" || syData == "t") {
				this.newSy();
				note.isTieDestination = true;
			} else if(syData == "lf") {
				this.newSy();
				var finger = 0;
				if(this._sy == 2) {
					finger = this.toFinger(this._syData);
					this.newSy();
				}
				note.leftHandFinger = finger;
			} else if(syData == "rf") {
				this.newSy();
				var finger1 = 0;
				if(this._sy == 2) {
					finger1 = this.toFinger(this._syData);
					this.newSy();
				}
				note.rightHandFinger = finger1;
			} else if(!this.applyBeatEffect(note.beat)) {
				this.error(syData,5,false);
			}
		}
		if(this._sy != 10) {
			this.error("note-effect",10,false);
		}
		this.newSy();
	}
	,toFinger: function(syData) {
		switch(syData) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		default:
		}
		return 0;
	}
	,parseDuration: function(duration) {
		switch(duration) {
		case -4:
			return -4;
		case -2:
			return -2;
		case 1:
			return 1;
		case 2:
			return 2;
		case 4:
			return 4;
		case 8:
			return 8;
		case 16:
			return 16;
		case 32:
			return 32;
		case 64:
			return 64;
		case 128:
			return 128;
		default:
			return 4;
		}
	}
	,barMeta: function(bar) {
		var master = bar.get_masterBar();
		while(this._sy == 12) {
			var syData = Std.string(this._syData).toLowerCase();
			if(syData == "ts") {
				this.newSy();
				if(this._sy != 2) {
					this.error("timesignature-numerator",2,true);
				}
				master.timeSignatureNumerator = this._syData;
				this.newSy();
				if(this._sy != 2) {
					this.error("timesignature-denominator",2,true);
				}
				master.timeSignatureDenominator = this._syData;
				this.newSy();
			} else if(syData == "ro") {
				master.isRepeatStart = true;
				this.newSy();
			} else if(syData == "rc") {
				this.newSy();
				if(this._sy != 2) {
					this.error("repeatclose",2,true);
				}
				master.repeatCount = this._syData;
				this.newSy();
			} else if(syData == "ks") {
				this.newSy();
				if(this._sy != 5) {
					this.error("keysignature",5,true);
				}
				master.keySignature = js.Boot.__cast(this.parseKeySignature(Std.string(this._syData).toLowerCase()) , Int);
				this.newSy();
			} else if(syData == "clef") {
				this.newSy();
				var _g = this._sy;
				switch(_g) {
				case 2:
					bar.clef = this.parseClefFromInt(this._syData);
					break;
				case 5:
					bar.clef = this.parseClefFromString(Std.string(this._syData).toLowerCase());
					break;
				case 6:
					var parseResult = this._syData;
					bar.clef = this.parseClefFromInt(parseResult.get_realValue());
					break;
				default:
					this.error("clef",5,true);
				}
				this.newSy();
			} else if(syData == "tempo") {
				this.newSy();
				if(this._sy != 2) {
					this.error("tempo",2,true);
				}
				var tempoAutomation = new alphaTab.model.Automation();
				tempoAutomation.isLinear = true;
				tempoAutomation.type = 0;
				tempoAutomation.value = this._syData;
				master.tempoAutomation = tempoAutomation;
				this.newSy();
			} else if(syData == "section") {
				this.newSy();
				if(this._sy != 5) {
					this.error("section",5,true);
				}
				var text = this._syData;
				this.newSy();
				var marker = "";
				if(this._sy == 5) {
					marker = text;
					text = this._syData;
					this.newSy();
				}
				var section = new alphaTab.model.Section();
				section.marker = marker;
				section.text = text;
				master.section = section;
			} else if(syData == "tf") {
				this._allowTuning = false;
				this.newSy();
				this._allowTuning = true;
				var _g1 = this._sy;
				switch(_g1) {
				case 2:
					master.tripletFeel = this.parseTripletFeelFromInt(this._syData);
					break;
				case 5:
					master.tripletFeel = this.parseTripletFeelFromString(Std.string(this._syData).toLowerCase());
					break;
				default:
					this.error("triplet-feel",5,true);
				}
				this.newSy();
			} else if(syData == "ac") {
				master.isAnacrusis = true;
				this.newSy();
			} else if(bar.index == 0 && !this.handleStaffMeta()) {
				this.error("measure-effects",5,false);
			}
		}
	}
	,__class__: alphaTab.importer.AlphaTexImporter
});
alphaTab.importer._AlphaTexSymbols = {};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_ = {};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.__name__ = ["alphaTab","importer","_AlphaTexSymbols","AlphaTexSymbols_Impl_"];
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "No";
	case 1:
		return "Eof";
	case 2:
		return "Number";
	case 3:
		return "DoubleDot";
	case 4:
		return "Dot";
	case 5:
		return "String";
	case 6:
		return "Tuning";
	case 7:
		return "LParensis";
	case 8:
		return "RParensis";
	case 9:
		return "LBrace";
	case 10:
		return "RBrace";
	case 11:
		return "Pipe";
	case 12:
		return "MetaCommand";
	case 13:
		return "Multiply";
	case 14:
		return "LowerThan";
	case 15:
		return "Property";
	}
	return "";
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "dot":
		return 4;
	case "doubledot":
		return 3;
	case "eof":
		return 1;
	case "lbrace":
		return 9;
	case "lowerthan":
		return 14;
	case "lparensis":
		return 7;
	case "metacommand":
		return 12;
	case "multiply":
		return 13;
	case "no":
		return 0;
	case "number":
		return 2;
	case "pipe":
		return 11;
	case "property":
		return 15;
	case "rbrace":
		return 10;
	case "rparensis":
		return 8;
	case "string":
		return 5;
	case "tuning":
		return 6;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.importer.BinaryStylesheet = function() {
	this.raw = null;
	var this1 = {}
	this.raw = this1;
};
alphaTab.importer.BinaryStylesheet.__name__ = ["alphaTab","importer","BinaryStylesheet"];
alphaTab.importer.BinaryStylesheet.prototype = {
	apply: function(score) {
		var this1 = this.raw;
		var key = $iterator(Object.keys(this1))();
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1 == "StandardNotation/hideDynamics") {
				score.stylesheet.hideDynamics = this.raw[key1];
			}
		}
	}
	,addValue: function(key,value) {
		this.raw[key] = value;
	}
	,__class__: alphaTab.importer.BinaryStylesheet
};
alphaTab.importer.BinaryStylesheetParser = function() {
	this.stylesheet = null;
};
alphaTab.importer.BinaryStylesheetParser.__name__ = ["alphaTab","importer","BinaryStylesheetParser"];
alphaTab.importer.BinaryStylesheetParser.prototype = {
	parse: function(data) {
		this.stylesheet = new alphaTab.importer.BinaryStylesheet();
		var readable = alphaTab.io.ByteBuffer.fromBuffer(data);
		var entryCount = alphaTab.io.IOHelper.readInt32BE(readable);
		var i = 0;
		while(i < entryCount) {
			var key = alphaTab.importer.GpBinaryHelpers.gpReadString(readable,readable.readByte(),"utf-8");
			var type = js.Boot.__cast(readable.readByte() , Int);
			switch(type) {
			case 0:
				var flag = readable.readByte() == 1;
				this.stylesheet.addValue(key,flag);
				break;
			case 1:
				var ivalue = alphaTab.io.IOHelper.readInt32BE(readable);
				this.stylesheet.addValue(key,ivalue);
				break;
			case 2:
				var fvalue = alphaTab.importer.GpBinaryHelpers.gpReadFloat(readable);
				this.stylesheet.addValue(key,fvalue);
				break;
			case 3:
				var s = alphaTab.importer.GpBinaryHelpers.gpReadString(readable,alphaTab.io.IOHelper.readInt16BE(readable),"utf-8");
				this.stylesheet.addValue(key,s);
				break;
			case 4:
				var x = alphaTab.io.IOHelper.readInt32BE(readable);
				var y = alphaTab.io.IOHelper.readInt32BE(readable);
				this.stylesheet.addValue(key,new alphaTab.model.BendPoint(x,y));
				break;
			case 5:
				var width = alphaTab.io.IOHelper.readInt32BE(readable);
				var height = alphaTab.io.IOHelper.readInt32BE(readable);
				this.stylesheet.addValue(key,new alphaTab.model.BendPoint(width,height));
				break;
			case 6:
				var rectX = alphaTab.io.IOHelper.readInt32BE(readable);
				var rectY = alphaTab.io.IOHelper.readInt32BE(readable);
				var rectW = alphaTab.io.IOHelper.readInt32BE(readable);
				var rectH = alphaTab.io.IOHelper.readInt32BE(readable);
				var tmp = this.stylesheet;
				var _tmp = new alphaTab.rendering.utils.Bounds();
				var this1 = rectX;
				_tmp.x = this1;
				var this2 = rectY;
				_tmp.y = this2;
				var this3 = rectW;
				_tmp.w = this3;
				var this4 = rectH;
				_tmp.h = this4;
				tmp.addValue(key,_tmp);
				break;
			case 7:
				var color = alphaTab.importer.GpBinaryHelpers.gpReadColor(readable,true);
				this.stylesheet.addValue(key,color);
				break;
			default:
			}
			++i;
		}
	}
	,__class__: alphaTab.importer.BinaryStylesheetParser
};
alphaTab.importer._BinaryStylesheetParser_DataType = {};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_ = {};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.__name__ = ["alphaTab","importer","_BinaryStylesheetParser_DataType","BinaryStylesheetParser_DataType_Impl_"];
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Boolean";
	case 1:
		return "Integer";
	case 2:
		return "Float";
	case 3:
		return "String";
	case 4:
		return "Point";
	case 5:
		return "Size";
	case 6:
		return "Rectangle";
	case 7:
		return "Color";
	}
	return "";
};
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "boolean":
		return 0;
	case "color":
		return 7;
	case "float":
		return 2;
	case "integer":
		return 1;
	case "point":
		return 4;
	case "rectangle":
		return 6;
	case "size":
		return 5;
	case "string":
		return 3;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.importer.FileLoadException = $hx_exports["alphaTab"]["importer"]["FileLoadException"] = function() {
	alphaTab.AlphaTabException.call(this);
	this.xhr = null;
};
alphaTab.importer.FileLoadException.__name__ = ["alphaTab","importer","FileLoadException"];
alphaTab.importer.FileLoadException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.FileLoadException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	FileLoadException: function(message,xhr) {
		this.AlphaTabException(message);
		this.xhr = null;
		this.xhr = xhr;
		return this;
	}
	,__class__: alphaTab.importer.FileLoadException
});
alphaTab.importer.Gp3To5Importer = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.Gp3To5Importer.__name__ = ["alphaTab","importer","Gp3To5Importer"];
alphaTab.importer.Gp3To5Importer.toStrokeValue = function(value) {
	switch(value) {
	case 1:
		return 30;
	case 2:
		return 30;
	case 3:
		return 60;
	case 4:
		return 120;
	case 5:
		return 240;
	case 6:
		return 480;
	default:
		return 0;
	}
};
alphaTab.importer.Gp3To5Importer.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.Gp3To5Importer.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_name: function() {
		return "Guitar Pro 3-5";
	}
	,readScore: function() {
		this._encoding = this.Settings.importer.encoding;
		this.readVersion();
		this._score = new alphaTab.model.Score();
		this.readScoreInformation();
		if(this._versionNumber < 500) {
			this._globalTripletFeel = alphaTab.importer.GpBinaryHelpers.gpReadBool(this.Data) ? 2 : 0;
		}
		if(this._versionNumber >= 400) {
			this.readLyrics();
		}
		if(this._versionNumber >= 510) {
			this.Data.skip(19);
		}
		if(this._versionNumber >= 500) {
			this.readPageSetup();
			this._score.tempoLabel = alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
		}
		this._score.tempo = alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(this._versionNumber >= 510) {
			alphaTab.importer.GpBinaryHelpers.gpReadBool(this.Data);
		}
		alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(this._versionNumber >= 400) {
			this.Data.readByte();
		}
		this.readPlaybackInfos();
		if(this._versionNumber >= 500) {
			this.Data.skip(38);
			this.Data.skip(4);
		}
		this._barCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		this._trackCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		this.readMasterBars();
		this.readTracks();
		this.readBars();
		this._score.finish(this.Settings);
		if(this._lyrics != null && this._lyricsTrack >= 0) {
			this._score.tracks[this._lyricsTrack].applyLyrics(this._lyrics);
		}
		return this._score;
	}
	,readVersion: function() {
		var version = alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength(this.Data,30,this._encoding);
		if(!StringTools.startsWith(version,"FICHIER GUITAR PRO ")) {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
		}
		version = HxOverrides.substr(version,"FICHIER GUITAR PRO ".length + 1,null);
		var this1 = system.Convert.toUInt16(46);
		var dot = version.indexOf(String.fromCharCode(this1));
		this._versionNumber = 100 * alphaTab.platform.Platform.parseIntMinValue(HxOverrides.substr(version,0,dot)) + alphaTab.platform.Platform.parseIntMinValue(HxOverrides.substr(version,dot + 1,null));
		alphaTab.util.Logger.info(this.get_name(),"Guitar Pro version " + version + " detected",null);
	}
	,readScoreInformation: function() {
		this._score.title = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.subTitle = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.artist = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.album = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.words = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		var tmp = this._versionNumber >= 500 ? alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding) : this._score.words;
		this._score.music = tmp;
		this._score.copyright = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.tab = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		this._score.instructions = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		var noticeLines = alphaTab.io.IOHelper.readInt32LE(this.Data);
		var this1 = "";
		var notice = this1;
		var i = 0;
		while(i < noticeLines) {
			if(i > 0) {
				notice = notice + ("" + "\r\n");
			}
			notice += Std.string(alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding));
			++i;
		}
		this._score.notices = notice;
	}
	,readLyrics: function() {
		var this1 = [];
		this._lyrics = this1;
		this._lyricsTrack = alphaTab.io.IOHelper.readInt32LE(this.Data) - 1;
		var i = 0;
		while(i < 5) {
			var lyrics = new alphaTab.model.Lyrics();
			lyrics.startBar = alphaTab.io.IOHelper.readInt32LE(this.Data) - 1;
			lyrics.text = alphaTab.importer.GpBinaryHelpers.gpReadStringInt(this.Data,this._encoding);
			this._lyrics.push(lyrics);
			++i;
		}
	}
	,readPageSetup: function() {
		this.Data.skip(30);
		var i = 0;
		while(i < 10) {
			alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
			++i;
		}
	}
	,readPlaybackInfos: function() {
		var this1 = [];
		this._playbackInfos = this1;
		var i = 0;
		while(i < 64) {
			var info = new alphaTab.model.PlaybackInformation();
			info.primaryChannel = i;
			info.secondaryChannel = i;
			info.program = alphaTab.io.IOHelper.readInt32LE(this.Data);
			info.volume = this.Data.readByte();
			info.balance = this.Data.readByte();
			this.Data.skip(6);
			this._playbackInfos.push(info);
			++i;
		}
	}
	,readMasterBars: function() {
		var i = 0;
		while(i < this._barCount) {
			this.readMasterBar();
			++i;
		}
	}
	,readMasterBar: function() {
		var previousMasterBar = null;
		if(this._score.masterBars.length > 0) {
			previousMasterBar = this._score.masterBars[this._score.masterBars.length - 1];
		}
		var newMasterBar = new alphaTab.model.MasterBar();
		var flags = this.Data.readByte();
		if((flags & 1) != 0) {
			newMasterBar.timeSignatureNumerator = this.Data.readByte();
		} else if(previousMasterBar != null) {
			newMasterBar.timeSignatureNumerator = previousMasterBar.timeSignatureNumerator;
		}
		if((flags & 2) != 0) {
			newMasterBar.timeSignatureDenominator = this.Data.readByte();
		} else if(previousMasterBar != null) {
			newMasterBar.timeSignatureDenominator = previousMasterBar.timeSignatureDenominator;
		}
		newMasterBar.isRepeatStart = (flags & 4) != 0;
		if((flags & 8) != 0) {
			newMasterBar.repeatCount = this.Data.readByte() + (this._versionNumber >= 500 ? 0 : 1);
		}
		if((flags & 16) != 0) {
			if(this._versionNumber < 500) {
				var currentMasterBar = previousMasterBar;
				var existentAlternatives = 0;
				while(currentMasterBar != null) {
					if(currentMasterBar.get_isRepeatEnd() && currentMasterBar != previousMasterBar) {
						break;
					}
					if(currentMasterBar.isRepeatStart) {
						break;
					}
					existentAlternatives = existentAlternatives | currentMasterBar.alternateEndings;
					currentMasterBar = currentMasterBar.previousMasterBar;
				}
				var repeatAlternative = 0;
				var repeatMask = this.Data.readByte();
				var i = 0;
				while(i < 8) {
					var repeating = 1 << i;
					if(repeatMask > i && (existentAlternatives & repeating) == 0) {
						repeatAlternative = repeatAlternative | repeating;
					}
					++i;
				}
				newMasterBar.alternateEndings = system.Convert.toUInt8(repeatAlternative);
			} else {
				newMasterBar.alternateEndings = system.Convert.toUInt8(this.Data.readByte());
			}
		}
		if((flags & 32) != 0) {
			var section = new alphaTab.model.Section();
			section.text = alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
			section.marker = "";
			alphaTab.importer.GpBinaryHelpers.gpReadColor(this.Data,false);
			newMasterBar.section = section;
		}
		if((flags & 64) != 0) {
			newMasterBar.keySignature = js.Boot.__cast(alphaTab.platform.Platform.readSignedByte(this.Data) , Int);
			newMasterBar.keySignatureType = js.Boot.__cast(this.Data.readByte() , Int);
		} else if(previousMasterBar != null) {
			newMasterBar.keySignature = previousMasterBar.keySignature;
			newMasterBar.keySignatureType = previousMasterBar.keySignatureType;
		}
		if(this._versionNumber >= 500 && (flags & 3) != 0) {
			this.Data.skip(4);
		}
		if(this._versionNumber >= 500 && (flags & 16) == 0) {
			newMasterBar.alternateEndings = system.Convert.toUInt8(this.Data.readByte());
		}
		if(this._versionNumber >= 500) {
			var tripletFeel = this.Data.readByte();
			switch(tripletFeel) {
			case 1:
				newMasterBar.tripletFeel = 2;
				break;
			case 2:
				newMasterBar.tripletFeel = 1;
				break;
			default:
			}
			this.Data.readByte();
		} else {
			newMasterBar.tripletFeel = this._globalTripletFeel;
		}
		newMasterBar.isDoubleBar = (flags & 128) != 0;
		this._score.addMasterBar(newMasterBar);
	}
	,readTracks: function() {
		var i = 0;
		while(i < this._trackCount) {
			this.readTrack();
			++i;
		}
	}
	,readTrack: function() {
		var newTrack = new alphaTab.model.Track(1);
		this._score.addTrack(newTrack);
		var mainStaff = newTrack.staves[0];
		var flags = this.Data.readByte();
		newTrack.name = alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength(this.Data,40,this._encoding);
		if((flags & 1) != 0) {
			mainStaff.isPercussion = true;
		}
		var stringCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		var this1 = [];
		var tuning = this1;
		var i = 0;
		while(i < 7) {
			var stringTuning = alphaTab.io.IOHelper.readInt32LE(this.Data);
			if(stringCount > i) {
				tuning.push(stringTuning);
			}
			++i;
		}
		mainStaff.tuning = new Int32Array(tuning);
		var port = alphaTab.io.IOHelper.readInt32LE(this.Data);
		var index = alphaTab.io.IOHelper.readInt32LE(this.Data) - 1;
		var effectChannel = alphaTab.io.IOHelper.readInt32LE(this.Data) - 1;
		this.Data.skip(4);
		if(index >= 0 && index < this._playbackInfos.length) {
			var info = this._playbackInfos[index];
			info.port = port;
			info.isSolo = (flags & 16) != 0;
			info.isMute = (flags & 32) != 0;
			info.secondaryChannel = effectChannel;
			if(alphaTab.audio.GeneralMidi.isGuitar(info.program)) {
				mainStaff.displayTranspositionPitch = -12;
			}
			newTrack.playbackInfo = info;
		}
		mainStaff.capo = alphaTab.io.IOHelper.readInt32LE(this.Data);
		newTrack.color = alphaTab.importer.GpBinaryHelpers.gpReadColor(this.Data,false);
		if(this._versionNumber >= 500) {
			this.Data.readByte();
			this.Data.readByte();
			this.Data.skip(43);
		}
		if(this._versionNumber >= 510) {
			this.Data.skip(4);
			alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
			alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
		}
	}
	,readBars: function() {
		var i = 0;
		while(i < this._barCount) {
			var t = 0;
			while(t < this._trackCount) {
				this.readBar(this._score.tracks[t]);
				++t;
			}
			++i;
		}
	}
	,readBar: function(track) {
		var newBar = new alphaTab.model.Bar();
		var mainStaff = track.staves[0];
		if(mainStaff.isPercussion) {
			newBar.clef = 0;
		}
		mainStaff.addBar(newBar);
		var voiceCount = 1;
		if(this._versionNumber >= 500) {
			this.Data.readByte();
			voiceCount = 2;
		}
		var v = 0;
		while(v < voiceCount) {
			this.readVoice(track,newBar);
			++v;
		}
	}
	,readVoice: function(track,bar) {
		var beatCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(beatCount == 0) {
			return;
		}
		var newVoice = new alphaTab.model.Voice();
		bar.addVoice(newVoice);
		var i = 0;
		while(i < beatCount) {
			this.readBeat(track,bar,newVoice);
			++i;
		}
	}
	,readBeat: function(track,bar,voice) {
		var newBeat = new alphaTab.model.Beat();
		var flags = this.Data.readByte();
		if((flags & 1) != 0) {
			newBeat.dots = 1;
		}
		if((flags & 64) != 0) {
			var type = this.Data.readByte();
			newBeat.isEmpty = (type & 2) == 0;
		}
		voice.addBeat(newBeat);
		var duration = alphaTab.platform.Platform.readSignedByte(this.Data);
		switch(duration) {
		case -2:
			newBeat.duration = 1;
			break;
		case -1:
			newBeat.duration = 2;
			break;
		case 0:
			newBeat.duration = 4;
			break;
		case 1:
			newBeat.duration = 8;
			break;
		case 2:
			newBeat.duration = 16;
			break;
		case 3:
			newBeat.duration = 32;
			break;
		case 4:
			newBeat.duration = 64;
			break;
		default:
			newBeat.duration = 4;
		}
		if((flags & 32) != 0) {
			newBeat.tupletNumerator = alphaTab.io.IOHelper.readInt32LE(this.Data);
			var _g = newBeat.tupletNumerator;
			switch(_g) {
			case 1:
				newBeat.tupletDenominator = 1;
				break;
			case 3:
				newBeat.tupletDenominator = 2;
				break;
			case 5:case 6:case 7:
				newBeat.tupletDenominator = 4;
				break;
			case 2:case 4:case 8:
				break;
			case 9:case 10:case 11:case 12:case 13:
				newBeat.tupletDenominator = 8;
				break;
			default:
				newBeat.tupletNumerator = 1;
				newBeat.tupletDenominator = 1;
			}
		}
		if((flags & 2) != 0) {
			this.readChord(newBeat);
		}
		if((flags & 4) != 0) {
			newBeat.text = alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused(this.Data,this._encoding);
		}
		if((flags & 8) != 0) {
			this.readBeatEffects(newBeat);
		}
		if((flags & 16) != 0) {
			this.readMixTableChange(newBeat);
		}
		var stringFlags = this.Data.readByte();
		var i = 6;
		while(i >= 0) {
			if((stringFlags & 1 << i) != 0 && 6 - i < bar.staff.tuning.length) {
				this.readNote(track,bar,voice,newBeat,6 - i);
			}
			--i;
		}
		if(this._versionNumber >= 500) {
			this.Data.readByte();
			var flag = this.Data.readByte();
			if((flag & 8) != 0) {
				this.Data.readByte();
			}
		}
	}
	,readChord: function(beat) {
		var chord = new alphaTab.model.Chord();
		var chordId = alphaTab.platform.Platform.newGuid();
		if(this._versionNumber >= 500) {
			this.Data.skip(17);
			chord.name = alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength(this.Data,21,this._encoding);
			this.Data.skip(4);
			chord.firstFret = alphaTab.io.IOHelper.readInt32LE(this.Data);
			var i = 0;
			while(i < 7) {
				var fret = alphaTab.io.IOHelper.readInt32LE(this.Data);
				if(i < beat.voice.bar.staff.tuning.length) {
					chord.strings.push(fret);
				}
				++i;
			}
			var numberOfBarres = this.Data.readByte();
			var this1 = new Uint8Array(5);
			var barreFrets = this1;
			this.Data.read(barreFrets,0,barreFrets.length);
			var i1 = 0;
			while(i1 < numberOfBarres) {
				var this2 = barreFrets[i1];
				chord.barreFrets.push(this2);
				++i1;
			}
			this.Data.skip(26);
		} else if(this.Data.readByte() != 0) {
			if(this._versionNumber >= 400) {
				this.Data.skip(16);
				chord.name = alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength(this.Data,21,this._encoding);
				this.Data.skip(4);
				chord.firstFret = alphaTab.io.IOHelper.readInt32LE(this.Data);
				var i2 = 0;
				while(i2 < 7) {
					var fret1 = alphaTab.io.IOHelper.readInt32LE(this.Data);
					if(i2 < beat.voice.bar.staff.tuning.length) {
						chord.strings.push(fret1);
					}
					++i2;
				}
				var numberOfBarres1 = this.Data.readByte();
				var this3 = new Uint8Array(5);
				var barreFrets1 = this3;
				this.Data.read(barreFrets1,0,barreFrets1.length);
				var i3 = 0;
				while(i3 < numberOfBarres1) {
					var this4 = barreFrets1[i3];
					chord.barreFrets.push(this4);
					++i3;
				}
				this.Data.skip(26);
			} else {
				this.Data.skip(25);
				chord.name = alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength(this.Data,34,this._encoding);
				chord.firstFret = alphaTab.io.IOHelper.readInt32LE(this.Data);
				var i4 = 0;
				while(i4 < 6) {
					var fret2 = alphaTab.io.IOHelper.readInt32LE(this.Data);
					if(i4 < beat.voice.bar.staff.tuning.length) {
						chord.strings.push(fret2);
					}
					++i4;
				}
				this.Data.skip(36);
			}
		} else {
			var strings = this._versionNumber >= 406 ? 7 : 6;
			chord.name = alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
			chord.firstFret = alphaTab.io.IOHelper.readInt32LE(this.Data);
			if(chord.firstFret > 0) {
				var i5 = 0;
				while(i5 < strings) {
					var fret3 = alphaTab.io.IOHelper.readInt32LE(this.Data);
					if(i5 < beat.voice.bar.staff.tuning.length) {
						chord.strings.push(fret3);
					}
					++i5;
				}
			}
		}
		var s = chord.name;
		if(!(s == null || s.length == 0)) {
			beat.chordId = chordId;
			beat.voice.bar.staff.addChord(beat.chordId,chord);
		}
	}
	,readBeatEffects: function(beat) {
		var flags = this.Data.readByte();
		var flags2 = 0;
		if(this._versionNumber >= 400) {
			flags2 = this.Data.readByte();
		}
		beat.fadeIn = (flags & 16) != 0;
		if(this._versionNumber < 400 && (flags & 1) != 0 || (flags & 2) != 0) {
			beat.vibrato = 1;
		}
		beat.hasRasgueado = (flags2 & 1) != 0;
		if((flags & 32) != 0 && this._versionNumber >= 400) {
			var slapPop = alphaTab.platform.Platform.readSignedByte(this.Data);
			switch(slapPop) {
			case 1:
				beat.tap = true;
				break;
			case 2:
				beat.slap = true;
				break;
			case 3:
				beat.pop = true;
				break;
			default:
			}
		} else if((flags & 32) != 0) {
			var slapPop1 = alphaTab.platform.Platform.readSignedByte(this.Data);
			switch(slapPop1) {
			case 1:
				beat.tap = true;
				break;
			case 2:
				beat.slap = true;
				break;
			case 3:
				beat.pop = true;
				break;
			default:
			}
			this.Data.skip(4);
		}
		if((flags2 & 4) != 0) {
			this.readTremoloBarEffect(beat);
		}
		if((flags & 64) != 0) {
			var strokeUp;
			var strokeDown;
			if(this._versionNumber < 500) {
				strokeDown = this.Data.readByte();
				strokeUp = this.Data.readByte();
			} else {
				strokeUp = this.Data.readByte();
				strokeDown = this.Data.readByte();
			}
			if(strokeUp > 0) {
				beat.brushType = 1;
				beat.brushDuration = alphaTab.importer.Gp3To5Importer.toStrokeValue(strokeUp);
			} else if(strokeDown > 0) {
				beat.brushType = 2;
				beat.brushDuration = alphaTab.importer.Gp3To5Importer.toStrokeValue(strokeDown);
			}
		}
		if((flags2 & 2) != 0) {
			var _g = alphaTab.platform.Platform.readSignedByte(this.Data);
			switch(_g) {
			case 0:
				beat.pickStroke = 0;
				break;
			case 1:
				beat.pickStroke = 1;
				break;
			case 2:
				beat.pickStroke = 2;
				break;
			default:
			}
		}
	}
	,readTremoloBarEffect: function(beat) {
		this.Data.readByte();
		alphaTab.io.IOHelper.readInt32LE(this.Data);
		var pointCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(pointCount > 0) {
			var i = 0;
			while(i < pointCount) {
				var point = new alphaTab.model.BendPoint(0,0);
				point.offset = alphaTab.io.IOHelper.readInt32LE(this.Data);
				point.value = alphaTab.io.IOHelper.readInt32LE(this.Data) / 25 | 0;
				alphaTab.importer.GpBinaryHelpers.gpReadBool(this.Data);
				beat.addWhammyBarPoint(point);
				++i;
			}
		}
	}
	,readMixTableChange: function(beat) {
		var tableChange = new alphaTab.importer.MixTableChange();
		tableChange.instrument = alphaTab.platform.Platform.readSignedByte(this.Data);
		if(this._versionNumber >= 500) {
			this.Data.skip(16);
		}
		tableChange.volume = alphaTab.platform.Platform.readSignedByte(this.Data);
		tableChange.balance = alphaTab.platform.Platform.readSignedByte(this.Data);
		var chorus = alphaTab.platform.Platform.readSignedByte(this.Data);
		var reverb = alphaTab.platform.Platform.readSignedByte(this.Data);
		var phaser = alphaTab.platform.Platform.readSignedByte(this.Data);
		var tremolo = alphaTab.platform.Platform.readSignedByte(this.Data);
		if(this._versionNumber >= 500) {
			tableChange.tempoName = alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
		}
		tableChange.tempo = alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(tableChange.volume >= 0) {
			this.Data.readByte();
		}
		if(tableChange.balance >= 0) {
			this.Data.readByte();
		}
		if(chorus >= 0) {
			this.Data.readByte();
		}
		if(reverb >= 0) {
			this.Data.readByte();
		}
		if(phaser >= 0) {
			this.Data.readByte();
		}
		if(tremolo >= 0) {
			this.Data.readByte();
		}
		if(tableChange.tempo >= 0) {
			tableChange.duration = alphaTab.platform.Platform.readSignedByte(this.Data);
			if(this._versionNumber >= 510) {
				this.Data.readByte();
			}
		}
		if(this._versionNumber >= 400) {
			this.Data.readByte();
		}
		if(this._versionNumber >= 500) {
			this.Data.readByte();
		}
		if(this._versionNumber >= 510) {
			alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
			alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte(this.Data,this._encoding);
		}
		if(tableChange.volume >= 0) {
			var volumeAutomation = new alphaTab.model.Automation();
			volumeAutomation.isLinear = true;
			volumeAutomation.type = 1;
			var this1 = tableChange.volume;
			volumeAutomation.value = this1;
			beat.automations.push(volumeAutomation);
		}
		if(tableChange.balance >= 0) {
			var balanceAutomation = new alphaTab.model.Automation();
			balanceAutomation.isLinear = true;
			balanceAutomation.type = 3;
			var this2 = tableChange.balance;
			balanceAutomation.value = this2;
			beat.automations.push(balanceAutomation);
		}
		if(tableChange.instrument >= 0) {
			var instrumentAutomation = new alphaTab.model.Automation();
			instrumentAutomation.isLinear = true;
			instrumentAutomation.type = 2;
			var this3 = tableChange.instrument;
			instrumentAutomation.value = this3;
			beat.automations.push(instrumentAutomation);
		}
		if(tableChange.tempo >= 0) {
			var tempoAutomation = new alphaTab.model.Automation();
			tempoAutomation.isLinear = true;
			tempoAutomation.type = 0;
			var this4 = tableChange.tempo;
			tempoAutomation.value = this4;
			beat.automations.push(tempoAutomation);
			beat.voice.bar.get_masterBar().tempoAutomation = tempoAutomation;
		}
	}
	,readNote: function(track,bar,voice,beat,stringIndex) {
		var newNote = new alphaTab.model.Note();
		newNote.string = bar.staff.tuning.length - stringIndex;
		var flags = this.Data.readByte();
		if((flags & 2) != 0) {
			newNote.accentuated = 2;
		} else if((flags & 64) != 0) {
			newNote.accentuated = 1;
		}
		newNote.isGhost = (flags & 4) != 0;
		if((flags & 32) != 0) {
			var noteType = this.Data.readByte();
			if(noteType == 3) {
				newNote.isDead = true;
			} else if(noteType == 2) {
				newNote.isTieDestination = true;
			}
		}
		if((flags & 1) != 0 && this._versionNumber < 500) {
			this.Data.readByte();
			this.Data.readByte();
		}
		if((flags & 16) != 0) {
			var dynamicNumber = alphaTab.platform.Platform.readSignedByte(this.Data);
			newNote.dynamics = this.toDynamicValue(dynamicNumber);
			beat.dynamics = newNote.dynamics;
		}
		if((flags & 32) != 0) {
			newNote.fret = alphaTab.platform.Platform.readSignedByte(this.Data);
		}
		if((flags & 128) != 0) {
			newNote.leftHandFinger = js.Boot.__cast(alphaTab.platform.Platform.readSignedByte(this.Data) , Int);
			newNote.rightHandFinger = js.Boot.__cast(alphaTab.platform.Platform.readSignedByte(this.Data) , Int);
			newNote.isFingering = true;
		}
		if(this._versionNumber >= 500) {
			if((flags & 1) != 0) {
				newNote.durationPercent = alphaTab.importer.GpBinaryHelpers.gpReadDouble(this.Data);
			}
			var flags2 = this.Data.readByte();
			newNote.accidentalMode = (flags2 & 2) != 0 ? 1 : 0;
		}
		beat.addNote(newNote);
		if((flags & 8) != 0) {
			this.readNoteEffects(track,voice,beat,newNote);
		}
	}
	,toDynamicValue: function(value) {
		switch(value) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		default:
			return 5;
		}
	}
	,readNoteEffects: function(track,voice,beat,note) {
		var flags = this.Data.readByte();
		var flags2 = 0;
		if(this._versionNumber >= 400) {
			flags2 = this.Data.readByte();
		}
		if((flags & 1) != 0) {
			this.readBend(note);
		}
		if((flags & 16) != 0) {
			this.readGrace(voice,note);
		}
		if((flags2 & 4) != 0) {
			this.readTremoloPicking(beat);
		}
		if((flags2 & 8) != 0) {
			this.readSlide(note);
		} else if(this._versionNumber < 400) {
			if((flags & 4) != 0) {
				note.slideOutType = 1;
			}
		}
		if((flags2 & 16) != 0) {
			this.readArtificialHarmonic(note);
		} else if(this._versionNumber < 400) {
			if((flags & 4) != 0) {
				note.harmonicType = 1;
				note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
			}
			if((flags & 8) != 0) {
				note.harmonicType = 2;
			}
		}
		if((flags2 & 32) != 0) {
			this.readTrill(note);
		}
		note.isLetRing = (flags & 8) != 0;
		note.isHammerPullOrigin = (flags & 2) != 0;
		if((flags2 & 64) != 0) {
			note.vibrato = 1;
		}
		note.isPalmMute = (flags2 & 2) != 0;
		note.isStaccato = (flags2 & 1) != 0;
	}
	,readBend: function(note) {
		this.Data.readByte();
		alphaTab.io.IOHelper.readInt32LE(this.Data);
		var pointCount = alphaTab.io.IOHelper.readInt32LE(this.Data);
		if(pointCount > 0) {
			var i = 0;
			while(i < pointCount) {
				var point = new alphaTab.model.BendPoint(0,0);
				point.offset = alphaTab.io.IOHelper.readInt32LE(this.Data);
				point.value = alphaTab.io.IOHelper.readInt32LE(this.Data) / 25 | 0;
				alphaTab.importer.GpBinaryHelpers.gpReadBool(this.Data);
				note.addBendPoint(point);
				++i;
			}
		}
	}
	,readGrace: function(voice,note) {
		var graceBeat = new alphaTab.model.Beat();
		var graceNote = new alphaTab.model.Note();
		graceNote.string = note.string;
		graceNote.fret = alphaTab.platform.Platform.readSignedByte(this.Data);
		graceBeat.duration = 32;
		graceBeat.dynamics = this.toDynamicValue(alphaTab.platform.Platform.readSignedByte(this.Data));
		var transition = alphaTab.platform.Platform.readSignedByte(this.Data);
		switch(transition) {
		case 0:
			break;
		case 1:
			graceNote.slideOutType = 2;
			graceNote.slideTarget = note;
			break;
		case 2:
			break;
		case 3:
			graceNote.isHammerPullOrigin = true;
			break;
		default:
		}
		graceNote.dynamics = graceBeat.dynamics;
		this.Data.skip(1);
		if(this._versionNumber < 500) {
			graceBeat.graceType = 2;
		} else {
			var flags = this.Data.readByte();
			graceNote.isDead = (flags & 1) != 0;
			graceBeat.graceType = (flags & 2) != 0 ? 1 : 2;
		}
		voice.addGraceBeat(graceBeat);
		graceBeat.addNote(graceNote);
	}
	,readTremoloPicking: function(beat) {
		var speed = this.Data.readByte();
		switch(speed) {
		case 1:
			beat.tremoloSpeed = 8;
			break;
		case 2:
			beat.tremoloSpeed = 16;
			break;
		case 3:
			beat.tremoloSpeed = 32;
			break;
		default:
		}
	}
	,readSlide: function(note) {
		if(this._versionNumber >= 500) {
			var type = alphaTab.platform.Platform.readSignedByte(this.Data);
			if((type & 1) != 0) {
				note.slideOutType = 1;
			} else if((type & 2) != 0) {
				note.slideOutType = 2;
			} else if((type & 4) != 0) {
				note.slideOutType = 4;
			} else if((type & 8) != 0) {
				note.slideOutType = 3;
			}
			if((type & 16) != 0) {
				note.slideInType = 1;
			} else if((type & 32) != 0) {
				note.slideInType = 2;
			}
		} else {
			var type1 = alphaTab.platform.Platform.readSignedByte(this.Data);
			switch(type1) {
			case -2:
				note.slideInType = 2;
				break;
			case -1:
				note.slideInType = 1;
				break;
			case 1:
				note.slideOutType = 1;
				break;
			case 2:
				note.slideOutType = 2;
				break;
			case 3:
				note.slideOutType = 4;
				break;
			case 4:
				note.slideOutType = 3;
				break;
			default:
			}
		}
	}
	,readArtificialHarmonic: function(note) {
		var type = this.Data.readByte();
		if(this._versionNumber >= 500) {
			switch(type) {
			case 1:
				note.harmonicType = 1;
				note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
				break;
			case 2:
				var harmonicTone = this.Data.readByte();
				var harmonicKey = this.Data.readByte();
				var harmonicOctaveOffset = this.Data.readByte();
				note.harmonicType = 2;
				break;
			case 3:
				note.harmonicType = 4;
				note.harmonicValue = this.deltaFretToHarmonicValue(this.Data.readByte());
				break;
			case 4:
				note.harmonicType = 3;
				note.harmonicValue = 12;
				break;
			case 5:
				note.harmonicType = 5;
				note.harmonicValue = 12;
				break;
			default:
			}
		} else if(this._versionNumber >= 400) {
			switch(type) {
			case 1:
				note.harmonicType = 1;
				break;
			case 3:
				note.harmonicType = 4;
				break;
			case 4:
				note.harmonicType = 3;
				break;
			case 5:
				note.harmonicType = 5;
				break;
			case 15:
				note.harmonicType = 2;
				break;
			case 17:
				note.harmonicType = 2;
				break;
			case 22:
				note.harmonicType = 2;
				break;
			default:
			}
		}
	}
	,deltaFretToHarmonicValue: function(deltaFret) {
		switch(deltaFret) {
		case 2:
			return 2.4;
		case 3:
			return 3.2;
		case 8:
			return 8.2;
		case 10:
			return 9.6;
		case 14:case 15:
			return 14.7;
		case 21:case 22:
			return 21.7;
		case 4:case 5:case 7:case 9:case 12:case 16:case 17:case 19:case 24:
			var this1 = deltaFret;
			return this1;
		default:
			return 12;
		}
	}
	,readTrill: function(note) {
		note.trillValue = this.Data.readByte() + note.get_stringTuning();
		var _g = this.Data.readByte();
		switch(_g) {
		case 1:
			note.trillSpeed = 16;
			break;
		case 2:
			note.trillSpeed = 32;
			break;
		case 3:
			note.trillSpeed = 64;
			break;
		default:
		}
	}
	,__class__: alphaTab.importer.Gp3To5Importer
});
alphaTab.importer.Gp7Importer = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.Gp7Importer.__name__ = ["alphaTab","importer","Gp7Importer"];
alphaTab.importer.Gp7Importer.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.Gp7Importer.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_name: function() {
		return "Guitar Pro 7";
	}
	,readScore: function() {
		alphaTab.util.Logger.info(this.get_name(),"Loading ZIP entries",null);
		var fileSystem = new alphaTab.io.ZipFile();
		fileSystem.fileFilter = function(s) {
			if(!(StringTools.endsWith(s,"score.gpif") || StringTools.endsWith(s,"BinaryStylesheet"))) {
				return StringTools.endsWith(s,"PartConfiguration");
			} else {
				return true;
			}
		};
		try {
			fileSystem.load(this.Data);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(e.message));
			} else throw(e);
		}
		alphaTab.util.Logger.info(this.get_name(),"Zip entries loaded",null);
		var xml = null;
		var binaryStylesheet = null;
		var partConfiguration = null;
		var entry = $iterator(fileSystem.entries)();
		while(entry.hasNext()) {
			var entry1 = entry.next();
			var _g = entry1.fileName;
			switch(_g) {
			case "BinaryStylesheet":
				binaryStylesheet = entry1.data;
				break;
			case "PartConfiguration":
				partConfiguration = entry1.data;
				break;
			case "score.gpif":
				xml = alphaTab.platform.Platform.toString(entry1.data,this.Settings.importer.encoding);
				break;
			default:
			}
		}
		fileSystem.entries = null;
		fileSystem = null;
		alphaTab.util.Logger.info(this.get_name(),"Start Parsing score.gpif",null);
		var gpifParser = new alphaTab.importer.GpifParser();
		gpifParser.parseXml(xml,this.Settings);
		alphaTab.util.Logger.info(this.get_name(),"score.gpif parsed",null);
		var score = gpifParser.score;
		if(binaryStylesheet != null) {
			alphaTab.util.Logger.info(this.get_name(),"Start Parsing BinaryStylesheet",null);
			var stylesheetParser = new alphaTab.importer.BinaryStylesheetParser();
			stylesheetParser.parse(binaryStylesheet);
			if(stylesheetParser.stylesheet != null) {
				stylesheetParser.stylesheet.apply(score);
			}
			alphaTab.util.Logger.info(this.get_name(),"BinaryStylesheet parsed",null);
		}
		if(partConfiguration != null) {
			alphaTab.util.Logger.info(this.get_name(),"Start Parsing Part Configuration",null);
			var partConfigurationParser = new alphaTab.importer.PartConfigurationParser();
			partConfigurationParser.parse(partConfiguration);
			if(partConfigurationParser.configuration != null) {
				partConfigurationParser.configuration.apply(score);
			}
			alphaTab.util.Logger.info(this.get_name(),"Part Configuration parsed",null);
		}
		return score;
	}
	,__class__: alphaTab.importer.Gp7Importer
});
alphaTab.importer.GpBinaryHelpers = function() { };
alphaTab.importer.GpBinaryHelpers.__name__ = ["alphaTab","importer","GpBinaryHelpers"];
alphaTab.importer.GpBinaryHelpers.gpReadDouble = function(data) {
	var this1 = new Uint8Array(8);
	var bytes = this1;
	data.read(bytes,0,bytes.length);
	return alphaTab.platform.Platform.toDouble(bytes);
};
alphaTab.importer.GpBinaryHelpers.gpReadFloat = function(data) {
	var this1 = new Uint8Array(4);
	var bytes = this1;
	bytes[3] = system.Convert.toUInt8(data.readByte());
	bytes[2] = system.Convert.toUInt8(data.readByte());
	bytes[2] = system.Convert.toUInt8(data.readByte());
	bytes[1] = system.Convert.toUInt8(data.readByte());
	return alphaTab.platform.Platform.toFloat(bytes);
};
alphaTab.importer.GpBinaryHelpers.gpReadColor = function(data,readAlpha) {
	if(readAlpha == null) {
		readAlpha = false;
	}
	var r = system.Convert.toUInt8(data.readByte());
	var g = system.Convert.toUInt8(data.readByte());
	var b = system.Convert.toUInt8(data.readByte());
	var a = 255;
	if(readAlpha) {
		a = system.Convert.toUInt8(data.readByte());
	} else {
		data.skip(1);
	}
	return new alphaTab.platform.model.Color(r,g,b,a);
};
alphaTab.importer.GpBinaryHelpers.gpReadBool = function(data) {
	return data.readByte() != 0;
};
alphaTab.importer.GpBinaryHelpers.gpReadStringIntUnused = function(data,encoding) {
	data.skip(4);
	return alphaTab.importer.GpBinaryHelpers.gpReadString(data,data.readByte(),encoding);
};
alphaTab.importer.GpBinaryHelpers.gpReadStringInt = function(data,encoding) {
	return alphaTab.importer.GpBinaryHelpers.gpReadString(data,alphaTab.io.IOHelper.readInt32LE(data),encoding);
};
alphaTab.importer.GpBinaryHelpers.gpReadStringIntByte = function(data,encoding) {
	var length = alphaTab.io.IOHelper.readInt32LE(data) - 1;
	data.readByte();
	return alphaTab.importer.GpBinaryHelpers.gpReadString(data,length,encoding);
};
alphaTab.importer.GpBinaryHelpers.gpReadString = function(data,length,encoding) {
	var this1 = new Uint8Array(length);
	var b = this1;
	data.read(b,0,b.length);
	return alphaTab.platform.Platform.toString(b,encoding);
};
alphaTab.importer.GpBinaryHelpers.gpReadStringByteLength = function(data,length,encoding) {
	var stringLength = data.readByte();
	var s = alphaTab.importer.GpBinaryHelpers.gpReadString(data,stringLength,encoding);
	if(stringLength < length) {
		data.skip(length - stringLength);
	}
	return s;
};
alphaTab.importer.GpifParser = function() {
	this.score = null;
	this._masterTrackAutomations = null;
	this._tracksMapping = null;
	this._tracksById = null;
	this._masterBars = null;
	this._barsOfMasterBar = null;
	this._barsById = null;
	this._voicesOfBar = null;
	this._voiceById = null;
	this._beatsOfVoice = null;
	this._rhythmOfBeat = null;
	this._beatById = null;
	this._rhythmById = null;
	this._noteById = null;
	this._notesOfBeat = null;
	this._tappedNotes = null;
	this._lyricsByTrack = null;
	this._hasAnacrusis = false;
};
alphaTab.importer.GpifParser.__name__ = ["alphaTab","importer","GpifParser"];
alphaTab.importer.GpifParser.prototype = {
	parseXml: function(xml,settings) {
		var this1 = {}
		this._masterTrackAutomations = this1;
		var this2 = new Array(0);
		this._tracksMapping = this2;
		var this3 = {}
		this._tracksById = this3;
		var this4 = [];
		this._masterBars = this4;
		var this5 = [];
		this._barsOfMasterBar = this5;
		var this6 = {}
		this._voicesOfBar = this6;
		var this7 = {}
		this._barsById = this7;
		var this8 = {}
		this._voiceById = this8;
		var this9 = {}
		this._beatsOfVoice = this9;
		var this10 = {}
		this._beatById = this10;
		var this11 = {}
		this._rhythmOfBeat = this11;
		var this12 = {}
		this._rhythmById = this12;
		var this13 = {}
		this._notesOfBeat = this13;
		var this14 = {}
		this._noteById = this14;
		var this15 = {}
		this._tappedNotes = this15;
		var this16 = {}
		this._lyricsByTrack = this16;
		var dom;
		try {
			dom = new alphaTab.xml.XmlDocument(xml);
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
			} else throw(__e);
		}
		this.parseDom(dom);
		this.buildModel();
		this.score.finish(settings);
		var this17 = this._lyricsByTrack;
		if(Object.keys(this17).length > 0) {
			var this18 = this._lyricsByTrack;
			var trackId = $iterator(Object.keys(this18))();
			while(trackId.hasNext()) {
				var trackId1 = trackId.next();
				var track = this._tracksById[trackId1];
				track.applyLyrics(this._lyricsByTrack[trackId1]);
			}
		}
	}
	,parseDom: function(dom) {
		var root = dom.documentElement;
		if(root == null) {
			return;
		}
		if(root.localName == "GPIF") {
			this.score = new alphaTab.model.Score();
			var n = $iterator(root.childNodes)();
			while(n.hasNext()) {
				var n1 = n.next();
				if(n1.nodeType == 1) {
					var _g = n1.localName;
					switch(_g) {
					case "Bars":
						this.parseBars(n1);
						break;
					case "Beats":
						this.parseBeats(n1);
						break;
					case "MasterBars":
						this.parseMasterBarsNode(n1);
						break;
					case "MasterTrack":
						this.parseMasterTrackNode(n1);
						break;
					case "Notes":
						this.parseNotes(n1);
						break;
					case "Rhythms":
						this.parseRhythms(n1);
						break;
					case "Score":
						this.parseScoreNode(n1);
						break;
					case "Tracks":
						this.parseTracksNode(n1);
						break;
					case "Voices":
						this.parseVoices(n1);
						break;
					default:
					}
				}
			}
		} else {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
		}
	}
	,parseScoreNode: function(element) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Album":
					this.score.album = c1.firstChild.get_innerText();
					break;
				case "Artist":
					this.score.artist = c1.firstChild.get_innerText();
					break;
				case "Copyright":
					this.score.copyright = c1.firstChild.get_innerText();
					break;
				case "Instructions":
					this.score.instructions = c1.firstChild.get_innerText();
					break;
				case "Music":
					this.score.music = c1.firstChild.get_innerText();
					break;
				case "Notices":
					this.score.notices = c1.firstChild.get_innerText();
					break;
				case "SubTitle":
					this.score.subTitle = c1.firstChild.get_innerText();
					break;
				case "Tabber":
					this.score.tab = c1.firstChild.get_innerText();
					break;
				case "Title":
					this.score.title = c1.firstChild.get_innerText();
					break;
				case "Words":
					this.score.words = c1.firstChild.get_innerText();
					break;
				case "WordsAndMusic":
					if(c1.firstChild != null && c1.firstChild.get_innerText() != "") {
						var wordsAndMusic = c1.firstChild.get_innerText();
						var tmp;
						if(!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
							var s = this.score.words;
							if(s != null) {
								tmp = s.length == 0;
							} else {
								tmp = true;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							this.score.words = wordsAndMusic;
						}
						var tmp1;
						if(!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
							var s1 = this.score.music;
							if(s1 != null) {
								tmp1 = s1.length == 0;
							} else {
								tmp1 = true;
							}
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							this.score.music = wordsAndMusic;
						}
					}
					break;
				default:
				}
			}
		}
	}
	,parseMasterTrackNode: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Anacrusis":
					this._hasAnacrusis = true;
					break;
				case "Automations":
					this.parseAutomations(c1,this._masterTrackAutomations);
					break;
				case "Tracks":
					var a = c1.get_innerText();
					var this1 = system.Convert.toUInt16(32);
					var this2 = this1;
					this._tracksMapping = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
					break;
				default:
				}
			}
		}
	}
	,parseAutomations: function(node,automations) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Automation") {
					this.parseAutomation(c1,automations);
				}
			}
		}
	}
	,parseAutomation: function(node,automations) {
		var type = null;
		var isLinear = false;
		var barId = null;
		var ratioPosition = 0;
		var value = 0;
		var reference = 0;
		var text = null;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Bar":
					barId = c1.get_innerText();
					break;
				case "Linear":
					isLinear = c1.get_innerText().toLowerCase() == "true";
					break;
				case "Position":
					var s = c1.get_innerText();
					ratioPosition = parseFloat(s);
					break;
				case "Text":
					text = c1.get_innerText();
					break;
				case "Type":
					type = c1.get_innerText();
					break;
				case "Value":
					var a = c1.get_innerText();
					var this1 = system.Convert.toUInt16(32);
					var this2 = this1;
					var parts = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
					value = parseFloat(parts[0]);
					reference = alphaTab.platform.Platform.parseIntMinValue(parts[1]);
					break;
				default:
				}
			}
		}
		if(type == null) {
			return;
		}
		var automation = null;
		if(type == "Tempo") {
			automation = alphaTab.model.Automation.buildTempoAutomation(isLinear,ratioPosition,value,reference);
		}
		if(automation != null) {
			automation.text = text;
		}
		if(barId != null) {
			if(!automations.hasOwnProperty(barId)) {
				var this3 = [];
				automations[barId] = this3;
			}
			automations[barId].push(automation);
		}
	}
	,parseTracksNode: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Track") {
					this.parseTrack(c1);
				}
			}
		}
	}
	,parseTrack: function(node) {
		var track = new alphaTab.model.Track(1);
		var staff = track.staves[0];
		staff.showStandardNotation = true;
		var trackId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Color":
					var a = c1.get_innerText();
					var this1 = system.Convert.toUInt16(32);
					var this2 = this1;
					var parts = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
					if(parts.length >= 3) {
						var r = alphaTab.platform.Platform.parseIntMinValue(parts[0]);
						var g = alphaTab.platform.Platform.parseIntMinValue(parts[1]);
						var b = alphaTab.platform.Platform.parseIntMinValue(parts[2]);
						track.color = new alphaTab.platform.model.Color(system.Convert.toUInt8(r),system.Convert.toUInt8(g),system.Convert.toUInt8(b),255);
					}
					break;
				case "Instrument":
					var instrumentName = c1.getAttribute("ref");
					if(StringTools.endsWith(instrumentName,"-gs") || StringTools.endsWith(instrumentName,"GrandStaff")) {
						track.ensureStaveCount(2);
						track.staves[1].showStandardNotation = true;
					}
					break;
				case "InstrumentSet":
					this.parseInstrumentSet(track,c1);
					break;
				case "Lyrics":
					this.parseLyrics(trackId,c1);
					break;
				case "GeneralMidi":case "MIDISettings":case "MidiConnection":
					this.parseGeneralMidi(track,c1);
					break;
				case "Name":
					track.name = c1.get_innerText();
					break;
				case "PartSounding":
					this.parsePartSounding(track,c1);
					break;
				case "PlaybackState":
					var state = c1.get_innerText();
					track.playbackInfo.isSolo = state == "Solo";
					track.playbackInfo.isMute = state == "Mute";
					break;
				case "Properties":
					this.parseTrackProperties(track,c1);
					break;
				case "ShortName":
					track.shortName = c1.get_innerText();
					break;
				case "Sounds":
					this.parseSounds(track,c1);
					break;
				case "Staves":
					this.parseStaves(track,c1);
					break;
				case "Transpose":
					this.parseTranspose(track,c1);
					break;
				default:
				}
			}
		}
		this._tracksById[trackId] = track;
	}
	,parseInstrumentSet: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Type") {
					var _g1 = c1.get_innerText();
					if(_g1 == "drumKit") {
						var staff = $iterator(track.staves)();
						while(staff.hasNext()) {
							var staff1 = staff.next();
							staff1.isPercussion = true;
						}
					}
					if(c1.get_innerText() == "drumKit") {
						var staff2 = $iterator(track.staves)();
						while(staff2.hasNext()) {
							var staff3 = staff2.next();
							staff3.isPercussion = true;
						}
					}
				}
			}
		}
	}
	,parseStaves: function(track,node) {
		var staffIndex = 0;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Staff") {
					track.ensureStaveCount(staffIndex + 1);
					var staff = track.staves[staffIndex];
					this.parseStaff(staff,c1);
					++staffIndex;
				}
			}
		}
	}
	,parseStaff: function(staff,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Properties") {
					this.parseStaffProperties(staff,c1);
				}
			}
		}
	}
	,parseStaffProperties: function(staff,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Property") {
					this.parseStaffProperty(staff,c1);
				}
			}
		}
	}
	,parseStaffProperty: function(staff,node) {
		var propertyName = node.getAttribute("name");
		switch(propertyName) {
		case "CapoFret":
			var capo = alphaTab.platform.Platform.parseIntMinValue(node.findChildElement("Fret").get_innerText());
			staff.capo = capo;
			break;
		case "ChordCollection":case "DiagramCollection":
			this.parseDiagramCollection_Staff_XmlNode(staff,node);
			break;
		case "Tuning":
			var a = node.findChildElement("Pitches").get_innerText();
			var this1 = system.Convert.toUInt16(32);
			var this2 = this1;
			var tuningParts = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
			var this3 = new Int32Array(tuningParts.length);
			var tuning = this3;
			var i = 0;
			while(i < tuning.length) {
				tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.parseIntMinValue(tuningParts[i]);
				++i;
			}
			staff.tuning = tuning;
			if(!staff.isPercussion) {
				staff.showTablature = true;
			}
			break;
		default:
		}
	}
	,parseLyrics: function(trackId,node) {
		var this1 = [];
		var tracks = this1;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Line") {
					tracks.push(this.parseLyricsLine(c1));
				}
			}
		}
		this._lyricsByTrack[trackId] = tracks;
	}
	,parseLyricsLine: function(node) {
		var lyrics = new alphaTab.model.Lyrics();
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Offset":
					lyrics.startBar = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "Text":
					lyrics.text = c1.get_innerText();
					break;
				default:
				}
			}
		}
		return lyrics;
	}
	,parseDiagramCollection_Track_XmlNode: function(track,node) {
		var items = node.findChildElement("Items");
		var c = $iterator(items.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Item") {
					this.parseDiagramItem_Track_XmlNode(track,c1);
				}
			}
		}
	}
	,parseDiagramCollection_Staff_XmlNode: function(staff,node) {
		var items = node.findChildElement("Items");
		var c = $iterator(items.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Item") {
					this.parseDiagramItem_Staff_XmlNode(staff,c1);
				}
			}
		}
	}
	,parseDiagramItem_Track_XmlNode: function(track,node) {
		var chord = new alphaTab.model.Chord();
		var chordId = node.getAttribute("id");
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.addChord(chordId,chord);
		}
		this.parseDiagramItem_Chord_XmlNode(chord,node);
	}
	,parseDiagramItem_Staff_XmlNode: function(staff,node) {
		var chord = new alphaTab.model.Chord();
		var chordId = node.getAttribute("id");
		staff.addChord(chordId,chord);
		this.parseDiagramItem_Chord_XmlNode(chord,node);
	}
	,parseDiagramItem_Chord_XmlNode: function(chord,node) {
		chord.name = node.getAttribute("name");
		var diagram = node.findChildElement("Diagram");
		var stringCount = alphaTab.platform.Platform.parseIntMinValue(diagram.getAttribute("stringCount"));
		var baseFret = alphaTab.platform.Platform.parseIntMinValue(diagram.getAttribute("baseFret"));
		chord.firstFret = baseFret + 1;
		var i = 0;
		while(i < stringCount) {
			chord.strings.push(-1);
			++i;
		}
		var c = $iterator(diagram.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Fingering":
					var this1 = {}
					var existingFingers = this1;
					var p = $iterator(c1.childNodes)();
					while(p.hasNext()) {
						var p1 = p.next();
						if(p1.nodeType == 1) {
							var _g1 = p1.localName;
							if(_g1 == "Position") {
								var finger = -2;
								var fret = baseFret + alphaTab.platform.Platform.parseIntMinValue(p1.getAttribute("fret"));
								var _g2 = p1.getAttribute("finger");
								switch(_g2) {
								case "Index":
									finger = 1;
									break;
								case "Middle":
									finger = 2;
									break;
								case "None":
									break;
								case "Pinky":
									finger = 4;
									break;
								case "Rank":
									finger = 3;
									break;
								case "Thumb":
									finger = 0;
									break;
								default:
								}
								if(finger != -2) {
									if(existingFingers.hasOwnProperty(finger)) {
										chord.barreFrets.push(fret);
									} else {
										existingFingers[finger] = true;
									}
								}
							}
						}
					}
					break;
				case "Fret":
					var guitarString = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("string"));
					chord.strings[stringCount - guitarString - 1] = baseFret + alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("fret"));
					break;
				case "Property":
					var _g3 = c1.getAttribute("name");
					switch(_g3) {
					case "ShowDiagram":
						chord.showDiagram = c1.getAttribute("value") == "true";
						break;
					case "ShowFingering":
						chord.showFingering = c1.getAttribute("value") == "true";
						break;
					case "ShowName":
						chord.showName = c1.getAttribute("value") == "true";
						break;
					default:
					}
					break;
				default:
				}
			}
		}
	}
	,parseTrackProperties: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Property") {
					this.parseTrackProperty(track,c1);
				}
			}
		}
	}
	,parseTrackProperty: function(track,node) {
		var propertyName = node.getAttribute("name");
		switch(propertyName) {
		case "CapoFret":
			var capo = alphaTab.platform.Platform.parseIntMinValue(node.findChildElement("Fret").get_innerText());
			var staff = $iterator(track.staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.capo = capo;
			}
			break;
		case "ChordCollection":case "DiagramCollection":
			this.parseDiagramCollection_Track_XmlNode(track,node);
			break;
		case "Tuning":
			var a = node.findChildElement("Pitches").get_innerText();
			var this1 = system.Convert.toUInt16(32);
			var this2 = this1;
			var tuningParts = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
			var this3 = new Int32Array(tuningParts.length);
			var tuning = this3;
			var i = 0;
			while(i < tuning.length) {
				tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.parseIntMinValue(tuningParts[i]);
				++i;
			}
			var staff2 = $iterator(track.staves)();
			while(staff2.hasNext()) {
				var staff3 = staff2.next();
				staff3.tuning = tuning;
				staff3.showStandardNotation = true;
				staff3.showTablature = true;
			}
			break;
		default:
		}
	}
	,parseGeneralMidi: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Port":
					var tmp = c1.get_innerText();
					track.playbackInfo.port = alphaTab.platform.Platform.parseIntMinValue(tmp);
					break;
				case "PrimaryChannel":
					var tmp1 = c1.get_innerText();
					track.playbackInfo.primaryChannel = alphaTab.platform.Platform.parseIntMinValue(tmp1);
					break;
				case "Program":
					var tmp2 = c1.get_innerText();
					track.playbackInfo.program = alphaTab.platform.Platform.parseIntMinValue(tmp2);
					break;
				case "SecondaryChannel":
					var tmp3 = c1.get_innerText();
					track.playbackInfo.secondaryChannel = alphaTab.platform.Platform.parseIntMinValue(tmp3);
					break;
				default:
				}
			}
		}
		var isPercussion = node.getAttribute("table") == "Percussion";
		if(isPercussion) {
			var staff = $iterator(track.staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.isPercussion = true;
			}
		}
	}
	,parseSounds: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Sound") {
					this.parseSound(track,c1);
				}
			}
		}
	}
	,parseSound: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "MIDI") {
					this.parseSoundMidi(track,c1);
				}
			}
		}
	}
	,parseSoundMidi: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Program") {
					var tmp = c1.get_innerText();
					track.playbackInfo.program = alphaTab.platform.Platform.parseIntMinValue(tmp);
				}
			}
		}
	}
	,parsePartSounding: function(track,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "TranspositionPitch") {
					var staff = $iterator(track.staves)();
					while(staff.hasNext()) {
						var staff1 = staff.next();
						staff1.displayTranspositionPitch = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					}
				}
			}
		}
	}
	,parseTranspose: function(track,node) {
		var octave = 0;
		var chromatic = 0;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Chromatic":
					chromatic = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "Octave":
					octave = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				default:
				}
			}
		}
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.displayTranspositionPitch = octave * 12 + chromatic;
		}
	}
	,parseMasterBarsNode: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "MasterBar") {
					this.parseMasterBar(c1);
				}
			}
		}
	}
	,parseMasterBar: function(node) {
		var masterBar = new alphaTab.model.MasterBar();
		if(this._masterBars.length == 0 && this._hasAnacrusis) {
			masterBar.isAnacrusis = true;
		}
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "AlternateEndings":
					var a = c1.get_innerText();
					var this1 = system.Convert.toUInt16(32);
					var this2 = this1;
					var alternateEndings = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
					var i = 0;
					var k = 0;
					while(k < alternateEndings.length) {
						i = i | 1 << -1 + alphaTab.platform.Platform.parseIntMinValue(alternateEndings[k]);
						++k;
					}
					masterBar.alternateEndings = system.Convert.toUInt8(i);
					break;
				case "Bars":
					var this3 = this._barsOfMasterBar;
					var a1 = c1.get_innerText();
					var this4 = system.Convert.toUInt16(32);
					var this5 = this4;
					this3.push(system._CsString.CsString_Impl_.split_CharArray(a1,[this5]));
					break;
				case "DoubleBar":
					masterBar.isDoubleBar = true;
					break;
				case "Fermatas":
					this.parseFermatas(masterBar,c1);
					break;
				case "Key":
					masterBar.keySignature = js.Boot.__cast(alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("AccidentalCount").get_innerText()) , Int);
					var mode = c1.findChildElement("Mode");
					if(mode != null) {
						var _g1 = mode.get_innerText().toLowerCase();
						switch(_g1) {
						case "major":
							masterBar.keySignatureType = 0;
							break;
						case "minor":
							masterBar.keySignatureType = 1;
							break;
						default:
						}
					}
					break;
				case "Repeat":
					if(c1.getAttribute("start").toLowerCase() == "true") {
						masterBar.isRepeatStart = true;
					}
					if(c1.getAttribute("end").toLowerCase() == "true" && c1.getAttribute("count") != null) {
						masterBar.repeatCount = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("count"));
					}
					break;
				case "Section":
					masterBar.section = new alphaTab.model.Section();
					masterBar.section.marker = c1.findChildElement("Letter").get_innerText();
					masterBar.section.text = c1.findChildElement("Text").get_innerText();
					break;
				case "Time":
					var a2 = c1.get_innerText();
					var this6 = system.Convert.toUInt16(47);
					var this7 = this6;
					var timeParts = system._CsString.CsString_Impl_.split_CharArray(a2,[this7]);
					masterBar.timeSignatureNumerator = alphaTab.platform.Platform.parseIntMinValue(timeParts[0]);
					masterBar.timeSignatureDenominator = alphaTab.platform.Platform.parseIntMinValue(timeParts[1]);
					break;
				case "TripletFeel":
					var _g2 = c1.get_innerText();
					switch(_g2) {
					case "Dotted16th":
						masterBar.tripletFeel = 3;
						break;
					case "Dotted8th":
						masterBar.tripletFeel = 4;
						break;
					case "NoTripletFeel":
						masterBar.tripletFeel = 0;
						break;
					case "Scottish16th":
						masterBar.tripletFeel = 5;
						break;
					case "Scottish8th":
						masterBar.tripletFeel = 6;
						break;
					case "Triplet16th":
						masterBar.tripletFeel = 1;
						break;
					case "Triplet8th":
						masterBar.tripletFeel = 2;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		this._masterBars.push(masterBar);
	}
	,parseFermatas: function(masterBar,node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Fermata") {
					this.parseFermata(masterBar,c1);
				}
			}
		}
	}
	,parseFermata: function(masterBar,node) {
		var offset = 0;
		var fermata = new alphaTab.model.Fermata();
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Length":
					var s = c1.get_innerText();
					fermata.length = parseFloat(s);
					break;
				case "Offset":
					var a = c1.get_innerText();
					var this1 = system.Convert.toUInt16(47);
					var this2 = this1;
					var parts = system._CsString.CsString_Impl_.split_CharArray(a,[this2]);
					if(parts.length == 2) {
						var this3 = alphaTab.platform.Platform.parseIntMinValue(parts[0]);
						var numerator = this3;
						var this4 = alphaTab.platform.Platform.parseIntMinValue(parts[1]);
						var denominator = this4;
						offset = system.Convert.toInt32_Single(numerator / denominator * 960);
					}
					break;
				case "Type":
					var _g1 = c1.get_innerText();
					switch(_g1) {
					case "Long":
						fermata.type = 2;
						break;
					case "Medium":
						fermata.type = 1;
						break;
					case "Short":
						fermata.type = 0;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		masterBar.addFermata(offset,fermata);
	}
	,parseBars: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Bar") {
					this.parseBar(c1);
				}
			}
		}
	}
	,parseBar: function(node) {
		var bar = new alphaTab.model.Bar();
		var barId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Clef":
					var _g1 = c1.get_innerText();
					switch(_g1) {
					case "C3":
						bar.clef = 1;
						break;
					case "C4":
						bar.clef = 2;
						break;
					case "F4":
						bar.clef = 3;
						break;
					case "G2":
						bar.clef = 4;
						break;
					case "Neutral":
						bar.clef = 0;
						break;
					default:
					}
					break;
				case "Ottavia":
					var _g2 = c1.get_innerText();
					switch(_g2) {
					case "15ma":
						bar.clefOttava = 0;
						break;
					case "15mb":
						bar.clefOttava = 4;
						break;
					case "8va":
						bar.clefOttava = 1;
						break;
					case "8vb":
						bar.clefOttava = 3;
						break;
					default:
					}
					break;
				case "SimileMark":
					var _g3 = c1.get_innerText();
					switch(_g3) {
					case "FirstOfDouble":
						bar.simileMark = 2;
						break;
					case "SecondOfDouble":
						bar.simileMark = 3;
						break;
					case "Simple":
						bar.simileMark = 1;
						break;
					default:
					}
					break;
				case "Voices":
					var this1 = this._voicesOfBar;
					var a = c1.get_innerText();
					var this2 = system.Convert.toUInt16(32);
					var this3 = this2;
					this1[barId] = system._CsString.CsString_Impl_.split_CharArray(a,[this3]);
					break;
				default:
				}
			}
		}
		this._barsById[barId] = bar;
	}
	,parseVoices: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Voice") {
					this.parseVoice(c1);
				}
			}
		}
	}
	,parseVoice: function(node) {
		var voice = new alphaTab.model.Voice();
		var voiceId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Beats") {
					var this1 = this._beatsOfVoice;
					var a = c1.get_innerText();
					var this2 = system.Convert.toUInt16(32);
					var this3 = this2;
					this1[voiceId] = system._CsString.CsString_Impl_.split_CharArray(a,[this3]);
				}
			}
		}
		this._voiceById[voiceId] = voice;
	}
	,parseBeats: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Beat") {
					this.parseBeat(c1);
				}
			}
		}
	}
	,parseBeat: function(node) {
		var beat = new alphaTab.model.Beat();
		var beatId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Arpeggio":
					if(c1.get_innerText() == "Up") {
						beat.brushType = 3;
					} else {
						beat.brushType = 4;
					}
					break;
				case "Chord":
					beat.chordId = c1.get_innerText();
					break;
				case "Dynamic":
					var _g1 = c1.get_innerText();
					switch(_g1) {
					case "F":
						beat.dynamics = 5;
						break;
					case "FF":
						beat.dynamics = 6;
						break;
					case "FFF":
						beat.dynamics = 7;
						break;
					case "MF":
						beat.dynamics = 4;
						break;
					case "MP":
						beat.dynamics = 3;
						break;
					case "P":
						beat.dynamics = 2;
						break;
					case "PP":
						beat.dynamics = 1;
						break;
					case "PPP":
						beat.dynamics = 0;
						break;
					default:
					}
					break;
				case "Fadding":
					if(c1.get_innerText() == "FadeIn") {
						beat.fadeIn = true;
					}
					break;
				case "FreeText":
					beat.text = c1.get_innerText();
					break;
				case "GraceNotes":
					var _g2 = c1.get_innerText();
					switch(_g2) {
					case "BeforeBeat":
						beat.graceType = 2;
						break;
					case "OnBeat":
						beat.graceType = 1;
						break;
					default:
					}
					break;
				case "Hairpin":
					var _g3 = c1.get_innerText();
					switch(_g3) {
					case "Crescendo":
						beat.crescendo = 1;
						break;
					case "Decrescendo":
						beat.crescendo = 2;
						break;
					default:
					}
					break;
				case "Legato":
					if(c1.getAttribute("origin") == "true") {
						beat.isLegatoOrigin = true;
					}
					break;
				case "Notes":
					var this1 = this._notesOfBeat;
					var a = c1.get_innerText();
					var this2 = system.Convert.toUInt16(32);
					var this3 = this2;
					this1[beatId] = system._CsString.CsString_Impl_.split_CharArray(a,[this3]);
					break;
				case "Ottavia":
					var _g4 = c1.get_innerText();
					switch(_g4) {
					case "15ma":
						beat.ottava = 0;
						break;
					case "15mb":
						beat.ottava = 4;
						break;
					case "8va":
						beat.ottava = 1;
						break;
					case "8vb":
						beat.ottava = 3;
						break;
					default:
					}
					break;
				case "Properties":
					this.parseBeatProperties(c1,beat);
					break;
				case "Rhythm":
					this._rhythmOfBeat[beatId] = c1.getAttribute("ref");
					break;
				case "Tremolo":
					var _g5 = c1.get_innerText();
					switch(_g5) {
					case "1/2":
						beat.tremoloSpeed = 8;
						break;
					case "1/4":
						beat.tremoloSpeed = 16;
						break;
					case "1/8":
						beat.tremoloSpeed = 32;
						break;
					default:
					}
					break;
				case "Whammy":
					var whammyOrigin = new alphaTab.model.BendPoint(0,0);
					var s = c1.getAttribute("originValue");
					var this4 = parseFloat(s);
					whammyOrigin.value = this.toBendValue(this4);
					var s1 = c1.getAttribute("originOffset");
					whammyOrigin.offset = this.toBendOffset(parseFloat(s1));
					beat.addWhammyBarPoint(whammyOrigin);
					var whammyMiddle1 = new alphaTab.model.BendPoint(0,0);
					var s2 = c1.getAttribute("middleValue");
					var this5 = parseFloat(s2);
					whammyMiddle1.value = this.toBendValue(this5);
					var s3 = c1.getAttribute("middleOffset1");
					whammyMiddle1.offset = this.toBendOffset(parseFloat(s3));
					beat.addWhammyBarPoint(whammyMiddle1);
					var whammyMiddle2 = new alphaTab.model.BendPoint(0,0);
					var s4 = c1.getAttribute("middleValue");
					var this6 = parseFloat(s4);
					whammyMiddle2.value = this.toBendValue(this6);
					var s5 = c1.getAttribute("middleOffset2");
					whammyMiddle2.offset = this.toBendOffset(parseFloat(s5));
					beat.addWhammyBarPoint(whammyMiddle2);
					var whammyDestination = new alphaTab.model.BendPoint(0,0);
					var s6 = c1.getAttribute("destinationValue");
					var this7 = parseFloat(s6);
					whammyDestination.value = this.toBendValue(this7);
					var s7 = c1.getAttribute("destinationOffset");
					whammyDestination.offset = this.toBendOffset(parseFloat(s7));
					beat.addWhammyBarPoint(whammyDestination);
					break;
				case "XProperties":
					this.parseBeatXProperties(c1,beat);
					break;
				default:
				}
			}
		}
		this._beatById[beatId] = beat;
	}
	,parseBeatXProperties: function(node,beat) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "XProperty") {
					var id = c1.getAttribute("id");
					var val;
					switch(id) {
					case "1124204545":
						val = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Int").get_innerText());
						beat.invertBeamDirection = val == 1;
						break;
					case "687935489":
						val = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Int").get_innerText());
						beat.brushDuration = val;
						break;
					default:
					}
				}
			}
		}
	}
	,parseBeatProperties: function(node,beat) {
		var isWhammy = false;
		var whammyOrigin = null;
		var whammyMiddleValue = null;
		var whammyMiddleOffset1 = null;
		var whammyMiddleOffset2 = null;
		var whammyDestination = null;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Property") {
					var name = c1.getAttribute("name");
					switch(name) {
					case "Brush":
						if(c1.findChildElement("Direction").get_innerText() == "Up") {
							beat.brushType = 1;
						} else {
							beat.brushType = 2;
						}
						break;
					case "PickStroke":
						if(c1.findChildElement("Direction").get_innerText() == "Up") {
							beat.pickStroke = 1;
						} else {
							beat.pickStroke = 2;
						}
						break;
					case "Popped":
						if(c1.findChildElement("Enable") != null) {
							beat.pop = true;
						}
						break;
					case "Slapped":
						if(c1.findChildElement("Enable") != null) {
							beat.slap = true;
						}
						break;
					case "VibratoWTremBar":
						var _g1 = c1.findChildElement("Strength").get_innerText();
						switch(_g1) {
						case "Slight":
							beat.vibrato = 1;
							break;
						case "Wide":
							beat.vibrato = 2;
							break;
						default:
						}
						break;
					case "WhammyBar":
						isWhammy = true;
						break;
					case "WhammyBarDestinationOffset":
						if(whammyDestination == null) {
							whammyDestination = new alphaTab.model.BendPoint(0,0);
						}
						var s = c1.findChildElement("Float").get_innerText();
						whammyDestination.offset = this.toBendOffset(parseFloat(s));
						break;
					case "WhammyBarDestinationValue":
						if(whammyDestination == null) {
							whammyDestination = new alphaTab.model.BendPoint(60,0);
						}
						var s1 = c1.findChildElement("Float").get_innerText();
						var this1 = parseFloat(s1);
						whammyDestination.value = this.toBendValue(this1);
						break;
					case "WhammyBarExtend":
						break;
					case "WhammyBarMiddleOffset1":
						var s2 = c1.findChildElement("Float").get_innerText();
						whammyMiddleOffset1 = this.toBendOffset(parseFloat(s2));
						break;
					case "WhammyBarMiddleOffset2":
						var s3 = c1.findChildElement("Float").get_innerText();
						whammyMiddleOffset2 = this.toBendOffset(parseFloat(s3));
						break;
					case "WhammyBarMiddleValue":
						var s4 = c1.findChildElement("Float").get_innerText();
						var this2 = parseFloat(s4);
						whammyMiddleValue = this.toBendValue(this2);
						break;
					case "WhammyBarOriginOffset":
						if(whammyOrigin == null) {
							whammyOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s5 = c1.findChildElement("Float").get_innerText();
						whammyOrigin.offset = this.toBendOffset(parseFloat(s5));
						break;
					case "WhammyBarOriginValue":
						if(whammyOrigin == null) {
							whammyOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s6 = c1.findChildElement("Float").get_innerText();
						var this3 = parseFloat(s6);
						whammyOrigin.value = this.toBendValue(this3);
						break;
					default:
					}
				}
			}
		}
		if(isWhammy) {
			if(whammyOrigin == null) {
				whammyOrigin = new alphaTab.model.BendPoint(0,0);
			}
			if(whammyDestination == null) {
				whammyDestination = new alphaTab.model.BendPoint(60,0);
			}
			beat.addWhammyBarPoint(whammyOrigin);
			if(whammyMiddleOffset1 != null && whammyMiddleValue != null) {
				beat.addWhammyBarPoint(new alphaTab.model.BendPoint(whammyMiddleOffset1,whammyMiddleValue));
			}
			if(whammyMiddleOffset2 != null && whammyMiddleValue != null) {
				beat.addWhammyBarPoint(new alphaTab.model.BendPoint(whammyMiddleOffset2,whammyMiddleValue));
			}
			if(whammyMiddleOffset1 == null && whammyMiddleOffset2 == null && whammyMiddleValue != null) {
				beat.addWhammyBarPoint(new alphaTab.model.BendPoint(60 / 2 | 0,whammyMiddleValue));
			}
			beat.addWhammyBarPoint(whammyDestination);
		}
	}
	,parseNotes: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Note") {
					this.parseNote(c1);
				}
			}
		}
	}
	,parseNote: function(node) {
		var note = new alphaTab.model.Note();
		var noteId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "Accent":
					var accentFlags = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					if((accentFlags & 1) != 0) {
						note.isStaccato = true;
					}
					if((accentFlags & 4) != 0) {
						note.accentuated = 2;
					}
					if((accentFlags & 8) != 0) {
						note.accentuated = 1;
					}
					break;
				case "AntiAccent":
					if(c1.get_innerText().toLowerCase() == "normal") {
						note.isGhost = true;
					}
					break;
				case "LeftFingering":
					note.isFingering = true;
					var _g1 = c1.get_innerText();
					switch(_g1) {
					case "A":
						note.leftHandFinger = 3;
						break;
					case "C":
						note.leftHandFinger = 4;
						break;
					case "I":
						note.leftHandFinger = 1;
						break;
					case "M":
						note.leftHandFinger = 2;
						break;
					case "P":
						note.leftHandFinger = 0;
						break;
					default:
					}
					break;
				case "LetRing":
					note.isLetRing = true;
					break;
				case "Properties":
					this.parseNoteProperties(c1,note,noteId);
					break;
				case "RightFingering":
					note.isFingering = true;
					var _g2 = c1.get_innerText();
					switch(_g2) {
					case "A":
						note.rightHandFinger = 3;
						break;
					case "C":
						note.rightHandFinger = 4;
						break;
					case "I":
						note.rightHandFinger = 1;
						break;
					case "M":
						note.rightHandFinger = 2;
						break;
					case "P":
						note.rightHandFinger = 0;
						break;
					default:
					}
					break;
				case "Tie":
					if(c1.getAttribute("destination").toLowerCase() == "true") {
						note.isTieDestination = true;
					}
					break;
				case "Trill":
					note.trillValue = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					note.trillSpeed = 16;
					break;
				case "Vibrato":
					var _g3 = c1.get_innerText();
					switch(_g3) {
					case "Slight":
						note.vibrato = 1;
						break;
					case "Wide":
						note.vibrato = 2;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		this._noteById[noteId] = note;
	}
	,parseNoteProperties: function(node,note,noteId) {
		var isBended = false;
		var bendOrigin = null;
		var bendMiddleValue = null;
		var bendMiddleOffset1 = null;
		var bendMiddleOffset2 = null;
		var bendDestination = null;
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Property") {
					var name = c1.getAttribute("name");
					switch(name) {
					case "BendDestinationOffset":
						if(bendDestination == null) {
							bendDestination = new alphaTab.model.BendPoint(0,0);
						}
						var s = c1.findChildElement("Float").get_innerText();
						bendDestination.offset = this.toBendOffset(parseFloat(s));
						break;
					case "BendDestinationValue":
						if(bendDestination == null) {
							bendDestination = new alphaTab.model.BendPoint(60,0);
						}
						var s1 = c1.findChildElement("Float").get_innerText();
						var this1 = parseFloat(s1);
						bendDestination.value = this.toBendValue(this1);
						break;
					case "BendMiddleOffset1":
						var s2 = c1.findChildElement("Float").get_innerText();
						bendMiddleOffset1 = this.toBendOffset(parseFloat(s2));
						break;
					case "BendMiddleOffset2":
						var s3 = c1.findChildElement("Float").get_innerText();
						bendMiddleOffset2 = this.toBendOffset(parseFloat(s3));
						break;
					case "BendMiddleValue":
						var s4 = c1.findChildElement("Float").get_innerText();
						var this2 = parseFloat(s4);
						bendMiddleValue = this.toBendValue(this2);
						break;
					case "BendOriginOffset":
						if(bendOrigin == null) {
							bendOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s5 = c1.findChildElement("Float").get_innerText();
						bendOrigin.offset = this.toBendOffset(parseFloat(s5));
						break;
					case "BendOriginValue":
						if(bendOrigin == null) {
							bendOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s6 = c1.findChildElement("Float").get_innerText();
						var this3 = parseFloat(s6);
						bendOrigin.value = this.toBendValue(this3);
						break;
					case "Bended":
						isBended = true;
						break;
					case "Element":
						note.element = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Element").get_innerText());
						break;
					case "Fret":
						note.fret = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Fret").get_innerText());
						break;
					case "HarmonicFret":
						var hfret = c1.findChildElement("HFret");
						if(hfret != null) {
							var s7 = hfret.get_innerText();
							note.harmonicValue = parseFloat(s7);
						}
						break;
					case "HarmonicType":
						var htype = c1.findChildElement("HType");
						if(htype != null) {
							var _g1 = htype.get_innerText();
							switch(_g1) {
							case "Artificial":
								note.harmonicType = 2;
								break;
							case "Feedback":
								note.harmonicType = 6;
								break;
							case "Natural":
								note.harmonicType = 1;
								break;
							case "NoHarmonic":
								note.harmonicType = 0;
								break;
							case "Pinch":
								note.harmonicType = 3;
								break;
							case "Semi":
								note.harmonicType = 5;
								break;
							case "Tap":
								note.harmonicType = 4;
								break;
							default:
							}
						}
						break;
					case "HopoDestination":
						break;
					case "HopoOrigin":
						if(c1.findChildElement("Enable") != null) {
							note.isHammerPullOrigin = true;
						}
						break;
					case "Muted":
						if(c1.findChildElement("Enable") != null) {
							note.isDead = true;
						}
						break;
					case "Octave":
						note.octave = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Number").get_innerText());
						break;
					case "PalmMuted":
						if(c1.findChildElement("Enable") != null) {
							note.isPalmMute = true;
						}
						break;
					case "Slide":
						var slideFlags = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Flags").get_innerText());
						if((slideFlags & 1) != 0) {
							note.slideOutType = 1;
						} else if((slideFlags & 2) != 0) {
							note.slideOutType = 2;
						} else if((slideFlags & 4) != 0) {
							note.slideOutType = 4;
						} else if((slideFlags & 8) != 0) {
							note.slideOutType = 3;
						}
						if((slideFlags & 16) != 0) {
							note.slideInType = 1;
						} else if((slideFlags & 32) != 0) {
							note.slideInType = 2;
						}
						if((slideFlags & 64) != 0) {
							note.slideOutType = 5;
						} else if((slideFlags & 128) != 0) {
							note.slideOutType = 6;
						}
						break;
					case "String":
						note.string = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("String").get_innerText()) + 1;
						break;
					case "Tapped":
						this._tappedNotes[noteId] = true;
						break;
					case "Tone":
						note.tone = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Step").get_innerText());
						break;
					case "Variation":
						note.variation = alphaTab.platform.Platform.parseIntMinValue(c1.findChildElement("Variation").get_innerText());
						break;
					default:
					}
				}
			}
		}
		if(isBended) {
			if(bendOrigin == null) {
				bendOrigin = new alphaTab.model.BendPoint(0,0);
			}
			if(bendDestination == null) {
				bendDestination = new alphaTab.model.BendPoint(60,0);
			}
			note.addBendPoint(bendOrigin);
			if(bendMiddleOffset1 != null && bendMiddleValue != null) {
				note.addBendPoint(new alphaTab.model.BendPoint(bendMiddleOffset1,bendMiddleValue));
			}
			if(bendMiddleOffset2 != null && bendMiddleValue != null) {
				note.addBendPoint(new alphaTab.model.BendPoint(bendMiddleOffset2,bendMiddleValue));
			}
			if(bendMiddleOffset1 == null && bendMiddleOffset2 == null && bendMiddleValue != null) {
				note.addBendPoint(new alphaTab.model.BendPoint(60 / 2 | 0,bendMiddleValue));
			}
			note.addBendPoint(bendDestination);
		}
	}
	,toBendValue: function(gpxValue) {
		return system.Convert.toInt32_Double(gpxValue * 0.04);
	}
	,toBendOffset: function(gpxOffset) {
		var converted = gpxOffset * 0.6;
		return system.Convert.toInt32_Single(converted);
	}
	,parseRhythms: function(node) {
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "Rhythm") {
					this.parseRhythm(c1);
				}
			}
		}
	}
	,parseRhythm: function(node) {
		var rhythm = new alphaTab.importer.GpifRhythm();
		var rhythmId = node.getAttribute("id");
		var c = $iterator(node.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "AugmentationDot":
					rhythm.dots = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("count"));
					break;
				case "NoteValue":
					var _g1 = c1.get_innerText();
					switch(_g1) {
					case "128th":
						rhythm.value = 128;
						break;
					case "16th":
						rhythm.value = 16;
						break;
					case "256th":
						rhythm.value = 256;
						break;
					case "32nd":
						rhythm.value = 32;
						break;
					case "64th":
						rhythm.value = 64;
						break;
					case "DoubleWhole":
						rhythm.value = -2;
						break;
					case "Eighth":
						rhythm.value = 8;
						break;
					case "Half":
						rhythm.value = 2;
						break;
					case "Long":
						rhythm.value = -4;
						break;
					case "Quarter":
						rhythm.value = 4;
						break;
					case "Whole":
						rhythm.value = 1;
						break;
					default:
					}
					break;
				case "PrimaryTuplet":
					rhythm.tupletNumerator = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("num"));
					rhythm.tupletDenominator = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("den"));
					break;
				default:
				}
			}
		}
		this._rhythmById[rhythmId] = rhythm;
	}
	,buildModel: function() {
		var i = 0;
		var j = this._masterBars.length;
		while(i < j) {
			var masterBar = this._masterBars[i];
			this.score.addMasterBar(masterBar);
			++i;
		}
		var trackId = HxOverrides.iter(this._tracksMapping);
		while(trackId.hasNext()) {
			var trackId1 = trackId.next();
			if(trackId1 == null || trackId1.length == 0) {
				continue;
			}
			var track = this._tracksById[trackId1];
			this.score.addTrack(track);
		}
		var barIds = $iterator(this._barsOfMasterBar)();
		while(barIds.hasNext()) {
			var barIds1 = barIds.next();
			var staffIndex = 0;
			var barIndex = 0;
			var trackIndex = 0;
			while(barIndex < barIds1.length && trackIndex < this.score.tracks.length) {
				var barId = barIds1[barIndex];
				if(barId != "-1") {
					var bar = this._barsById[barId];
					var track1 = this.score.tracks[trackIndex];
					var staff = track1.staves[staffIndex];
					staff.addBar(bar);
					if(this._voicesOfBar.hasOwnProperty(barId)) {
						var voiceId = HxOverrides.iter(this._voicesOfBar[barId]);
						while(voiceId.hasNext()) {
							var voiceId1 = voiceId.next();
							if(voiceId1 != "-1") {
								var voice = this._voiceById[voiceId1];
								bar.addVoice(voice);
								if(this._beatsOfVoice.hasOwnProperty(voiceId1)) {
									var beatId = HxOverrides.iter(this._beatsOfVoice[voiceId1]);
									while(beatId.hasNext()) {
										var beatId1 = beatId.next();
										if(beatId1 != "-1") {
											var beat = this._beatById[beatId1].clone();
											voice.addBeat(beat);
											var rhythmId = this._rhythmOfBeat[beatId1];
											var rhythm = this._rhythmById[rhythmId];
											beat.duration = rhythm.value;
											beat.dots = rhythm.dots;
											beat.tupletNumerator = rhythm.tupletNumerator;
											beat.tupletDenominator = rhythm.tupletDenominator;
											if(this._notesOfBeat.hasOwnProperty(beatId1)) {
												var noteId = HxOverrides.iter(this._notesOfBeat[beatId1]);
												while(noteId.hasNext()) {
													var noteId1 = noteId.next();
													if(noteId1 != "-1") {
														beat.addNote(this._noteById[noteId1].clone());
														if(this._tappedNotes.hasOwnProperty(noteId1)) {
															beat.tap = true;
														}
													}
												}
											}
										}
									}
								}
							} else {
								var voice1 = new alphaTab.model.Voice();
								bar.addVoice(voice1);
								var beat1 = new alphaTab.model.Beat();
								beat1.isEmpty = true;
								beat1.duration = 4;
								voice1.addBeat(beat1);
							}
						}
					}
					if(staffIndex == track1.staves.length - 1) {
						++trackIndex;
						staffIndex = 0;
					} else {
						++staffIndex;
					}
				} else {
					++trackIndex;
				}
				++barIndex;
			}
		}
		var this1 = this._masterTrackAutomations;
		var barIndex1 = $iterator(Object.keys(this1))();
		while(barIndex1.hasNext()) {
			var barIndex2 = barIndex1.next();
			var automations = this._masterTrackAutomations[barIndex2];
			var masterBar1 = this.score.masterBars[alphaTab.platform.Platform.parseIntMinValue(barIndex2)];
			var i1 = 0;
			var j1 = automations.length;
			while(i1 < j1) {
				var automation = automations[i1];
				if(automation.type == 0) {
					if(barIndex2 == "0") {
						var tmp = system.Convert.toInt32_Single(automation.value);
						this.score.tempo = tmp;
						if(automation.text != null) {
							this.score.tempoLabel = automation.text;
						}
					}
					masterBar1.tempoAutomation = automation;
				}
				++i1;
			}
		}
	}
	,__class__: alphaTab.importer.GpifParser
};
alphaTab.importer.GpifRhythm = function() {
	this.dots = 0;
	this.tupletDenominator = 0;
	this.tupletNumerator = 0;
	this.value = -4;
	this.tupletDenominator = -1;
	this.tupletNumerator = -1;
	this.value = 4;
};
alphaTab.importer.GpifRhythm.__name__ = ["alphaTab","importer","GpifRhythm"];
alphaTab.importer.GpifRhythm.prototype = {
	__class__: alphaTab.importer.GpifRhythm
};
alphaTab.importer.GpxFile = function() {
	this.fileName = null;
	this.fileSize = 0;
	this.data = null;
};
alphaTab.importer.GpxFile.__name__ = ["alphaTab","importer","GpxFile"];
alphaTab.importer.GpxFile.prototype = {
	__class__: alphaTab.importer.GpxFile
};
alphaTab.importer.GpxFileSystem = function() {
	this.fileFilter = null;
	this.files = null;
	var this1 = [];
	this.files = this1;
	this.fileFilter = function(s) {
		return true;
	};
};
alphaTab.importer.GpxFileSystem.__name__ = ["alphaTab","importer","GpxFileSystem"];
alphaTab.importer.GpxFileSystem.prototype = {
	load: function(s) {
		var src = new alphaTab.io.BitReader(s);
		this.readBlock(src);
	}
	,readHeader: function(src) {
		return this.getString(src.readBytes(4),0,4);
	}
	,decompress: function(src,skipHeader) {
		if(skipHeader == null) {
			skipHeader = false;
		}
		var uncompressed = alphaTab.io.ByteBuffer.empty();
		var buffer;
		var expectedLength = this.getInteger(src.readBytes(4),0);
		try {
			while(uncompressed.get_length() < expectedLength) {
				var flag = src.readBits(1);
				if(flag == 1) {
					var wordSize = src.readBits(4);
					var offset = src.readBitsReversed(wordSize);
					var size = src.readBitsReversed(wordSize);
					var sourcePosition = uncompressed.get_length() - offset;
					var toRead = Math.min(offset,size);
					buffer = uncompressed.getBuffer();
					uncompressed.write(buffer,sourcePosition,toRead);
				} else {
					var size1 = src.readBitsReversed(2);
					var i = 0;
					while(i < size1) {
						uncompressed.writeByte(system.Convert.toUInt8(src.readByte()));
						++i;
					}
				}
			}
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,alphaTab.io.EndOfReaderException) ) {
			} else throw(__e);
		}
		buffer = uncompressed.getBuffer();
		var resultOffset = skipHeader ? 4 : 0;
		var resultSize = uncompressed.get_length() - resultOffset;
		var this1 = new Uint8Array(resultSize);
		var result = this1;
		result.set(buffer.subarray(resultOffset,resultOffset+resultSize), 0);
		return result;
	}
	,readBlock: function(data) {
		var header = this.readHeader(data);
		if(header == "BCFZ") {
			this.readUncompressedBlock(this.decompress(data,true));
		} else if(header == "BCFS") {
			this.readUncompressedBlock(data.readAll());
		} else {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
		}
	}
	,readUncompressedBlock: function(data) {
		var sectorSize = 4096;
		var offset = sectorSize;
		while(offset + 3 < data.length) {
			var entryType = this.getInteger(data,offset);
			if(entryType == 2) {
				var file = new alphaTab.importer.GpxFile();
				file.fileName = this.getString(data,offset + 4,127);
				file.fileSize = this.getInteger(data,offset + 140);
				var storeFile = this.fileFilter == null || this.fileFilter(file.fileName);
				if(storeFile) {
					this.files.push(file);
				}
				var dataPointerOffset = offset + 148;
				var sector = 0;
				var sectorCount = 0;
				var fileData = storeFile ? alphaTab.io.ByteBuffer.withCapactiy(file.fileSize) : null;
				while(true) {
					sector = this.getInteger(data,dataPointerOffset + 4 * sectorCount++);
					if(!(sector != 0)) {
						break;
					}
					offset = sector * sectorSize;
					if(storeFile) {
						fileData.write(data,offset,sectorSize);
					}
				}
				if(storeFile) {
					var this1 = new Uint8Array(Math.min(file.fileSize,fileData.get_length()));
					file.data = this1;
					var raw = fileData.toArray();
					var dst = file.data;
					var count = file.data.length;
					dst.set(raw.subarray(0,0+count), 0);
				}
			}
			offset = offset + sectorSize;
		}
	}
	,getString: function(data,offset,length) {
		var this1 = "";
		var buf = this1;
		var i = 0;
		while(i < length) {
			var code = data[offset + i] & 255;
			if(code == 0) {
				break;
			}
			buf += String.fromCharCode(code);
			++i;
		}
		return buf;
	}
	,getInteger: function(data,offset) {
		var this1 = data[offset];
		return data[offset + 3] << 24 | data[offset + 2] << 16 | data[offset + 1] << 8 | this1;
	}
	,__class__: alphaTab.importer.GpxFileSystem
};
alphaTab.importer.GpxImporter = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.GpxImporter.__name__ = ["alphaTab","importer","GpxImporter"];
alphaTab.importer.GpxImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.GpxImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_name: function() {
		return "Guitar Pro 6";
	}
	,readScore: function() {
		alphaTab.util.Logger.info(this.get_name(),"Loading GPX filesystem",null);
		var fileSystem = new alphaTab.importer.GpxFileSystem();
		fileSystem.fileFilter = function(s) {
			if(!(StringTools.endsWith(s,"score.gpif") || StringTools.endsWith(s,"BinaryStylesheet"))) {
				return StringTools.endsWith(s,"PartConfiguration");
			} else {
				return true;
			}
		};
		fileSystem.load(this.Data);
		alphaTab.util.Logger.info(this.get_name(),"GPX filesystem loaded",null);
		var xml = null;
		var binaryStylesheet = null;
		var partConfiguration = null;
		var entry = $iterator(fileSystem.files)();
		while(entry.hasNext()) {
			var entry1 = entry.next();
			var _g = entry1.fileName;
			switch(_g) {
			case "BinaryStylesheet":
				binaryStylesheet = entry1.data;
				break;
			case "PartConfiguration":
				partConfiguration = entry1.data;
				break;
			case "score.gpif":
				xml = alphaTab.platform.Platform.toString(entry1.data,this.Settings.importer.encoding);
				break;
			default:
			}
		}
		fileSystem.files = null;
		fileSystem = null;
		alphaTab.util.Logger.info(this.get_name(),"Start Parsing score.gpif",null);
		var gpifParser = new alphaTab.importer.GpifParser();
		gpifParser.parseXml(xml,this.Settings);
		alphaTab.util.Logger.info(this.get_name(),"score.gpif parsed",null);
		var score = gpifParser.score;
		if(binaryStylesheet != null) {
			alphaTab.util.Logger.info(this.get_name(),"Start Parsing BinaryStylesheet",null);
			var stylesheetParser = new alphaTab.importer.BinaryStylesheetParser();
			stylesheetParser.parse(binaryStylesheet);
			if(stylesheetParser.stylesheet != null) {
				stylesheetParser.stylesheet.apply(score);
			}
			alphaTab.util.Logger.info(this.get_name(),"BinaryStylesheet parsed",null);
		}
		if(partConfiguration != null) {
			alphaTab.util.Logger.info(this.get_name(),"Start Parsing Part Configuration",null);
			var partConfigurationParser = new alphaTab.importer.PartConfigurationParser();
			partConfigurationParser.parse(partConfiguration);
			if(partConfigurationParser.configuration != null) {
				partConfigurationParser.configuration.apply(score);
			}
			alphaTab.util.Logger.info(this.get_name(),"Part Configuration parsed",null);
		}
		return score;
	}
	,__class__: alphaTab.importer.GpxImporter
});
alphaTab.importer.MixTableChange = function() {
	this.volume = 0;
	this.balance = 0;
	this.instrument = 0;
	this.tempoName = null;
	this.tempo = 0;
	this.duration = 0;
	this.volume = -1;
	this.balance = -1;
	this.instrument = -1;
	this.tempoName = null;
	this.tempo = -1;
	this.duration = 0;
};
alphaTab.importer.MixTableChange.__name__ = ["alphaTab","importer","MixTableChange"];
alphaTab.importer.MixTableChange.prototype = {
	__class__: alphaTab.importer.MixTableChange
};
alphaTab.importer.MusicXmlImporter = function() {
	var this1 = {}
	this._voiceOfStaff = this1;
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.MusicXmlImporter.__name__ = ["alphaTab","importer","MusicXmlImporter"];
alphaTab.importer.MusicXmlImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.MusicXmlImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_name: function() {
		return "MusicXML";
	}
	,readScore: function() {
		var this1 = {}
		this._trackById = this1;
		var this2 = {}
		this._partGroups = this2;
		var this3 = [];
		this._tieStarts = this3;
		var this4 = {}
		this._tieStartIds = this4;
		var this5 = {}
		this._slurStarts = this5;
		var xml = alphaTab.platform.Platform.toString(this.Data.readAll(),this.Settings.importer.encoding);
		var dom;
		try {
			dom = new alphaTab.xml.XmlDocument(xml);
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
			} else throw(__e);
		}
		this._score = new alphaTab.model.Score();
		this._score.tempo = 120;
		this.parseDom(dom);
		if(this.Settings.importer.mergePartGroupsInMusicXml) {
			this.mergePartGroups();
		}
		this._score.finish(this.Settings);
		this._score.rebuildRepeatGroups();
		return this._score;
	}
	,mergePartGroups: function() {
		var anyMerged = false;
		var this1 = this._partGroups;
		var groupId = $iterator(Object.keys(this1))();
		while(groupId.hasNext()) {
			var groupId1 = groupId.next();
			var tracks = this._partGroups[groupId1];
			if(tracks.length > 1) {
				this.mergeGroup(tracks);
				anyMerged = true;
			}
		}
		if(anyMerged) {
			var i = 0;
			while(i < this._score.tracks.length) {
				this._score.tracks[i].index = i;
				++i;
			}
		}
	}
	,mergeGroup: function(partGroup) {
		var primaryTrack = partGroup[0];
		var i = 1;
		while(i < partGroup.length) {
			var secondaryTrack = partGroup[i];
			var staff = $iterator(secondaryTrack.staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				primaryTrack.addStaff(staff1);
			}
			var trackIndex = this._score.tracks.indexOf(secondaryTrack);
			if(trackIndex != -1) {
				this._score.tracks.splice(trackIndex,1);
			}
			++i;
		}
	}
	,parseDom: function(dom) {
		var root = dom.documentElement;
		if(root == null) {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
		}
		var _g = root.localName;
		switch(_g) {
		case "score-partwise":
			this.parsePartwise(root);
			break;
		case "score-timewise":
			break;
		default:
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unsupported format"));
		}
	}
	,parsePartwise: function(element) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "identification":
					this.parseIdentification(c1);
					break;
				case "movement-title":
					this._score.title = c1.get_innerText();
					break;
				case "part":
					this.parsePart(c1);
					break;
				case "part-list":
					this.parsePartList(c1);
					break;
				case "work":
					this.parseWork(c1);
					break;
				default:
				}
			}
		}
	}
	,parseWork: function(element) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "work-title") {
					this._score.title = c1.get_innerText();
				}
			}
		}
	}
	,parsePart: function(element) {
		var id = element.getAttribute("id");
		if(!this._trackById.hasOwnProperty(id)) {
			var this1 = this._trackById;
			if(Object.keys(this1).length == 1) {
				var this2 = this._trackById;
				var key = $iterator(Object.keys(this2))();
				while(key.hasNext()) {
					var key1 = key.next();
					var t = this._trackById[key1];
					if(t.staves.length == 0 || t.staves[0].bars.length == 0) {
						id = key1;
					}
				}
				if(!this._trackById.hasOwnProperty(id)) {
					return;
				}
			} else {
				return;
			}
		}
		var track = this._trackById[id];
		var isFirstMeasure = true;
		this._maxVoices = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "measure") {
					if(this.parseMeasure(c1,track,isFirstMeasure)) {
						isFirstMeasure = false;
					}
				}
			}
		}
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			var bar = $iterator(staff1.bars)();
			while(bar.hasNext()) {
				var bar1 = bar.next();
				this.ensureVoices(bar1);
			}
		}
	}
	,parseMeasure: function(element,track,isFirstMeasure) {
		if(element.getAttribute("implicit") == "yes" && element.getElementsByTagName("note",false).length == 0) {
			return false;
		}
		var barIndex = 0;
		var barWidth = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("width"));
		if(barWidth == -2147483648) {
			barWidth = 0;
		}
		if(isFirstMeasure) {
			this._divisionsPerQuarterNote = 0;
			this._trackFirstMeasureNumber = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("number"));
			if(this._trackFirstMeasureNumber == -2147483648) {
				this._trackFirstMeasureNumber = 0;
			}
			barIndex = 0;
		} else {
			barIndex = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("number"));
			if(barIndex == -2147483648) {
				return false;
			}
			barIndex = barIndex - this._trackFirstMeasureNumber;
		}
		if(isFirstMeasure) {
			var attributes = element.getElementsByTagName("attributes",false);
			if(attributes.length > 0) {
				var stavesElements = attributes[0].getElementsByTagName("staves",false);
				if(stavesElements.length > 0) {
					var staves = alphaTab.platform.Platform.parseIntMinValue(stavesElements[0].get_innerText());
					track.ensureStaveCount(staves);
				}
			}
		}
		var size = track.staves.length;
		var this1 = new Array(size);
		var bars = this1;
		var masterBar = null;
		var b = track.staves[0].bars.length;
		while(b <= barIndex) {
			var s = 0;
			while(s < track.staves.length) {
				var bar = bars[s] = new alphaTab.model.Bar();
				if(track.staves[s].bars.length > 0) {
					var previousBar = track.staves[s].bars[track.staves[s].bars.length - 1];
					bar.clef = previousBar.clef;
				}
				masterBar = this.getOrCreateMasterBar(barIndex);
				track.staves[s].addBar(bar);
				this.ensureVoices(bar);
				++s;
			}
			++b;
		}
		var attributesParsed = false;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "attributes":
					if(!attributesParsed) {
						this.parseAttributes(c1,bars,masterBar,track);
						attributesParsed = true;
					}
					break;
				case "barline":
					this.parseBarline(c1,masterBar);
					break;
				case "direction":
					this.parseDirection(c1,masterBar);
					break;
				case "forward":
					this.parseForward(c1,bars);
					break;
				case "harmony":
					this.parseHarmony(c1,track);
					break;
				case "note":
					this.parseNoteBeat(c1,bars);
					break;
				case "sound":
					break;
				default:
				}
			}
		}
		return true;
	}
	,ensureVoices: function(bar) {
		while(bar.voices.length < this._maxVoices) {
			var emptyVoice = new alphaTab.model.Voice();
			bar.addVoice(emptyVoice);
			var _tmp = new alphaTab.model.Beat();
			_tmp.isEmpty = true;
			var emptyBeat = _tmp;
			emptyBeat.chordId = this._currentChord;
			emptyVoice.addBeat(emptyBeat);
		}
	}
	,getOrCreateBeat: function(element,bars,chord) {
		var voiceIndex = 0;
		var voiceNodes = element.getElementsByTagName("voice",false);
		if(voiceNodes.length > 0) {
			voiceIndex = alphaTab.platform.Platform.parseIntMinValue(voiceNodes[0].get_innerText()) - 1;
		}
		var previousBeatWasPulled = this._previousBeatWasPulled;
		this._previousBeatWasPulled = false;
		var staffElement = element.getElementsByTagName("staff",false);
		var staff = 1;
		if(staffElement.length > 0) {
			staff = alphaTab.platform.Platform.parseIntMinValue(staffElement[0].get_innerText());
			if((this._isBeamContinue || previousBeatWasPulled) && this._previousBeat.voice.bar.staff.index != staff - 1) {
				staff = this._previousBeat.voice.bar.staff.index + 1;
				this._previousBeatWasPulled = true;
			}
			var staffId = Std.string(bars[0].staff.track.index) + "-" + Std.string(staff);
			if(!this._voiceOfStaff.hasOwnProperty(staffId)) {
				this._voiceOfStaff[staffId] = voiceIndex;
			}
		}
		--staff;
		var bar;
		if(staff < 0) {
			bar = bars[0];
		} else if(staff >= bars.length) {
			bar = bars[bars.length - 1];
		} else {
			bar = bars[staff];
		}
		var beat;
		var voice = this.getOrCreateVoice(bar,voiceIndex);
		if(chord && voice.beats.length > 0 || voice.beats.length == 1 && voice.isEmpty) {
			beat = voice.beats[voice.beats.length - 1];
		} else {
			beat = new alphaTab.model.Beat();
			beat.isEmpty = false;
			voice.addBeat(beat);
		}
		this._isBeamContinue = false;
		this._previousBeat = beat;
		return beat;
	}
	,parseForward: function(element,bars) {
		var beat = this.getOrCreateBeat(element,bars,false);
		var durationInDivisions = alphaTab.platform.Platform.parseIntMinValue(element.findChildElement("duration").get_innerText());
		var duration = durationInDivisions * 4 / js.Boot.__cast(this._divisionsPerQuarterNote , Float);
		var durations = new Int32Array([64,32,16,8,4,2,1]);
		var d = new system.Int32ArrayIterator(durations);
		while(d.hasNext()) {
			var d1 = d.next();
			if(duration >= d1) {
				beat.duration = js.Boot.__cast(d1 , Int);
				duration = duration - d1;
				break;
			}
		}
		var tmp = duration > 0;
		beat.isEmpty = false;
	}
	,parseStaffDetails: function(element,track) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "staff-lines":
					var staff = $iterator(track.staves)();
					while(staff.hasNext()) {
						var staff1 = staff.next();
						var this1 = new Int32Array(alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText()));
						staff1.tuning = this1;
					}
					break;
				case "staff-tuning":
					this.parseStaffTuning(c1,track);
					break;
				default:
				}
			}
		}
		var staff2 = $iterator(track.staves)();
		while(staff2.hasNext()) {
			var staff3 = staff2.next();
			if(this.isEmptyTuning(staff3.tuning)) {
				var this2 = new Int32Array(0);
				staff3.tuning = this2;
			}
		}
	}
	,parseStaffTuning: function(element,track) {
		var line = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("line"));
		var tuningStep = "C";
		var tuningOctave = "";
		var tuningAlter = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "tuning-alter":
					tuningAlter = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "tuning-octave":
					tuningOctave = c1.get_innerText();
					break;
				case "tuning-step":
					tuningStep = c1.get_innerText();
					break;
				default:
				}
			}
		}
		var tuning = alphaTab.model.TuningParser.getTuningForText(tuningStep + tuningOctave) + tuningAlter;
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.tuning[staff1.tuning.length - line] = tuning;
		}
	}
	,parseHarmony: function(element,track) {
		var rootStep = null;
		var rootAlter = "";
		var kind = null;
		var kindText = null;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "kind":
					kindText = c1.getAttribute("text");
					kind = c1.get_innerText();
					break;
				case "root":
					var rootChild = $iterator(c1.childNodes)();
					while(rootChild.hasNext()) {
						var rootChild1 = rootChild.next();
						if(rootChild1.nodeType == 1) {
							var _g1 = rootChild1.localName;
							switch(_g1) {
							case "root-alter":
								var _g2 = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
								switch(_g2) {
								case -2:
									rootAlter = " bb";
									break;
								case -1:
									rootAlter = " b";
									break;
								case 0:
									rootAlter = "";
									break;
								case 1:
									rootAlter = " #";
									break;
								case 2:
									rootAlter = " ##";
									break;
								default:
								}
								break;
							case "root-step":
								rootStep = rootChild1.get_innerText();
								break;
							default:
							}
						}
					}
					break;
				default:
				}
			}
		}
		var chord = new alphaTab.model.Chord();
		chord.name = rootStep + rootAlter;
		this._currentChord = alphaTab.platform.Platform.newGuid();
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.addChord(this._currentChord,chord);
		}
	}
	,parseBarline: function(element,masterBar) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "ending":
					this.parseEnding(c1,masterBar);
					break;
				case "repeat":
					this.parseRepeat(c1,masterBar);
					break;
				default:
				}
			}
		}
	}
	,parseEnding: function(element,masterBar) {
		var number = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("number"));
		if(number > 0) {
			--number;
			masterBar.alternateEndings = system.Convert.toUInt8(masterBar.alternateEndings | system.Convert.toUInt8(1 << number));
		}
	}
	,parseRepeat: function(element,masterBar) {
		var direction = element.getAttribute("direction");
		var times = alphaTab.platform.Platform.parseIntMinValue(element.getAttribute("times"));
		if(times < 0) {
			times = 2;
		}
		if(direction == "backward") {
			masterBar.repeatCount = times;
		} else if(direction == "forward") {
			masterBar.isRepeatStart = true;
		}
	}
	,parseNoteBeat: function(element,bars) {
		var chord = element.getElementsByTagName("chord",false).length > 0;
		var beat = this.getOrCreateBeat(element,bars,chord);
		if(beat.chordId == null && this._currentChord != null) {
			beat.chordId = this._currentChord;
			this._currentChord = null;
		}
		if(this._currentDirection != null) {
			beat.text = this._currentDirection;
			this._currentDirection = null;
		}
		var note = new alphaTab.model.Note();
		beat.voice.isEmpty = false;
		beat.isEmpty = false;
		beat.addNote(note);
		beat.dots = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "accidental":
					this.parseAccidental(c1,note);
					break;
				case "beam":
					var beamMode = c1.get_innerText();
					if(beamMode == "continue") {
						this._isBeamContinue = true;
					}
					break;
				case "cue":
					break;
				case "dot":
					beat.dots++;
					break;
				case "duration":
					if(beat.get_isRest()) {
						var duration = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
						switch(duration) {
						case 1:
							beat.duration = 1;
							break;
						case 2:
							beat.duration = 2;
							break;
						case 4:
							beat.duration = 4;
							break;
						case 8:
							beat.duration = 8;
							break;
						case 16:
							beat.duration = 16;
							break;
						case 32:
							beat.duration = 32;
							break;
						case 64:
							beat.duration = 64;
							break;
						default:
							beat.duration = 4;
						}
					}
					break;
				case "grace":
					beat.graceType = 2;
					beat.duration = 32;
					break;
				case "instrument":
					break;
				case "lyric":
					this.parseLyric(c1,beat);
					break;
				case "notations":
					this.parseNotations(c1,beat,note);
					break;
				case "notehead":
					if(c1.getAttribute("parentheses") == "yes") {
						note.isGhost = true;
					}
					break;
				case "pitch":
					this.parsePitch(c1,note);
					break;
				case "rest":
					beat.isEmpty = false;
					var this1 = [];
					beat.notes = this1;
					break;
				case "stem":
					break;
				case "tie":
					this.parseTied(c1,note);
					break;
				case "time-modification":
					this.parseTimeModification(c1,beat);
					break;
				case "type":
					beat.duration = this.getDuration(c1.get_innerText());
					if(beat.graceType != 0 && beat.duration < 16) {
						beat.duration = 8;
					}
					break;
				case "unpitched":
					this.parseUnpitched(c1,note);
					break;
				default:
				}
			}
		}
		if(note.get_isStringed()) {
			var i = 0;
			while(i < beat.notes.length) {
				if(beat.notes[i].string == note.string && beat.notes[i] != note) {
					beat.removeNote(note);
					break;
				}
				++i;
			}
		}
	}
	,getDuration: function(text) {
		switch(text) {
		case "128th":case "256th":case "64th":
			return 64;
		case "16th":
			return 16;
		case "32nd":
			return 32;
		case "breve":case "long":case "whole":
			return 1;
		case "eighth":
			return 8;
		case "half":
			return 2;
		case "quarter":
			return 4;
		default:
		}
		return 4;
	}
	,parseLyric: function(element,beat) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "text") {
					var s = beat.text;
					if(!(s == null || s.length == 0)) {
						beat.text = beat.text + (" " + c1.get_innerText());
					} else {
						beat.text = c1.get_innerText();
					}
				}
			}
		}
	}
	,parseAccidental: function(element,note) {
		var _g = element.get_innerText();
		switch(_g) {
		case "double-sharp":
			break;
		case "flat":
			note.accidentalMode = 4;
			break;
		case "flat-flat":
			break;
		case "natural":
			note.accidentalMode = 2;
			break;
		case "natural-flat":
			break;
		case "natural-sharp":
			break;
		case "quarter-flat":
			break;
		case "quarter-sharp":
			break;
		case "sharp":
			note.accidentalMode = 3;
			break;
		case "sharp-sharp":
			break;
		case "three-quarters-flat":
			break;
		case "three-quarters-sharp":
			break;
		default:
		}
	}
	,parseTied: function(element,note) {
		if(element.getAttribute("type") == "start") {
			if(!this._tieStartIds.hasOwnProperty(note.id)) {
				this._tieStartIds[note.id] = true;
				this._tieStarts.push(note);
			}
		} else if(element.getAttribute("type") == "stop" && this._tieStarts.length > 0 && !note.isTieDestination) {
			note.isTieDestination = true;
			note.tieOrigin = this._tieStarts[0];
			if(true) {
				this._tieStarts.splice(0,1);
			}
			var this1 = this._tieStartIds;
			var key = note.id;
			delete this1[key];
		}
	}
	,parseNotations: function(element,beat,note) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "articulations":
					this.parseArticulations(c1,note);
					break;
				case "dynamics":
					this.parseDynamics(c1,beat);
					break;
				case "glissando":case "slide":
					if(c1.getAttribute("type") == "start") {
						note.slideOutType = 1;
					}
					break;
				case "ornaments":
					this.parseOrnaments(c1,note);
					break;
				case "slur":
					var slurNumber = c1.getAttribute("number");
					if(slurNumber == null || slurNumber.length == 0) {
						slurNumber = "1";
					}
					var _g1 = c1.getAttribute("type");
					switch(_g1) {
					case "start":
						this._slurStarts[slurNumber] = note;
						break;
					case "stop":
						if(this._slurStarts.hasOwnProperty(slurNumber)) {
							note.isSlurDestination = true;
							var slurStart = this._slurStarts[slurNumber];
							slurStart.slurDestination = note;
							note.slurOrigin = note;
						}
						break;
					default:
					}
					break;
				case "technical":
					this.parseTechnical(c1,note);
					break;
				case "tied":
					this.parseTied(c1,note);
					break;
				default:
				}
			}
		}
	}
	,parseOrnaments: function(element,note) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				if(_g == "tremolo") {
					var tremoloSpeed = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					switch(tremoloSpeed) {
					case 1:
						note.beat.tremoloSpeed = 8;
						break;
					case 2:
						note.beat.tremoloSpeed = 16;
						break;
					case 3:
						note.beat.tremoloSpeed = 32;
						break;
					default:
					}
				}
			}
		}
	}
	,parseTechnical: function(element,note) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "down-bow":
					note.beat.pickStroke = 2;
					break;
				case "fret":
					note.fret = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "string":
					note.string = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					if(note.string != -2147483648) {
						note.string = note.beat.voice.bar.staff.tuning.length - note.string + 1;
					}
					break;
				case "up-bow":
					note.beat.pickStroke = 1;
					break;
				default:
				}
			}
		}
		if(note.string == -2147483648 || note.fret == -2147483648) {
			note.string = -1;
			note.fret = -1;
		}
	}
	,parseArticulations: function(element,note) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g = c1.localName;
			switch(_g) {
			case "accent":
				note.accentuated = 1;
				break;
			case "detached-legato":case "staccato":
				note.isStaccato = true;
				break;
			case "strong-accent":
				note.accentuated = 2;
				break;
			default:
			}
		}
	}
	,parseDynamics: function(element,beat) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "f":
					beat.dynamics = 5;
					break;
				case "ff":
					beat.dynamics = 6;
					break;
				case "fff":
					beat.dynamics = 7;
					break;
				case "mf":
					beat.dynamics = 4;
					break;
				case "mp":
					beat.dynamics = 3;
					break;
				case "p":
					beat.dynamics = 2;
					break;
				case "pp":
					beat.dynamics = 1;
					break;
				case "ppp":
					beat.dynamics = 0;
					break;
				default:
				}
			}
		}
	}
	,parseTimeModification: function(element,beat) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "actual-notes":
					beat.tupletNumerator = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "normal-notes":
					beat.tupletDenominator = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				default:
				}
			}
		}
	}
	,parseUnpitched: function(element,note) {
		var step = null;
		var semitones = 0;
		var octave = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "display-alter":
					semitones = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "display-octave":
					octave = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "display-step":
					step = c1.get_innerText();
					break;
				default:
				}
			}
		}
		var value = octave * 12 + alphaTab.model.TuningParser.getToneForText(step) + semitones;
		note.octave = value / 12 | 0;
		note.tone = value - note.octave * 12;
	}
	,parsePitch: function(element,note) {
		var step = null;
		var semitones = 0;
		var octave = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "alter":
					var s = c1.get_innerText();
					semitones = parseFloat(s);
					var this1 = semitones;
					if(isNaN(this1)) {
						semitones = 0;
					}
					break;
				case "octave":
					octave = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText()) + 1;
					break;
				case "step":
					step = c1.get_innerText();
					break;
				default:
				}
			}
		}
		var value = octave * 12 + alphaTab.model.TuningParser.getToneForText(step) + system.Convert.toInt32_Single(semitones);
		note.octave = value / 12 | 0;
		note.tone = value - note.octave * 12;
	}
	,getOrCreateVoice: function(bar,index) {
		if(index < bar.voices.length) {
			return bar.voices[index];
		}
		var i = bar.voices.length;
		while(i <= index) {
			bar.addVoice(new alphaTab.model.Voice());
			++i;
		}
		this._maxVoices = Math.max(this._maxVoices,bar.voices.length);
		return bar.voices[index];
	}
	,parseDirection: function(element,masterBar) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "direction-type":
					var directionType = c1.firstElement;
					var _g1 = directionType.localName;
					switch(_g1) {
					case "metronome":
						this.parseMetronome(c1.firstElement,masterBar);
						break;
					case "words":
						this._currentDirection = directionType.get_innerText();
						break;
					default:
					}
					break;
				case "sound":
					var tempo = c1.getAttribute("tempo");
					if(!(tempo == null || tempo.length == 0)) {
						var tempoAutomation = new alphaTab.model.Automation();
						tempoAutomation.isLinear = true;
						tempoAutomation.type = 0;
						var this1 = alphaTab.platform.Platform.parseIntMinValue(tempo);
						tempoAutomation.value = this1;
						masterBar.tempoAutomation = tempoAutomation;
					}
					break;
				default:
				}
			}
		}
	}
	,parseMetronome: function(element,masterBar) {
		var unit = 4;
		var perMinute = 120;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "beat-unit":
					unit = this.getDuration(c1.get_innerText());
					break;
				case "per-minute":
					perMinute = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				default:
				}
			}
		}
		var tempoAutomation = masterBar.tempoAutomation = new alphaTab.model.Automation();
		tempoAutomation.type = 0;
		var this1 = perMinute * (unit / 4 | 0);
		tempoAutomation.value = this1;
	}
	,parseAttributes: function(element,bars,masterBar,track) {
		var number;
		var hasTime = false;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "clef":
					number = alphaTab.platform.Platform.parseIntMinValue(c1.getAttribute("number"));
					if(number == -2147483648) {
						number = 1;
					}
					this.parseClef(c1,bars[number - 1]);
					break;
				case "divisions":
					this._divisionsPerQuarterNote = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "key":
					this.parseKey(c1,masterBar);
					break;
				case "staff-details":
					this.parseStaffDetails(c1,track);
					break;
				case "time":
					this.parseTime(c1,masterBar);
					hasTime = true;
					break;
				case "transpose":
					this.parseTranspose(c1,track);
					break;
				default:
				}
			}
		}
		if(!hasTime) {
			masterBar.timeSignatureCommon = true;
		}
	}
	,parseTranspose: function(element,track) {
		var semitones = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "chromatic":
					semitones = semitones + alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "octave-change":
					semitones = semitones + alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText()) * 12;
					break;
				default:
				}
			}
		}
		var staff = $iterator(track.staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.transpositionPitch = semitones;
		}
	}
	,parseClef: function(element,bar) {
		var sign = null;
		var line = 0;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "clef-octave-change":
					var _g1 = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					switch(_g1) {
					case -2:
						bar.clefOttava = 4;
						break;
					case -1:
						bar.clefOttava = 3;
						break;
					case 1:
						bar.clefOttava = 1;
						break;
					case 2:
						bar.clefOttava = 4;
						break;
					default:
					}
					break;
				case "line":
					line = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "sign":
					sign = c1.get_innerText().toLowerCase();
					break;
				default:
				}
			}
		}
		switch(sign) {
		case "c":
			if(line == 3) {
				bar.clef = 1;
			} else {
				bar.clef = 2;
			}
			break;
		case "f":
			bar.clef = 3;
			break;
		case "g":
			bar.clef = 4;
			break;
		case "percussion":
			bar.clef = 0;
			bar.staff.isPercussion = true;
			break;
		case "tab":
			bar.clef = 4;
			bar.staff.showTablature = true;
			break;
		default:
			bar.clef = 4;
		}
	}
	,parseTime: function(element,masterBar) {
		if(element.getAttribute("symbol") == "common") {
			masterBar.timeSignatureCommon = true;
		}
		var beatsParsed = false;
		var beatTypeParsed = false;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var v = c1.get_innerText();
				var _g = c1.localName;
				switch(_g) {
				case "beat-type":
					if(!beatTypeParsed) {
						if(!(v.indexOf("+") != -1)) {
							masterBar.timeSignatureDenominator = alphaTab.platform.Platform.parseIntMinValue(v);
						} else {
							masterBar.timeSignatureDenominator = 4;
						}
						beatTypeParsed = true;
					}
					break;
				case "beats":
					if(!beatsParsed) {
						if(!(v.indexOf("+") != -1)) {
							masterBar.timeSignatureNumerator = alphaTab.platform.Platform.parseIntMinValue(v);
						} else {
							masterBar.timeSignatureNumerator = 4;
						}
						beatsParsed = true;
					}
					break;
				default:
				}
			}
		}
	}
	,parseKey: function(element,masterBar) {
		var fifths = -2147483648;
		var keyStep = -2147483648;
		var keyAlter = -2147483648;
		var mode = null;
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "fifths":
					fifths = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "key-alter":
					keyAlter = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "key-step":
					keyStep = alphaTab.platform.Platform.parseIntMinValue(c1.get_innerText());
					break;
				case "mode":
					mode = c1.get_innerText();
					break;
				default:
				}
			}
		}
		if(-7 <= fifths && fifths <= 7) {
			masterBar.keySignature = js.Boot.__cast(fifths , Int);
		} else {
			masterBar.keySignature = 0;
		}
		if(mode == "minor") {
			masterBar.keySignatureType = 1;
		} else {
			masterBar.keySignatureType = 0;
		}
	}
	,getOrCreateMasterBar: function(index) {
		if(index < this._score.masterBars.length) {
			return this._score.masterBars[index];
		}
		var i = this._score.masterBars.length;
		while(i <= index) {
			var mb = new alphaTab.model.MasterBar();
			if(this._score.masterBars.length > 0) {
				var prev = this._score.masterBars[this._score.masterBars.length - 1];
				mb.timeSignatureDenominator = prev.timeSignatureDenominator;
				mb.timeSignatureNumerator = prev.timeSignatureNumerator;
				mb.keySignature = prev.keySignature;
				mb.keySignatureType = prev.keySignatureType;
			}
			this._score.addMasterBar(mb);
			++i;
		}
		return this._score.masterBars[index];
	}
	,parseIdentification: function(element) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "creator":
					if(c1.getAttribute("type") == "composer") {
						this._score.music = c1.get_innerText();
					}
					break;
				case "rights":
					var s = this._score.copyright;
					if(!(s == null || s.length == 0)) {
						this._score.copyright = this._score.copyright + "\n";
					}
					var tmp = this._score.copyright + c1.get_innerText();
					this._score.copyright = tmp;
					break;
				default:
				}
			}
		}
	}
	,parsePartList: function(element) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "part-group":
					this.parsePartGroup(c1);
					break;
				case "score-part":
					this.parseScorePart(c1);
					break;
				default:
				}
			}
		}
	}
	,parsePartGroup: function(element) {
		var type = element.getAttribute("type");
		switch(type) {
		case "start":
			this._currentPartGroup = element.getAttribute("number");
			var this1 = this._partGroups;
			var index = this._currentPartGroup;
			var this2 = [];
			this1[index] = this2;
			break;
		case "stop":
			this._currentPartGroup = null;
			break;
		default:
		}
	}
	,parseScorePart: function(element) {
		var id = element.getAttribute("id");
		var track = new alphaTab.model.Track(1);
		var staff = track.staves[0];
		staff.showStandardNotation = true;
		this._trackById[id] = track;
		this._score.addTrack(track);
		if(this._currentPartGroup != null) {
			this._partGroups[this._currentPartGroup].push(track);
		}
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "midi-instrument":
					this.parseMidiInstrument(c1,track);
					break;
				case "part-abbreviation":
					track.shortName = c1.get_innerText();
					break;
				case "part-name":
					track.name = c1.get_innerText();
					break;
				default:
				}
			}
		}
		if(this.isEmptyTuning(track.staves[0].tuning)) {
			var tmp = track.staves[0];
			var this1 = new Int32Array(0);
			tmp.tuning = this1;
		}
	}
	,isEmptyTuning: function(tuning) {
		if(tuning == null) {
			return true;
		}
		var i = 0;
		while(i < tuning.length) {
			if(tuning[i] != 0) {
				return false;
			}
			++i;
		}
		return true;
	}
	,parseMidiInstrument: function(element,track) {
		var c = $iterator(element.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.nodeType == 1) {
				var _g = c1.localName;
				switch(_g) {
				case "midi-channel":
					var tmp = c1.get_innerText();
					track.playbackInfo.primaryChannel = alphaTab.platform.Platform.parseIntMinValue(tmp);
					break;
				case "midi-program":
					var tmp1 = c1.get_innerText();
					track.playbackInfo.program = alphaTab.platform.Platform.parseIntMinValue(tmp1);
					break;
				case "midi-volume":
					var tmp2 = c1.get_innerText();
					track.playbackInfo.volume = alphaTab.platform.Platform.parseIntMinValue(tmp2);
					break;
				default:
				}
			}
		}
	}
	,__class__: alphaTab.importer.MusicXmlImporter
});
alphaTab.importer.NoCompatibleReaderFoundException = $hx_exports["alphaTab"]["importer"]["NoCompatibleReaderFoundException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.NoCompatibleReaderFoundException.__name__ = ["alphaTab","importer","NoCompatibleReaderFoundException"];
alphaTab.importer.NoCompatibleReaderFoundException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.NoCompatibleReaderFoundException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	NoCompatibleReaderFoundException: function() {
		this.AlphaTabException("No compatible reader found");
		return this;
	}
	,__class__: alphaTab.importer.NoCompatibleReaderFoundException
});
alphaTab.importer.PartConfiguration = function() {
	this.parts = null;
	this.zoomLevel = 0;
	this.layout = 0;
	var this1 = [];
	this.parts = this1;
};
alphaTab.importer.PartConfiguration.__name__ = ["alphaTab","importer","PartConfiguration"];
alphaTab.importer.PartConfiguration.prototype = {
	apply: function(score) {
		var staffIndex = 0;
		var trackIndex = 0;
		var part = $iterator(this.parts)();
		while(part.hasNext()) {
			var part1 = part.next();
			var trackConfig = $iterator(part1.tracks)();
			while(trackConfig.hasNext()) {
				var trackConfig1 = trackConfig.next();
				if(trackIndex < score.tracks.length) {
					var track = score.tracks[trackIndex];
					if(staffIndex < track.staves.length) {
						var staff = track.staves[staffIndex];
						staff.showTablature = trackConfig1.showTablature;
						staff.showStandardNotation = trackConfig1.showStandardNotation;
					}
				}
				++trackIndex;
				if(trackIndex >= score.tracks.length) {
					++staffIndex;
					trackIndex = 0;
				}
			}
		}
	}
	,__class__: alphaTab.importer.PartConfiguration
};
alphaTab.importer.PartConfigurationParser = function() {
	this.configuration = null;
};
alphaTab.importer.PartConfigurationParser.__name__ = ["alphaTab","importer","PartConfigurationParser"];
alphaTab.importer.PartConfigurationParser.prototype = {
	parse: function(partConfigurationData) {
		this.configuration = new alphaTab.importer.PartConfiguration();
		this.parsePartConfiguration(partConfigurationData);
	}
	,parsePartConfiguration: function(partConfigurationData) {
		var readable = alphaTab.io.ByteBuffer.fromBuffer(partConfigurationData);
		var entryCount = alphaTab.io.IOHelper.readInt32BE(readable);
		var i = 0;
		while(i < entryCount) {
			var part = new alphaTab.importer.PartConfiguration_Part();
			this.configuration.parts.push(part);
			part.isMultiRest = alphaTab.importer.GpBinaryHelpers.gpReadBool(readable);
			var groupCount = alphaTab.io.IOHelper.readInt32BE(readable);
			var j = 0;
			while(j < groupCount) {
				var flags = readable.readByte();
				if(flags == 0) {
					flags = 1;
				}
				var this1 = part.tracks;
				var _tmp = new alphaTab.importer.PartConfiguration_TrackConfiguration();
				_tmp.showStandardNotation = (flags & 1) != 0;
				_tmp.showTablature = (flags & 2) != 0;
				_tmp.showSlash = (flags & 4) != 0;
				this1.push(_tmp);
				++j;
			}
			++i;
		}
	}
	,__class__: alphaTab.importer.PartConfigurationParser
};
alphaTab.importer.PartConfiguration_Part = $hx_exports["alphaTab"]["importer"]["PartConfiguration_Part"] = function() {
	this.isMultiRest = false;
	this.tracks = null;
	var this1 = [];
	this.tracks = this1;
};
alphaTab.importer.PartConfiguration_Part.__name__ = ["alphaTab","importer","PartConfiguration_Part"];
alphaTab.importer.PartConfiguration_Part.prototype = {
	__class__: alphaTab.importer.PartConfiguration_Part
};
alphaTab.importer.PartConfiguration_TrackConfiguration = $hx_exports["alphaTab"]["importer"]["PartConfiguration_TrackConfiguration"] = function() {
	this.isVisible = false;
	this.showSlash = false;
	this.showStandardNotation = false;
	this.showTablature = false;
};
alphaTab.importer.PartConfiguration_TrackConfiguration.__name__ = ["alphaTab","importer","PartConfiguration_TrackConfiguration"];
alphaTab.importer.PartConfiguration_TrackConfiguration.prototype = {
	__class__: alphaTab.importer.PartConfiguration_TrackConfiguration
};
alphaTab.importer.ScoreLoader = $hx_exports["alphaTab"]["importer"]["ScoreLoader"] = function() {
};
alphaTab.importer.ScoreLoader.__name__ = ["alphaTab","importer","ScoreLoader"];
alphaTab.importer.ScoreLoader.loadScoreAsync = function(path,success,error,settings) {
	if(settings == null) {
		settings = new alphaTab.Settings();
	}
	var xhr = new XMLHttpRequest();
	xhr.open("GET",path,true,null,null);
	xhr.responseType = "arraybuffer";
	xhr.onreadystatechange = function() {
		if(xhr.readyState == 4) {
			var response = xhr.response;
			if(xhr.status == 200 || xhr.status == 0 && !(!response)) {
				try {
					var buffer = xhr.response;
					var reader = new Uint8Array(buffer);
					var score = alphaTab.importer.ScoreLoader.loadScoreFromBytes(reader,settings);
					success(score);
				} catch( exception ) {
					if (exception instanceof js._Boot.HaxeError) exception = exception.val;
					if( js.Boot.__instanceof(exception,system.Exception) ) {
						error(exception);
					} else throw(exception);
				}
			} else if(xhr.status == 0) {
				var tmp = new alphaTab.importer.FileLoadException().FileLoadException("You are offline!!\n Please Check Your Network.",xhr);
				error(tmp);
			} else if(xhr.status == 404) {
				var tmp1 = new alphaTab.importer.FileLoadException().FileLoadException("Requested URL not found.",xhr);
				error(tmp1);
			} else if(xhr.status == 500) {
				var tmp2 = new alphaTab.importer.FileLoadException().FileLoadException("Internel Server Error.",xhr);
				error(tmp2);
			} else if(xhr.statusText == "parsererror") {
				var tmp3 = new alphaTab.importer.FileLoadException().FileLoadException("Error.\nParsing JSON Request failed.",xhr);
				error(tmp3);
			} else if(xhr.statusText == "timeout") {
				var tmp4 = new alphaTab.importer.FileLoadException().FileLoadException("Request Time out.",xhr);
				error(tmp4);
			} else {
				var tmp5 = new alphaTab.importer.FileLoadException().FileLoadException("Unknow Error: " + xhr.responseText,xhr);
				error(tmp5);
			}
		}
	};
	if(xhr.responseType != "arraybuffer") {
		var vbArr = VbAjaxLoader("GET",path);
		var fileContents = vbArr.toArray();
		var this1 = "";
		var data = this1;
		var i = 0;
		while(i < fileContents.length - 1) {
			data += Std.string(fileContents[i]);
			++i;
		}
		var reader1 = alphaTab.importer.ScoreLoader.getBytesFromString(data);
		var score1 = alphaTab.importer.ScoreLoader.loadScoreFromBytes(reader1,settings);
		success(score1);
	}
	xhr.send();
};
alphaTab.importer.ScoreLoader.getBytesFromString = function(s) {
	var this1 = new Uint8Array(s.length);
	var b = this1;
	var i = 0;
	while(i < s.length) {
		var this2 = system.Convert.toUInt16(HxOverrides.cca(s,i));
		b[i] = system.Convert.toUInt8(this2);
		++i;
	}
	return b;
};
alphaTab.importer.ScoreLoader.loadScoreFromBytes = function(data,settings) {
	var importers = alphaTab.importer.ScoreImporter.buildImporters();
	alphaTab.util.Logger.info("ScoreLoader","Loading score from " + Std.string(data.length) + " bytes using " + Std.string(importers.length) + " importers",null);
	var score = null;
	var bb = alphaTab.io.ByteBuffer.fromBuffer(data);
	var importer = HxOverrides.iter(importers);
	while(importer.hasNext()) {
		var importer1 = importer.next();
		bb.reset();
		try {
			alphaTab.util.Logger.info("ScoreLoader","Importing using importer " + importer1.get_name(),null);
			importer1.init(bb,settings);
			score = importer1.readScore();
			alphaTab.util.Logger.info("ScoreLoader","Score imported using " + importer1.get_name(),null);
			break;
		} catch( $e0 ) {
			if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
			if( js.Boot.__instanceof($e0,alphaTab.importer.UnsupportedFormatException) ) {
				var __e = $e0;
				alphaTab.util.Logger.info("ScoreLoader",importer1.get_name() + " does not support the file",null);
			} else if( js.Boot.__instanceof($e0,system.Exception) ) {
				var e = $e0;
				alphaTab.util.Logger.info("ScoreLoader","Score import failed due to unexpected error: " + Std.string(e),null);
				throw new js._Boot.HaxeError(e);
			} else throw($e0);
		}
	}
	if(score != null) {
		return score;
	}
	alphaTab.util.Logger.error("ScoreLoader","No compatible importer found for file",null);
	throw new js._Boot.HaxeError(new alphaTab.importer.NoCompatibleReaderFoundException().NoCompatibleReaderFoundException());
};
alphaTab.importer.ScoreLoader.prototype = {
	__class__: alphaTab.importer.ScoreLoader
};
alphaTab.importer.UnsupportedFormatException = $hx_exports["alphaTab"]["importer"]["UnsupportedFormatException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.UnsupportedFormatException.__name__ = ["alphaTab","importer","UnsupportedFormatException"];
alphaTab.importer.UnsupportedFormatException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.UnsupportedFormatException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	UnsupportedFormatException: function(message) {
		if(message == null) {
			message = "Unsupported format";
		}
		this.AlphaTabException(message);
		return this;
	}
	,__class__: alphaTab.importer.UnsupportedFormatException
});
alphaTab.io = {};
alphaTab.io.BitReader = function(source) {
	this._currentByte = 0;
	this._position = 0;
	this._source = null;
	this._source = source;
	this._position = 8;
};
alphaTab.io.BitReader.__name__ = ["alphaTab","io","BitReader"];
alphaTab.io.BitReader.prototype = {
	readByte: function() {
		return this.readBits(8);
	}
	,readBytes: function(count) {
		var this1 = new Uint8Array(count);
		var bytes = this1;
		var i = 0;
		while(i < count) {
			bytes[i] = system.Convert.toUInt8(this.readByte());
			++i;
		}
		return bytes;
	}
	,readBits: function(count) {
		var bits = 0;
		var i = count - 1;
		while(i >= 0) {
			bits = bits | this.readBit() << i;
			--i;
		}
		return bits;
	}
	,readBitsReversed: function(count) {
		var bits = 0;
		var i = 0;
		while(i < count) {
			bits = bits | this.readBit() << i;
			++i;
		}
		return bits;
	}
	,readBit: function() {
		if(this._position >= 8) {
			this._currentByte = this._source.readByte();
			if(this._currentByte == -1) {
				throw new js._Boot.HaxeError(new alphaTab.io.EndOfReaderException().EndOfReaderException());
			}
			this._position = 0;
		}
		var value = this._currentByte >> 8 - this._position - 1 & 1;
		this._position++;
		return value;
	}
	,readAll: function() {
		var all = alphaTab.io.ByteBuffer.empty();
		try {
			while(true) all.writeByte(system.Convert.toUInt8(this.readByte()));
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,alphaTab.io.EndOfReaderException) ) {
			} else throw(__e);
		}
		return all.toArray();
	}
	,__class__: alphaTab.io.BitReader
};
alphaTab.io.IReadable = $hx_exports["alphaTab"]["io"]["IReadable"] = function() { };
alphaTab.io.IReadable.__name__ = ["alphaTab","io","IReadable"];
alphaTab.io.IReadable.prototype = {
	__class__: alphaTab.io.IReadable
};
alphaTab.io.IWriteable = $hx_exports["alphaTab"]["io"]["IWriteable"] = function() { };
alphaTab.io.IWriteable.__name__ = ["alphaTab","io","IWriteable"];
alphaTab.io.IWriteable.prototype = {
	__class__: alphaTab.io.IWriteable
};
alphaTab.io.ByteBuffer = function() {
	this._buffer = null;
	this._capacity = 0;
	this.set_length(0);
	this.set_position(0);
};
alphaTab.io.ByteBuffer.__name__ = ["alphaTab","io","ByteBuffer"];
alphaTab.io.ByteBuffer.__interfaces__ = [alphaTab.io.IReadable,alphaTab.io.IWriteable];
alphaTab.io.ByteBuffer.empty = function() {
	return alphaTab.io.ByteBuffer.withCapactiy(0);
};
alphaTab.io.ByteBuffer.withCapactiy = function(capacity) {
	var buffer = new alphaTab.io.ByteBuffer();
	var this1 = new Uint8Array(capacity);
	buffer._buffer = this1;
	buffer._capacity = capacity;
	return buffer;
};
alphaTab.io.ByteBuffer.fromBuffer = function(data) {
	var buffer = new alphaTab.io.ByteBuffer();
	buffer._buffer = data;
	buffer._capacity = buffer.set_length(data.length);
	return buffer;
};
alphaTab.io.ByteBuffer.prototype = {
	get_length: function() {
		return this.__Length;
	}
	,set_length: function(value) {
		return this.__Length = value;
	}
	,get_position: function() {
		return this.__Position;
	}
	,set_position: function(value) {
		return this.__Position = value;
	}
	,getBuffer: function() {
		return this._buffer;
	}
	,reset: function() {
		this.set_position(0);
	}
	,skip: function(offset) {
		this.set_position(this.get_position() + offset);
	}
	,setCapacity: function(value) {
		if(value != this._capacity) {
			if(value > 0) {
				var this1 = new Uint8Array(value);
				var newBuffer = this1;
				if(this.get_length() > 0) {
					var src = this._buffer;
					var count = this.get_length();
					newBuffer.set(src.subarray(0,0+count), 0);
				}
				this._buffer = newBuffer;
			} else {
				this._buffer = null;
			}
			this._capacity = value;
		}
	}
	,readByte: function() {
		var n = this.get_length() - this.get_position();
		if(n <= 0) {
			return -1;
		}
		var this1 = this._buffer;
		var _g = this;
		var _g1 = _g.get_position();
		_g.set_position(_g1 + 1);
		var this2 = this1[_g1];
		return this2;
	}
	,read: function(buffer,offset,count) {
		var n = this.get_length() - this.get_position();
		if(n > count) {
			n = count;
		}
		if(n <= 0) {
			return 0;
		}
		if(n <= 8) {
			var byteCount = n;
			while(true) {
				--byteCount;
				if(!(byteCount >= 0)) {
					break;
				}
				buffer[offset + byteCount] = this._buffer[this.get_position() + byteCount];
			}
		} else {
			var src = this._buffer;
			var srcOffset = this.get_position();
			buffer.set(src.subarray(srcOffset,srcOffset+n), offset);
		}
		this.set_position(this.get_position() + n);
		return n;
	}
	,writeByte: function(value) {
		var this1 = new Uint8Array(1);
		var buffer = this1;
		buffer[0] = value;
		this.write(buffer,0,1);
	}
	,write: function(buffer,offset,count) {
		var i = this.get_position() + count;
		if(i > this.get_length()) {
			if(i > this._capacity) {
				this.ensureCapacity(i);
			}
			this.set_length(i);
		}
		if(count <= 8 && buffer != this._buffer) {
			var byteCount = count;
			while(true) {
				--byteCount;
				if(!(byteCount >= 0)) {
					break;
				}
				this._buffer[this.get_position() + byteCount] = buffer[offset + byteCount];
			}
		} else {
			var dst = this._buffer;
			var dstOffset = this.get_position();
			var count1 = Math.min(count,buffer.length - offset);
			dst.set(buffer.subarray(offset,offset+count1), dstOffset);
		}
		this.set_position(i);
	}
	,ensureCapacity: function(value) {
		if(value > this._capacity) {
			var newCapacity = value;
			if(newCapacity < 256) {
				newCapacity = 256;
			}
			if(newCapacity < this._capacity * 2) {
				newCapacity = this._capacity * 2;
			}
			this.setCapacity(newCapacity);
		}
	}
	,readAll: function() {
		return this.toArray();
	}
	,toArray: function() {
		var this1 = new Uint8Array(this.get_length());
		var copy = this1;
		var src = this._buffer;
		var count = this.get_length();
		copy.set(src.subarray(0,0+count), 0);
		return copy;
	}
	,__class__: alphaTab.io.ByteBuffer
};
alphaTab.io.EndOfReaderException = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.io.EndOfReaderException.__name__ = ["alphaTab","io","EndOfReaderException"];
alphaTab.io.EndOfReaderException.__super__ = alphaTab.AlphaTabException;
alphaTab.io.EndOfReaderException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	EndOfReaderException: function() {
		this.AlphaTabException("");
		return this;
	}
	,__class__: alphaTab.io.EndOfReaderException
});
alphaTab.io.IOHelper = function() { };
alphaTab.io.IOHelper.__name__ = ["alphaTab","io","IOHelper"];
alphaTab.io.IOHelper.readInt32BE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	var ch3 = input.readByte();
	var ch4 = input.readByte();
	return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
};
alphaTab.io.IOHelper.readInt32LE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	var ch3 = input.readByte();
	var ch4 = input.readByte();
	return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
};
alphaTab.io.IOHelper.readUInt32LE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	var ch3 = input.readByte();
	var ch4 = input.readByte();
	return alphaTab.platform.Platform.toUInt32(ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1);
};
alphaTab.io.IOHelper.readUInt16LE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	return alphaTab.platform.Platform.toUInt16(ch2 << 8 | ch1);
};
alphaTab.io.IOHelper.readInt16LE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	return alphaTab.platform.Platform.toInt16(ch2 << 8 | ch1);
};
alphaTab.io.IOHelper.readUInt32BE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	var ch3 = input.readByte();
	var ch4 = input.readByte();
	return alphaTab.platform.Platform.toUInt32(ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4);
};
alphaTab.io.IOHelper.readUInt16BE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	return alphaTab.platform.Platform.toUInt16(ch1 << 8 | ch2);
};
alphaTab.io.IOHelper.readInt16BE = function(input) {
	var ch1 = input.readByte();
	var ch2 = input.readByte();
	return alphaTab.platform.Platform.toInt16(ch1 << 8 | ch2);
};
alphaTab.io.IOHelper.readByteArray = function(input,length) {
	var this1 = new Uint8Array(length);
	var v = this1;
	input.read(v,0,length);
	return v;
};
alphaTab.io.IOHelper.read8BitChars = function(input,length) {
	var this1 = new Uint8Array(length);
	var b = this1;
	input.read(b,0,b.length);
	return alphaTab.platform.Platform.toString(b,"utf-8");
};
alphaTab.io.IOHelper.read8BitString = function(input) {
	var this1 = "";
	var s = this1;
	var c = input.readByte();
	while(c != 0) {
		s += String.fromCharCode(c);
		c = input.readByte();
	}
	return s;
};
alphaTab.io.IOHelper.read8BitStringLength = function(input,length) {
	var this1 = "";
	var s = this1;
	var z = -1;
	var i = 0;
	while(i < length) {
		var c = input.readByte();
		if(c == 0 && z == -1) {
			z = i;
		}
		s += String.fromCharCode(c);
		++i;
	}
	var t = s;
	if(z >= 0) {
		return HxOverrides.substr(t,0,z);
	}
	return t;
};
alphaTab.io.IOHelper.readSInt8 = function(input) {
	var v = input.readByte();
	return ((v & 255) >> 7) * -256 + (v & 255);
};
alphaTab.io.IOHelper.readInt24 = function(input,index) {
	var i = input[index] | input[index + 1] << 8 | input[index + 2] << 16;
	if((i & 8388608) == 8388608) {
		i = i | -16777216;
	}
	return i;
};
alphaTab.io.IOHelper.readInt16 = function(input,index) {
	return alphaTab.platform.Platform.toInt16(input[index] | input[index + 1] << 8);
};
haxe.io = {};
haxe.io.Input = function() { };
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw new js._Boot.HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js._Boot.HaxeError) eof = eof.val;
			if( js.Boot.__instanceof(eof,haxe.io.Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe.io.Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe.io.Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe.io.Input
};
alphaTab.io.ReadableInput = function(readable) {
	this._readable = null;
	this._readable = readable;
};
alphaTab.io.ReadableInput.__name__ = ["alphaTab","io","ReadableInput"];
alphaTab.io.ReadableInput.__super__ = haxe.io.Input;
alphaTab.io.ReadableInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		return this._readable.readByte();
	}
	,readBytes: function(s,pos,len) {
		var data = new Uint8Array(s.b.bufferValue);
		return this._readable.read(data,pos,len);
	}
	,__class__: alphaTab.io.ReadableInput
});
alphaTab.io.ZipEntry = function() {
	this.fullName = null;
	this.fileName = null;
	this.data = null;
};
alphaTab.io.ZipEntry.__name__ = ["alphaTab","io","ZipEntry"];
alphaTab.io.ZipEntry.prototype = {
	__class__: alphaTab.io.ZipEntry
};
alphaTab.io.ZipFile = function() {
	this.fileFilter = null;
	this.entries = null;
	var this1 = [];
	this.entries = this1;
	this.fileFilter = function(s) {
		return true;
	};
};
alphaTab.io.ZipFile.__name__ = ["alphaTab","io","ZipFile"];
alphaTab.io.ZipFile.prototype = {
	load: function(s) {
		try {
			var haxeInput = new alphaTab.io.ReadableInput(s);
			var reader = new haxe.zip.Reader(haxeInput);
			var entries = reader.read();
			var _g_head = entries.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var entry = val;
				var fullName = entry.fileName;
				if(this.fileFilter == null || this.fileFilter(fullName)) {
					var i = fullName.lastIndexOf("/");
					var name = i >= 0 ? HxOverrides.substr(fullName,i + 1,null) : fullName;
					var data = entry.data.b.bufferValue;
					var this1 = this.entries;
					var _tmp = new alphaTab.io.ZipEntry();
					_tmp.fullName = fullName;
					_tmp.fileName = name;
					_tmp.data = new Uint8Array(data);
					this1.push(_tmp);
				}
			}
		} catch( __e ) {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Not a valid zip file"));
		}
	}
	,__class__: alphaTab.io.ZipFile
};
alphaTab.model = {};
alphaTab.model._AccentuationType = {};
alphaTab.model._AccentuationType.AccentuationType_Impl_ = $hx_exports["alphaTab"]["model"]["_AccentuationType"]["AccentuationType_Impl_"] = {};
alphaTab.model._AccentuationType.AccentuationType_Impl_.__name__ = ["alphaTab","model","_AccentuationType","AccentuationType_Impl_"];
alphaTab.model._AccentuationType.AccentuationType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Normal";
	case 2:
		return "Heavy";
	}
	return "";
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "heavy":
		return 2;
	case "none":
		return 0;
	case "normal":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._AccidentalType = {};
alphaTab.model._AccidentalType.AccidentalType_Impl_ = $hx_exports["alphaTab"]["model"]["_AccidentalType"]["AccidentalType_Impl_"] = {};
alphaTab.model._AccidentalType.AccidentalType_Impl_.__name__ = ["alphaTab","model","_AccidentalType","AccidentalType_Impl_"];
alphaTab.model._AccidentalType.AccidentalType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Natural";
	case 2:
		return "Sharp";
	case 3:
		return "Flat";
	case 4:
		return "NaturalQuarterNoteUp";
	case 5:
		return "SharpQuarterNoteUp";
	case 6:
		return "FlatQuarterNoteUp";
	}
	return "";
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "flat":
		return 3;
	case "flatquarternoteup":
		return 6;
	case "natural":
		return 1;
	case "naturalquarternoteup":
		return 4;
	case "none":
		return 0;
	case "sharp":
		return 2;
	case "sharpquarternoteup":
		return 5;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Automation = $hx_exports["alphaTab"]["model"]["Automation"] = function() {
	this.isLinear = false;
	this.type = 0;
	this.value = 0.0;
	this.ratioPosition = 0.0;
	this.text = null;
};
alphaTab.model.Automation.__name__ = ["alphaTab","model","Automation"];
alphaTab.model.Automation.buildTempoAutomation = function(isLinear,ratioPosition,value,reference) {
	if(reference < 1 || reference > 5) {
		reference = 2;
	}
	var references = new Float32Array([1,0.5,1.0,1.5,2.0,3.0]);
	var automation = new alphaTab.model.Automation();
	automation.type = 0;
	automation.isLinear = isLinear;
	automation.ratioPosition = ratioPosition;
	automation.value = value * references[reference];
	return automation;
};
alphaTab.model.Automation.copyTo = function(src,dst) {
	dst.isLinear = src.isLinear;
	dst.ratioPosition = src.ratioPosition;
	dst.text = src.text;
	dst.type = src.type;
	dst.value = src.value;
};
alphaTab.model.Automation.prototype = {
	clone: function() {
		var a = new alphaTab.model.Automation();
		alphaTab.model.Automation.copyTo(this,a);
		return a;
	}
	,__class__: alphaTab.model.Automation
};
alphaTab.model._AutomationType = {};
alphaTab.model._AutomationType.AutomationType_Impl_ = $hx_exports["alphaTab"]["model"]["_AutomationType"]["AutomationType_Impl_"] = {};
alphaTab.model._AutomationType.AutomationType_Impl_.__name__ = ["alphaTab","model","_AutomationType","AutomationType_Impl_"];
alphaTab.model._AutomationType.AutomationType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Tempo";
	case 1:
		return "Volume";
	case 2:
		return "Instrument";
	case 3:
		return "Balance";
	}
	return "";
};
alphaTab.model._AutomationType.AutomationType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "balance":
		return 3;
	case "instrument":
		return 2;
	case "tempo":
		return 0;
	case "volume":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Bar = $hx_exports["alphaTab"]["model"]["Bar"] = function() {
	this.id = 0;
	this.index = 0;
	this.nextBar = null;
	this.previousBar = null;
	this.clef = 0;
	this.clefOttava = 0;
	this.staff = null;
	this.voices = null;
	this.simileMark = 0;
	this.id = alphaTab.model.Bar._globalBarId++;
	var this1 = [];
	this.voices = this1;
	this.clef = 4;
	this.clefOttava = 2;
	this.simileMark = 0;
};
alphaTab.model.Bar.__name__ = ["alphaTab","model","Bar"];
alphaTab.model.Bar.copyTo = function(src,dst) {
	dst.id = src.id;
	dst.index = src.index;
	dst.clef = src.clef;
	dst.clefOttava = src.clefOttava;
	dst.simileMark = src.simileMark;
};
alphaTab.model.Bar.prototype = {
	get_masterBar: function() {
		return this.staff.track.score.masterBars[this.index];
	}
	,get_isEmpty: function() {
		var i = 0;
		var j = this.voices.length;
		while(i < j) {
			if(!this.voices[i].isEmpty) {
				return false;
			}
			++i;
		}
		return true;
	}
	,addVoice: function(voice) {
		voice.bar = this;
		voice.index = this.voices.length;
		this.voices.push(voice);
	}
	,finish: function(settings) {
		var i = 0;
		var j = this.voices.length;
		while(i < j) {
			var voice = this.voices[i];
			voice.finish(settings);
			++i;
		}
	}
	,calculateDuration: function() {
		var duration = 0;
		var voice = $iterator(this.voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var voiceDuration = voice1.calculateDuration();
			if(voiceDuration > duration) {
				duration = voiceDuration;
			}
		}
		return duration;
	}
	,__class__: alphaTab.model.Bar
};
alphaTab.model.Beat = $hx_exports["alphaTab"]["model"]["Beat"] = function() {
	this.id = 0;
	this.index = 0;
	this.previousBeat = null;
	this.nextBeat = null;
	this.voice = null;
	this.notes = null;
	this.noteStringLookup = null;
	this.noteValueLookup = null;
	this.isEmpty = false;
	this.whammyStyle = 0;
	this.ottava = 0;
	this.fermata = null;
	this.isLegatoOrigin = false;
	this.minNote = null;
	this.maxNote = null;
	this.maxStringNote = null;
	this.minStringNote = null;
	this.duration = -4;
	this.isLetRing = false;
	this.isPalmMute = false;
	this.automations = null;
	this.dots = 0;
	this.fadeIn = false;
	this.lyrics = null;
	this.hasRasgueado = false;
	this.pop = false;
	this.slap = false;
	this.tap = false;
	this.text = null;
	this.brushType = 0;
	this.brushDuration = 0;
	this.tupletDenominator = 0;
	this.tupletNumerator = 0;
	this.tupletGroup = null;
	this.isContinuedWhammy = false;
	this.whammyBarType = 0;
	this.whammyBarPoints = null;
	this.maxWhammyPoint = null;
	this.minWhammyPoint = null;
	this.vibrato = 0;
	this.chordId = null;
	this.graceType = 0;
	this.pickStroke = 0;
	this.tremoloSpeed = null;
	this.crescendo = 0;
	this.displayStart = 0;
	this.playbackStart = 0;
	this.displayDuration = 0;
	this.playbackDuration = 0;
	this.dynamics = 0;
	this.invertBeamDirection = false;
	this.isEffectSlurOrigin = false;
	this.effectSlurOrigin = null;
	this.effectSlurDestination = null;
	this.id = alphaTab.model.Beat._globalBeatId++;
	this.whammyBarType = 0;
	var this1 = [];
	this.whammyBarPoints = this1;
	var this2 = [];
	this.notes = this2;
	this.brushType = 0;
	this.vibrato = 0;
	this.graceType = 0;
	this.pickStroke = 0;
	this.duration = 4;
	this.tremoloSpeed = null;
	var this3 = [];
	this.automations = this3;
	this.dots = 0;
	this.displayStart = 0;
	this.displayDuration = 0;
	this.playbackStart = 0;
	this.playbackDuration = 0;
	this.tupletDenominator = -1;
	this.tupletNumerator = -1;
	this.dynamics = 5;
	this.crescendo = 0;
	this.invertBeamDirection = false;
	this.ottava = 2;
	var this4 = {}
	this.noteStringLookup = this4;
	var this5 = {}
	this.noteValueLookup = this5;
	this.whammyStyle = 0;
};
alphaTab.model.Beat.__name__ = ["alphaTab","model","Beat"];
alphaTab.model.Beat.copyTo = function(src,dst) {
	dst.id = src.id;
	dst.index = src.index;
	dst.isEmpty = src.isEmpty;
	dst.duration = src.duration;
	dst.dots = src.dots;
	dst.fadeIn = src.fadeIn;
	if(src.lyrics != null) {
		var size = src.lyrics.length;
		var this1 = new Array(size);
		dst.lyrics = this1;
		var i = 0;
		while(i < src.lyrics.length) {
			dst.lyrics[i] = src.lyrics[i];
			++i;
		}
	}
	dst.pop = src.pop;
	dst.hasRasgueado = src.hasRasgueado;
	dst.slap = src.slap;
	dst.tap = src.tap;
	dst.text = src.text;
	dst.brushType = src.brushType;
	dst.brushDuration = src.brushDuration;
	dst.tupletDenominator = src.tupletDenominator;
	dst.tupletNumerator = src.tupletNumerator;
	dst.vibrato = src.vibrato;
	dst.chordId = src.chordId;
	dst.graceType = src.graceType;
	dst.pickStroke = src.pickStroke;
	dst.tremoloSpeed = src.tremoloSpeed;
	dst.crescendo = src.crescendo;
	dst.displayStart = src.displayStart;
	dst.displayDuration = src.displayDuration;
	dst.playbackStart = src.playbackStart;
	dst.playbackDuration = src.playbackDuration;
	dst.dynamics = src.dynamics;
	dst.isLegatoOrigin = src.isLegatoOrigin;
	dst.invertBeamDirection = src.invertBeamDirection;
	dst.whammyBarType = src.whammyBarType;
	dst.isContinuedWhammy = src.isContinuedWhammy;
	dst.ottava = src.ottava;
	dst.whammyStyle = src.whammyStyle;
};
alphaTab.model.Beat.prototype = {
	get_isLastOfVoice: function() {
		return this.index == this.voice.beats.length - 1;
	}
	,get_isLegatoDestination: function() {
		if(this.previousBeat != null) {
			return this.previousBeat.isLegatoOrigin;
		} else {
			return false;
		}
	}
	,get_isRest: function() {
		if(!this.isEmpty) {
			return this.notes.length == 0;
		} else {
			return true;
		}
	}
	,get_hasTuplet: function() {
		if(!(this.tupletDenominator == -1 && this.tupletNumerator == -1)) {
			return !(this.tupletDenominator == 1 && this.tupletNumerator == 1);
		} else {
			return false;
		}
	}
	,get_hasWhammyBar: function() {
		return this.whammyBarType != 0;
	}
	,get_hasChord: function() {
		return this.chordId != null;
	}
	,get_chord: function() {
		return this.voice.bar.staff.chords[this.chordId];
	}
	,get_isTremolo: function() {
		return this.tremoloSpeed != null;
	}
	,get_absoluteDisplayStart: function() {
		return this.voice.bar.get_masterBar().start + this.displayStart;
	}
	,get_absolutePlaybackStart: function() {
		return this.voice.bar.get_masterBar().start + this.playbackStart;
	}
	,get_isEffectSlurDestination: function() {
		return this.effectSlurOrigin != null;
	}
	,clone: function() {
		var beat = new alphaTab.model.Beat();
		var id = beat.id;
		var i = 0;
		var j = this.whammyBarPoints.length;
		while(i < j) {
			beat.addWhammyBarPoint(this.whammyBarPoints[i].clone());
			++i;
		}
		var i1 = 0;
		var j1 = this.notes.length;
		while(i1 < j1) {
			beat.addNoteInternal(this.notes[i1].clone(),this.notes[i1].get_realValue());
			++i1;
		}
		alphaTab.model.Beat.copyTo(this,beat);
		var i2 = 0;
		var j2 = this.automations.length;
		while(i2 < j2) {
			beat.automations.push(this.automations[i2].clone());
			++i2;
		}
		beat.id = id;
		return beat;
	}
	,addWhammyBarPoint: function(point) {
		this.whammyBarPoints.push(point);
		if(this.maxWhammyPoint == null || point.value > this.maxWhammyPoint.value) {
			this.maxWhammyPoint = point;
		}
		if(this.minWhammyPoint == null || point.value < this.minWhammyPoint.value) {
			this.minWhammyPoint = point;
		}
		if(this.whammyBarType == 0) {
			this.whammyBarType = 1;
		}
	}
	,removeWhammyBarPoint: function(index) {
		if(index < 0 || index >= this.whammyBarPoints.length) {
			return;
		}
		if(index != -1) {
			this.whammyBarPoints.splice(index,1);
		}
		var point = this.whammyBarPoints[index];
		if(point == this.maxWhammyPoint) {
			this.maxWhammyPoint = null;
			var currentPoint = $iterator(this.whammyBarPoints)();
			while(currentPoint.hasNext()) {
				var currentPoint1 = currentPoint.next();
				if(this.maxWhammyPoint == null || currentPoint1.value > this.maxWhammyPoint.value) {
					this.maxWhammyPoint = currentPoint1;
				}
			}
		}
		if(point == this.minWhammyPoint) {
			this.minWhammyPoint = null;
			var currentPoint2 = $iterator(this.whammyBarPoints)();
			while(currentPoint2.hasNext()) {
				var currentPoint3 = currentPoint2.next();
				if(this.minWhammyPoint == null || currentPoint3.value < this.minWhammyPoint.value) {
					this.minWhammyPoint = currentPoint3;
				}
			}
		}
	}
	,addNote: function(note) {
		this.addNoteInternal(note,-1);
	}
	,addNoteInternal: function(note,realValue) {
		if(realValue == null) {
			realValue = -1;
		}
		note.beat = this;
		note.index = this.notes.length;
		this.notes.push(note);
		if(note.get_isStringed()) {
			this.noteStringLookup[note.string] = note;
		}
		if(realValue == -1) {
			realValue = note.get_realValue();
		}
		this.noteValueLookup[realValue] = note;
	}
	,removeNote: function(note) {
		var index = this.notes.indexOf(note);
		if(index >= 0) {
			if(index != -1) {
				this.notes.splice(index,1);
			}
		}
	}
	,getAutomation: function(type) {
		var i = 0;
		var j = this.automations.length;
		while(i < j) {
			var automation = this.automations[i];
			if(automation.type == type) {
				return automation;
			}
			++i;
		}
		return null;
	}
	,getNoteOnString: function(string) {
		if(this.noteStringLookup.hasOwnProperty(string)) {
			return this.noteStringLookup[string];
		}
		return null;
	}
	,calculateDuration: function() {
		var ticks = alphaTab.audio.MidiUtils.toTicks(this.duration);
		if(this.dots == 2) {
			ticks = alphaTab.audio.MidiUtils.applyDot(ticks,true);
		} else if(this.dots == 1) {
			ticks = alphaTab.audio.MidiUtils.applyDot(ticks,false);
		}
		if(this.tupletDenominator > 0 && this.tupletNumerator >= 0) {
			ticks = alphaTab.audio.MidiUtils.applyTuplet(ticks,this.tupletNumerator,this.tupletDenominator);
		}
		return ticks;
	}
	,updateDurations: function() {
		var ticks = this.calculateDuration();
		this.playbackDuration = ticks;
		this.displayDuration = ticks;
		var _g = this.graceType;
		switch(_g) {
		case 1:case 2:
			var _g1 = this.duration;
			switch(_g1) {
			case 16:
				this.playbackDuration = alphaTab.audio.MidiUtils.toTicks(64);
				break;
			case 32:
				this.playbackDuration = alphaTab.audio.MidiUtils.toTicks(128);
				break;
			default:
				this.playbackDuration = alphaTab.audio.MidiUtils.toTicks(32);
			}
			break;
		case 3:
			this.playbackDuration = this.playbackDuration / 2 | 0;
			break;
		default:
			var previous = this.previousBeat;
			if(previous != null && previous.graceType == 3) {
				this.playbackDuration = previous.playbackDuration;
			} else {
				while(previous != null && previous.graceType == 1) {
					this.playbackDuration = this.playbackDuration - previous.playbackDuration;
					previous = previous.previousBeat;
				}
			}
		}
	}
	,finishTuplet: function() {
		var previousBeat = this.previousBeat;
		var currentTupletGroup = previousBeat != null ? previousBeat.tupletGroup : null;
		if(this.get_hasTuplet() || this.graceType != 0 && currentTupletGroup != null) {
			if(previousBeat == null || currentTupletGroup == null || !currentTupletGroup.check(this)) {
				currentTupletGroup = new alphaTab.model.TupletGroup(this.voice);
				currentTupletGroup.check(this);
			}
			this.tupletGroup = currentTupletGroup;
		}
	}
	,finish: function(settings) {
		var displayMode = settings == null ? 0 : settings.notation.notationMode;
		var isGradual = this.text == "grad" || this.text == "grad.";
		if(isGradual && displayMode == 1) {
			this.text = "";
		}
		var needCopyBeatForBend = false;
		this.minNote = null;
		this.maxNote = null;
		this.minStringNote = null;
		this.maxStringNote = null;
		var visibleNotes = 0;
		var isEffectSlurBeat = false;
		var i = 0;
		var j = this.notes.length;
		while(i < j) {
			var note = this.notes[i];
			note.finish(settings);
			if(note.isLetRing) {
				this.isLetRing = true;
			}
			if(note.isPalmMute) {
				this.isPalmMute = true;
			}
			if(displayMode == 1 && note.get_hasBend() && this.graceType != 3) {
				if(!note.get_isTieOrigin()) {
					var _g = note.bendType;
					switch(_g) {
					case 2:case 7:case 8:
						needCopyBeatForBend = true;
						break;
					default:
					}
				}
				if(isGradual || note.bendStyle == 1) {
					isGradual = true;
					note.bendStyle = 1;
					needCopyBeatForBend = false;
				} else {
					note.bendStyle = 2;
				}
			}
			if(note.isVisible) {
				++visibleNotes;
				if(this.minNote == null || note.get_realValue() < this.minNote.get_realValue()) {
					this.minNote = note;
				}
				if(this.maxNote == null || note.get_realValue() > this.maxNote.get_realValue()) {
					this.maxNote = note;
				}
				if(this.minStringNote == null || note.string < this.minStringNote.string) {
					this.minStringNote = note;
				}
				if(this.maxStringNote == null || note.string > this.maxStringNote.string) {
					this.maxStringNote = note;
				}
				if(note.hasEffectSlur) {
					isEffectSlurBeat = true;
				}
			}
			++i;
		}
		if(isEffectSlurBeat) {
			if(this.effectSlurOrigin != null) {
				this.effectSlurOrigin.effectSlurDestination = this.nextBeat;
				this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
				this.effectSlurOrigin = null;
			} else {
				this.isEffectSlurOrigin = true;
				this.effectSlurDestination = this.nextBeat;
				this.effectSlurDestination.effectSlurOrigin = this;
			}
		}
		if(this.notes.length > 0 && visibleNotes == 0) {
			this.isEmpty = true;
		}
		if(!this.get_isRest() && (!this.isLetRing || !this.isPalmMute)) {
			var currentBeat = this.previousBeat;
			while(currentBeat != null && currentBeat.get_isRest()) {
				if(!this.isLetRing) {
					currentBeat.isLetRing = false;
				}
				if(!this.isPalmMute) {
					currentBeat.isPalmMute = false;
				}
				currentBeat = currentBeat.previousBeat;
			}
		} else if(this.get_isRest() && this.previousBeat != null && settings != null && settings.notation.notationMode == 0) {
			if(this.previousBeat.isLetRing) {
				this.isLetRing = true;
			}
			if(this.previousBeat.isPalmMute) {
				this.isPalmMute = true;
			}
		}
		if(this.whammyBarPoints.length > 0 && this.whammyBarType == 1) {
			if(displayMode == 1) {
				this.whammyStyle = isGradual ? 1 : 2;
			}
			var isContinuedWhammy = this.isContinuedWhammy = this.previousBeat != null && this.previousBeat.get_hasWhammyBar();
			if(this.whammyBarPoints.length == 4) {
				var origin = this.whammyBarPoints[0];
				var middle1 = this.whammyBarPoints[1];
				var middle2 = this.whammyBarPoints[2];
				var destination = this.whammyBarPoints[3];
				if(middle1.value == middle2.value) {
					if(origin.value < middle1.value && middle1.value < destination.value || origin.value > middle1.value && middle1.value > destination.value) {
						if(origin.value != 0 && !isContinuedWhammy) {
							this.whammyBarType = 6;
						} else {
							this.whammyBarType = 2;
						}
						if(true) {
							this.whammyBarPoints.splice(2,1);
						}
						if(true) {
							this.whammyBarPoints.splice(1,1);
						}
					} else if(origin.value > middle1.value && middle1.value < destination.value || origin.value < middle1.value && middle1.value > destination.value) {
						this.whammyBarType = 3;
						if(middle1.offset == middle2.offset || displayMode == 1) {
							if(true) {
								this.whammyBarPoints.splice(2,1);
							}
						}
					} else if(origin.value == middle1.value && middle1.value == destination.value) {
						if(origin.value != 0 && !isContinuedWhammy) {
							this.whammyBarType = 5;
						} else {
							this.whammyBarType = 4;
						}
						if(true) {
							this.whammyBarPoints.splice(2,1);
						}
						if(true) {
							this.whammyBarPoints.splice(1,1);
						}
					} else {
						alphaTab.util.Logger.warning("Model","Unsupported whammy type detected, fallback to custom",null);
					}
				} else {
					alphaTab.util.Logger.warning("Model","Unsupported whammy type detected, fallback to custom",null);
				}
			}
		}
		this.updateDurations();
		if(needCopyBeatForBend) {
			var cloneBeat = this.clone();
			cloneBeat.id = alphaTab.model.Beat._globalBeatId++;
			var i1 = 0;
			var j1 = cloneBeat.notes.length;
			while(i1 < j1) {
				var cloneNote = cloneBeat.notes[i1];
				cloneNote.bendType = 0;
				cloneNote.maxBendPoint = null;
				var this1 = [];
				cloneNote.bendPoints = this1;
				cloneNote.bendStyle = 0;
				cloneNote.id = alphaTab.model.Note.GlobalNoteId++;
				var note1 = this.notes[i1];
				if(note1.get_hasBend() && note1.get_isTieOrigin()) {
					var tieDestination = alphaTab.model.Note.nextNoteOnSameLine(note1);
					if(tieDestination != null && tieDestination.get_hasBend()) {
						cloneNote.bendType = 5;
						var lastPoint = note1.bendPoints[note1.bendPoints.length - 1];
						cloneNote.addBendPoint(new alphaTab.model.BendPoint(0,lastPoint.value));
						cloneNote.addBendPoint(new alphaTab.model.BendPoint(60,lastPoint.value));
					}
				}
				cloneNote.isTieDestination = true;
				++i1;
			}
			this.graceType = 3;
			this.updateDurations();
			this.voice.insertBeat(this,cloneBeat);
		}
		this.fermata = this.voice.bar.get_masterBar().getFermata(this);
	}
	,isBefore: function(beat) {
		if(!(this.voice.bar.index < beat.voice.bar.index)) {
			if(beat.voice.bar.index == this.voice.bar.index) {
				return this.index < beat.index;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isAfter: function(beat) {
		if(!(this.voice.bar.index > beat.voice.bar.index)) {
			if(beat.voice.bar.index == this.voice.bar.index) {
				return this.index > beat.index;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,hasNoteOnString: function(noteString) {
		return this.noteStringLookup.hasOwnProperty(noteString);
	}
	,getNoteWithRealValue: function(noteRealValue) {
		if(this.noteValueLookup.hasOwnProperty(noteRealValue)) {
			return this.noteValueLookup[noteRealValue];
		}
		return null;
	}
	,__class__: alphaTab.model.Beat
};
alphaTab.model.BendPoint = $hx_exports["alphaTab"]["model"]["BendPoint"] = function(offset,value) {
	if(value == null) {
		value = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.offset = 0;
	this.value = 0;
	this.offset = offset;
	this.value = value;
};
alphaTab.model.BendPoint.__name__ = ["alphaTab","model","BendPoint"];
alphaTab.model.BendPoint.copyTo = function(src,dst) {
	dst.offset = src.offset;
	dst.value = src.value;
};
alphaTab.model.BendPoint.prototype = {
	clone: function() {
		var point = new alphaTab.model.BendPoint(0,0);
		alphaTab.model.BendPoint.copyTo(this,point);
		return point;
	}
	,__class__: alphaTab.model.BendPoint
};
alphaTab.model._BendStyle = {};
alphaTab.model._BendStyle.BendStyle_Impl_ = $hx_exports["alphaTab"]["model"]["_BendStyle"]["BendStyle_Impl_"] = {};
alphaTab.model._BendStyle.BendStyle_Impl_.__name__ = ["alphaTab","model","_BendStyle","BendStyle_Impl_"];
alphaTab.model._BendStyle.BendStyle_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._BendStyle.BendStyle_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendStyle.BendStyle_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendStyle.BendStyle_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BendStyle.BendStyle_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendStyle.BendStyle_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendStyle.BendStyle_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Default";
	case 1:
		return "Gradual";
	case 2:
		return "Fast";
	}
	return "";
};
alphaTab.model._BendStyle.BendStyle_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "default":
		return 0;
	case "fast":
		return 2;
	case "gradual":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._BendType = {};
alphaTab.model._BendType.BendType_Impl_ = $hx_exports["alphaTab"]["model"]["_BendType"]["BendType_Impl_"] = {};
alphaTab.model._BendType.BendType_Impl_.__name__ = ["alphaTab","model","_BendType","BendType_Impl_"];
alphaTab.model._BendType.BendType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._BendType.BendType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._BendType.BendType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._BendType.BendType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BendType.BendType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BendType.BendType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Custom";
	case 2:
		return "Bend";
	case 3:
		return "Release";
	case 4:
		return "BendRelease";
	case 5:
		return "Hold";
	case 6:
		return "Prebend";
	case 7:
		return "PrebendBend";
	case 8:
		return "PrebendRelease";
	}
	return "";
};
alphaTab.model._BendType.BendType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "bend":
		return 2;
	case "bendrelease":
		return 4;
	case "custom":
		return 1;
	case "hold":
		return 5;
	case "none":
		return 0;
	case "prebend":
		return 6;
	case "prebendbend":
		return 7;
	case "prebendrelease":
		return 8;
	case "release":
		return 3;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._BrushType = {};
alphaTab.model._BrushType.BrushType_Impl_ = $hx_exports["alphaTab"]["model"]["_BrushType"]["BrushType_Impl_"] = {};
alphaTab.model._BrushType.BrushType_Impl_.__name__ = ["alphaTab","model","_BrushType","BrushType_Impl_"];
alphaTab.model._BrushType.BrushType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._BrushType.BrushType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "BrushUp";
	case 2:
		return "BrushDown";
	case 3:
		return "ArpeggioUp";
	case 4:
		return "ArpeggioDown";
	}
	return "";
};
alphaTab.model._BrushType.BrushType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "arpeggiodown":
		return 4;
	case "arpeggioup":
		return 3;
	case "brushdown":
		return 2;
	case "brushup":
		return 1;
	case "none":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Chord = $hx_exports["alphaTab"]["model"]["Chord"] = function() {
	this.name = null;
	this.firstFret = 0;
	this.strings = null;
	this.barreFrets = null;
	this.staff = null;
	this.showName = false;
	this.showDiagram = false;
	this.showFingering = false;
	var this1 = [];
	this.strings = this1;
	var this2 = [];
	this.barreFrets = this2;
	this.showDiagram = true;
	this.showName = true;
	this.showFingering = true;
	this.firstFret = 1;
};
alphaTab.model.Chord.__name__ = ["alphaTab","model","Chord"];
alphaTab.model.Chord.copyTo = function(src,dst) {
	dst.firstFret = src.firstFret;
	dst.name = src.name;
	dst.strings = src.strings.slice(0);
	dst.barreFrets = src.barreFrets.slice(0);
	dst.showName = src.showName;
	dst.showDiagram = src.showDiagram;
	dst.showFingering = src.showFingering;
};
alphaTab.model.Chord.prototype = {
	__class__: alphaTab.model.Chord
};
alphaTab.model._Clef = {};
alphaTab.model._Clef.Clef_Impl_ = $hx_exports["alphaTab"]["model"]["_Clef"]["Clef_Impl_"] = {};
alphaTab.model._Clef.Clef_Impl_.__name__ = ["alphaTab","model","_Clef","Clef_Impl_"];
alphaTab.model._Clef.Clef_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Clef.Clef_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._Clef.Clef_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._Clef.Clef_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Clef.Clef_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Clef.Clef_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Neutral";
	case 1:
		return "C3";
	case 2:
		return "C4";
	case 3:
		return "F4";
	case 4:
		return "G2";
	}
	return "";
};
alphaTab.model._Clef.Clef_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "c3":
		return 1;
	case "c4":
		return 2;
	case "f4":
		return 3;
	case "g2":
		return 4;
	case "neutral":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._CrescendoType = {};
alphaTab.model._CrescendoType.CrescendoType_Impl_ = $hx_exports["alphaTab"]["model"]["_CrescendoType"]["CrescendoType_Impl_"] = {};
alphaTab.model._CrescendoType.CrescendoType_Impl_.__name__ = ["alphaTab","model","_CrescendoType","CrescendoType_Impl_"];
alphaTab.model._CrescendoType.CrescendoType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Crescendo";
	case 2:
		return "Decrescendo";
	}
	return "";
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "crescendo":
		return 1;
	case "decrescendo":
		return 2;
	case "none":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._Duration = {};
alphaTab.model._Duration.Duration_Impl_ = $hx_exports["alphaTab"]["model"]["_Duration"]["Duration_Impl_"] = {};
alphaTab.model._Duration.Duration_Impl_.__name__ = ["alphaTab","model","_Duration","Duration_Impl_"];
alphaTab.model._Duration.Duration_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Duration.Duration_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._Duration.Duration_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._Duration.Duration_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Duration.Duration_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Duration.Duration_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.toString = function(this1) {
	switch(this1) {
	case -4:
		return "QuadrupleWhole";
	case -2:
		return "DoubleWhole";
	case 1:
		return "Whole";
	case 2:
		return "Half";
	case 4:
		return "Quarter";
	case 8:
		return "Eighth";
	case 16:
		return "Sixteenth";
	case 32:
		return "ThirtySecond";
	case 64:
		return "SixtyFourth";
	case 128:
		return "OneHundredTwentyEighth";
	case 256:
		return "TwoHundredFiftySixth";
	}
	return "";
};
alphaTab.model._Duration.Duration_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "doublewhole":
		return -2;
	case "eighth":
		return 8;
	case "half":
		return 2;
	case "onehundredtwentyeighth":
		return 128;
	case "quadruplewhole":
		return -4;
	case "quarter":
		return 4;
	case "sixteenth":
		return 16;
	case "sixtyfourth":
		return 64;
	case "thirtysecond":
		return 32;
	case "twohundredfiftysixth":
		return 256;
	case "whole":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._DynamicValue = {};
alphaTab.model._DynamicValue.DynamicValue_Impl_ = $hx_exports["alphaTab"]["model"]["_DynamicValue"]["DynamicValue_Impl_"] = {};
alphaTab.model._DynamicValue.DynamicValue_Impl_.__name__ = ["alphaTab","model","_DynamicValue","DynamicValue_Impl_"];
alphaTab.model._DynamicValue.DynamicValue_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "PPP";
	case 1:
		return "PP";
	case 2:
		return "P";
	case 3:
		return "MP";
	case 4:
		return "MF";
	case 5:
		return "F";
	case 6:
		return "FF";
	case 7:
		return "FFF";
	}
	return "";
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "f":
		return 5;
	case "ff":
		return 6;
	case "fff":
		return 7;
	case "mf":
		return 4;
	case "mp":
		return 3;
	case "p":
		return 2;
	case "pp":
		return 1;
	case "ppp":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Fermata = $hx_exports["alphaTab"]["model"]["Fermata"] = function() {
	this.type = 0;
	this.length = 0.0;
};
alphaTab.model.Fermata.__name__ = ["alphaTab","model","Fermata"];
alphaTab.model.Fermata.copyTo = function(src,dst) {
	dst.type = src.type;
	dst.length = src.length;
};
alphaTab.model.Fermata.prototype = {
	__class__: alphaTab.model.Fermata
};
alphaTab.model._FermataType = {};
alphaTab.model._FermataType.FermataType_Impl_ = $hx_exports["alphaTab"]["model"]["_FermataType"]["FermataType_Impl_"] = {};
alphaTab.model._FermataType.FermataType_Impl_.__name__ = ["alphaTab","model","_FermataType","FermataType_Impl_"];
alphaTab.model._FermataType.FermataType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._FermataType.FermataType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._FermataType.FermataType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._FermataType.FermataType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._FermataType.FermataType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._FermataType.FermataType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._FermataType.FermataType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Short";
	case 1:
		return "Medium";
	case 2:
		return "Long";
	}
	return "";
};
alphaTab.model._FermataType.FermataType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "long":
		return 2;
	case "medium":
		return 1;
	case "short":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._Fingers = {};
alphaTab.model._Fingers.Fingers_Impl_ = $hx_exports["alphaTab"]["model"]["_Fingers"]["Fingers_Impl_"] = {};
alphaTab.model._Fingers.Fingers_Impl_.__name__ = ["alphaTab","model","_Fingers","Fingers_Impl_"];
alphaTab.model._Fingers.Fingers_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Fingers.Fingers_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.toString = function(this1) {
	switch(this1) {
	case -2:
		return "Unknown";
	case -1:
		return "NoOrDead";
	case 0:
		return "Thumb";
	case 1:
		return "IndexFinger";
	case 2:
		return "MiddleFinger";
	case 3:
		return "AnnularFinger";
	case 4:
		return "LittleFinger";
	}
	return "";
};
alphaTab.model._Fingers.Fingers_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "annularfinger":
		return 3;
	case "indexfinger":
		return 1;
	case "littlefinger":
		return 4;
	case "middlefinger":
		return 2;
	case "noordead":
		return -1;
	case "thumb":
		return 0;
	case "unknown":
		return -2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._GraceType = {};
alphaTab.model._GraceType.GraceType_Impl_ = $hx_exports["alphaTab"]["model"]["_GraceType"]["GraceType_Impl_"] = {};
alphaTab.model._GraceType.GraceType_Impl_.__name__ = ["alphaTab","model","_GraceType","GraceType_Impl_"];
alphaTab.model._GraceType.GraceType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._GraceType.GraceType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "OnBeat";
	case 2:
		return "BeforeBeat";
	case 3:
		return "BendGrace";
	}
	return "";
};
alphaTab.model._GraceType.GraceType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "beforebeat":
		return 2;
	case "bendgrace":
		return 3;
	case "none":
		return 0;
	case "onbeat":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._HarmonicType = {};
alphaTab.model._HarmonicType.HarmonicType_Impl_ = $hx_exports["alphaTab"]["model"]["_HarmonicType"]["HarmonicType_Impl_"] = {};
alphaTab.model._HarmonicType.HarmonicType_Impl_.__name__ = ["alphaTab","model","_HarmonicType","HarmonicType_Impl_"];
alphaTab.model._HarmonicType.HarmonicType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Natural";
	case 2:
		return "Artificial";
	case 3:
		return "Pinch";
	case 4:
		return "Tap";
	case 5:
		return "Semi";
	case 6:
		return "Feedback";
	}
	return "";
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "artificial":
		return 2;
	case "feedback":
		return 6;
	case "natural":
		return 1;
	case "none":
		return 0;
	case "pinch":
		return 3;
	case "semi":
		return 5;
	case "tap":
		return 4;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.JsonConverter = function() {
};
alphaTab.model.JsonConverter.__name__ = ["alphaTab","model","JsonConverter"];
alphaTab.model.JsonConverter.scoreToJson = function(score) {
	var obj = alphaTab.model.JsonConverter.scoreToJsObject(score);
	return JSON.stringify(obj,function(k,v) {
		if(ArrayBuffer.isView(v)) {
			return Array.apply([], v);
		}
		return v;
	});
};
alphaTab.model.JsonConverter.jsonToScore = function(json,settings) {
	return alphaTab.model.JsonConverter.jsObjectToScore(alphaTab.model.JsonConverter.jsObjectToScore(JSON.parse(json),settings),null);
};
alphaTab.model.JsonConverter.scoreToJsObject = function(score) {
	var score2 = {}
	alphaTab.model.Score.copyTo(score,score2);
	var this1 = [];
	score2.masterBars = this1;
	var this2 = [];
	score2.tracks = this2;
	score2.stylesheet = {}
	alphaTab.model.RenderStylesheet.copyTo(score.stylesheet,score2.stylesheet);
	var i = 0;
	while(i < score.masterBars.length) {
		var masterBar = score.masterBars[i];
		var masterBar2 = {}
		alphaTab.model.MasterBar.copyTo(masterBar,masterBar2);
		if(masterBar.tempoAutomation != null) {
			masterBar2.tempoAutomation = {}
			alphaTab.model.Automation.copyTo(masterBar.tempoAutomation,masterBar2.tempoAutomation);
		}
		if(masterBar.section != null) {
			masterBar2.section = {}
			alphaTab.model.Section.copyTo(masterBar.section,masterBar2.section);
		}
		masterBar2.fermata = {}
		var this3 = masterBar.fermata;
		var offset = $iterator(Object.keys(this3))();
		while(offset.hasNext()) {
			var offset1 = offset.next();
			var fermata = masterBar.fermata[offset1];
			var fermata2 = masterBar2.fermata[offset1] = {}
			alphaTab.model.Fermata.copyTo(fermata,fermata2);
		}
		score2.masterBars.push(masterBar2);
		++i;
	}
	var t = 0;
	while(t < score.tracks.length) {
		var track = score.tracks[t];
		var track2 = {}
		track2.color = {}
		alphaTab.model.Track.copyTo(track,track2);
		track2.playbackInfo = {}
		alphaTab.model.PlaybackInformation.copyTo(track.playbackInfo,track2.playbackInfo);
		var this4 = [];
		track2.staves = this4;
		var s = 0;
		while(s < track.staves.length) {
			var staff = track.staves[s];
			var staff2 = {}
			alphaTab.model.Staff.copyTo(staff,staff2);
			var this5 = {}
			staff2.chords = this5;
			var this6 = staff.chords;
			var key = $iterator(Object.keys(this6))();
			while(key.hasNext()) {
				var key1 = key.next();
				var chord = staff.chords[key1];
				var chord2 = {}
				alphaTab.model.Chord.copyTo(chord,chord2);
				staff2.chords[key1] = chord2;
			}
			var this7 = [];
			staff2.bars = this7;
			var b = 0;
			while(b < staff.bars.length) {
				var bar = staff.bars[b];
				var bar2 = {}
				alphaTab.model.Bar.copyTo(bar,bar2);
				var this8 = [];
				bar2.voices = this8;
				var v = 0;
				while(v < bar.voices.length) {
					var voice = bar.voices[v];
					var voice2 = {}
					alphaTab.model.Voice.copyTo(voice,voice2);
					var this9 = [];
					voice2.beats = this9;
					var bb = 0;
					while(bb < voice.beats.length) {
						var beat = voice.beats[bb];
						var dynamicBeat2 = {}
						var beat2 = dynamicBeat2;
						alphaTab.model.Beat.copyTo(beat,beat2);
						var this10 = [];
						beat2.automations = this10;
						var a = 0;
						while(a < beat.automations.length) {
							var automation = {}
							alphaTab.model.Automation.copyTo(beat.automations[a],automation);
							beat2.automations.push(automation);
							++a;
						}
						var this11 = [];
						beat2.whammyBarPoints = this11;
						var i1 = 0;
						while(i1 < beat.whammyBarPoints.length) {
							var point = {}
							alphaTab.model.BendPoint.copyTo(beat.whammyBarPoints[i1],point);
							beat2.whammyBarPoints.push(point);
							++i1;
						}
						var this12 = [];
						beat2.notes = this12;
						var n = 0;
						while(n < beat.notes.length) {
							var note = beat.notes[n];
							var dynamicNote2 = {}
							var note2 = dynamicNote2;
							alphaTab.model.Note.copyTo(note,note2);
							if(note.isTieDestination) {
								dynamicNote2.tieOriginId = note.tieOrigin.id;
							}
							if(note.get_isTieOrigin()) {
								dynamicNote2.tieDestinationId = note.tieDestination.id;
							}
							if(note.isSlurDestination) {
								dynamicNote2.slurOriginId = note.slurOrigin.id;
							}
							if(note.get_isSlurOrigin()) {
								dynamicNote2.slurDestinationId = note.slurDestination.id;
							}
							if(note.get_isHammerPullDestination()) {
								dynamicNote2.hammerPullOriginId = note.hammerPullOrigin.id;
							}
							if(note.isHammerPullOrigin) {
								dynamicNote2.hammerPullDestinationId = note.hammerPullDestination.id;
							}
							var this13 = [];
							note2.bendPoints = this13;
							var i2 = 0;
							while(i2 < note.bendPoints.length) {
								var point1 = {}
								alphaTab.model.BendPoint.copyTo(note.bendPoints[i2],point1);
								note2.bendPoints.push(point1);
								++i2;
							}
							beat2.notes.push(note2);
							++n;
						}
						voice2.beats.push(beat2);
						++bb;
					}
					bar2.voices.push(voice2);
					++v;
				}
				staff2.bars.push(bar2);
				++b;
			}
			track2.staves.push(staff2);
			++s;
		}
		score2.tracks.push(track2);
		++t;
	}
	return score2;
};
alphaTab.model.JsonConverter.jsObjectToScore = function(jsObject,settings) {
	var score = jsObject;
	var score2 = new alphaTab.model.Score();
	alphaTab.model.Score.copyTo(score,score2);
	alphaTab.model.RenderStylesheet.copyTo(score.stylesheet,score2.stylesheet);
	var this1 = {}
	var allNotes = this1;
	var this2 = [];
	var notesToLink = this2;
	var i = 0;
	while(i < score.masterBars.length) {
		var masterBar = score.masterBars[i];
		var masterBar2 = new alphaTab.model.MasterBar();
		alphaTab.model.MasterBar.copyTo(masterBar,masterBar2);
		if(masterBar.tempoAutomation != null) {
			masterBar2.tempoAutomation = new alphaTab.model.Automation();
			alphaTab.model.Automation.copyTo(masterBar.tempoAutomation,masterBar2.tempoAutomation);
		}
		if(masterBar.section != null) {
			masterBar2.section = new alphaTab.model.Section();
			alphaTab.model.Section.copyTo(masterBar.section,masterBar2.section);
		}
		var this3 = masterBar.fermata;
		var offset = $iterator(Object.keys(this3))();
		while(offset.hasNext()) {
			var offset1 = offset.next();
			var fermata = masterBar.fermata[offset1];
			var fermata2 = new alphaTab.model.Fermata();
			alphaTab.model.Fermata.copyTo(fermata,fermata2);
			masterBar2.addFermata(offset1,fermata2);
		}
		score2.addMasterBar(masterBar2);
		++i;
	}
	var t = 0;
	while(t < score.tracks.length) {
		var track = score.tracks[t];
		var track2 = new alphaTab.model.Track(track.staves.length);
		alphaTab.model.Track.copyTo(track,track2);
		score2.addTrack(track2);
		alphaTab.model.PlaybackInformation.copyTo(track.playbackInfo,track2.playbackInfo);
		var s = 0;
		while(s < track.staves.length) {
			var staff = track.staves[s];
			var staff2 = track2.staves[s];
			alphaTab.model.Staff.copyTo(staff,staff2);
			var this4 = staff.chords;
			var key = $iterator(Object.keys(this4))();
			while(key.hasNext()) {
				var key1 = key.next();
				var chord = staff.chords[key1];
				var chord2 = new alphaTab.model.Chord();
				alphaTab.model.Chord.copyTo(chord,chord2);
				staff2.addChord(key1,chord2);
			}
			var b = 0;
			while(b < staff.bars.length) {
				var bar = staff.bars[b];
				var bar2 = new alphaTab.model.Bar();
				alphaTab.model.Bar.copyTo(bar,bar2);
				staff2.addBar(bar2);
				var v = 0;
				while(v < bar.voices.length) {
					var voice = bar.voices[v];
					var voice2 = new alphaTab.model.Voice();
					alphaTab.model.Voice.copyTo(voice,voice2);
					bar2.addVoice(voice2);
					var bb = 0;
					while(bb < voice.beats.length) {
						var beat = voice.beats[bb];
						var beat2 = new alphaTab.model.Beat();
						alphaTab.model.Beat.copyTo(beat,beat2);
						voice2.addBeat(beat2);
						var a = 0;
						while(a < beat.automations.length) {
							var automation = new alphaTab.model.Automation();
							alphaTab.model.Automation.copyTo(beat.automations[a],automation);
							beat2.automations.push(automation);
							++a;
						}
						var i1 = 0;
						while(i1 < beat.whammyBarPoints.length) {
							var point = new alphaTab.model.BendPoint(0,0);
							alphaTab.model.BendPoint.copyTo(beat.whammyBarPoints[i1],point);
							beat2.addWhammyBarPoint(point);
							++i1;
						}
						var n = 0;
						while(n < beat.notes.length) {
							var note = beat.notes[n];
							var note2 = new alphaTab.model.Note();
							alphaTab.model.Note.copyTo(note,note2);
							beat2.addNote(note2);
							allNotes[note2.id] = note2;
							if("TieOriginId" in note) {
								note2["TieOriginId"] = note["TieOriginId"];
								notesToLink.push(note2);
							}
							if("TieDestinationId" in note) {
								note2["TieDestinationId"] = note["TieDestinationId"];
								notesToLink.push(note2);
							}
							if("SlurOriginId" in note) {
								note2["SlurOriginId"] = note["SlurOriginId"];
								notesToLink.push(note2);
							}
							if("SlurDestinationId" in note) {
								note2["SlurDestinationId"] = note["SlurDestinationId"];
								notesToLink.push(note2);
							}
							if("HammerPullDestinationId" in note) {
								note2["HammerPullDestinationId"] = note["HammerPullDestinationId"];
								notesToLink.push(note2);
							}
							if("HammerPullDestinationId" in note) {
								note2["HammerPullDestinationId"] = note["HammerPullDestinationId"];
								notesToLink.push(note2);
							}
							var i2 = 0;
							while(i2 < note.bendPoints.length) {
								var point1 = new alphaTab.model.BendPoint(0,0);
								alphaTab.model.BendPoint.copyTo(note.bendPoints[i2],point1);
								note2.addBendPoint(point1);
								++i2;
							}
							++n;
						}
						++bb;
					}
					++v;
				}
				++b;
			}
			++s;
		}
		++t;
	}
	var note1 = $iterator(notesToLink)();
	while(note1.hasNext()) {
		var note3 = note1.next();
		if("TieOriginId" in note3) {
			var originId = note3["TieOriginId"];
			note3.tieOrigin = allNotes[originId];
		}
		if("TieDestinationId" in note3) {
			var destinationId = note3["TieDestinationId"];
			note3.tieDestination = allNotes[destinationId];
		}
		if("SlurOriginId" in note3) {
			var originId1 = note3["SlurOriginId"];
			note3.slurOrigin = allNotes[originId1];
		}
		if("SlurDestinationId" in note3) {
			var destinationId1 = note3["SlurDestinationId"];
			note3.slurDestination = allNotes[destinationId1];
		}
		if("HammerPullOriginId" in note3) {
			var originId2 = note3["HammerPullOriginId"];
			note3.hammerPullOrigin = allNotes[originId2];
		}
		if("HammerPullDestinationId" in note3) {
			var destinationId2 = note3["HammerPullDestinationId"];
			note3.hammerPullDestination = allNotes[destinationId2];
		}
	}
	score2.finish(settings);
	return score2;
};
alphaTab.model.JsonConverter.jsObjectToMidiFile = function(midi) {
	var midi2 = new alphaTab.audio.synth.midi.MidiFile();
	midi2.division = midi.division;
	var midiEvents = midi.events;
	var midiEvent = $iterator(midiEvents)();
	while(midiEvent.hasNext()) {
		var midiEvent1 = midiEvent.next();
		var tick = midiEvent1.tick;
		var message = midiEvent1.message;
		var midiEvent2;
		var _g = midiEvent1.type;
		switch(_g) {
		case "alphaTab.audio.synth.midi.event.MetaDataEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,0,0,midiEvent1.data);
			midiEvent2.message = message;
			break;
		case "alphaTab.audio.synth.midi.event.MetaNumberEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaNumberEvent(tick,0,0,midiEvent1.value);
			midiEvent2.message = message;
			break;
		case "alphaTab.audio.synth.midi.event.SystemExclusiveEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(tick,0,0,midiEvent1.data);
			midiEvent2.message = message;
			break;
		default:
			midiEvent2 = new alphaTab.audio.synth.midi.event.MidiEvent(tick,0,0,0);
			midiEvent2.message = message;
		}
		midi2.events.push(midiEvent2);
	}
	return midi2;
};
alphaTab.model.JsonConverter.midiFileToJsObject = function(midi) {
	var midi2 = {}
	midi2.division = midi.division;
	var this1 = [];
	var midiEvents = this1;
	midi2.events = midiEvents;
	var midiEvent = $iterator(midi.events)();
	while(midiEvent.hasNext()) {
		var midiEvent1 = midiEvent.next();
		var midiEvent2 = {}
		midiEvents.push(midiEvent2);
		midiEvent2.type = Type.getClassName(midiEvent1 == null ? null : js.Boot.getClass(midiEvent1));
		midiEvent2.tick = midiEvent1.tick;
		midiEvent2.message = midiEvent1.message;
		var _g = midiEvent2.type;
		switch(_g) {
		case "alphaTab.audio.synth.midi.event.MetaDataEvent":
			var metadata = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.MetaDataEvent);
			midiEvent2.data = metadata.data;
			break;
		case "alphaTab.audio.synth.midi.event.MetaNumberEvent":
			var metanumber = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.MetaNumberEvent);
			midiEvent2.value = metanumber.value;
			break;
		case "alphaTab.audio.synth.midi.event.SystemExclusiveEvent":
			var sysex = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.SystemExclusiveEvent);
			midiEvent2.data = sysex.data;
			break;
		default:
		}
	}
	return midi2;
};
alphaTab.model.JsonConverter.prototype = {
	__class__: alphaTab.model.JsonConverter
};
alphaTab.model._KeySignature = {};
alphaTab.model._KeySignature.KeySignature_Impl_ = $hx_exports["alphaTab"]["model"]["_KeySignature"]["KeySignature_Impl_"] = {};
alphaTab.model._KeySignature.KeySignature_Impl_.__name__ = ["alphaTab","model","_KeySignature","KeySignature_Impl_"];
alphaTab.model._KeySignature.KeySignature_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._KeySignature.KeySignature_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignature.KeySignature_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignature.KeySignature_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._KeySignature.KeySignature_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignature.KeySignature_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignature.KeySignature_Impl_.toString = function(this1) {
	switch(this1) {
	case -7:
		return "Cb";
	case -6:
		return "Gb";
	case -5:
		return "Db";
	case -4:
		return "Ab";
	case -3:
		return "Eb";
	case -2:
		return "Bb";
	case -1:
		return "F";
	case 0:
		return "C";
	case 1:
		return "G";
	case 2:
		return "D";
	case 3:
		return "A";
	case 4:
		return "E";
	case 5:
		return "B";
	case 6:
		return "FSharp";
	case 7:
		return "CSharp";
	}
	return "";
};
alphaTab.model._KeySignature.KeySignature_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "a":
		return 3;
	case "ab":
		return -4;
	case "b":
		return 5;
	case "bb":
		return -2;
	case "c":
		return 0;
	case "cb":
		return -7;
	case "csharp":
		return 7;
	case "d":
		return 2;
	case "db":
		return -5;
	case "e":
		return 4;
	case "eb":
		return -3;
	case "f":
		return -1;
	case "fsharp":
		return 6;
	case "g":
		return 1;
	case "gb":
		return -6;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._KeySignatureType = {};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_ = $hx_exports["alphaTab"]["model"]["_KeySignatureType"]["KeySignatureType_Impl_"] = {};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.__name__ = ["alphaTab","model","_KeySignatureType","KeySignatureType_Impl_"];
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Major";
	case 1:
		return "Minor";
	}
	return "";
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "major":
		return 0;
	case "minor":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Lyrics = $hx_exports["alphaTab"]["model"]["Lyrics"] = function() {
	this.startBar = 0;
	this.text = null;
	this.chunks = null;
};
alphaTab.model.Lyrics.__name__ = ["alphaTab","model","Lyrics"];
alphaTab.model.Lyrics.prototype = {
	finish: function() {
		var this1 = [];
		var chunks = this1;
		this.parse(this.text,0,chunks);
		this.chunks = chunks;
	}
	,parse: function(str,p,chunks) {
		if(str == null || str.length == 0) {
			return;
		}
		var state = 1;
		var next = 1;
		var skipSpace = false;
		var start = 0;
		while(p < str.length) {
			var this1 = system.Convert.toUInt16(HxOverrides.cca(str,p));
			var this2 = this1;
			var c = this2;
			switch(state) {
			case 0:
				switch(c) {
				case 9:case 10:case 13:
					break;
				case 32:
					if(!skipSpace) {
						state = next;
						continue;
					}
					break;
				default:
					skipSpace = false;
					state = next;
					continue;
				}
				break;
			case 1:
				if(c == 91) {
					state = 3;
				} else {
					start = p;
					state = 2;
					continue;
				}
				break;
			case 2:
				switch(c) {
				case 10:case 13:case 32:
					var txt = HxOverrides.substr(str,start,p - start);
					chunks.push(this.prepareChunk(txt));
					state = 0;
					next = 1;
					break;
				case 45:
					state = 4;
					break;
				default:
				}
				break;
			case 3:
				if(c == 93) {
					state = 1;
				}
				break;
			case 4:
				if(c != 45) {
					var txt1 = HxOverrides.substr(str,start,p - start);
					chunks.push(this.prepareChunk(txt1));
					skipSpace = true;
					state = 0;
					next = 1;
					continue;
				}
				break;
			default:
			}
			++p;
		}
		if(state == 2) {
			if(p != start) {
				chunks.push(HxOverrides.substr(str,start,p - start));
			}
		}
	}
	,prepareChunk: function(txt) {
		return StringTools.replace(txt,"+"," ");
	}
	,__class__: alphaTab.model.Lyrics
};
alphaTab.model._Lyrics_LyricsState = {};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_ = {};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.__name__ = ["alphaTab","model","_Lyrics_LyricsState","Lyrics_LyricsState_Impl_"];
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "IgnoreSpaces";
	case 1:
		return "Begin";
	case 2:
		return "Text";
	case 3:
		return "Comment";
	case 4:
		return "Dash";
	}
	return "";
};
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "begin":
		return 1;
	case "comment":
		return 3;
	case "dash":
		return 4;
	case "ignorespaces":
		return 0;
	case "text":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.MasterBar = $hx_exports["alphaTab"]["model"]["MasterBar"] = function() {
	this.alternateEndings = 0;
	this.nextMasterBar = null;
	this.previousMasterBar = null;
	this.index = 0;
	this.keySignature = 0;
	this.keySignatureType = 0;
	this.isDoubleBar = false;
	this.isRepeatStart = false;
	this.repeatCount = 0;
	this.repeatGroup = null;
	this.timeSignatureNumerator = 0;
	this.timeSignatureDenominator = 0;
	this.timeSignatureCommon = false;
	this.tripletFeel = 0;
	this.section = null;
	this.tempoAutomation = null;
	this.score = null;
	this.fermata = null;
	this.start = 0;
	this.isAnacrusis = false;
	this.timeSignatureDenominator = 4;
	this.timeSignatureNumerator = 4;
	this.tripletFeel = 0;
	this.keySignatureType = 0;
	this.timeSignatureCommon = false;
	var this1 = {}
	this.fermata = this1;
};
alphaTab.model.MasterBar.__name__ = ["alphaTab","model","MasterBar"];
alphaTab.model.MasterBar.copyTo = function(src,dst) {
	dst.isAnacrusis = src.isAnacrusis;
	dst.alternateEndings = src.alternateEndings;
	dst.index = src.index;
	dst.keySignature = src.keySignature;
	dst.keySignatureType = src.keySignatureType;
	dst.isDoubleBar = src.isDoubleBar;
	dst.isRepeatStart = src.isRepeatStart;
	dst.repeatCount = src.repeatCount;
	dst.timeSignatureNumerator = src.timeSignatureNumerator;
	dst.timeSignatureDenominator = src.timeSignatureDenominator;
	dst.timeSignatureCommon = src.timeSignatureCommon;
	dst.tripletFeel = src.tripletFeel;
	dst.start = src.start;
};
alphaTab.model.MasterBar.prototype = {
	get_isRepeatEnd: function() {
		return this.repeatCount > 0;
	}
	,get_isSectionStart: function() {
		return this.section != null;
	}
	,calculateDuration: function() {
		if(this.isAnacrusis) {
			var duration = 0;
			var track = $iterator(this.score.tracks)();
			while(track.hasNext()) {
				var track1 = track.next();
				var staff = $iterator(track1.staves)();
				while(staff.hasNext()) {
					var staff1 = staff.next();
					var barDuration = staff1.bars[0].calculateDuration();
					if(barDuration > duration) {
						duration = barDuration;
					}
				}
			}
			return duration;
		}
		return this.timeSignatureNumerator * alphaTab.audio.MidiUtils.valueToTicks(this.timeSignatureDenominator);
	}
	,addFermata: function(offset,fermata) {
		this.fermata[offset] = fermata;
	}
	,getFermata: function(beat) {
		if(this.fermata.hasOwnProperty(beat.playbackStart)) {
			return this.fermata[beat.playbackStart];
		}
		return null;
	}
	,__class__: alphaTab.model.MasterBar
};
alphaTab.model.ModelUtils = function() { };
alphaTab.model.ModelUtils.__name__ = ["alphaTab","model","ModelUtils"];
alphaTab.model.ModelUtils.getIndex = function(duration) {
	var index = 0;
	var value = duration;
	if(value < 0) {
		return index;
	}
	var this1 = duration;
	return system.Convert.toInt32_Single(Math.log2(this1));
};
alphaTab.model.ModelUtils.keySignatureIsFlat = function(ks) {
	return ks < 0;
};
alphaTab.model.ModelUtils.keySignatureIsNatural = function(ks) {
	return ks == 0;
};
alphaTab.model.ModelUtils.keySignatureIsSharp = function(ks) {
	return ks > 0;
};
alphaTab.model.ModelUtils.applyPitchOffsets = function(settings,score) {
	var i = 0;
	while(i < score.tracks.length) {
		if(i < settings.notation.displayTranspositionPitches.length) {
			var staff = $iterator(score.tracks[i].staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.displayTranspositionPitch = -settings.notation.displayTranspositionPitches[i];
			}
		}
		if(i < settings.notation.transpositionPitches.length) {
			var staff2 = $iterator(score.tracks[i].staves)();
			while(staff2.hasNext()) {
				var staff3 = staff2.next();
				staff3.transpositionPitch = -settings.notation.transpositionPitches[i];
			}
		}
		++i;
	}
};
alphaTab.model.ModelUtils.fingerToString = function(settings,beat,finger,leftHand) {
	if(settings.notation.fingeringMode == 1 || settings.notation.fingeringMode == 3 || alphaTab.audio.GeneralMidi.isPiano(beat.voice.bar.staff.track.playbackInfo.program)) {
		switch(finger) {
		case -2:case -1:
			return null;
		case 0:
			return "1";
		case 1:
			return "2";
		case 2:
			return "3";
		case 3:
			return "4";
		case 4:
			return "5";
		default:
			return null;
		}
	}
	if(leftHand) {
		switch(finger) {
		case -2:case -1:
			return "0";
		case 0:
			return "T";
		case 1:
			return "1";
		case 2:
			return "2";
		case 3:
			return "3";
		case 4:
			return "4";
		default:
			return null;
		}
	}
	switch(finger) {
	case -2:case -1:
		return null;
	case 0:
		return "p";
	case 1:
		return "i";
	case 2:
		return "m";
	case 3:
		return "a";
	case 4:
		return "c";
	default:
		return null;
	}
};
alphaTab.model.Note = $hx_exports["alphaTab"]["model"]["Note"] = function() {
	this.id = 0;
	this.index = 0;
	this.accentuated = 0;
	this.bendType = 0;
	this.bendStyle = 0;
	this.bendOrigin = null;
	this.isContinuedBend = false;
	this.bendPoints = null;
	this.maxBendPoint = null;
	this.fret = 0;
	this.string = 0;
	this.octave = 0;
	this.tone = 0;
	this.element = 0;
	this.variation = 0;
	this.isVisible = false;
	this.isHammerPullOrigin = false;
	this.hammerPullOrigin = null;
	this.hammerPullDestination = null;
	this.isSlurDestination = false;
	this.slurOrigin = null;
	this.slurDestination = null;
	this.harmonicType = 0;
	this.harmonicValue = 0.0;
	this.isGhost = false;
	this.isLetRing = false;
	this.letRingDestination = null;
	this.isPalmMute = false;
	this.palmMuteDestination = null;
	this.isDead = false;
	this.isStaccato = false;
	this.slideInType = 0;
	this.slideOutType = 0;
	this.slideTarget = null;
	this.vibrato = 0;
	this.tieOrigin = null;
	this.tieDestination = null;
	this.isTieDestination = false;
	this.leftHandFinger = 0;
	this.rightHandFinger = 0;
	this.isFingering = false;
	this.trillValue = 0;
	this.trillSpeed = -4;
	this.durationPercent = 0.0;
	this.accidentalMode = 0;
	this.beat = null;
	this.dynamics = 0;
	this.isEffectSlurOrigin = false;
	this.hasEffectSlur = false;
	this.effectSlurOrigin = null;
	this.effectSlurDestination = null;
	this.id = alphaTab.model.Note.GlobalNoteId++;
	this.bendType = 0;
	this.bendStyle = 0;
	var this1 = [];
	this.bendPoints = this1;
	this.dynamics = 5;
	this.accentuated = 0;
	this.fret = -2147483648;
	this.harmonicType = 0;
	this.slideInType = 0;
	this.slideOutType = 0;
	this.vibrato = 0;
	this.leftHandFinger = -2;
	this.rightHandFinger = -2;
	this.trillValue = -1;
	this.trillSpeed = 32;
	this.durationPercent = 1;
	this.octave = -1;
	this.tone = -1;
	this.fret = -1;
	this.string = -1;
	this.element = -1;
	this.variation = -1;
	this.isVisible = true;
};
alphaTab.model.Note.__name__ = ["alphaTab","model","Note"];
alphaTab.model.Note.getStringTuning = function(staff,noteString) {
	if(staff.tuning.length > 0) {
		return staff.tuning[staff.tuning.length - (noteString - 1) - 1];
	}
	return 0;
};
alphaTab.model.Note.copyTo = function(src,dst) {
	dst.id = src.id;
	dst.accentuated = src.accentuated;
	dst.fret = src.fret;
	dst.string = src.string;
	dst.harmonicValue = src.harmonicValue;
	dst.harmonicType = src.harmonicType;
	dst.isGhost = src.isGhost;
	dst.isLetRing = src.isLetRing;
	dst.isPalmMute = src.isPalmMute;
	dst.isDead = src.isDead;
	dst.isStaccato = src.isStaccato;
	dst.slideInType = src.slideInType;
	dst.slideOutType = src.slideOutType;
	dst.vibrato = src.vibrato;
	dst.isTieDestination = src.isTieDestination;
	dst.isSlurDestination = src.isSlurDestination;
	dst.isHammerPullOrigin = src.isHammerPullOrigin;
	dst.leftHandFinger = src.leftHandFinger;
	dst.rightHandFinger = src.rightHandFinger;
	dst.isFingering = src.isFingering;
	dst.trillValue = src.trillValue;
	dst.trillSpeed = src.trillSpeed;
	dst.durationPercent = src.durationPercent;
	dst.accidentalMode = src.accidentalMode;
	dst.dynamics = src.dynamics;
	dst.octave = src.octave;
	dst.tone = src.tone;
	dst.element = src.element;
	dst.variation = src.variation;
	dst.bendType = src.bendType;
	dst.bendStyle = src.bendStyle;
	dst.isContinuedBend = src.isContinuedBend;
	dst.isVisible = src.isVisible;
};
alphaTab.model.Note.nextNoteOnSameLine = function(note) {
	var nextBeat = note.beat.nextBeat;
	while(nextBeat != null && nextBeat.voice.bar.index <= note.beat.voice.bar.index + 3) {
		var noteOnString = nextBeat.getNoteOnString(note.string);
		if(noteOnString != null) {
			return noteOnString;
		}
		nextBeat = nextBeat.nextBeat;
	}
	return null;
};
alphaTab.model.Note.findTieOrigin = function(note) {
	var previousBeat = note.beat.previousBeat;
	while(previousBeat != null && previousBeat.voice.bar.index >= note.beat.voice.bar.index - 3) {
		if(note.get_isStringed()) {
			var noteOnString = previousBeat.getNoteOnString(note.string);
			if(noteOnString != null) {
				return noteOnString;
			}
		} else if(note.octave == -1 && note.tone == -1) {
			if(note.index < previousBeat.notes.length) {
				return previousBeat.notes[note.index];
			}
		} else {
			var noteWithValue = previousBeat.getNoteWithRealValue(note.get_realValue());
			if(noteWithValue != null) {
				return noteWithValue;
			}
		}
		previousBeat = previousBeat.previousBeat;
	}
	return null;
};
alphaTab.model.Note.prototype = {
	get_hasBend: function() {
		return this.bendType != 0;
	}
	,get_isStringed: function() {
		return this.string >= 0;
	}
	,get_isPiano: function() {
		if(!this.get_isStringed() && this.octave >= 0) {
			return this.tone >= 0;
		} else {
			return false;
		}
	}
	,get_isPercussion: function() {
		if(!this.get_isStringed() && this.element >= 0) {
			return this.variation >= 0;
		} else {
			return false;
		}
	}
	,get_isHammerPullDestination: function() {
		return this.hammerPullOrigin != null;
	}
	,get_isSlurOrigin: function() {
		return this.slurDestination != null;
	}
	,get_isHarmonic: function() {
		return this.harmonicType != 0;
	}
	,get_isTieOrigin: function() {
		return this.tieDestination != null;
	}
	,get_trillFret: function() {
		return this.trillValue - this.get_stringTuning();
	}
	,get_isTrill: function() {
		return this.trillValue >= 0;
	}
	,get_isEffectSlurDestination: function() {
		return this.effectSlurOrigin != null;
	}
	,get_stringTuning: function() {
		return this.beat.voice.bar.staff.capo + alphaTab.model.Note.getStringTuning(this.beat.voice.bar.staff,this.string);
	}
	,get_realValue: function() {
		if(this.get_isPercussion()) {
			return alphaTab.rendering.utils.PercussionMapper.midiFromElementVariation(this);
		}
		if(this.get_isStringed()) {
			if(this.harmonicType == 1) {
				return this.get_harmonicPitch() + this.get_stringTuning() - this.beat.voice.bar.staff.transpositionPitch;
			}
			return this.fret + this.get_stringTuning() - this.beat.voice.bar.staff.transpositionPitch + this.get_harmonicPitch();
		}
		if(this.get_isPiano()) {
			return this.octave * 12 + this.tone - this.beat.voice.bar.staff.transpositionPitch;
		}
		return 0;
	}
	,get_harmonicPitch: function() {
		if(this.harmonicType == 0 || !this.get_isStringed()) {
			return 0;
		}
		var value = this.harmonicValue;
		if(alphaTab.platform.Platform.isAlmostEqualTo(value,2.4)) {
			return 36;
		}
		if(alphaTab.platform.Platform.isAlmostEqualTo(value,2.7)) {
			return 34;
		}
		if(value < 3) {
			return 0;
		}
		if(value <= 3.5) {
			return 31;
		}
		if(value <= 4) {
			return 28;
		}
		if(value <= 5) {
			return 24;
		}
		if(value <= 6) {
			return 34;
		}
		if(value <= 7) {
			return 19;
		}
		if(value <= 8.5) {
			return 36;
		}
		if(value <= 9) {
			return 28;
		}
		if(value <= 10) {
			return 34;
		}
		if(value <= 11) {
			return 0;
		}
		if(value <= 12) {
			return 12;
		}
		if(value < 14) {
			return 0;
		}
		if(value <= 15) {
			return 34;
		}
		if(value <= 16) {
			return 28;
		}
		if(value <= 17) {
			return 36;
		}
		if(value <= 18) {
			return 0;
		}
		if(value <= 19) {
			return 19;
		}
		if(value <= 21) {
			return 0;
		}
		if(value <= 22) {
			return 36;
		}
		if(value <= 24) {
			return 24;
		}
		return 0;
	}
	,get_displayValue: function() {
		var noteValue = this.get_displayValueWithoutBend();
		if(this.get_hasBend()) {
			noteValue = noteValue + (this.bendPoints[0].value / 2 | 0);
		} else if(this.bendOrigin != null) {
			noteValue = noteValue + (this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value / 2 | 0);
		} else if(this.isTieDestination && this.tieOrigin.bendOrigin != null) {
			noteValue = noteValue + (this.tieOrigin.bendOrigin.bendPoints[this.tieOrigin.bendOrigin.bendPoints.length - 1].value / 2 | 0);
		} else if(this.beat.get_hasWhammyBar()) {
			noteValue = noteValue + (this.beat.whammyBarPoints[0].value / 2 | 0);
		} else if(this.beat.isContinuedWhammy) {
			noteValue = noteValue + (this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value / 2 | 0);
		}
		return noteValue;
	}
	,get_displayValueWithoutBend: function() {
		var noteValue = this.get_realValue();
		if(this.harmonicType != 1 && this.harmonicType != 0) {
			noteValue = noteValue - this.get_harmonicPitch();
		}
		var _g = this.beat.ottava;
		switch(_g) {
		case 0:
			noteValue = noteValue - 24;
			break;
		case 1:
			noteValue = noteValue - 12;
			break;
		case 2:
			break;
		case 3:
			noteValue = noteValue + 12;
			break;
		case 4:
			noteValue = noteValue + 24;
			break;
		default:
		}
		var _g1 = this.beat.voice.bar.clefOttava;
		switch(_g1) {
		case 0:
			noteValue = noteValue - 24;
			break;
		case 1:
			noteValue = noteValue - 12;
			break;
		case 2:
			break;
		case 3:
			noteValue = noteValue + 12;
			break;
		case 4:
			noteValue = noteValue + 24;
			break;
		default:
		}
		return noteValue - this.beat.voice.bar.staff.displayTranspositionPitch;
	}
	,get_hasQuarterToneOffset: function() {
		if(this.get_hasBend()) {
			return this.bendPoints[0].value % 2 != 0;
		}
		if(this.bendOrigin != null) {
			return this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value % 2 != 0;
		}
		if(this.beat.get_hasWhammyBar()) {
			return this.beat.whammyBarPoints[0].value % 2 != 0;
		}
		if(this.beat.isContinuedWhammy) {
			return this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value % 2 != 0;
		}
		return false;
	}
	,clone: function() {
		var n = new alphaTab.model.Note();
		var id = n.id;
		alphaTab.model.Note.copyTo(this,n);
		var i = 0;
		var j = this.bendPoints.length;
		while(i < j) {
			n.addBendPoint(this.bendPoints[i].clone());
			++i;
		}
		n.id = id;
		return n;
	}
	,addBendPoint: function(point) {
		this.bendPoints.push(point);
		if(this.maxBendPoint == null || point.value > this.maxBendPoint.value) {
			this.maxBendPoint = point;
		}
		if(this.bendType == 0) {
			this.bendType = 1;
		}
	}
	,finish: function(settings) {
		var _gthis = this;
		var nextNoteOnLine = new alphaTab.util.Lazy(function() {
			return alphaTab.model.Note.nextNoteOnSameLine(_gthis);
		});
		var isSongBook = settings != null && settings.notation.notationMode == 1;
		if(this.isTieDestination) {
			if(this.tieOrigin != null) {
				this.tieOrigin.tieDestination = this;
			} else {
				var tieOrigin = alphaTab.model.Note.findTieOrigin(this);
				if(tieOrigin == null) {
					this.isTieDestination = false;
				} else {
					this.tieOrigin = tieOrigin;
					this.tieOrigin.tieDestination = this;
					this.fret = this.tieOrigin.fret;
					this.octave = this.tieOrigin.octave;
					this.tone = this.tieOrigin.tone;
					if(this.tieOrigin.get_hasBend()) {
						this.bendOrigin = this.tieOrigin;
					}
				}
			}
			if(isSongBook && this.tieOrigin.isLetRing) {
				this.isLetRing = true;
			}
		}
		if(this.isLetRing) {
			if(nextNoteOnLine.get_value() == null || !nextNoteOnLine.get_value().isLetRing) {
				this.letRingDestination = this;
			} else {
				this.letRingDestination = nextNoteOnLine.get_value();
			}
			if(isSongBook && this.isTieDestination && !this.tieOrigin.get_hasBend()) {
				this.isVisible = false;
			}
		}
		if(this.isPalmMute) {
			if(nextNoteOnLine.get_value() == null || !nextNoteOnLine.get_value().isPalmMute) {
				this.palmMuteDestination = this;
			} else {
				this.palmMuteDestination = nextNoteOnLine.get_value();
			}
		}
		if(this.isHammerPullOrigin) {
			if(nextNoteOnLine.get_value() == null) {
				this.isHammerPullOrigin = false;
			} else {
				this.hammerPullDestination = nextNoteOnLine.get_value();
				this.hammerPullDestination.hammerPullOrigin = this;
			}
		}
		var _g = this.slideOutType;
		switch(_g) {
		case 1:case 2:
			this.slideTarget = nextNoteOnLine.get_value();
			if(this.slideTarget == null) {
				this.slideOutType = 0;
			}
			break;
		default:
		}
		var effectSlurDestination = null;
		if(this.isHammerPullOrigin) {
			effectSlurDestination = this.hammerPullDestination;
		} else if(this.slideOutType == 2 && this.slideTarget != null) {
			effectSlurDestination = this.slideTarget;
		}
		if(effectSlurDestination != null) {
			this.hasEffectSlur = true;
			if(this.effectSlurOrigin != null) {
				this.effectSlurOrigin.effectSlurDestination = effectSlurDestination;
				this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
				this.effectSlurOrigin = null;
			} else {
				this.isEffectSlurOrigin = true;
				this.effectSlurDestination = effectSlurDestination;
				this.effectSlurDestination.effectSlurOrigin = this;
			}
		}
		if(this.bendPoints.length > 0 && this.bendType == 1) {
			var isContinuedBend = this.isContinuedBend = this.tieOrigin != null && this.tieOrigin.get_hasBend();
			if(this.bendPoints.length == 4) {
				var origin = this.bendPoints[0];
				var middle1 = this.bendPoints[1];
				var middle2 = this.bendPoints[2];
				var destination = this.bendPoints[3];
				if(middle1.value == middle2.value) {
					if(destination.value > origin.value) {
						if(middle1.value > destination.value) {
							this.bendType = 4;
						} else if(!isContinuedBend && origin.value > 0) {
							this.bendType = 7;
							if(true) {
								this.bendPoints.splice(2,1);
							}
							if(true) {
								this.bendPoints.splice(1,1);
							}
						} else {
							this.bendType = 2;
							if(true) {
								this.bendPoints.splice(2,1);
							}
							if(true) {
								this.bendPoints.splice(1,1);
							}
						}
					} else if(destination.value < origin.value) {
						if(isContinuedBend) {
							this.bendType = 3;
							if(true) {
								this.bendPoints.splice(2,1);
							}
							if(true) {
								this.bendPoints.splice(1,1);
							}
						} else {
							this.bendType = 8;
							if(true) {
								this.bendPoints.splice(2,1);
							}
							if(true) {
								this.bendPoints.splice(1,1);
							}
						}
					} else if(middle1.value > origin.value) {
						this.bendType = 4;
					} else if(origin.value > 0 && !isContinuedBend) {
						this.bendType = 6;
						if(true) {
							this.bendPoints.splice(2,1);
						}
						if(true) {
							this.bendPoints.splice(1,1);
						}
					} else {
						this.bendType = 5;
						if(true) {
							this.bendPoints.splice(2,1);
						}
						if(true) {
							this.bendPoints.splice(1,1);
						}
					}
				} else {
					alphaTab.util.Logger.warning("Model","Unsupported bend type detected, fallback to custom",null);
				}
			} else if(this.bendPoints.length == 2) {
				var origin1 = this.bendPoints[0];
				var destination1 = this.bendPoints[1];
				if(destination1.value > origin1.value) {
					if(!isContinuedBend && origin1.value > 0) {
						this.bendType = 7;
					} else {
						this.bendType = 2;
					}
				} else if(destination1.value < origin1.value) {
					if(isContinuedBend) {
						this.bendType = 3;
					} else {
						this.bendType = 8;
					}
				} else {
					this.bendType = 5;
				}
			}
		} else if(this.bendPoints.length == 0) {
			this.bendType = 0;
		}
	}
	,__class__: alphaTab.model.Note
};
alphaTab.model._NoteAccidentalMode = {};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_ = $hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"]["NoteAccidentalMode_Impl_"] = {};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.__name__ = ["alphaTab","model","_NoteAccidentalMode","NoteAccidentalMode_Impl_"];
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Default";
	case 1:
		return "SwapAccidentals";
	case 2:
		return "ForceNatural";
	case 3:
		return "ForceSharp";
	case 4:
		return "ForceFlat";
	}
	return "";
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "default":
		return 0;
	case "forceflat":
		return 4;
	case "forcenatural":
		return 2;
	case "forcesharp":
		return 3;
	case "swapaccidentals":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._Ottavia = {};
alphaTab.model._Ottavia.Ottavia_Impl_ = $hx_exports["alphaTab"]["model"]["_Ottavia"]["Ottavia_Impl_"] = {};
alphaTab.model._Ottavia.Ottavia_Impl_.__name__ = ["alphaTab","model","_Ottavia","Ottavia_Impl_"];
alphaTab.model._Ottavia.Ottavia_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Ottavia.Ottavia_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Ottavia.Ottavia_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Ottavia.Ottavia_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._Ottavia.Ottavia_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Ottavia.Ottavia_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Ottavia.Ottavia_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "_15ma";
	case 1:
		return "_8va";
	case 2:
		return "Regular";
	case 3:
		return "_8vb";
	case 4:
		return "_15mb";
	}
	return "";
};
alphaTab.model._Ottavia.Ottavia_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "_15ma":
		return 0;
	case "_15mb":
		return 4;
	case "_8va":
		return 1;
	case "_8vb":
		return 3;
	case "regular":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._PickStroke = {};
alphaTab.model._PickStroke.PickStroke_Impl_ = $hx_exports["alphaTab"]["model"]["_PickStroke"]["PickStroke_Impl_"] = {};
alphaTab.model._PickStroke.PickStroke_Impl_.__name__ = ["alphaTab","model","_PickStroke","PickStroke_Impl_"];
alphaTab.model._PickStroke.PickStroke_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._PickStroke.PickStroke_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStroke.PickStroke_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStroke.PickStroke_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._PickStroke.PickStroke_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStroke.PickStroke_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStroke.PickStroke_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Up";
	case 2:
		return "Down";
	}
	return "";
};
alphaTab.model._PickStroke.PickStroke_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "down":
		return 2;
	case "none":
		return 0;
	case "up":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.PlaybackInformation = $hx_exports["alphaTab"]["model"]["PlaybackInformation"] = function() {
	this.volume = 0;
	this.balance = 0;
	this.port = 0;
	this.program = 0;
	this.primaryChannel = 0;
	this.secondaryChannel = 0;
	this.isMute = false;
	this.isSolo = false;
	this.volume = 15;
	this.balance = 8;
	this.port = 1;
};
alphaTab.model.PlaybackInformation.__name__ = ["alphaTab","model","PlaybackInformation"];
alphaTab.model.PlaybackInformation.copyTo = function(src,dst) {
	dst.volume = src.volume;
	dst.balance = src.balance;
	dst.port = src.port;
	dst.program = src.program;
	dst.primaryChannel = src.primaryChannel;
	dst.secondaryChannel = src.secondaryChannel;
	dst.isMute = src.isMute;
	dst.isSolo = src.isSolo;
};
alphaTab.model.PlaybackInformation.prototype = {
	__class__: alphaTab.model.PlaybackInformation
};
alphaTab.model.RenderStylesheet = $hx_exports["alphaTab"]["model"]["RenderStylesheet"] = function() {
	this.hideDynamics = false;
	this.hideDynamics = false;
};
alphaTab.model.RenderStylesheet.__name__ = ["alphaTab","model","RenderStylesheet"];
alphaTab.model.RenderStylesheet.copyTo = function(src,dst) {
	dst.hideDynamics = src.hideDynamics;
};
alphaTab.model.RenderStylesheet.prototype = {
	__class__: alphaTab.model.RenderStylesheet
};
alphaTab.model.RepeatGroup = $hx_exports["alphaTab"]["model"]["RepeatGroup"] = function() {
	this.masterBars = null;
	this.openings = null;
	this.closings = null;
	this.isOpened = false;
	this.isClosed = false;
	var this1 = [];
	this.masterBars = this1;
	var this2 = [];
	this.openings = this2;
	var this3 = [];
	this.closings = this3;
	this.isClosed = false;
};
alphaTab.model.RepeatGroup.__name__ = ["alphaTab","model","RepeatGroup"];
alphaTab.model.RepeatGroup.prototype = {
	addMasterBar: function(masterBar) {
		if(this.openings.length == 0) {
			this.openings.push(masterBar);
		}
		this.masterBars.push(masterBar);
		masterBar.repeatGroup = this;
		if(masterBar.get_isRepeatEnd()) {
			this.closings.push(masterBar);
			this.isClosed = true;
			if(!this.isOpened) {
				this.masterBars[0].isRepeatStart = true;
				this.isOpened = true;
			}
		} else if(this.isClosed) {
			this.isClosed = false;
			this.openings.push(masterBar);
		}
	}
	,__class__: alphaTab.model.RepeatGroup
};
alphaTab.model.Score = $hx_exports["alphaTab"]["model"]["Score"] = function() {
	this._currentRepeatGroup = null;
	this.album = null;
	this.artist = null;
	this.copyright = null;
	this.instructions = null;
	this.music = null;
	this.notices = null;
	this.subTitle = null;
	this.title = null;
	this.words = null;
	this.tab = null;
	this.tempo = 0;
	this.tempoLabel = null;
	this.masterBars = null;
	this.tracks = null;
	this.stylesheet = null;
	var this1 = [];
	this.masterBars = this1;
	var this2 = [];
	this.tracks = this2;
	this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
	this.album = this.artist = this.copyright = this.instructions = this.music = this.notices = this.subTitle = this.title = this.words = this.tab = this.tempoLabel = "";
	this.tempo = 120;
	this.stylesheet = new alphaTab.model.RenderStylesheet();
};
alphaTab.model.Score.__name__ = ["alphaTab","model","Score"];
alphaTab.model.Score.copyTo = function(src,dst) {
	dst.album = src.album;
	dst.artist = src.artist;
	dst.copyright = src.copyright;
	dst.instructions = src.instructions;
	dst.music = src.music;
	dst.notices = src.notices;
	dst.subTitle = src.subTitle;
	dst.title = src.title;
	dst.words = src.words;
	dst.tab = src.tab;
	dst.tempo = src.tempo;
	dst.tempoLabel = src.tempoLabel;
};
alphaTab.model.Score.prototype = {
	rebuildRepeatGroups: function() {
		var currentGroup = new alphaTab.model.RepeatGroup();
		var bar = $iterator(this.masterBars)();
		while(bar.hasNext()) {
			var bar1 = bar.next();
			if(bar1.isRepeatStart || this._currentRepeatGroup.isClosed && bar1.alternateEndings <= 0) {
				currentGroup = new alphaTab.model.RepeatGroup();
			}
			currentGroup.addMasterBar(bar1);
		}
	}
	,addMasterBar: function(bar) {
		bar.score = this;
		bar.index = this.masterBars.length;
		if(this.masterBars.length != 0) {
			bar.previousMasterBar = this.masterBars[this.masterBars.length - 1];
			bar.previousMasterBar.nextMasterBar = bar;
			bar.start = bar.previousMasterBar.start + bar.previousMasterBar.calculateDuration();
		}
		if(bar.isRepeatStart || this._currentRepeatGroup.isClosed && bar.alternateEndings <= 0) {
			this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
		}
		this._currentRepeatGroup.addMasterBar(bar);
		this.masterBars.push(bar);
	}
	,addTrack: function(track) {
		track.score = this;
		track.index = this.tracks.length;
		this.tracks.push(track);
	}
	,finish: function(settings) {
		var i = 0;
		var j = this.tracks.length;
		while(i < j) {
			this.tracks[i].finish(settings);
			++i;
		}
	}
	,__class__: alphaTab.model.Score
};
alphaTab.model.Section = $hx_exports["alphaTab"]["model"]["Section"] = function() {
	this.marker = null;
	this.text = null;
	this.text = this.marker = "";
};
alphaTab.model.Section.__name__ = ["alphaTab","model","Section"];
alphaTab.model.Section.copyTo = function(src,dst) {
	dst.marker = src.marker;
	dst.text = src.text;
};
alphaTab.model.Section.prototype = {
	__class__: alphaTab.model.Section
};
alphaTab.model._SimileMark = {};
alphaTab.model._SimileMark.SimileMark_Impl_ = $hx_exports["alphaTab"]["model"]["_SimileMark"]["SimileMark_Impl_"] = {};
alphaTab.model._SimileMark.SimileMark_Impl_.__name__ = ["alphaTab","model","_SimileMark","SimileMark_Impl_"];
alphaTab.model._SimileMark.SimileMark_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._SimileMark.SimileMark_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SimileMark.SimileMark_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SimileMark.SimileMark_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SimileMark.SimileMark_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SimileMark.SimileMark_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SimileMark.SimileMark_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Simple";
	case 2:
		return "FirstOfDouble";
	case 3:
		return "SecondOfDouble";
	}
	return "";
};
alphaTab.model._SimileMark.SimileMark_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "firstofdouble":
		return 2;
	case "none":
		return 0;
	case "secondofdouble":
		return 3;
	case "simple":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._SlideInType = {};
alphaTab.model._SlideInType.SlideInType_Impl_ = $hx_exports["alphaTab"]["model"]["_SlideInType"]["SlideInType_Impl_"] = {};
alphaTab.model._SlideInType.SlideInType_Impl_.__name__ = ["alphaTab","model","_SlideInType","SlideInType_Impl_"];
alphaTab.model._SlideInType.SlideInType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._SlideInType.SlideInType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideInType.SlideInType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideInType.SlideInType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SlideInType.SlideInType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideInType.SlideInType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideInType.SlideInType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "IntoFromBelow";
	case 2:
		return "IntoFromAbove";
	}
	return "";
};
alphaTab.model._SlideInType.SlideInType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "intofromabove":
		return 2;
	case "intofrombelow":
		return 1;
	case "none":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model._SlideOutType = {};
alphaTab.model._SlideOutType.SlideOutType_Impl_ = $hx_exports["alphaTab"]["model"]["_SlideOutType"]["SlideOutType_Impl_"] = {};
alphaTab.model._SlideOutType.SlideOutType_Impl_.__name__ = ["alphaTab","model","_SlideOutType","SlideOutType_Impl_"];
alphaTab.model._SlideOutType.SlideOutType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Shift";
	case 2:
		return "Legato";
	case 3:
		return "OutUp";
	case 4:
		return "OutDown";
	case 5:
		return "PickSlideDown";
	case 6:
		return "PickSlideUp";
	}
	return "";
};
alphaTab.model._SlideOutType.SlideOutType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "legato":
		return 2;
	case "none":
		return 0;
	case "outdown":
		return 4;
	case "outup":
		return 3;
	case "pickslidedown":
		return 5;
	case "pickslideup":
		return 6;
	case "shift":
		return 1;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Staff = $hx_exports["alphaTab"]["model"]["Staff"] = function() {
	this.index = 0;
	this.track = null;
	this.bars = null;
	this.chords = null;
	this.capo = 0;
	this.transpositionPitch = 0;
	this.displayTranspositionPitch = 0;
	this.tuning = null;
	this.tuningName = null;
	this.showTablature = false;
	this.showStandardNotation = false;
	this.isPercussion = false;
	var this1 = [];
	this.bars = this1;
	var this2 = new Int32Array(0);
	this.tuning = this2;
	var this3 = {}
	this.chords = this3;
	this.showStandardNotation = true;
	this.showTablature = true;
};
alphaTab.model.Staff.__name__ = ["alphaTab","model","Staff"];
alphaTab.model.Staff.copyTo = function(src,dst) {
	dst.capo = src.capo;
	dst.index = src.index;
	var array = src.tuning;
	dst.tuning = new Int32Array(array);
	dst.transpositionPitch = src.transpositionPitch;
	dst.displayTranspositionPitch = src.displayTranspositionPitch;
	dst.showStandardNotation = src.showStandardNotation;
	dst.showTablature = src.showTablature;
	dst.isPercussion = src.isPercussion;
};
alphaTab.model.Staff.prototype = {
	get_isStringed: function() {
		return this.tuning.length > 0;
	}
	,finish: function(settings) {
		var i = 0;
		var j = this.bars.length;
		while(i < j) {
			this.bars[i].finish(settings);
			++i;
		}
	}
	,addChord: function(chordId,chord) {
		chord.staff = this;
		this.chords[chordId] = chord;
	}
	,addBar: function(bar) {
		var bars = this.bars;
		bar.staff = this;
		bar.index = bars.length;
		if(bars.length > 0) {
			bar.previousBar = bars[bars.length - 1];
			bar.previousBar.nextBar = bar;
		}
		bars.push(bar);
	}
	,__class__: alphaTab.model.Staff
};
alphaTab.model.Track = $hx_exports["alphaTab"]["model"]["Track"] = function(staveCount) {
	this.index = 0;
	this.score = null;
	this.staves = null;
	this.playbackInfo = null;
	this.color = null;
	this.name = null;
	this.shortName = null;
	var this1 = [];
	this.staves = this1;
	this.ensureStaveCount(staveCount);
	this.playbackInfo = new alphaTab.model.PlaybackInformation();
	this.name = "";
	this.shortName = "";
	this.color = new alphaTab.platform.model.Color(200,0,0,255);
};
alphaTab.model.Track.__name__ = ["alphaTab","model","Track"];
alphaTab.model.Track.copyTo = function(src,dst) {
	dst.name = src.name;
	dst.shortName = src.shortName;
	dst.index = src.index;
	dst.color.raw = src.color.raw;
	dst.color.rgba = src.color.rgba;
};
alphaTab.model.Track.prototype = {
	ensureStaveCount: function(staveCount) {
		while(this.staves.length < staveCount) this.addStaff(new alphaTab.model.Staff());
	}
	,addStaff: function(staff) {
		staff.index = this.staves.length;
		staff.track = this;
		this.staves.push(staff);
	}
	,finish: function(settings) {
		var s = this.shortName;
		if(s == null || s.length == 0) {
			this.shortName = this.name;
			if(this.shortName.length > 10) {
				this.shortName = HxOverrides.substr(this.shortName,0,10);
			}
		}
		var i = 0;
		var j = this.staves.length;
		while(i < j) {
			this.staves[i].finish(settings);
			++i;
		}
	}
	,applyLyrics: function(lyrics) {
		var lyric = $iterator(lyrics)();
		while(lyric.hasNext()) {
			var lyric1 = lyric.next();
			lyric1.finish();
		}
		var staff = this.staves[0];
		var li = 0;
		while(li < lyrics.length) {
			var lyric2 = lyrics[li];
			if(lyric2.startBar >= 0) {
				var beat = staff.bars[lyric2.startBar].voices[0].beats[0];
				var ci = 0;
				while(ci < lyric2.chunks.length && beat != null) {
					while(beat != null && (beat.isEmpty || beat.get_isRest())) beat = beat.nextBeat;
					if(beat != null) {
						if(beat.lyrics == null) {
							var size = lyrics.length;
							var this1 = new Array(size);
							beat.lyrics = this1;
						}
						beat.lyrics[li] = lyric2.chunks[ci];
						beat = beat.nextBeat;
					}
					++ci;
				}
			}
			++li;
		}
	}
	,__class__: alphaTab.model.Track
};
alphaTab.model._TripletFeel = {};
alphaTab.model._TripletFeel.TripletFeel_Impl_ = $hx_exports["alphaTab"]["model"]["_TripletFeel"]["TripletFeel_Impl_"] = {};
alphaTab.model._TripletFeel.TripletFeel_Impl_.__name__ = ["alphaTab","model","_TripletFeel","TripletFeel_Impl_"];
alphaTab.model._TripletFeel.TripletFeel_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "NoTripletFeel";
	case 1:
		return "Triplet16th";
	case 2:
		return "Triplet8th";
	case 3:
		return "Dotted16th";
	case 4:
		return "Dotted8th";
	case 5:
		return "Scottish16th";
	case 6:
		return "Scottish8th";
	}
	return "";
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "dotted16th":
		return 3;
	case "dotted8th":
		return 4;
	case "notripletfeel":
		return 0;
	case "scottish16th":
		return 5;
	case "scottish8th":
		return 6;
	case "triplet16th":
		return 1;
	case "triplet8th":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Tuning = $hx_exports["alphaTab"]["model"]["Tuning"] = function(name,tuning,isStandard) {
	this.isStandard = false;
	this.name = null;
	this.tunings = null;
	this.isStandard = isStandard;
	this.name = name;
	this.tunings = tuning;
};
alphaTab.model.Tuning.__name__ = ["alphaTab","model","Tuning"];
alphaTab.model.Tuning.getTextForTuning = function(tuning,includeOctave) {
	var octave = tuning / 12 | 0;
	var note = tuning % 12;
	var notes = ["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"];
	var result = notes[note];
	if(includeOctave) {
		result = result + Std.string(octave - 1);
	}
	return result;
};
alphaTab.model.Tuning.getDefaultTuningFor = function(stringCount) {
	if(alphaTab.model.Tuning._defaultTunings.hasOwnProperty(stringCount)) {
		return alphaTab.model.Tuning._defaultTunings[stringCount];
	}
	return null;
};
alphaTab.model.Tuning.getPresetsFor = function(stringCount) {
	switch(stringCount) {
	case 4:
		return alphaTab.model.Tuning._fourStrings;
	case 5:
		return alphaTab.model.Tuning._fiveStrings;
	case 6:
		return alphaTab.model.Tuning._sixStrings;
	case 7:
		return alphaTab.model.Tuning._sevenStrings;
	default:
	}
	var this1 = [];
	return this1;
};
alphaTab.model.Tuning.initialize = function() {
	var this1 = [];
	alphaTab.model.Tuning._sevenStrings = this1;
	var this2 = [];
	alphaTab.model.Tuning._sixStrings = this2;
	var this3 = [];
	alphaTab.model.Tuning._fiveStrings = this3;
	var this4 = [];
	alphaTab.model.Tuning._fourStrings = this4;
	var this5 = {}
	alphaTab.model.Tuning._defaultTunings = this5;
	alphaTab.model.Tuning._defaultTunings[7] = new alphaTab.model.Tuning("Guitar 7 strings",new Int32Array([64,59,55,50,45,40,35]),true);
	alphaTab.model.Tuning._sevenStrings.push(alphaTab.model.Tuning._defaultTunings[7]);
	alphaTab.model.Tuning._defaultTunings[6] = new alphaTab.model.Tuning("Guitar Standard Tuning",new Int32Array([64,59,55,50,45,40]),true);
	alphaTab.model.Tuning._sixStrings.push(alphaTab.model.Tuning._defaultTunings[6]);
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down Â½ step",new Int32Array([63,58,54,49,44,39]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down 1 step",new Int32Array([62,57,53,48,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down 2 step",new Int32Array([60,55,51,46,41,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped D Tuning",new Int32Array([64,59,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped D Tuning variant",new Int32Array([64,57,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Double Dropped D Tuning",new Int32Array([62,59,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped E Tuning",new Int32Array([66,61,57,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped C Tuning",new Int32Array([62,57,53,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open C Tuning",new Int32Array([64,60,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Cm Tuning",new Int32Array([63,60,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open C6 Tuning",new Int32Array([64,57,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Cmaj7 Tuning",new Int32Array([64,59,55,52,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D Tuning",new Int32Array([62,57,54,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Dm Tuning",new Int32Array([62,57,53,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D5 Tuning",new Int32Array([62,57,50,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D6 Tuning",new Int32Array([62,59,54,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Dsus4 Tuning",new Int32Array([62,57,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open E Tuning",new Int32Array([64,59,56,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Em Tuning",new Int32Array([64,59,55,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Esus11 Tuning",new Int32Array([64,59,55,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open F Tuning",new Int32Array([65,60,53,48,45,41]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open G Tuning",new Int32Array([62,59,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Gm Tuning",new Int32Array([62,58,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open G6 Tuning",new Int32Array([64,59,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Gsus4 Tuning",new Int32Array([62,60,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open A Tuning",new Int32Array([64,61,57,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Am Tuning",new Int32Array([64,60,57,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Nashville Tuning",new Int32Array([64,59,67,62,57,52]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Bass 6 Strings Tuning",new Int32Array([48,43,38,33,28,23]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Lute or Vihuela Tuning",new Int32Array([64,59,54,50,45,40]),false));
	alphaTab.model.Tuning._defaultTunings[5] = new alphaTab.model.Tuning("Bass 5 Strings Tuning",new Int32Array([43,38,33,28,23]),true);
	alphaTab.model.Tuning._fiveStrings.push(alphaTab.model.Tuning._defaultTunings[5]);
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Dropped C Tuning",new Int32Array([62,59,55,48,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Open D Tuning",new Int32Array([62,57,54,50,69]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Open G Tuning",new Int32Array([62,59,55,50,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo G Minor Tuning",new Int32Array([62,58,55,50,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo G Modal Tuning",new Int32Array([62,57,55,50,67]),false));
	alphaTab.model.Tuning._defaultTunings[4] = new alphaTab.model.Tuning("Bass Standard Tuning",new Int32Array([43,38,33,28]),true);
	alphaTab.model.Tuning._fourStrings.push(alphaTab.model.Tuning._defaultTunings[4]);
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down Â½ step",new Int32Array([42,37,32,27]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down 1 step",new Int32Array([41,36,31,26]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down 2 step",new Int32Array([39,34,29,24]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Dropped D Tuning",new Int32Array([43,38,33,26]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Ukulele C Tuning",new Int32Array([45,40,36,43]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Ukulele G Tuning",new Int32Array([52,47,43,38]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Mandolin Standard Tuning",new Int32Array([64,57,50,43]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Mandolin or Violin Tuning",new Int32Array([76,69,62,55]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Viola Tuning",new Int32Array([69,62,55,48]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Cello Tuning",new Int32Array([57,50,43,36]),false));
};
alphaTab.model.Tuning.findTuning = function(strings) {
	var tunings = alphaTab.model.Tuning.getPresetsFor(strings.length);
	var t = 0;
	var tc = tunings.length;
	while(t < tc) {
		var tuning = tunings[t];
		var equals = true;
		var i = 0;
		var j = strings.length;
		while(i < j) {
			if(strings[i] != tuning.tunings[i]) {
				equals = false;
				break;
			}
			++i;
		}
		if(equals) {
			return tuning;
		}
		++t;
	}
	return null;
};
alphaTab.model.Tuning.prototype = {
	__class__: alphaTab.model.Tuning
};
alphaTab.model.TuningParseResult = function() {
	this.note = null;
	this.noteValue = 0;
	this.octave = 0;
};
alphaTab.model.TuningParseResult.__name__ = ["alphaTab","model","TuningParseResult"];
alphaTab.model.TuningParseResult.prototype = {
	get_realValue: function() {
		return this.octave * 12 + this.noteValue;
	}
	,__class__: alphaTab.model.TuningParseResult
};
alphaTab.model.TuningParser = function() { };
alphaTab.model.TuningParser.__name__ = ["alphaTab","model","TuningParser"];
alphaTab.model.TuningParser.isTuning = function(name) {
	return alphaTab.model.TuningParser.parse(name) != null;
};
alphaTab.model.TuningParser.parse = function(name) {
	var note = "";
	var octave = "";
	var i = 0;
	while(i < name.length) {
		var this1 = system.Convert.toUInt16(HxOverrides.cca(name,i));
		var c = this1;
		if(alphaTab.platform.Platform.isCharNumber(c,false)) {
			if(note == null || note.length == 0) {
				return null;
			}
			octave = octave + String.fromCharCode(c);
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122 || c == 35) {
			note = note + String.fromCharCode(c);
		} else {
			return null;
		}
		++i;
	}
	if(octave == null || octave.length == 0 || (note == null || note.length == 0)) {
		return null;
	}
	var result = new alphaTab.model.TuningParseResult();
	result.octave = alphaTab.platform.Platform.parseIntMinValue(octave) + 1;
	result.note = note.toLowerCase();
	result.noteValue = alphaTab.model.TuningParser.getToneForText(result.note);
	return result;
};
alphaTab.model.TuningParser.getTuningForText = function(str) {
	var result = alphaTab.model.TuningParser.parse(str);
	if(result == null) {
		return -1;
	}
	return result.get_realValue();
};
alphaTab.model.TuningParser.getToneForText = function(note) {
	var b;
	var _g = note.toLowerCase();
	switch(_g) {
	case "a":
		b = 9;
		break;
	case "a#":case "bb":
		b = 10;
		break;
	case "ab":case "g#":
		b = 8;
		break;
	case "b":
		b = 11;
		break;
	case "c":
		b = 0;
		break;
	case "c#":case "db":
		b = 1;
		break;
	case "d":
		b = 2;
		break;
	case "e":
		b = 4;
		break;
	case "d#":case "eb":
		b = 3;
		break;
	case "f":
		b = 5;
		break;
	case "g":
		b = 7;
		break;
	case "f#":case "gb":
		b = 6;
		break;
	default:
		return 0;
	}
	return b;
};
alphaTab.model.TupletGroup = $hx_exports["alphaTab"]["model"]["TupletGroup"] = function(voice) {
	this._isEqualLengthTuplet = true;
	this._totalDuration = 0;
	this.beats = null;
	this.voice = null;
	this.isFull = false;
	this.voice = voice;
	var this1 = [];
	this.beats = this1;
};
alphaTab.model.TupletGroup.__name__ = ["alphaTab","model","TupletGroup"];
alphaTab.model.TupletGroup.prototype = {
	check: function(beat) {
		if(this.beats.length == 0) {
			this.beats.push(beat);
			this._totalDuration = this._totalDuration + beat.playbackDuration;
			return true;
		}
		if(beat.graceType != 0) {
			return true;
		}
		if(beat.voice != this.voice || this.isFull || beat.tupletNumerator != this.beats[0].tupletNumerator || beat.tupletDenominator != this.beats[0].tupletDenominator) {
			return false;
		}
		if(beat.playbackDuration != this.beats[0].playbackDuration) {
			this._isEqualLengthTuplet = false;
		}
		this.beats.push(beat);
		this._totalDuration = this._totalDuration + beat.playbackDuration;
		if(this._isEqualLengthTuplet) {
			if(this.beats.length == this.beats[0].tupletNumerator) {
				this.isFull = true;
			}
		} else {
			var factor = this.beats[0].tupletNumerator / this.beats[0].tupletDenominator | 0;
			var potentialMatch = new system.Int32ArrayIterator(alphaTab.model.TupletGroup.AllTicks);
			while(potentialMatch.hasNext()) {
				var potentialMatch1 = potentialMatch.next();
				if(this._totalDuration == potentialMatch1 * factor) {
					this.isFull = true;
					break;
				}
			}
		}
		return true;
	}
	,__class__: alphaTab.model.TupletGroup
};
alphaTab.model._VibratoType = {};
alphaTab.model._VibratoType.VibratoType_Impl_ = $hx_exports["alphaTab"]["model"]["_VibratoType"]["VibratoType_Impl_"] = {};
alphaTab.model._VibratoType.VibratoType_Impl_.__name__ = ["alphaTab","model","_VibratoType","VibratoType_Impl_"];
alphaTab.model._VibratoType.VibratoType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Slight";
	case 2:
		return "Wide";
	}
	return "";
};
alphaTab.model._VibratoType.VibratoType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "none":
		return 0;
	case "slight":
		return 1;
	case "wide":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.model.Voice = $hx_exports["alphaTab"]["model"]["Voice"] = function() {
	this._beatLookup = null;
	this.index = 0;
	this.bar = null;
	this.beats = null;
	this.isEmpty = false;
	var this1 = [];
	this.beats = this1;
	this.isEmpty = true;
};
alphaTab.model.Voice.__name__ = ["alphaTab","model","Voice"];
alphaTab.model.Voice.copyTo = function(src,dst) {
	dst.index = src.index;
	dst.isEmpty = src.isEmpty;
};
alphaTab.model.Voice.prototype = {
	insertBeat: function(after,newBeat) {
		newBeat.nextBeat = after.nextBeat;
		if(newBeat.nextBeat != null) {
			newBeat.nextBeat.previousBeat = newBeat;
		}
		newBeat.previousBeat = after;
		newBeat.voice = this;
		after.nextBeat = newBeat;
		this.beats.splice(after.index + 1,0,newBeat);
	}
	,addBeat: function(beat) {
		beat.voice = this;
		beat.index = this.beats.length;
		this.beats.push(beat);
		if(!beat.isEmpty) {
			this.isEmpty = false;
		}
	}
	,chain: function(beat) {
		if(this.bar == null) {
			return;
		}
		if(beat.index < this.beats.length - 1) {
			beat.nextBeat = this.beats[beat.index + 1];
			beat.nextBeat.previousBeat = beat;
		} else if(beat.get_isLastOfVoice() && beat.voice.bar.nextBar != null) {
			var nextVoice = this.bar.nextBar.voices[this.index];
			if(nextVoice.beats.length > 0) {
				beat.nextBeat = nextVoice.beats[0];
				beat.nextBeat.previousBeat = beat;
			} else {
				beat.nextBeat.previousBeat = beat;
			}
		}
	}
	,addGraceBeat: function(beat) {
		if(this.beats.length == 0) {
			this.addBeat(beat);
			return;
		}
		var lastBeat = this.beats[this.beats.length - 1];
		var index = this.beats.length - 1;
		if(index != -1) {
			this.beats.splice(index,1);
		}
		this.addBeat(beat);
		this.addBeat(lastBeat);
		this.isEmpty = false;
	}
	,getBeatAtDisplayStart: function(displayStart) {
		if(this._beatLookup.hasOwnProperty(displayStart)) {
			return this._beatLookup[displayStart];
		}
		return null;
	}
	,finish: function(settings) {
		var this1 = {}
		this._beatLookup = this1;
		var index = 0;
		while(index < this.beats.length) {
			var beat = this.beats[index];
			beat.index = index;
			this.chain(beat);
			++index;
		}
		var currentDisplayTick = 0;
		var currentPlaybackTick = 0;
		var i = 0;
		while(i < this.beats.length) {
			var beat1 = this.beats[i];
			beat1.index = i;
			beat1.finish(settings);
			if(beat1.graceType == 0 || beat1.graceType == 3) {
				beat1.displayStart = currentDisplayTick;
				beat1.playbackStart = currentPlaybackTick;
				currentDisplayTick = currentDisplayTick + beat1.displayDuration;
				currentPlaybackTick = currentPlaybackTick + beat1.playbackDuration;
			} else {
				if(beat1.previousBeat == null || beat1.previousBeat.graceType == 0) {
					var nonGrace = beat1;
					var numberOfGraceBeats = 0;
					while(nonGrace != null && nonGrace.graceType != 0) {
						nonGrace = nonGrace.nextBeat;
						++numberOfGraceBeats;
					}
					var graceDuration = 8;
					var stolenDuration = 0;
					if(numberOfGraceBeats == 1) {
						graceDuration = 8;
					} else if(numberOfGraceBeats == 2) {
						graceDuration = 16;
					} else {
						graceDuration = 32;
					}
					if(nonGrace != null) {
						nonGrace.updateDurations();
					}
					var perGraceDisplayDuration = beat1.previousBeat == null ? alphaTab.audio.MidiUtils.toTicks(32) : (beat1.previousBeat.displayDuration / 4 | 0) / numberOfGraceBeats | 0;
					var graceBeat = this.beats[i];
					var j = 0;
					while(j < numberOfGraceBeats && graceBeat != null) {
						graceBeat.duration = graceDuration;
						graceBeat.updateDurations();
						graceBeat.displayStart = currentDisplayTick - (numberOfGraceBeats - j + 1) * perGraceDisplayDuration;
						graceBeat.displayDuration = perGraceDisplayDuration;
						stolenDuration = stolenDuration + graceBeat.playbackDuration;
						graceBeat = graceBeat.nextBeat;
						++j;
					}
					if(beat1.graceType == 2) {
						if(beat1.previousBeat != null) {
							beat1.previousBeat.playbackDuration = beat1.previousBeat.playbackDuration - stolenDuration;
						}
						currentPlaybackTick = currentPlaybackTick - stolenDuration;
					} else if(nonGrace != null && beat1.graceType == 1) {
						nonGrace.playbackDuration = nonGrace.playbackDuration - stolenDuration;
					}
				}
				beat1.playbackStart = currentPlaybackTick;
				currentPlaybackTick = beat1.playbackStart + beat1.playbackDuration;
			}
			beat1.finishTuplet();
			this._beatLookup[beat1.displayStart] = beat1;
			++i;
		}
	}
	,calculateDuration: function() {
		if(this.isEmpty || this.beats.length == 0) {
			return 0;
		}
		var lastBeat = this.beats[this.beats.length - 1];
		return lastBeat.playbackStart + lastBeat.playbackDuration;
	}
	,__class__: alphaTab.model.Voice
};
alphaTab.model._WhammyType = {};
alphaTab.model._WhammyType.WhammyType_Impl_ = $hx_exports["alphaTab"]["model"]["_WhammyType"]["WhammyType_Impl_"] = {};
alphaTab.model._WhammyType.WhammyType_Impl_.__name__ = ["alphaTab","model","_WhammyType","WhammyType_Impl_"];
alphaTab.model._WhammyType.WhammyType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._WhammyType.WhammyType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._WhammyType.WhammyType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._WhammyType.WhammyType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.model._WhammyType.WhammyType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._WhammyType.WhammyType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._WhammyType.WhammyType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Custom";
	case 2:
		return "Dive";
	case 3:
		return "Dip";
	case 4:
		return "Hold";
	case 5:
		return "Predive";
	case 6:
		return "PrediveDive";
	}
	return "";
};
alphaTab.model._WhammyType.WhammyType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "custom":
		return 1;
	case "dip":
		return 3;
	case "dive":
		return 2;
	case "hold":
		return 4;
	case "none":
		return 0;
	case "predive":
		return 5;
	case "predivedive":
		return 6;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput = function(alphaSynthRoot) {
	this._alphaSynthRoot = null;
	this._id = null;
	this._swfId = null;
	this._swfContainer = null;
	this._alphaSynthRoot = alphaSynthRoot;
	var lastSlash = this._alphaSynthRoot.lastIndexOf("/");
	if(lastSlash != -1) {
		this._alphaSynthRoot = HxOverrides.substr(this._alphaSynthRoot,0,lastSlash + 1);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthFlashOutput"];
alphaTab.platform.javaScript.AlphaSynthFlashOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthFlashOutput.onReady = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction.EventAction_Impl_.invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].ready);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.onSampleRequest = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction.EventAction_Impl_.invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].sampleRequest);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.onFinished = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id) && alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].finished != null) {
		system._EventAction.EventAction_Impl_.invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].finished);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.onSamplesPlayed = function(id,samples) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction1.EventAction1_Impl_.invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].samplesPlayed,samples);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.prototype = {
	get_sampleRate: function() {
		return 44100;
	}
	,open: function() {
		this._id = "alphaSynthFlashPlayer" + Std.string(alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId);
		this._swfId = this._id + "swf";
		alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[this._id] = this;
		alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId++;
		var document = window.document;
		this._swfContainer = document.createElement("div");
		this._swfContainer.className = "alphaSynthFlashPlayer";
		this._swfContainer.setAttribute("id",this._id);
		document.body.appendChild(this._swfContainer);
		var swf = $global.swfobject;
		if(swf) {
			var embedSwf = swf.embedSWF;
			embedSwf(this._alphaSynthRoot + "AlphaSynth.FlashOutput.swf",this._id,"1px","1px","9.0.0",null,{ id : this._id, sampleRate : 44100},{ allowScriptAccess : "always"},{ id : this._swfId});
		} else {
			alphaTab.util.Logger.error("Player","swfobject not found, player will not work",null);
		}
	}
	,get_flashOutput: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		return element1;
	}
	,play: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.alphaSynthPlay();
	}
	,pause: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.alphaSynthPause();
	}
	,sequencerFinished: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.alphaSynthSequencerFinished();
	}
	,addSamples: function(samples) {
		var f32 = samples;
		var uint8 = new Uint8Array(f32.buffer);
		var b64 = window.btoa(String.fromCharCode.apply(null, uint8));
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.alphaSynthAddSamples(b64);
	}
	,resetSamples: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.alphaSynthResetSamples();
	}
	,addReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.add(this.ready,value);
	}
	,removeReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.sub(this.ready,value);
	}
	,addSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.add(this.sampleRequest,value);
	}
	,removeSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.sub(this.sampleRequest,value);
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,addSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.samplesPlayed,value);
	}
	,removeSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.samplesPlayed,value);
	}
	,activate: function() {
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthFlashOutput
};
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput = function() {
	this._context = null;
	this._buffer = null;
	this._source = null;
	this._audioNode = null;
	this._circularBuffer = null;
	this._finished = false;
};
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebAudioOutput"];
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.prototype = {
	get_sampleRate: function() {
		return this._context.sampleRate;
	}
	,open: function() {
		this._finished = false;
		this.patchIosSampleRate();
		this._circularBuffer = new alphaTab.audio.synth.ds.CircularSampleBuffer(4096 * 10);
		this._context = new AudioContext();
		var ctx = this._context;
		if(ctx.state == "suspended") {
			var resume = null;
			resume = function(e) {
				ctx.resume();
				window.setTimeout(function() {
					if(ctx.state == "running") {
						window.document.body.removeEventListener("touchend",resume,false);
						window.document.body.removeEventListener("click",resume,false);
					}
				},0);
			};
			window.document.body.addEventListener("touchend",resume,false);
			window.document.body.addEventListener("click",resume,false);
		}
		system._EventAction.EventAction_Impl_.invoke(this.ready);
	}
	,activate: function() {
		if(this._context != null) {
			var ctx = this._context;
			ctx.resume();
		}
	}
	,patchIosSampleRate: function() {
		var ua = window.navigator.userAgent;
		if(ua.indexOf("iPhone") != -1 || ua.indexOf("iPad") != -1) {
			var context = new AudioContext();
			var buffer = context.createBuffer(1,1,44100);
			var dummy = context.createBufferSource();
			dummy.buffer = buffer;
			dummy.connect(context.destination);
			dummy.start(0);
			dummy.disconnect(0);
			context.close();
		}
	}
	,play: function() {
		var ctx = this._context;
		if(ctx.state == "suspended" || ctx.state == "interrupted") {
			ctx.resume();
		}
		this._buffer = this._context.createBuffer(2,4096,this._context.sampleRate);
		this._audioNode = this._context.createScriptProcessor(4096,0,2);
		this._audioNode.onaudioprocess = $bind(this,this.generateSound);
		this._circularBuffer.clear();
		this.requestBuffers();
		this._finished = false;
		this._source = this._context.createBufferSource();
		this._source.buffer = this._buffer;
		this._source.loop = true;
		this._source.connect(this._audioNode,0,0);
		this._source.start(0);
		this._audioNode.connect(this._context.destination,0,0);
	}
	,pause: function() {
		if(this._source != null) {
			this._source.stop(0);
			this._source.disconnect(0);
		}
		this._source = null;
		if(this._audioNode != null) {
			this._audioNode.disconnect(0);
		}
		this._audioNode = null;
	}
	,sequencerFinished: function() {
		this._finished = true;
	}
	,addSamples: function(f) {
		this._circularBuffer.write(f,0,f.length);
	}
	,resetSamples: function() {
		this._circularBuffer.clear();
	}
	,requestBuffers: function() {
		var count = (10 / 2 | 0) * 4096;
		if(this._circularBuffer.count < count && this.sampleRequest != null) {
			var i = 0;
			while(i < (10 / 2 | 0)) {
				system._EventAction.EventAction_Impl_.invoke(this.sampleRequest);
				++i;
			}
		}
	}
	,generateSound: function(e) {
		var left = e.outputBuffer.getChannelData(0);
		var right = e.outputBuffer.getChannelData(1);
		var samples = left.length + right.length;
		if(this._circularBuffer.count < samples) {
			if(this._finished) {
				system._EventAction.EventAction_Impl_.invoke(this.finished);
			}
		} else {
			var this1 = new Float32Array(samples);
			var buffer = this1;
			this._circularBuffer.read(buffer,0,buffer.length);
			var s = 0;
			var i = 0;
			while(i < left.length) {
				left[i] = buffer[s++];
				right[i] = buffer[s++];
				++i;
			}
			system._EventAction1.EventAction1_Impl_.invoke(this.samplesPlayed,left.length);
		}
		if(!this._finished) {
			this.requestBuffers();
		}
	}
	,addReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.add(this.ready,value);
	}
	,removeReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.sub(this.ready,value);
	}
	,addSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.samplesPlayed,value);
	}
	,removeSamplesPlayed: function(value) {
		this.samplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.samplesPlayed,value);
	}
	,addSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.add(this.sampleRequest,value);
	}
	,removeSampleRequest: function(value) {
		this.sampleRequest = system._EventAction.EventAction_Impl_.sub(this.sampleRequest,value);
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebAudioOutput
};
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi = function(player,alphaSynthScriptFile,logLevel) {
	this._synth = null;
	this._output = null;
	this._workerIsReadyForPlayback = false;
	this._workerIsReady = false;
	this._outputIsReady = false;
	this._state = 0;
	this._masterVolume = 0.0;
	this._metronomeVolume = 0.0;
	this._playbackSpeed = 0.0;
	this._tickPosition = 0;
	this._timePosition = 0.0;
	this._isLooping = false;
	this._playbackRange = null;
	this._output = player;
	this._output.addReady($bind(this,this.onOutputReady));
	this._output.addSamplesPlayed($bind(this,this.onOutputSamplesPlayed));
	this._output.addSampleRequest($bind(this,this.onOutputSampleRequest));
	this._output.addFinished($bind(this,this.onOutputFinished));
	this._output.open();
	try {
		var script = "importScripts('" + alphaSynthScriptFile + "')";
		var blob = new Blob([script]);
		this._synth = new Worker(URL.createObjectURL(blob));
	} catch( __e ) {
		try {
			this._synth = new Worker(alphaSynthScriptFile);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.error("AlphaSynth","Failed to create WebWorker: " + Std.string(e),null);
			} else throw(e);
		}
	}
	this._synth.addEventListener("message",$bind(this,this.handleWorkerMessage),false);
	this._synth.postMessage({ cmd : "alphaSynth." + "initialize", sampleRate : this._output.get_sampleRate(), logLevel : logLevel});
	this.set_masterVolume(1);
	this.set_playbackSpeed(1);
	this.set_metronomeVolume(0);
};
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebWorkerApi"];
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__interfaces__ = [alphaTab.audio.synth.IAlphaSynth];
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.prototype = {
	get_isReady: function() {
		if(this._workerIsReady) {
			return this._outputIsReady;
		} else {
			return false;
		}
	}
	,get_isReadyForPlayback: function() {
		return this._workerIsReadyForPlayback;
	}
	,get_state: function() {
		return this._state;
	}
	,get_logLevel: function() {
		return alphaTab.util.Logger.logLevel;
	}
	,set_logLevel: function(value) {
		alphaTab.util.Logger.logLevel = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setLogLevel", value : value});
		return this.get_logLevel();
	}
	,get_masterVolume: function() {
		return this._masterVolume;
	}
	,set_masterVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampF(value,0,1);
		this._masterVolume = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setMasterVolume", value : value});
		return this.get_masterVolume();
	}
	,get_metronomeVolume: function() {
		return this._metronomeVolume;
	}
	,set_metronomeVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampF(value,0,1);
		this._metronomeVolume = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setMetronomeVolume", value : value});
		return this.get_metronomeVolume();
	}
	,get_playbackSpeed: function() {
		return this._playbackSpeed;
	}
	,set_playbackSpeed: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.clampD(value,0.125,8);
		this._playbackSpeed = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setPlaybackSpeed", value : value});
		return this.get_playbackSpeed();
	}
	,get_tickPosition: function() {
		return this._tickPosition;
	}
	,set_tickPosition: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._tickPosition = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setTickPosition", value : value});
		return this.get_tickPosition();
	}
	,get_timePosition: function() {
		return this._timePosition;
	}
	,set_timePosition: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._timePosition = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setTimePosition", value : value});
		return this.get_timePosition();
	}
	,get_isLooping: function() {
		return this._isLooping;
	}
	,set_isLooping: function(value) {
		this._isLooping = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setIsLooping", value : value});
		return this.get_isLooping();
	}
	,get_playbackRange: function() {
		return this._playbackRange;
	}
	,set_playbackRange: function(value) {
		if(value != null) {
			if(value.startTick < 0) {
				value.startTick = 0;
			}
			if(value.endTick < 0) {
				value.endTick = 0;
			}
		}
		this._playbackRange = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setPlaybackRange", value : value});
		return this.get_playbackRange();
	}
	,destroy: function() {
		this._synth.terminate();
	}
	,play: function() {
		if(this.get_state() == 1 || !this.get_isReadyForPlayback()) {
			return false;
		}
		this._output.activate();
		this._synth.postMessage({ cmd : "alphaSynth." + "play"});
		return true;
	}
	,pause: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "pause"});
	}
	,playPause: function() {
		this._output.activate();
		this._synth.postMessage({ cmd : "alphaSynth." + "playPause"});
	}
	,stop: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "stop"});
	}
	,loadSoundFont: function(data) {
		this._synth.postMessage({ cmd : "alphaSynth." + "loadSoundFontBytes", data : data});
	}
	,loadSoundFontFromUrl: function(data,progress) {
		var _gthis = this;
		var url = data;
		alphaTab.util.Logger.info("AlphaSynth","Start loading Soundfont from url " + url,null);
		var request = new XMLHttpRequest();
		request.open("GET",url,true,null,null);
		request.responseType = "arraybuffer";
		request.onload = function(e) {
			var buffer = new Uint8Array(request.response);
			_gthis._synth.postMessage({ cmd : "alphaSynth." + "loadSoundFontBytes", data : buffer});
		};
		request.onerror = function(e1) {
			alphaTab.util.Logger.error("AlphaSynth","Loading failed: " + e1["message"],null);
			_gthis.onSoundFontLoadFailed(e1);
		};
		request.onprogress = function(e2) {
			alphaTab.util.Logger.debug("AlphaSynth","Soundfont downloading: " + e2["loaded"] + "/" + e2["total"] + " bytes",null);
			progress(new alphaTab.ProgressEventArgs(e2["loaded"],e2["total"]));
		};
		request.send();
	}
	,loadMidiFile: function(midi) {
		this._synth.postMessage({ cmd : "alphaSynth." + "loadMidi", midi : alphaTab.model.JsonConverter.midiFileToJsObject(midi)});
	}
	,setChannelMute: function(channel,mute) {
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelMute", channel : channel, mute : mute});
	}
	,resetChannelStates: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "resetChannelStates"});
	}
	,setChannelSolo: function(channel,solo) {
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelSolo", channel : channel, solo : solo});
	}
	,setChannelVolume: function(channel,volume) {
		volume = alphaTab.audio.synth.util.SynthHelper.clampF(volume,0,1);
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelVolume", channel : channel, volume : volume});
	}
	,setChannelProgram: function(channel,program) {
		program = alphaTab.audio.synth.util.SynthHelper.clampB(program,0,127);
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelProgram", channel : channel, program : program});
	}
	,handleWorkerMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.finished":
			this.onFinished();
			break;
		case "alphaSynth.log":
			alphaTab.util.Logger.log(data.level,"AlphaSynth",data.message,null);
			break;
		case "alphaSynth.midiLoadFailed":
			this.checkReadyForPlayback();
			this.onMidiLoadFailed(data.error);
			break;
		case "alphaSynth.midiLoaded":
			this.checkReadyForPlayback();
			this.onMidiLoaded();
			break;
		case "alphaSynth.output.addSamples":
			this._output.addSamples(data.samples);
			break;
		case "alphaSynth.output.pause":
			this._output.pause();
			break;
		case "alphaSynth.output.play":
			this._output.play();
			break;
		case "alphaSynth.output.resetSamples":
			this._output.resetSamples();
			break;
		case "alphaSynth.output.sequencerFinished":
			this._output.sequencerFinished();
			break;
		case "alphaSynth.playerStateChanged":
			this._state = data.state;
			this.onStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(data.state,data.stopped));
			break;
		case "alphaSynth.positionChanged":
			this._timePosition = data.currentTime;
			this._tickPosition = data.currentTick;
			this.onPositionChanged(new alphaTab.audio.synth.PositionChangedEventArgs(data.currentTime,data.endTime,data.currentTick,data.endTick));
			break;
		case "alphaSynth.ready":
			this._workerIsReady = true;
			this.checkReady();
			break;
		case "alphaSynth.readyForPlayback":
			this._workerIsReadyForPlayback = true;
			this.checkReadyForPlayback();
			break;
		case "alphaSynth.soundFontLoadFailed":
			this.onSoundFontLoadFailed(data.error);
			break;
		case "alphaSynth.soundFontLoaded":
			this.onSoundFontLoaded();
			break;
		default:
		}
	}
	,checkReady: function() {
		if(this.get_isReady()) {
			this.onReady();
		}
	}
	,checkReadyForPlayback: function() {
		if(this.get_isReadyForPlayback()) {
			this.onReadyForPlayback();
		}
	}
	,addReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.add(this.ready,value);
	}
	,removeReady: function(value) {
		this.ready = system._EventAction.EventAction_Impl_.sub(this.ready,value);
	}
	,onReady: function() {
		var _e = this.ready;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.add(this.readyForPlayback,value);
	}
	,removeReadyForPlayback: function(value) {
		this.readyForPlayback = system._EventAction.EventAction_Impl_.sub(this.readyForPlayback,value);
	}
	,onReadyForPlayback: function() {
		var _e = this.readyForPlayback;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.add(this.finished,value);
	}
	,removeFinished: function(value) {
		this.finished = system._EventAction.EventAction_Impl_.sub(this.finished,value);
	}
	,onFinished: function() {
		var _e = this.finished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.add(this.soundFontLoaded,value);
	}
	,removeSoundFontLoaded: function(value) {
		this.soundFontLoaded = system._EventAction.EventAction_Impl_.sub(this.soundFontLoaded,value);
	}
	,onSoundFontLoaded: function() {
		var _e = this.soundFontLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addSoundFontLoadFailed: function(value) {
		this.soundFontLoadFailed = system._EventAction1.EventAction1_Impl_.add(this.soundFontLoadFailed,value);
	}
	,removeSoundFontLoadFailed: function(value) {
		this.soundFontLoadFailed = system._EventAction1.EventAction1_Impl_.sub(this.soundFontLoadFailed,value);
	}
	,onSoundFontLoadFailed: function(e) {
		var _e = this.soundFontLoadFailed;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.add(this.midiLoaded,value);
	}
	,removeMidiLoaded: function(value) {
		this.midiLoaded = system._EventAction.EventAction_Impl_.sub(this.midiLoaded,value);
	}
	,onMidiLoaded: function() {
		var _e = this.midiLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,addMidiLoadFailed: function(value) {
		this.midiLoadFailed = system._EventAction1.EventAction1_Impl_.add(this.midiLoadFailed,value);
	}
	,removeMidiLoadFailed: function(value) {
		this.midiLoadFailed = system._EventAction1.EventAction1_Impl_.sub(this.midiLoadFailed,value);
	}
	,onMidiLoadFailed: function(e) {
		var _e = this.midiLoadFailed;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addStateChanged: function(value) {
		this.stateChanged = system._EventAction1.EventAction1_Impl_.add(this.stateChanged,value);
	}
	,removeStateChanged: function(value) {
		this.stateChanged = system._EventAction1.EventAction1_Impl_.sub(this.stateChanged,value);
	}
	,onStateChanged: function(e) {
		var _e = this.stateChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addPositionChanged: function(value) {
		this.positionChanged = system._EventAction1.EventAction1_Impl_.add(this.positionChanged,value);
	}
	,removePositionChanged: function(value) {
		this.positionChanged = system._EventAction1.EventAction1_Impl_.sub(this.positionChanged,value);
	}
	,onPositionChanged: function(e) {
		var _e = this.positionChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,onOutputSampleRequest: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "sampleRequest"});
	}
	,onOutputFinished: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "finished"});
	}
	,onOutputSamplesPlayed: function(samples) {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "samplesPlayed", samples : samples});
	}
	,onOutputReady: function() {
		this._outputIsReady = true;
		this.checkReady();
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebWorkerApi
};
alphaTab.platform.javaScript.AlphaTabApi = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaTabApi"] = function(element,options) {
	alphaTab.AlphaTabApi.call(this,new alphaTab.ui.BrowserUiFacade(element),options);
};
alphaTab.platform.javaScript.AlphaTabApi.__name__ = ["alphaTab","platform","javaScript","AlphaTabApi"];
alphaTab.platform.javaScript.AlphaTabApi.__super__ = alphaTab.AlphaTabApi;
alphaTab.platform.javaScript.AlphaTabApi.prototype = $extend(alphaTab.AlphaTabApi.prototype,{
	get_playerState: function() {
		var playerStateValue = this.player.get_state();
		return playerStateValue;
	}
	,tex: function(tex,tracks) {
		var browser = js.Boot.__cast(this.uiFacade , alphaTab.ui.BrowserUiFacade);
		alphaTab.AlphaTabApi.prototype.tex.call(this,tex,browser.parseTracks(tracks));
	}
	,print: function(width) {
		var preview = window.open("","","width=0,height=0");
		var a4 = preview.document.createElement("div");
		if(!(width == null || width.length == 0)) {
			a4.style.width = width;
		} else if(this.settings.display.layoutMode == 1) {
			a4.style.width = "297mm";
		} else {
			a4.style.width = "210mm";
		}
		preview.document.write("<!DOCTYPE html><html></head><body></body></html>");
		preview.document.body.appendChild(a4);
		var dualScreenLeft;
		var o = window["ScreenLeft"];
		if(typeof(o) != "undefined") {
			dualScreenLeft = window["ScreenLeft"];
		} else {
			dualScreenLeft = window.screen.left;
		}
		var dualScreenTop;
		var o1 = window["ScreenTop"];
		if(typeof(o1) != "undefined") {
			dualScreenTop = window["ScreenTop"];
		} else {
			dualScreenTop = window.screen.top;
		}
		var screenWidth;
		var o2 = window.innerWidth;
		if(typeof(o2) != "undefined") {
			screenWidth = window.innerWidth;
		} else {
			var o3 = window.document.documentElement.clientWidth;
			if(typeof(o3) != "undefined") {
				screenWidth = window.document.documentElement.clientWidth;
			} else {
				screenWidth = window.screen.width;
			}
		}
		var screenHeight;
		var o4 = window.innerHeight;
		if(typeof(o4) != "undefined") {
			screenHeight = window.innerHeight;
		} else {
			var o5 = window.document.documentElement.clientHeight;
			if(typeof(o5) != "undefined") {
				screenHeight = window.document.documentElement.clientHeight;
			} else {
				screenHeight = window.screen.height;
			}
		}
		var w = a4.offsetWidth + 50;
		var h = window.innerHeight;
		var left = (screenWidth / 2 | 0) - (w / 2 | 0) + dualScreenLeft;
		var top = (screenHeight / 2 | 0) - (h / 2 | 0) + dualScreenTop;
		preview.resizeTo(w,h);
		preview.moveTo(left,top);
		preview.focus();
		var settings = new alphaTab.Settings();
		settings.core.scriptFile = this.settings.core.scriptFile;
		settings.core.fontDirectory = this.settings.core.fontDirectory;
		settings.core.enableLazyLoading = false;
		settings.core.useWorkers = false;
		settings.display.scale = 0.8;
		settings.display.stretchForce = 0.8;
		var alphaTab1 = new alphaTab.platform.javaScript.AlphaTabApi(a4,settings);
		alphaTab1.renderer.addPostRenderFinished(function() {
			alphaTab1.canvasElement.set_height(-1);
			preview.print();
		});
		alphaTab1.renderTracks(this.tracks);
	}
	,downloadMidi: function() {
		var midiFile = new alphaTab.audio.synth.midi.MidiFile();
		var handler = new alphaTab.audio.generator.AlphaSynthMidiFileHandler(midiFile);
		var generator = new alphaTab.audio.generator.MidiFileGenerator(this.score,this.settings,handler);
		generator.generate();
		var binary = midiFile.toBinary();
		var uint8Array = binary;
		var fileName;
		var s = this.score.title;
		if(s == null || s.length == 0) {
			fileName = "File.mid";
		} else {
			fileName = this.score.title + ".mid";
		}
		var dlLink = js.Boot.__cast(window.document.createElement("a") , HTMLAnchorElement);
		dlLink.download = fileName;
		var blob = new Blob([uint8Array],{ type : "audio/midi"});
		var url = URL.createObjectURL(blob);
		dlLink.href = url;
		dlLink.style.display = "none";
		window.document.body.appendChild(dlLink);
		dlLink.click();
		window.document.body.removeChild(dlLink);
	}
	,changeTrackMute: function(tracks,mute) {
		var trackList = this.trackIndexesToTracks((js.Boot.__cast(this.uiFacade , alphaTab.ui.BrowserUiFacade)).parseTracks(tracks));
		alphaTab.AlphaTabApi.prototype.changeTrackMute.call(this,trackList,mute);
	}
	,changeTrackSolo: function(tracks,solo) {
		var trackList = this.trackIndexesToTracks((js.Boot.__cast(this.uiFacade , alphaTab.ui.BrowserUiFacade)).parseTracks(tracks));
		alphaTab.AlphaTabApi.prototype.changeTrackSolo.call(this,trackList,solo);
	}
	,changeTrackVolume: function(tracks,volume) {
		var trackList = this.trackIndexesToTracks((js.Boot.__cast(this.uiFacade , alphaTab.ui.BrowserUiFacade)).parseTracks(tracks));
		alphaTab.AlphaTabApi.prototype.changeTrackVolume.call(this,trackList,volume);
	}
	,trackIndexesToTracks: function(trackIndexes) {
		if(this.score == null) {
			var this1 = new Array(0);
			return this1;
		}
		var this2 = [];
		var tracks = this2;
		if(trackIndexes.length == 1 && trackIndexes[0] == -1) {
			var track = $iterator(this.score.tracks)();
			while(track.hasNext()) {
				var track1 = track.next();
				tracks.push(track1);
			}
		} else {
			var index = new system.Int32ArrayIterator(trackIndexes);
			while(index.hasNext()) {
				var index1 = index.next();
				if(index1 >= 0 && index1 < this.score.tracks.length) {
					tracks.push(this.score.tracks[index1]);
				}
			}
		}
		return tracks;
	}
	,addSoundFontLoad: function(value) {
		this.soundFontLoad = system._EventAction1.EventAction1_Impl_.add(this.soundFontLoad,value);
	}
	,removeSoundFontLoad: function(value) {
		this.soundFontLoad = system._EventAction1.EventAction1_Impl_.sub(this.soundFontLoad,value);
	}
	,onSoundFontLoad: function(e) {
		var _e = this.soundFontLoad;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
		this.uiFacade.triggerEvent(this.container,"soundFontLoad",e);
	}
	,loadSoundFontFromUrl: function(url) {
		if(this.player == null) {
			return;
		}
		(js.Boot.__cast(this.player , alphaTab.platform.javaScript.AlphaSynthWebWorkerApi)).loadSoundFontFromUrl(url,$bind(this,this.onSoundFontLoad));
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabApi
});
alphaTab.rendering.IScoreRenderer = $hx_exports["alphaTab"]["rendering"]["IScoreRenderer"] = function() { };
alphaTab.rendering.IScoreRenderer.__name__ = ["alphaTab","rendering","IScoreRenderer"];
alphaTab.rendering.IScoreRenderer.prototype = {
	__class__: alphaTab.rendering.IScoreRenderer
};
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer = function(api,settings) {
	this._api = null;
	this._worker = null;
	this._width = 0;
	this.set_boundsLookup(null);
	this._api = api;
	try {
		var script = "importScripts('" + settings.core.scriptFile + "')";
		var blob = new Blob([script]);
		this._worker = new Worker(URL.createObjectURL(blob));
	} catch( e ) {
		if (e instanceof js._Boot.HaxeError) e = e.val;
		if( js.Boot.__instanceof(e,system.Exception) ) {
			try {
				this._worker = new Worker(settings.core.scriptFile);
			} catch( __e1 ) {
				alphaTab.util.Logger.error("Rendering","Failed to create WebWorker: " + Std.string(e),null);
			}
		} else throw(e);
	}
	this._worker.postMessage({ cmd : "alphaTab.initialize", settings : this.serializeSettingsForWorker(settings)});
	this._worker.addEventListener("message",$bind(this,this.handleWorkerMessage));
};
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__name__ = ["alphaTab","platform","javaScript","AlphaTabWorkerScoreRenderer"];
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__interfaces__ = [alphaTab.rendering.IScoreRenderer];
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.prototype = {
	get_boundsLookup: function() {
		return this.__BoundsLookup;
	}
	,set_boundsLookup: function(value) {
		return this.__BoundsLookup = value;
	}
	,destroy: function() {
		this._worker.terminate();
	}
	,updateSettings: function(settings) {
		this._worker.postMessage({ cmd : "alphaTab.updateSettings", settings : this.serializeSettingsForWorker(settings)});
	}
	,serializeSettingsForWorker: function(settings) {
		var json = alphaTab.Settings.toJson(settings);
		json.player = null;
		return json;
	}
	,render: function() {
		this._worker.postMessage({ cmd : "alphaTab.render"});
	}
	,resizeRender: function() {
		this._worker.postMessage({ cmd : "alphaTab.resizeRender"});
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this._worker.postMessage({ cmd : "alphaTab.setWidth", width : value});
		return this.get_width();
	}
	,handleWorkerMessage: function(e) {
		var data = (js.Boot.__cast(e , MessageEvent)).data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaTab.error":
			this.onError(data.type,data.detail);
			break;
		case "alphaTab.partialRenderFinished":
			this.onPartialRenderFinished(data.result);
			break;
		case "alphaTab.postRenderFinished":
			this.set_boundsLookup(alphaTab.rendering.utils.BoundsLookup.fromJson(data.boundsLookup,this._api.score));
			this.onPostRenderFinished();
			break;
		case "alphaTab.preRender":
			this.onPreRender(data.resize);
			break;
		case "alphaTab.renderFinished":
			this.onRenderFinished(data.result);
			break;
		default:
		}
	}
	,renderScore: function(score,trackIndexes) {
		var jsObject = alphaTab.model.JsonConverter.scoreToJsObject(score);
		this._worker.postMessage({ cmd : "alphaTab.renderScore", score : jsObject, trackIndexes : trackIndexes, fontSizes : alphaTab.platform.svg.FontSizes.FontSizeLookupTables});
	}
	,addPreRender: function(value) {
		this.preRender = system._EventAction1.EventAction1_Impl_.add(this.preRender,value);
	}
	,removePreRender: function(value) {
		this.preRender = system._EventAction1.EventAction1_Impl_.sub(this.preRender,value);
	}
	,onPreRender: function(resize) {
		var _e = this.preRender;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(resize);
		}
	}
	,addPartialRenderFinished: function(value) {
		this.partialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this.partialRenderFinished,value);
	}
	,removePartialRenderFinished: function(value) {
		this.partialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.partialRenderFinished,value);
	}
	,onPartialRenderFinished: function(obj) {
		var _e = this.partialRenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
	}
	,addRenderFinished: function(value) {
		this.renderFinished = system._EventAction1.EventAction1_Impl_.add(this.renderFinished,value);
	}
	,removeRenderFinished: function(value) {
		this.renderFinished = system._EventAction1.EventAction1_Impl_.sub(this.renderFinished,value);
	}
	,onRenderFinished: function(obj) {
		var _e = this.renderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
	}
	,addError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.add(this.error,value);
	}
	,removeError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.sub(this.error,value);
	}
	,onError: function(type,details) {
		var _e = this.error;
		var handler = function(p1,p2) {
			system._EventAction2.EventAction2_Impl_.invoke(_e,p1,p2);
		};
		if(handler != null) {
			handler(type,details);
		}
	}
	,addPostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.add(this.postRenderFinished,value);
	}
	,removePostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.sub(this.postRenderFinished,value);
	}
	,onPostRenderFinished: function() {
		var _e = this.postRenderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer
};
alphaTab.platform.javaScript.IFlashSynthOutput = function() { };
alphaTab.platform.javaScript.IFlashSynthOutput.__name__ = ["alphaTab","platform","javaScript","IFlashSynthOutput"];
alphaTab.platform.javaScript.IFlashSynthOutput.prototype = {
	__class__: alphaTab.platform.javaScript.IFlashSynthOutput
};
alphaTab.platform.model._FontStyle = {};
alphaTab.platform.model._FontStyle.FontStyle_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"]["FontStyle_Impl_"] = {};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.__name__ = ["alphaTab","platform","model","_FontStyle","FontStyle_Impl_"];
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Plain";
	case 1:
		return "Bold";
	case 2:
		return "Italic";
	}
	return "";
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "bold":
		return 1;
	case "italic":
		return 2;
	case "plain":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.platform.model._TextAlign = {};
alphaTab.platform.model._TextAlign.TextAlign_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"]["TextAlign_Impl_"] = {};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.__name__ = ["alphaTab","platform","model","_TextAlign","TextAlign_Impl_"];
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Left";
	case 1:
		return "Center";
	case 2:
		return "Right";
	}
	return "";
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "center":
		return 1;
	case "left":
		return 0;
	case "right":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.platform.model._TextBaseline = {};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"]["TextBaseline_Impl_"] = {};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.__name__ = ["alphaTab","platform","model","_TextBaseline","TextBaseline_Impl_"];
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Top";
	case 1:
		return "Middle";
	case 2:
		return "Bottom";
	}
	return "";
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "bottom":
		return 2;
	case "middle":
		return 1;
	case "top":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.platform.svg.FontSizes = function() {
};
alphaTab.platform.svg.FontSizes.__name__ = ["alphaTab","platform","svg","FontSizes"];
alphaTab.platform.svg.FontSizes.generateFontLookup = function(family) {
	if(alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
		alphaTab.platform.svg.FontSizes.init();
	}
	if(alphaTab.platform.svg.FontSizes.FontSizeLookupTables.hasOwnProperty(family)) {
		return;
	}
	if($global.document) {
		var canvas = js.Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
		var measureContext = canvas.getContext("2d");
		measureContext.font = "11px " + family;
		var this1 = [];
		var sizes = this1;
		var i = 32;
		while(i < 255) {
			var s = String.fromCharCode(i);
			sizes.push(measureContext.measureText(s).width);
			++i;
		}
		var data = new Uint8Array(sizes);
		alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family] = data;
	} else {
		alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family] = new Uint8Array([8]);
	}
};
alphaTab.platform.svg.FontSizes.init = function() {
	alphaTab.platform.svg.FontSizes.Georgia = new Uint8Array([3,4,5,7,7,9,8,2,4,4,5,7,3,4,3,5,7,5,6,6,6,6,6,6,7,6,3,3,7,7,7,5,10,7,7,7,8,7,7,8,9,4,6,8,7,10,8,8,7,8,8,6,7,8,7,11,8,7,7,4,5,4,7,7,6,6,6,5,6,5,4,6,6,3,3,6,3,10,6,6,6,6,5,5,4,6,5,8,6,5,5,5,4,5,7,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,4,6,7,6,7,4,6,6,10,6,6,7,0,10,7,5,7,6,6,6,6,6,3,6,6,6,6,12,12,12,5,7,7,7,7,7,7,11,7,7,7,7,7,4,4,4,4,8,8,8,8,8,8,8,7,8,8,8,8,8,7,7,6,6,6,6,6,6,6,8,5,5,5,5,5,3,3,3,3,6,6,6,6,6,6,6,7,6,6,6,6,6,5,6]);
	alphaTab.platform.svg.FontSizes.Arial = new Uint8Array([3,3,4,6,6,10,7,2,4,4,4,6,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,6,11,7,7,8,8,7,7,9,8,3,6,7,6,9,8,9,7,9,8,7,7,8,7,10,7,7,7,3,3,3,5,6,4,6,6,6,6,6,3,6,6,2,2,6,2,9,6,6,6,6,4,6,3,6,6,8,6,6,6,4,3,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,6,6,6,6,3,6,4,8,4,6,6,0,8,6,4,6,4,4,4,6,6,4,4,4,4,6,9,9,9,7,7,7,7,7,7,7,11,8,7,7,7,7,3,3,3,3,8,8,9,9,9,9,9,6,9,8,8,8,8,7,7,7,6,6,6,6,6,6,10,6,6,6,6,6,3,3,3,3,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6]);
	var this1 = {}
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables = this1;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["Arial"] = alphaTab.platform.svg.FontSizes.Arial;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["'Arial'"] = alphaTab.platform.svg.FontSizes.Arial;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["\"Arial\""] = alphaTab.platform.svg.FontSizes.Arial;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["Georgia"] = alphaTab.platform.svg.FontSizes.Georgia;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["'Georgia'"] = alphaTab.platform.svg.FontSizes.Georgia;
	alphaTab.platform.svg.FontSizes.FontSizeLookupTables["\"Georgia\""] = alphaTab.platform.svg.FontSizes.Georgia;
};
alphaTab.platform.svg.FontSizes.measureString = function(s,family,size,style) {
	if(alphaTab.platform.svg.FontSizes.FontSizeLookupTables == null) {
		alphaTab.platform.svg.FontSizes.init();
	}
	var data;
	var dataSize = 11;
	if(!alphaTab.platform.svg.FontSizes.FontSizeLookupTables.hasOwnProperty(family)) {
		alphaTab.platform.svg.FontSizes.generateFontLookup(family);
	}
	data = alphaTab.platform.svg.FontSizes.FontSizeLookupTables[family];
	var factor = 1;
	if((style & 2) != 0) {
		factor = factor * 1.2;
	}
	if((style & 1) != 0) {
		factor = factor * 1.2;
	}
	var stringSize = 0;
	var i = 0;
	while(i < s.length) {
		var a = data.length - 1;
		var this1 = system.Convert.toUInt16(HxOverrides.cca(s,i));
		var code = Math.min(a,this1 - 32);
		if(code >= 0) {
			stringSize = stringSize + data[code] * size / dataSize;
		}
		++i;
	}
	return stringSize * factor;
};
alphaTab.platform.svg.FontSizes.prototype = {
	__class__: alphaTab.platform.svg.FontSizes
};
alphaTab.rendering.BarRendererBase = function(renderer,bar) {
	this._preBeatGlyphs = null;
	this._voiceContainers = null;
	this._postBeatGlyphs = null;
	this.staff = null;
	this.x = 0.0;
	this.y = 0.0;
	this.width = 0.0;
	this.height = 0.0;
	this.index = 0;
	this.topOverflow = 0.0;
	this.bottomOverflow = 0.0;
	this.helpers = null;
	this.bar = null;
	this.isLinkedToPrevious = false;
	this.canWrap = false;
	this.scoreRenderer = null;
	this._wasFirstOfLine = false;
	this.layoutingInfo = null;
	this._appliedLayoutingInfo = 0;
	this.isFinalized = false;
	this.topPadding = 0.0;
	this.bottomPadding = 0.0;
	this.bar = bar;
	this.scoreRenderer = renderer;
	this.helpers = new alphaTab.rendering.utils.BarHelpers(bar);
	this.canWrap = true;
};
alphaTab.rendering.BarRendererBase.__name__ = ["alphaTab","rendering","BarRendererBase"];
alphaTab.rendering.BarRendererBase.prototype = {
	get_nextRenderer: function() {
		if(this.bar.nextBar == null) {
			return null;
		}
		return this.scoreRenderer.layout.getRendererForBar(this.staff.get_staveId(),this.bar.nextBar);
	}
	,get_previousRenderer: function() {
		if(this.bar.previousBar == null) {
			return null;
		}
		return this.scoreRenderer.layout.getRendererForBar(this.staff.get_staveId(),this.bar.previousBar);
	}
	,registerOverflowTop: function(topOverflow) {
		if(topOverflow > this.topOverflow) {
			this.topOverflow = topOverflow;
		}
	}
	,registerOverflowBottom: function(bottomOverflow) {
		if(bottomOverflow > this.bottomOverflow) {
			this.bottomOverflow = bottomOverflow;
		}
	}
	,scaleToWidth: function(width) {
		var containerWidth = width - this._preBeatGlyphs.width - this._postBeatGlyphs.width;
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.scaleToWidth(containerWidth);
		}
		this._postBeatGlyphs.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width + containerWidth;
		this.width = width;
	}
	,get_resources: function() {
		return this.get_settings().display.resources;
	}
	,get_settings: function() {
		return this.scoreRenderer.settings;
	}
	,get_scale: function() {
		return this.get_settings().display.scale;
	}
	,get_isFirstOfLine: function() {
		return this.index == 0;
	}
	,get_isLast: function() {
		return this.bar.index == this.scoreRenderer.layout.lastBarIndex;
	}
	,registerLayoutingInfo: function() {
		var info = this.layoutingInfo;
		var preSize = this._preBeatGlyphs.width;
		if(info.preBeatSize < preSize) {
			info.preBeatSize = preSize;
		}
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.registerLayoutingInfo(info);
		}
		var postSize = this._postBeatGlyphs.width;
		if(info.postBeatSize < postSize) {
			info.postBeatSize = postSize;
		}
	}
	,applyLayoutingInfo: function() {
		if(this._appliedLayoutingInfo >= this.layoutingInfo.version) {
			return false;
		}
		this._appliedLayoutingInfo = this.layoutingInfo.version;
		this._preBeatGlyphs.width = this.layoutingInfo.preBeatSize;
		var voiceEnd = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
			c.applyLayoutingInfo(this.layoutingInfo);
			var newEnd = c.x + c.width;
			if(voiceEnd < newEnd) {
				voiceEnd = newEnd;
			}
		}
		var this2 = voiceEnd;
		this._postBeatGlyphs.x = js.Boot.__cast(Math.floor(this2) , Float);
		this._postBeatGlyphs.width = this.layoutingInfo.postBeatSize;
		var this3 = this._postBeatGlyphs.x + this._postBeatGlyphs.width;
		this.width = js.Boot.__cast(Math.ceil(this3) , Float);
		return true;
	}
	,finalizeRenderer: function() {
		this.isFinalized = true;
	}
	,doLayout: function() {
		this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
		this._preBeatGlyphs.renderer = this;
		var this1 = {}
		this._voiceContainers = this1;
		this._postBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
		this._postBeatGlyphs.renderer = this;
		var i = 0;
		while(i < this.bar.voices.length) {
			var voice = this.bar.voices[i];
			if(this.hasVoiceContainer(voice)) {
				var c = new alphaTab.rendering.glyphs.VoiceContainerGlyph(0,0,voice);
				c.renderer = this;
				this._voiceContainers[this.bar.voices[i].index] = c;
			}
			++i;
		}
		if(this.bar.simileMark == 3) {
			this.canWrap = false;
		}
		this.createPreBeatGlyphs();
		this.createBeatGlyphs();
		this.createPostBeatGlyphs();
		this.updateSizes();
	}
	,hasVoiceContainer: function(voice) {
		if(!(!voice.isEmpty)) {
			return voice.index == 0;
		} else {
			return true;
		}
	}
	,updateSizes: function() {
		this.staff.registerStaffTop(this.topPadding);
		this.staff.registerStaffBottom(this.height - this.bottomPadding);
		var voiceContainers = this._voiceContainers;
		var beatGlyphsStart = this.get_beatGlyphsStart();
		var postBeatStart = beatGlyphsStart;
		var voice = $iterator(Object.keys(voiceContainers))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = voiceContainers[voice1];
			c.x = beatGlyphsStart;
			c.doLayout();
			var x = c.x + c.width;
			if(postBeatStart < x) {
				postBeatStart = x;
			}
		}
		var this1 = postBeatStart;
		this._postBeatGlyphs.x = js.Boot.__cast(Math.floor(this1) , Float);
		var this2 = this._postBeatGlyphs.x + this._postBeatGlyphs.width;
		this.width = js.Boot.__cast(Math.ceil(this2) , Float);
	}
	,addPreBeatGlyph: function(g) {
		this._preBeatGlyphs.addGlyph(g);
	}
	,addBeatGlyph: function(g) {
		g.renderer = this;
		g.preNotes.renderer = this;
		g.onNotes.renderer = this;
		g.onNotes.beamingHelper = this.helpers.beamHelperLookup[g.beat.voice.index][g.beat.index];
		this.getOrCreateVoiceContainer(g.beat.voice).addGlyph(g);
	}
	,getOrCreateVoiceContainer: function(voice) {
		return this._voiceContainers[voice.index];
	}
	,getBeatContainer: function(beat) {
		return this.getOrCreateVoiceContainer(beat.voice).beatGlyphs[beat.index];
	}
	,getPreNotesGlyphForBeat: function(beat) {
		return this.getBeatContainer(beat).preNotes;
	}
	,getOnNotesGlyphForBeat: function(beat) {
		return this.getBeatContainer(beat).onNotes;
	}
	,paint: function(cx,cy,canvas) {
		this.paintBackground(cx,cy,canvas);
		canvas.set_color(this.get_resources().mainGlyphColor);
		this._preBeatGlyphs.paint(cx + this.x,cy + this.y,canvas);
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			canvas.set_color(c.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
			c.paint(cx + this.x,cy + this.y,canvas);
		}
		canvas.set_color(this.get_resources().mainGlyphColor);
		this._postBeatGlyphs.paint(cx + this.x,cy + this.y,canvas);
	}
	,paintBackground: function(cx,cy,canvas) {
	}
	,buildBoundingsLookup: function(masterBarBounds,cx,cy) {
		var _gthis = this;
		var barBounds = new alphaTab.rendering.utils.BarBounds();
		barBounds.bar = this.bar;
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.x = cx + _gthis.x;
		_tmp.y = cy + _gthis.y + _gthis.topPadding;
		_tmp.w = _gthis.width;
		_tmp.h = _gthis.height - _gthis.topPadding - _gthis.bottomPadding;
		barBounds.visualBounds = _tmp;
		var _tmp1 = new alphaTab.rendering.utils.Bounds();
		_tmp1.x = cx + _gthis.x;
		_tmp1.y = cy + _gthis.y;
		_tmp1.w = _gthis.width;
		_tmp1.h = _gthis.height;
		barBounds.realBounds = _tmp1;
		masterBarBounds.addBar(barBounds);
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			var isEmptyBar = this.bar.get_isEmpty() && voice1 == 0;
			if(!c.voice.isEmpty || isEmptyBar) {
				var i = 0;
				var j = c.beatGlyphs.length;
				while(i < j) {
					var bc = c.beatGlyphs[i];
					var beatBoundings = new alphaTab.rendering.utils.BeatBounds();
					beatBoundings.beat = bc.beat;
					var _tmp2 = new alphaTab.rendering.utils.Bounds();
					_tmp2.x = cx + _gthis.x + c.x + bc.x + bc.onNotes.x;
					_tmp2.y = barBounds.visualBounds.y;
					_tmp2.w = bc.onNotes.width;
					_tmp2.h = barBounds.visualBounds.h;
					beatBoundings.visualBounds = _tmp2;
					var _tmp3 = new alphaTab.rendering.utils.Bounds();
					_tmp3.x = cx + _gthis.x + c.x + bc.x;
					_tmp3.y = barBounds.realBounds.y;
					_tmp3.w = bc.width;
					_tmp3.h = barBounds.realBounds.h;
					beatBoundings.realBounds = _tmp3;
					if(isEmptyBar) {
						beatBoundings.visualBounds.x = cx + this.x;
						beatBoundings.realBounds.x = beatBoundings.visualBounds.x;
					}
					barBounds.addBeat(beatBoundings);
					++i;
				}
			}
		}
	}
	,addPostBeatGlyph: function(g) {
		this._postBeatGlyphs.addGlyph(g);
	}
	,createPreBeatGlyphs: function() {
		this._wasFirstOfLine = this.get_isFirstOfLine();
	}
	,createBeatGlyphs: function() {
	}
	,createPostBeatGlyphs: function() {
	}
	,get_beatGlyphsStart: function() {
		return this._preBeatGlyphs.x + this._preBeatGlyphs.width;
	}
	,get_postBeatGlyphsStart: function() {
		return this._postBeatGlyphs.x;
	}
	,getNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		return 0;
	}
	,getBeatX: function(beat,requestedPosition) {
		if(requestedPosition == null) {
			requestedPosition = 0;
		}
		var container = this.getBeatContainer(beat);
		if(container != null) {
			switch(requestedPosition) {
			case 0:
				return container.voiceContainer.x + container.x;
			case 1:
				return container.voiceContainer.x + container.x + container.onNotes.x;
			case 2:
				return container.voiceContainer.x + container.x + container.get_onTimeX();
			case 3:
				return container.voiceContainer.x + container.x + container.onNotes.x + container.onNotes.width;
			case 4:
				return container.voiceContainer.x + container.x + container.width;
			default:
			}
		}
		return 0;
	}
	,getNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		return 0;
	}
	,reLayout: function() {
		if(this._wasFirstOfLine && !this.get_isFirstOfLine() || !this._wasFirstOfLine && this.get_isFirstOfLine()) {
			this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
			this._preBeatGlyphs.renderer = this;
			this.createPreBeatGlyphs();
		}
		this.updateSizes();
		this.registerLayoutingInfo();
	}
	,paintSimileMark: function(cx,cy,canvas) {
		var _g = this.bar.simileMark;
		switch(_g) {
		case 1:
			canvas.fillMusicFontSymbol(cx + this.x + (this.width - 20 * this.get_scale()) / 2,cy + this.y + this.height / 2,1,58624,false);
			break;
		case 3:
			canvas.fillMusicFontSymbol(cx + this.x - 28 * this.get_scale() / 2,cy + this.y + this.height / 2,1,58625,false);
			break;
		default:
		}
	}
	,__class__: alphaTab.rendering.BarRendererBase
};
alphaTab.rendering._BeatXPosition = {};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_ = {};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.__name__ = ["alphaTab","rendering","_BeatXPosition","BeatXPosition_Impl_"];
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "PreNotes";
	case 1:
		return "OnNotes";
	case 2:
		return "MiddleNotes";
	case 3:
		return "PostNotes";
	case 4:
		return "EndBeat";
	}
	return "";
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "endbeat":
		return 4;
	case "middlenotes":
		return 2;
	case "onnotes":
		return 1;
	case "postnotes":
		return 3;
	case "prenotes":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.glyphs = {};
alphaTab.rendering.glyphs.Glyph = function(x,y) {
	this.x = 0.0;
	this.y = 0.0;
	this.width = 0.0;
	this.renderer = null;
	this.x = x;
	this.y = y;
};
alphaTab.rendering.glyphs.Glyph.__name__ = ["alphaTab","rendering","glyphs","Glyph"];
alphaTab.rendering.glyphs.Glyph.prototype = {
	get_scale: function() {
		return this.renderer.get_scale();
	}
	,doLayout: function() {
	}
	,paint: function(cx,cy,canvas) {
	}
	,__class__: alphaTab.rendering.glyphs.Glyph
};
alphaTab.rendering.EffectBand = function(voice,info) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._uniqueEffectGlyphs = null;
	this._effectGlyphs = null;
	this.isEmpty = false;
	this.previousBand = null;
	this.isLinkedToPrevious = false;
	this.firstBeat = null;
	this.lastBeat = null;
	this.height = 0.0;
	this.voice = null;
	this.info = null;
	this.slot = null;
	this.voice = voice;
	this.info = info;
	var this1 = [];
	this._uniqueEffectGlyphs = this1;
	var this2 = [];
	this._effectGlyphs = this2;
	this.isEmpty = true;
};
alphaTab.rendering.EffectBand.__name__ = ["alphaTab","rendering","EffectBand"];
alphaTab.rendering.EffectBand.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.EffectBand.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.doLayout.call(this);
		var i = 0;
		while(i < this.renderer.bar.voices.length) {
			var this1 = this._effectGlyphs;
			var this2 = {}
			this1.push(this2);
			var this3 = this._uniqueEffectGlyphs;
			var this4 = [];
			this3.push(this4);
			++i;
		}
	}
	,createGlyph: function(beat) {
		if(beat.voice != this.voice) {
			return;
		}
		if(this.info.shouldCreateGlyph(this.renderer.get_settings(),beat) && (!this.info.get_hideOnMultiTrack() || this.renderer.staff.trackIndex == 0)) {
			this.isEmpty = false;
			if(this.firstBeat == null || beat.isBefore(this.firstBeat)) {
				this.firstBeat = beat;
			}
			if(this.lastBeat == null || beat.isAfter(this.lastBeat)) {
				this.lastBeat = beat;
				var _g = this.info.get_sizingMode();
				switch(_g) {
				case 2:case 5:
					if(this.lastBeat.nextBeat != null) {
						this.lastBeat = this.lastBeat.nextBeat;
					}
					break;
				default:
				}
			}
			var glyph = this.createOrResizeGlyph(this.info.get_sizingMode(),beat);
			if(glyph.height > this.height) {
				this.height = glyph.height;
			}
		}
	}
	,createOrResizeGlyph: function(sizing,b) {
		var g;
		switch(sizing) {
		case 0:case 1:case 2:
			g = this.info.createNewGlyph(this.renderer,b);
			g.renderer = this.renderer;
			g.beat = b;
			g.doLayout();
			this._effectGlyphs[b.voice.index][b.index] = g;
			this._uniqueEffectGlyphs[b.voice.index].push(g);
			return g;
		case 4:case 5:
			var singleSizing = sizing == 4 ? 1 : 2;
			if(b.index > 0 || this.renderer.index > 0) {
				var prevBeat = b.previousBeat;
				if(this.info.shouldCreateGlyph(this.renderer.get_settings(),prevBeat)) {
					var prevEffect = null;
					if(b.index > 0 && this._effectGlyphs[b.voice.index].hasOwnProperty(prevBeat.index)) {
						prevEffect = this._effectGlyphs[b.voice.index][prevBeat.index];
					} else if(this.renderer.index > 0) {
						var previousRenderer = js.Boot.__cast(this.renderer.get_previousRenderer() , alphaTab.rendering.EffectBarRenderer);
						var previousBand = previousRenderer.getBand(this.voice,this.info.get_effectId());
						var voiceGlyphs = previousBand._effectGlyphs[b.voice.index];
						if(voiceGlyphs.hasOwnProperty(prevBeat.index)) {
							prevEffect = voiceGlyphs[prevBeat.index];
						}
					}
					var newGlyph = this.createOrResizeGlyph(singleSizing,b);
					if(prevEffect != null && this.info.canExpand(prevBeat,b)) {
						prevEffect.nextGlyph = newGlyph;
						newGlyph.previousGlyph = prevEffect;
						this.isLinkedToPrevious = true;
					}
					return newGlyph;
				}
				return this.createOrResizeGlyph(singleSizing,b);
			}
			return this.createOrResizeGlyph(singleSizing,b);
		case 6:
			g = this.info.createNewGlyph(this.renderer,b);
			g.renderer = this.renderer;
			g.beat = b;
			g.doLayout();
			this._effectGlyphs[b.voice.index][b.index] = g;
			this._uniqueEffectGlyphs[b.voice.index].push(g);
			return g;
		default:
		}
		return null;
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.Glyph.prototype.paint.call(this,cx,cy,canvas);
		var i = 0;
		var j = this._uniqueEffectGlyphs.length;
		while(i < j) {
			var v = this._uniqueEffectGlyphs[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var g = v[k];
				g.paint(cx + this.x,cy + this.y,canvas);
				++k;
			}
			++i;
		}
	}
	,alignGlyphs: function() {
		var v = 0;
		while(v < this._effectGlyphs.length) {
			var this1 = this._effectGlyphs[v];
			var key = $iterator(Object.keys(this1))();
			while(key.hasNext()) {
				var key1 = key.next();
				this.alignGlyph(this.info.get_sizingMode(),this.renderer.bar.voices[v].beats[key1]);
			}
			++v;
		}
	}
	,alignGlyph: function(sizing,beat) {
		var g = this._effectGlyphs[beat.voice.index][beat.index];
		var pos;
		var container = this.renderer.getBeatContainer(beat);
		switch(sizing) {
		case 0:
			pos = container.preNotes;
			g.x = this.renderer.get_beatGlyphsStart() + pos.x + container.x;
			g.width = pos.width;
			break;
		case 1:case 4:
			pos = container.onNotes;
			g.x = this.renderer.get_beatGlyphsStart() + pos.x + container.x;
			g.width = pos.width;
			break;
		case 2:case 5:
			pos = container.onNotes;
			g.x = this.renderer.get_beatGlyphsStart() + pos.x + container.x;
			if(container.beat.get_isLastOfVoice()) {
				g.width = this.renderer.width - g.x;
			} else {
				g.width = container.width - container.preNotes.width - container.preNotes.x;
			}
			break;
		case 6:
			g.width = this.renderer.width;
			break;
		default:
		}
	}
	,__class__: alphaTab.rendering.EffectBand
});
alphaTab.rendering.EffectBandSizingInfo = function() {
	this._effectSlot = null;
	this.slots = null;
	var this1 = [];
	this.slots = this1;
	var this2 = {}
	this._effectSlot = this2;
};
alphaTab.rendering.EffectBandSizingInfo.__name__ = ["alphaTab","rendering","EffectBandSizingInfo"];
alphaTab.rendering.EffectBandSizingInfo.prototype = {
	getOrCreateSlot: function(band) {
		var this1 = this._effectSlot;
		var key = band.info.get_effectId();
		if(this1.hasOwnProperty(key)) {
			var slot = this._effectSlot[band.info.get_effectId()];
			if(slot.canBeUsed(band)) {
				return slot;
			}
		}
		var slot1 = $iterator(this.slots)();
		while(slot1.hasNext()) {
			var slot2 = slot1.next();
			if(slot2.canBeUsed(band)) {
				return slot2;
			}
		}
		var newSlot = new alphaTab.rendering.EffectBandSlot();
		this.slots.push(newSlot);
		return newSlot;
	}
	,register: function(effectBand) {
		var freeSlot = this.getOrCreateSlot(effectBand);
		freeSlot.update(effectBand);
		this._effectSlot[effectBand.info.get_effectId()] = freeSlot;
	}
	,__class__: alphaTab.rendering.EffectBandSizingInfo
};
alphaTab.rendering.EffectBandSlot = function() {
	this.bands = null;
	this.shared = null;
	var this1 = [];
	this.bands = this1;
	this.shared = new alphaTab.rendering.EffectBandSlotShared();
};
alphaTab.rendering.EffectBandSlot.__name__ = ["alphaTab","rendering","EffectBandSlot"];
alphaTab.rendering.EffectBandSlot.prototype = {
	update: function(effectBand) {
		if(!effectBand.info.get_canShareBand()) {
			this.shared.uniqueEffectId = effectBand.info.get_effectId();
		}
		effectBand.slot = this;
		this.bands.push(effectBand);
		if(effectBand.height > this.shared.height) {
			this.shared.height = effectBand.height;
		}
		if(this.shared.firstBeat == null || effectBand.firstBeat.isBefore(this.shared.firstBeat)) {
			this.shared.firstBeat = effectBand.firstBeat;
		}
		if(this.shared.lastBeat == null || effectBand.lastBeat.isAfter(this.shared.lastBeat)) {
			this.shared.lastBeat = effectBand.lastBeat;
		}
	}
	,canBeUsed: function(band) {
		if(this.shared.uniqueEffectId == null && band.info.get_canShareBand() || band.info.get_effectId() == this.shared.uniqueEffectId) {
			if(!(this.shared.firstBeat == null || this.shared.lastBeat.isBefore(band.firstBeat))) {
				return this.shared.lastBeat.isBefore(this.shared.firstBeat);
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: alphaTab.rendering.EffectBandSlot
};
alphaTab.rendering.EffectBandSlotShared = function() {
	this.uniqueEffectId = null;
	this.y = 0.0;
	this.height = 0.0;
	this.firstBeat = null;
	this.lastBeat = null;
	this.y = 0;
	this.height = 0;
};
alphaTab.rendering.EffectBandSlotShared.__name__ = ["alphaTab","rendering","EffectBandSlotShared"];
alphaTab.rendering.EffectBandSlotShared.prototype = {
	__class__: alphaTab.rendering.EffectBandSlotShared
};
alphaTab.rendering._EffectBarGlyphSizing = {};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_ = {};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.__name__ = ["alphaTab","rendering","_EffectBarGlyphSizing","EffectBarGlyphSizing_Impl_"];
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "SinglePreBeat";
	case 1:
		return "SingleOnBeat";
	case 2:
		return "SingleOnBeatToEnd";
	case 3:
		return "GroupedBeforeBeat";
	case 4:
		return "GroupedOnBeat";
	case 5:
		return "GroupedOnBeatToEnd";
	case 6:
		return "FullBar";
	}
	return "";
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "fullbar":
		return 6;
	case "groupedbeforebeat":
		return 3;
	case "groupedonbeat":
		return 4;
	case "groupedonbeattoend":
		return 5;
	case "singleonbeat":
		return 1;
	case "singleonbeattoend":
		return 2;
	case "singleprebeat":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.EffectBarRenderer = function(renderer,bar,infos) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this._infos = null;
	this._bands = null;
	this._bandLookup = null;
	this.sizingInfo = null;
	this._infos = infos;
};
alphaTab.rendering.EffectBarRenderer.__name__ = ["alphaTab","rendering","EffectBarRenderer"];
alphaTab.rendering.EffectBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.EffectBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	updateSizes: function() {
		this.topOverflow = 0;
		this.bottomOverflow = 0;
		this.topPadding = 0;
		this.bottomPadding = 0;
		this.updateHeight();
		alphaTab.rendering.BarRendererBase.prototype.updateSizes.call(this);
	}
	,finalizeRenderer: function() {
		alphaTab.rendering.BarRendererBase.prototype.finalizeRenderer.call(this);
		this.updateHeight();
	}
	,updateHeight: function() {
		if(this.sizingInfo == null) {
			return;
		}
		var y = 0;
		var slot = $iterator(this.sizingInfo.slots)();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			slot1.shared.y = y;
			var band = $iterator(slot1.bands)();
			while(band.hasNext()) {
				var band1 = band.next();
				band1.y = y;
				band1.height = slot1.shared.height;
			}
			y = y + slot1.shared.height;
		}
		this.height = y;
	}
	,applyLayoutingInfo: function() {
		if(!alphaTab.rendering.BarRendererBase.prototype.applyLayoutingInfo.call(this)) {
			return false;
		}
		if(this.index > 0) {
			var previousRenderer = js.Boot.__cast(this.get_previousRenderer() , alphaTab.rendering.EffectBarRenderer);
			this.sizingInfo = previousRenderer.sizingInfo;
		} else {
			this.sizingInfo = new alphaTab.rendering.EffectBandSizingInfo();
		}
		var effectBand = $iterator(this._bands)();
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			effectBand1.alignGlyphs();
			if(!effectBand1.isEmpty) {
				this.sizingInfo.register(effectBand1);
			}
		}
		this.updateHeight();
		return true;
	}
	,scaleToWidth: function(width) {
		alphaTab.rendering.BarRendererBase.prototype.scaleToWidth.call(this,width);
		var effectBand = $iterator(this._bands)();
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			effectBand1.alignGlyphs();
		}
	}
	,createBeatGlyphs: function() {
		var this1 = [];
		this._bands = this1;
		var this2 = {}
		this._bandLookup = this2;
		var voice = $iterator(this.bar.voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.hasVoiceContainer(voice1)) {
				var info = HxOverrides.iter(this._infos);
				while(info.hasNext()) {
					var info1 = info.next();
					var band = new alphaTab.rendering.EffectBand(voice1,info1);
					band.renderer = this;
					band.doLayout();
					this._bands.push(band);
					this._bandLookup[Std.string(voice1.index) + "." + info1.get_effectId()] = band;
				}
			}
		}
		var voice2 = $iterator(this.bar.voices)();
		while(voice2.hasNext()) {
			var voice3 = voice2.next();
			if(this.hasVoiceContainer(voice3)) {
				this.createVoiceGlyphs(voice3);
			}
		}
		var effectBand = $iterator(this._bands)();
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			if(effectBand1.isLinkedToPrevious) {
				this.isLinkedToPrevious = true;
			}
		}
	}
	,createVoiceGlyphs: function(v) {
		var b = $iterator(v.beats)();
		while(b.hasNext()) {
			var b1 = b.next();
			var container = new alphaTab.rendering.glyphs.BeatContainerGlyph(b1,this.getOrCreateVoiceContainer(v));
			container.preNotes = new alphaTab.rendering.glyphs.BeatGlyphBase();
			container.onNotes = new alphaTab.rendering.glyphs.BeatOnNoteGlyphBase();
			this.addBeatGlyph(container);
			var effectBand = $iterator(this._bands)();
			while(effectBand.hasNext()) {
				var effectBand1 = effectBand.next();
				effectBand1.createGlyph(b1);
			}
		}
	}
	,paint: function(cx,cy,canvas) {
		this.paintBackground(cx,cy,canvas);
		var effectBand = $iterator(this._bands)();
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			canvas.set_color(effectBand1.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
			if(!effectBand1.isEmpty) {
				effectBand1.paint(cx + this.x,cy + this.y,canvas);
			}
		}
	}
	,getBand: function(voice,effectId) {
		var id = Std.string(voice.index) + "." + effectId;
		if(this._bandLookup.hasOwnProperty(id)) {
			return this._bandLookup[id];
		}
		return null;
	}
	,__class__: alphaTab.rendering.EffectBarRenderer
});
alphaTab.rendering.RenderFinishedEventArgs = $hx_exports["alphaTab"]["rendering"]["RenderFinishedEventArgs"] = function() {
	this.width = 0.0;
	this.height = 0.0;
	this.totalWidth = 0.0;
	this.totalHeight = 0.0;
	this.firstMasterBarIndex = 0;
	this.lastMasterBarIndex = 0;
	this.renderResult = null;
};
alphaTab.rendering.RenderFinishedEventArgs.__name__ = ["alphaTab","rendering","RenderFinishedEventArgs"];
alphaTab.rendering.RenderFinishedEventArgs.prototype = {
	__class__: alphaTab.rendering.RenderFinishedEventArgs
};
alphaTab.rendering.utils = {};
alphaTab.rendering.utils.IBeamYCalculator = function() { };
alphaTab.rendering.utils.IBeamYCalculator.__name__ = ["alphaTab","rendering","utils","IBeamYCalculator"];
alphaTab.rendering.utils.IBeamYCalculator.prototype = {
	__class__: alphaTab.rendering.utils.IBeamYCalculator
};
alphaTab.rendering.ScoreBarRenderer = function(renderer,bar) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this.simpleWhammyOverflow = 0.0;
	this.accidentalHelper = null;
	this._startSpacing = false;
	this.accidentalHelper = new alphaTab.rendering.utils.AccidentalHelper(bar);
};
alphaTab.rendering.ScoreBarRenderer.__name__ = ["alphaTab","rendering","ScoreBarRenderer"];
alphaTab.rendering.ScoreBarRenderer.__interfaces__ = [alphaTab.rendering.utils.IBeamYCalculator];
alphaTab.rendering.ScoreBarRenderer.paintSingleBar = function(canvas,x1,y1,x2,y2,size) {
	canvas.beginPath();
	canvas.moveTo(x1,y1);
	canvas.lineTo(x2,y2);
	canvas.lineTo(x2,y2 + size);
	canvas.lineTo(x1,y1 + size);
	canvas.closePath();
	canvas.fill();
};
alphaTab.rendering.ScoreBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.ScoreBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	getBeatDirection: function(beat) {
		var g = js.Boot.__cast(this.getOnNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(g != null) {
			return g.noteHeads.get_direction();
		}
		return 0;
	}
	,getNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		var g = js.Boot.__cast(this.getOnNotesGlyphForBeat(note.beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(g != null) {
			var x = g.container.voiceContainer.x + g.container.x + g.x;
			if(onEnd) {
				x = x + g.width;
			}
			return x;
		}
		return 0;
	}
	,getNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		var beat = js.Boot.__cast(this.getOnNotesGlyphForBeat(note.beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(beat != null) {
			return beat.noteHeads.getNoteY(note,aboveNote);
		}
		return 0;
	}
	,get_lineOffset: function() {
		return (8 + 1) * this.get_scale();
	}
	,updateSizes: function() {
		var res = this.get_resources();
		var this1 = 0.2;
		var glyphOverflow = res.tablatureFont.size / 2 + res.tablatureFont.size * this1;
		this.topPadding = glyphOverflow;
		this.bottomPadding = glyphOverflow;
		this.height = this.get_lineOffset() * 4 + this.topPadding + this.bottomPadding;
		alphaTab.rendering.BarRendererBase.prototype.updateSizes.call(this);
	}
	,doLayout: function() {
		alphaTab.rendering.BarRendererBase.prototype.doLayout.call(this);
		if(!this.bar.get_isEmpty() && this.accidentalHelper.maxNoteValueBeat != null) {
			var top = this.getScoreY(0,0);
			var bottom = this.getScoreY(8,0);
			var whammyOffset = this.simpleWhammyOverflow;
			this.registerOverflowTop(whammyOffset);
			var maxNoteY = this.getYPositionForNoteValue(this.accidentalHelper.maxNoteValue);
			var maxNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.maxNoteValueBeat);
			if(maxNoteHelper.direction == 0) {
				maxNoteY = maxNoteY - this.getStemSize(maxNoteHelper);
				maxNoteY = maxNoteY - maxNoteHelper.fingeringCount * this.get_resources().graceFont.size;
				if(maxNoteHelper.hasTuplet) {
					maxNoteY = maxNoteY - this.get_resources().effectFont.size * 2;
				}
			}
			if(maxNoteHelper.hasTuplet) {
				var this1 = 1.5;
				maxNoteY = maxNoteY - this.get_resources().effectFont.size * this1;
			}
			if(maxNoteY < top) {
				this.registerOverflowTop(Math.abs(maxNoteY) + whammyOffset);
			}
			var minNoteY = this.getYPositionForNoteValue(this.accidentalHelper.minNoteValue);
			var minNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.minNoteValueBeat);
			if(minNoteHelper.direction == 1) {
				minNoteY = minNoteY + this.getStemSize(minNoteHelper);
				minNoteY = minNoteY + minNoteHelper.fingeringCount * this.get_resources().graceFont.size;
			}
			if(minNoteY > bottom) {
				this.registerOverflowBottom(Math.abs(minNoteY) - bottom);
			}
		}
	}
	,addBeatGlyph: function(g) {
		alphaTab.rendering.BarRendererBase.prototype.addBeatGlyph.call(this,g);
		var tmp = g.beat.get_hasTuplet() && g.beat.id == g.beat.tupletGroup.beats[0].id;
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.paint.call(this,cx,cy,canvas);
		this.paintBeams(cx,cy,canvas);
		this.paintTuplets(cx,cy,canvas);
	}
	,paintTuplets: function(cx,cy,canvas) {
		var voice = $iterator(this.bar.voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.hasVoiceContainer(voice1)) {
				var container = this.getOrCreateVoiceContainer(voice1);
				var tupletGroup = $iterator(container.tupletGroups)();
				while(tupletGroup.hasNext()) {
					var tupletGroup1 = tupletGroup.next();
					this.paintTupletHelper(cx + this.get_beatGlyphsStart(),cy,canvas,tupletGroup1);
				}
			}
		}
	}
	,paintBeams: function(cx,cy,canvas) {
		var i = 0;
		var j = this.helpers.beamHelpers.length;
		while(i < j) {
			var v = this.helpers.beamHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				this.paintBeamHelper(cx + this.get_beatGlyphsStart(),cy,canvas,h);
				++k;
			}
			++i;
		}
	}
	,paintBeamHelper: function(cx,cy,canvas,h) {
		canvas.set_color(h.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
		if(h.beats.length == 1) {
			this.paintFooter(cx,cy,canvas,h);
		} else {
			this.paintBar(cx,cy,canvas,h);
		}
	}
	,paintTupletHelper: function(cx,cy,canvas,h) {
		var res = this.get_resources();
		var oldAlign = canvas.get_textAlign();
		canvas.set_color(h.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
		canvas.set_textAlign(1);
		var s;
		var num = h.beats[0].tupletNumerator;
		var den = h.beats[0].tupletDenominator;
		if(num == 2 && den == 3) {
			s = "2";
		} else if(num == 3 && den == 2) {
			s = "3";
		} else if(num == 4 && den == 6) {
			s = "4";
		} else if(num == 5 && den == 4) {
			s = "5";
		} else if(num == 6 && den == 4) {
			s = "6";
		} else if(num == 7 && den == 4) {
			s = "7";
		} else if(num == 9 && den == 8) {
			s = "9";
		} else if(num == 10 && den == 8) {
			s = "10";
		} else if(num == 11 && den == 8) {
			s = "11";
		} else if(num == 12 && den == 8) {
			s = "12";
		} else if(num == 13 && den == 8) {
			s = "13";
		} else {
			s = Std.string(num) + ":" + Std.string(den);
		}
		if(h.beats.length == 1 || !h.isFull) {
			var i = 0;
			var j = h.beats.length;
			while(i < j) {
				var beat = h.beats[i];
				var beamingHelper = this.helpers.beamHelperLookup[h.voice.index][beat.index];
				if(beamingHelper == null) {
					++i;
					continue;
				}
				var direction = beamingHelper.direction;
				var tupletX = beamingHelper.getBeatLineX(beat) + this.get_scale();
				var tupletY = cy + this.y + this.calculateBeamY(beamingHelper,tupletX);
				var offset;
				if(direction == 0) {
					var this1 = 1.5;
					offset = res.effectFont.size * this1;
				} else {
					offset = -3 * this.get_scale();
				}
				canvas.set_font(res.effectFont);
				canvas.fillText(s,cx + this.x + tupletX,tupletY - offset);
				++i;
			}
		} else {
			var firstBeat = h.beats[0];
			var lastBeat = h.beats[h.beats.length - 1];
			var firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index][firstBeat.index];
			var lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index][lastBeat.index];
			if(firstBeamingHelper != null && lastBeamingHelper != null) {
				var direction1 = firstBeamingHelper.direction;
				var startX = firstBeamingHelper.getBeatLineX(firstBeat) + this.get_scale();
				var endX = lastBeamingHelper.getBeatLineX(lastBeat) + this.get_scale();
				canvas.set_font(res.effectFont);
				var sw = canvas.measureText(s);
				var sp = 3 * this.get_scale();
				var middleX = (startX + endX) / 2;
				var offset1X = middleX - sw / 2 - sp;
				var offset2X = middleX + sw / 2 + sp;
				var startY = this.calculateBeamYWithDirection(firstBeamingHelper,startX,firstBeamingHelper.direction);
				var endY = this.calculateBeamYWithDirection(lastBeamingHelper,endX,firstBeamingHelper.direction);
				var k = (endY - startY) / (endX - startX);
				var d = startY - k * startX;
				var offset1Y = k * offset1X + d;
				var middleY = k * middleX + d;
				var offset2Y = k * offset2X + d;
				var offset1 = 10 * this.get_scale();
				var size = 5 * this.get_scale();
				if(direction1 == 1) {
					offset1 = offset1 * -1;
					size = size * -1;
				}
				canvas.beginPath();
				var tmp = cx + this.x + startX;
				var this2 = system.Convert.toInt32_Single(cy + this.y + startY - offset1);
				canvas.moveTo(tmp,this2);
				var tmp1 = cx + this.x + startX;
				var this3 = system.Convert.toInt32_Single(cy + this.y + startY - offset1 - size);
				canvas.lineTo(tmp1,this3);
				var tmp2 = cx + this.x + offset1X;
				var this4 = system.Convert.toInt32_Single(cy + this.y + offset1Y - offset1 - size);
				canvas.lineTo(tmp2,this4);
				canvas.stroke();
				canvas.beginPath();
				var tmp3 = cx + this.x + offset2X;
				var this5 = system.Convert.toInt32_Single(cy + this.y + offset2Y - offset1 - size);
				canvas.moveTo(tmp3,this5);
				var tmp4 = cx + this.x + endX;
				var this6 = system.Convert.toInt32_Single(cy + this.y + endY - offset1 - size);
				canvas.lineTo(tmp4,this6);
				var tmp5 = cx + this.x + endX;
				var this7 = system.Convert.toInt32_Single(cy + this.y + endY - offset1);
				canvas.lineTo(tmp5,this7);
				canvas.stroke();
				var this8 = 2;
				canvas.fillText(s,cx + this.x + middleX,cy + this.y + middleY - offset1 - size - res.effectFont.size / this8);
			}
		}
		canvas.set_textAlign(oldAlign);
	}
	,getStemSize: function(helper) {
		var size = helper.beats.length == 1 ? this.getFooterStemSize(helper.shortestDuration) : this.getBarStemSize(helper.shortestDuration);
		if(helper.isGrace) {
			size = size * 0.75;
		}
		return size;
	}
	,getBarStemSize: function(duration) {
		var size;
		switch(duration) {
		case -4:
			size = 6;
			break;
		case 2:
			size = 6;
			break;
		case 4:
			size = 6;
			break;
		case 8:
			size = 6;
			break;
		case 16:
			size = 6;
			break;
		case 32:
			size = 7;
			break;
		case 64:
			size = 7;
			break;
		case 128:
			size = 9;
			break;
		case 256:
			size = 10;
			break;
		default:
			size = 0;
		}
		var this1 = size;
		return this.getScoreY(this1,0);
	}
	,getFooterStemSize: function(duration) {
		var size;
		switch(duration) {
		case -4:
			size = 6;
			break;
		case 2:
			size = 6;
			break;
		case 4:
			size = 6;
			break;
		case 8:
			size = 6;
			break;
		case 16:
			size = 6;
			break;
		case 32:
			size = 6;
			break;
		case 64:
			size = 6;
			break;
		case 128:
			size = 6;
			break;
		case 256:
			size = 6;
			break;
		default:
			size = 0;
		}
		var this1 = size;
		return this.getScoreY(this1,0);
	}
	,getYPositionForNoteValue: function(noteValue) {
		var this1 = this.accidentalHelper.getNoteLineForValue(noteValue,true);
		return this.getScoreY(this1,0);
	}
	,calculateBeamY: function(h,x) {
		var stemSize = this.getStemSize(h);
		return h.calculateBeamY(stemSize,this.get_scale(),x,this.get_scale(),this);
	}
	,calculateBeamYWithDirection: function(h,x,direction) {
		var stemSize = this.getStemSize(h);
		return h.calculateBeamYWithDirection(stemSize,this.get_scale(),x,this.get_scale(),this,direction);
	}
	,paintBar: function(cx,cy,canvas,h) {
		var i = 0;
		var j = h.beats.length;
		while(i < j) {
			var beat = h.beats[i];
			var isGrace = beat.graceType != 0;
			var scaleMod = isGrace ? 0.75 : 1;
			var beatLineX = h.getBeatLineX(beat) + this.get_scale();
			var direction = h.direction;
			var y1 = cy + this.y;
			y1 = y1 + (direction == 0 ? this.getYPositionForNoteValue(h.getBeatMinValue(beat)) : this.getYPositionForNoteValue(h.getBeatMaxValue(beat)));
			var y2 = cy + this.y;
			y2 = y2 + this.calculateBeamY(h,beatLineX);
			canvas.set_lineWidth(1.3 * this.get_scale());
			canvas.beginPath();
			canvas.moveTo(cx + this.x + beatLineX,y1);
			canvas.lineTo(cx + this.x + beatLineX,y2);
			canvas.stroke();
			canvas.set_lineWidth(this.get_scale());
			var fingeringY = y2;
			if(direction == 1) {
				var this1 = 2;
				fingeringY = fingeringY + canvas.get_font().size * this1;
			} else if(i != 0) {
				var this2 = 1.5;
				fingeringY = fingeringY - canvas.get_font().size * this2;
			}
			this.paintFingering(canvas,beat,cx + this.x + beatLineX,direction,fingeringY);
			var brokenBarOffset = 6 * this.get_scale() * scaleMod;
			var barSpacing = 7 * this.get_scale() * scaleMod;
			var barSize = 8 / 2 * this.get_scale() * scaleMod;
			var barCount = alphaTab.model.ModelUtils.getIndex(beat.duration) - 2;
			var barStart = cy + this.y;
			if(direction == 1) {
				barSpacing = -barSpacing;
				barSize = -barSize;
			}
			var barIndex = 0;
			while(barIndex < barCount) {
				var barStartX;
				var barEndX;
				var barStartY;
				var barEndY;
				var barY = barStart + barIndex * barSpacing;
				if(i < h.beats.length - 1) {
					if(alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(beat,h.beats[i + 1],barIndex)) {
						barStartX = beatLineX;
						barEndX = h.getBeatLineX(h.beats[i + 1]) + this.get_scale();
					} else if(i == 0 || !alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(h.beats[i - 1],beat,barIndex)) {
						barStartX = beatLineX;
						barEndX = barStartX + brokenBarOffset;
					} else {
						++barIndex;
						continue;
					}
					barStartY = barY + this.calculateBeamY(h,barStartX);
					barEndY = barY + this.calculateBeamY(h,barEndX);
					alphaTab.rendering.ScoreBarRenderer.paintSingleBar(canvas,cx + this.x + barStartX,barStartY,cx + this.x + barEndX,barEndY,barSize);
				} else if(i > 0 && !alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(beat,h.beats[i - 1],barIndex)) {
					barStartX = beatLineX - brokenBarOffset;
					barEndX = beatLineX;
					barStartY = barY + this.calculateBeamY(h,barStartX);
					barEndY = barY + this.calculateBeamY(h,barEndX);
					alphaTab.rendering.ScoreBarRenderer.paintSingleBar(canvas,cx + this.x + barStartX,barStartY,cx + this.x + barEndX,barEndY,barSize);
				}
				++barIndex;
			}
			++i;
		}
	}
	,paintFooter: function(cx,cy,canvas,h) {
		var beat = h.beats[0];
		if(beat.graceType == 3 || beat.graceType != 0 && this.get_settings().notation.notationMode == 1) {
			return;
		}
		var isGrace = beat.graceType != 0;
		var scaleMod = isGrace ? 0.75 : 1;
		var stemSize = this.getFooterStemSize(h.shortestDuration);
		var beatLineX = h.getBeatLineX(beat) + this.get_scale();
		var direction = h.direction;
		var topY = this.getYPositionForNoteValue(h.maxNoteValue);
		var bottomY = this.getYPositionForNoteValue(h.minNoteValue);
		var beamY;
		var fingeringY;
		if(direction == 1) {
			bottomY = bottomY + stemSize * scaleMod;
			beamY = bottomY;
			fingeringY = cy + this.y + bottomY;
		} else {
			topY = topY - stemSize * scaleMod;
			beamY = topY;
			fingeringY = cy + this.y + topY;
		}
		this.paintFingering(canvas,beat,cx + this.x + beatLineX,direction,fingeringY);
		if(beat.duration == 1 || beat.duration == -2 || beat.duration == -4) {
			return;
		}
		canvas.set_lineWidth(1.3 * this.get_scale());
		canvas.beginPath();
		canvas.moveTo(cx + this.x + beatLineX,cy + this.y + topY);
		canvas.lineTo(cx + this.x + beatLineX,cy + this.y + bottomY);
		canvas.stroke();
		canvas.set_lineWidth(this.get_scale());
		if(beat.graceType == 2) {
			var graceSizeY = 15 * this.get_scale();
			var graceSizeX = 12 * this.get_scale();
			canvas.beginPath();
			if(direction == 1) {
				canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2,cy + this.y + bottomY - graceSizeY);
				canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2,cy + this.y + bottomY);
			} else {
				canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2,cy + this.y + topY + graceSizeY);
				canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2,cy + this.y + topY);
			}
			canvas.stroke();
		}
		if(beat.duration > 4 || isGrace) {
			var this1 = 2;
			var glyph = new alphaTab.rendering.glyphs.BeamGlyph(beatLineX - this.get_scale() / this1,beamY,beat.duration,direction,isGrace);
			glyph.renderer = this;
			glyph.doLayout();
			glyph.paint(cx + this.x,cy + this.y,canvas);
		}
	}
	,paintFingering: function(canvas,beat,beatLineX,direction,topY) {
		var settings = this.get_settings();
		if(settings.notation.fingeringMode != 0 && settings.notation.fingeringMode != 1) {
			return;
		}
		if(direction == 0) {
			beatLineX = beatLineX - 10 * this.get_scale();
		} else {
			beatLineX = beatLineX + 3 * this.get_scale();
		}
		var noteList = beat.notes.slice(0);
		var comparison = function(a,b) {
			return a.get_realValue() - b.get_realValue();
		};
		noteList.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var n = 0;
		while(n < noteList.length) {
			var note = noteList[n];
			var text = null;
			if(note.leftHandFinger != -2) {
				text = alphaTab.model.ModelUtils.fingerToString(settings,beat,note.leftHandFinger,true);
			} else if(note.rightHandFinger != -2) {
				text = alphaTab.model.ModelUtils.fingerToString(settings,beat,note.rightHandFinger,false);
			}
			if(text == null) {
				++n;
				continue;
			}
			canvas.fillText(text,beatLineX,topY);
			topY = topY - system.Convert.toInt32_Single(canvas.get_font().size);
			++n;
		}
	}
	,createPreBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.createPreBeatGlyphs.call(this);
		if(this.bar.get_masterBar().isRepeatStart) {
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.RepeatOpenGlyph(0,0,1.5,3));
		}
		if(this.get_isFirstOfLine() || this.bar.clef != this.bar.previousBar.clef || this.bar.clefOttava != this.bar.previousBar.clefOttava) {
			var offset = 0;
			var correction = 0;
			var _g = this.bar.clef;
			switch(_g) {
			case 0:
				offset = 6;
				break;
			case 1:
				offset = 6;
				break;
			case 2:
				offset = 4;
				break;
			case 3:
				offset = 4;
				correction = -1;
				break;
			case 4:
				offset = 8;
				break;
			default:
			}
			this.createStartSpacing();
			var this1 = offset;
			var this2 = correction;
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.ClefGlyph(0,this.getScoreY(this1,this2),this.bar.clef,this.bar.clefOttava));
		}
		if(this.index == 0 && this.bar.get_masterBar().keySignature != 0 || this.bar.previousBar != null && this.bar.get_masterBar().keySignature != this.bar.previousBar.get_masterBar().keySignature) {
			this.createStartSpacing();
			this.createKeySignatureGlyphs();
		}
		if(this.bar.previousBar == null || this.bar.previousBar != null && this.bar.get_masterBar().timeSignatureNumerator != this.bar.previousBar.get_masterBar().timeSignatureNumerator || this.bar.previousBar != null && this.bar.get_masterBar().timeSignatureDenominator != this.bar.previousBar.get_masterBar().timeSignatureDenominator) {
			this.createStartSpacing();
			this.createTimeSignatureGlyphs();
		}
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.BarNumberGlyph(0,this.getScoreY(-0.5,0),this.bar.index + 1));
		if(this.bar.get_isEmpty()) {
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,30 * this.get_scale()));
		}
	}
	,createBeatGlyphs: function() {
		var v = 0;
		while(v < this.bar.voices.length) {
			var voice = this.bar.voices[v];
			if(this.hasVoiceContainer(voice)) {
				this.createVoiceGlyphs(voice);
			}
			++v;
		}
	}
	,createPostBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.createPostBeatGlyphs.call(this);
		if(this.bar.get_masterBar().get_isRepeatEnd()) {
			this.addPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.x,0));
			if(this.bar.get_masterBar().repeatCount > 2) {
				this.addPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCountGlyph(0,this.getScoreY(-1,-3),this.bar.get_masterBar().repeatCount));
			}
		} else {
			this.addPostBeatGlyph(new alphaTab.rendering.glyphs.BarSeperatorGlyph(0,0));
		}
	}
	,createStartSpacing: function() {
		if(this._startSpacing) {
			return;
		}
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,2 * this.get_scale()));
		this._startSpacing = true;
	}
	,createKeySignatureGlyphs: function() {
		var offsetClef = 0;
		var currentKey = this.bar.get_masterBar().keySignature;
		var previousKey = this.bar.previousBar == null ? 0 : this.bar.previousBar.get_masterBar().keySignature;
		var _g = this.bar.clef;
		switch(_g) {
		case 0:
			offsetClef = 0;
			break;
		case 1:
			offsetClef = -1;
			break;
		case 2:
			offsetClef = 1;
			break;
		case 3:
			offsetClef = 2;
			break;
		case 4:
			offsetClef = 1;
			break;
		default:
		}
		var this1 = {}
		var newLines = this1;
		var this2 = [];
		var newGlyphs = this2;
		if(alphaTab.model.ModelUtils.keySignatureIsSharp(currentKey)) {
			var i = 0;
			while(i < Math.abs(currentKey)) {
				var step = alphaTab.rendering.ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
				var this3 = step;
				newGlyphs.push(new alphaTab.rendering.glyphs.AccidentalGlyph(0,this.getScoreY(this3,0),2,false));
				newLines[step] = true;
				++i;
			}
		} else {
			var i1 = 0;
			while(i1 < Math.abs(currentKey)) {
				var step1 = alphaTab.rendering.ScoreBarRenderer.FlatKsSteps[i1] + offsetClef;
				var this4 = step1;
				newGlyphs.push(new alphaTab.rendering.glyphs.AccidentalGlyph(0,this.getScoreY(this4,0),3,false));
				newLines[step1] = true;
				++i1;
			}
		}
		var naturalizeSymbols = Math.abs(previousKey);
		var previousKeyPositions = alphaTab.model.ModelUtils.keySignatureIsSharp(previousKey) ? alphaTab.rendering.ScoreBarRenderer.SharpKsSteps : alphaTab.rendering.ScoreBarRenderer.FlatKsSteps;
		var i2 = 0;
		while(i2 < naturalizeSymbols) {
			var step2 = previousKeyPositions[i2] + offsetClef;
			if(!newLines.hasOwnProperty(step2)) {
				var this5 = previousKeyPositions[i2] + offsetClef;
				this.addPreBeatGlyph(new alphaTab.rendering.glyphs.AccidentalGlyph(0,this.getScoreY(this5,0),1,false));
			}
			++i2;
		}
		var newGlyph = $iterator(newGlyphs)();
		while(newGlyph.hasNext()) {
			var newGlyph1 = newGlyph.next();
			this.addPreBeatGlyph(newGlyph1);
		}
	}
	,createTimeSignatureGlyphs: function() {
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph(0,this.getScoreY(2,0),this.bar.get_masterBar().timeSignatureNumerator,this.bar.get_masterBar().timeSignatureDenominator,this.bar.get_masterBar().timeSignatureCommon));
	}
	,createVoiceGlyphs: function(v) {
		var i = 0;
		var j = v.beats.length;
		while(i < j) {
			var b = v.beats[i];
			var container = new alphaTab.rendering.ScoreBeatContainerGlyph(b,this.getOrCreateVoiceContainer(v));
			container.preNotes = new alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph();
			container.onNotes = new alphaTab.rendering.glyphs.ScoreBeatGlyph();
			this.addBeatGlyph(container);
			++i;
		}
	}
	,getNoteLine: function(n) {
		return this.accidentalHelper.getNoteLine(n);
	}
	,getScoreY: function(steps,correction) {
		if(correction == null) {
			correction = 0;
		}
		return this.get_lineOffset() / 2 * steps + correction * this.get_scale();
	}
	,paintBackground: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.paintBackground.call(this,cx,cy,canvas);
		var res = this.get_resources();
		canvas.set_color(res.staffLineColor);
		var lineY = cy + this.y + this.topPadding;
		var lineOffset = this.get_lineOffset();
		var i = 0;
		while(i < 5) {
			if(i > 0) {
				lineY = lineY + lineOffset;
			}
			var tmp = cx + this.x;
			var this1 = system.Convert.toInt32_Single(lineY);
			canvas.fillRect(tmp,this1,this.width,this.get_scale());
			++i;
		}
		canvas.set_color(res.mainGlyphColor);
		this.paintSimileMark(cx,cy,canvas);
	}
	,__class__: alphaTab.rendering.ScoreBarRenderer
});
alphaTab.rendering.glyphs.BeatContainerGlyph = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this.voiceContainer = null;
	this.beat = null;
	this.preNotes = null;
	this.onNotes = null;
	this.ties = null;
	this.minWidth = 0.0;
	this.beat = beat;
	var this1 = [];
	this.ties = this1;
	this.voiceContainer = voiceContainer;
};
alphaTab.rendering.glyphs.BeatContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","BeatContainerGlyph"];
alphaTab.rendering.glyphs.BeatContainerGlyph.getGroupId = function(beat) {
	return "b" + Std.string(beat.id);
};
alphaTab.rendering.glyphs.BeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	get_onTimeX: function() {
		return this.onNotes.x + this.onNotes.centerX;
	}
	,registerLayoutingInfo: function(layoutings) {
		var preBeatStretch = this.get_onTimeX();
		var postBeatStretch = 0;
		var tie = $iterator(this.ties)();
		while(tie.hasNext()) {
			var tie1 = tie.next();
			if(tie1.width > postBeatStretch) {
				postBeatStretch = tie1.width;
			}
		}
		postBeatStretch = postBeatStretch + (this.onNotes.x + (this.onNotes.width - this.onNotes.centerX));
		layoutings.addBeatSpring(this.beat,preBeatStretch,postBeatStretch);
		layoutings.setPreBeatSize(this.beat,this.preNotes.width);
		layoutings.setOnBeatSize(this.beat,this.onNotes.width);
		layoutings.setBeatCenterX(this.beat,this.onNotes.centerX);
	}
	,applyLayoutingInfo: function(info) {
		var offset = info.getBeatCenterX(this.beat) - this.onNotes.centerX;
		this.preNotes.x = offset;
		this.preNotes.width = info.getPreBeatSize(this.beat);
		this.onNotes.width = info.getOnBeatSize(this.beat);
		this.onNotes.x = this.preNotes.x + this.preNotes.width;
		this.onNotes.updateBeamingHelper();
	}
	,doLayout: function() {
		this.preNotes.x = 0;
		this.preNotes.renderer = this.renderer;
		this.preNotes.container = this;
		this.preNotes.doLayout();
		this.onNotes.x = this.preNotes.x + this.preNotes.width;
		this.onNotes.renderer = this.renderer;
		this.onNotes.container = this;
		this.onNotes.doLayout();
		var i = this.beat.notes.length - 1;
		while(i >= 0) this.createTies(this.beat.notes[i--]);
		this.updateWidth();
	}
	,updateWidth: function() {
		this.minWidth = this.preNotes.width + this.onNotes.width;
		if(!this.beat.get_isRest()) {
			if(this.onNotes.beamingHelper.beats.length == 1) {
				if(this.beat.duration >= 8) {
					this.minWidth = this.minWidth + 20 * this.get_scale();
				}
			} else {
				var _g = this.beat.duration;
				switch(_g) {
				case 128:case 256:
					this.minWidth = this.minWidth + 10 * this.get_scale();
					break;
				default:
				}
			}
		}
		var tieWidth = 0;
		var tie = $iterator(this.ties)();
		while(tie.hasNext()) {
			var tie1 = tie.next();
			if(tie1.width > tieWidth) {
				tieWidth = tie1.width;
			}
		}
		this.minWidth = this.minWidth + tieWidth;
		this.width = this.minWidth;
	}
	,scaleToWidth: function(beatWidth) {
		var tie = $iterator(this.ties)();
		while(tie.hasNext()) {
			var tie1 = tie.next();
			tie1.doLayout();
		}
		this.onNotes.updateBeamingHelper();
		this.width = beatWidth;
	}
	,createTies: function(n) {
	}
	,paint: function(cx,cy,canvas) {
		if(this.beat.voice.isEmpty) {
			return;
		}
		var isEmptyGlyph = this.preNotes.get_isEmpty() && this.onNotes.get_isEmpty() && this.ties.length == 0;
		if(isEmptyGlyph) {
			return;
		}
		canvas.beginGroup(alphaTab.rendering.glyphs.BeatContainerGlyph.getGroupId(this.beat));
		this.preNotes.paint(cx + this.x,cy + this.y,canvas);
		this.onNotes.paint(cx + this.x,cy + this.y,canvas);
		var staffX = cx - this.voiceContainer.x - this.renderer.x;
		var staffY = cy - this.voiceContainer.y - this.renderer.y;
		var i = 0;
		var j = this.ties.length;
		while(i < j) {
			var t = this.ties[i];
			t.renderer = this.renderer;
			t.paint(staffX,staffY,canvas);
			++i;
		}
		canvas.endGroup();
	}
	,__class__: alphaTab.rendering.glyphs.BeatContainerGlyph
});
alphaTab.rendering.ScoreBeatContainerGlyph = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.BeatContainerGlyph.call(this,beat,voiceContainer);
	this._bend = null;
	this._effectSlur = null;
	this._effectEndSlur = null;
};
alphaTab.rendering.ScoreBeatContainerGlyph.__name__ = ["alphaTab","rendering","ScoreBeatContainerGlyph"];
alphaTab.rendering.ScoreBeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.BeatContainerGlyph;
alphaTab.rendering.ScoreBeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,{
	doLayout: function() {
		this._effectSlur = null;
		this._effectEndSlur = null;
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.doLayout.call(this);
		if(this.beat.isLegatoOrigin) {
			if(this.beat.previousBeat == null || !this.beat.previousBeat.isLegatoOrigin) {
				var destination = this.beat.nextBeat;
				while(destination.nextBeat != null && destination.nextBeat.get_isLegatoDestination()) destination = destination.nextBeat;
				this.ties.push(new alphaTab.rendering.glyphs.ScoreLegatoGlyph(this.beat,destination,false));
			}
		} else if(this.beat.get_isLegatoDestination()) {
			if(!this.beat.isLegatoOrigin) {
				var origin = this.beat.previousBeat;
				while(origin.previousBeat != null && origin.previousBeat.isLegatoOrigin) origin = origin.previousBeat;
				this.ties.push(new alphaTab.rendering.glyphs.ScoreLegatoGlyph(origin,this.beat,true));
			}
		}
		if(this._bend != null) {
			this._bend.renderer = this.renderer;
			this._bend.doLayout();
			this.updateWidth();
		}
	}
	,createTies: function(n) {
		if(!n.isVisible) {
			return;
		}
		if(n.get_isTieOrigin() && !n.get_hasBend() && !n.beat.get_hasWhammyBar() && n.beat.graceType != 3 && n.tieDestination != null && n.tieDestination.isVisible) {
			var tie = new alphaTab.rendering.glyphs.ScoreTieGlyph(n,n.tieDestination,false);
			this.ties.push(tie);
		}
		if(n.isTieDestination && !n.tieOrigin.get_hasBend() && !n.beat.get_hasWhammyBar()) {
			var tie1 = new alphaTab.rendering.glyphs.ScoreTieGlyph(n.tieOrigin,n,true);
			this.ties.push(tie1);
		}
		if(n.slideInType != 0 || n.slideOutType != 0) {
			var l = new alphaTab.rendering.glyphs.ScoreSlideLineGlyph(n.slideInType,n.slideOutType,n,this);
			this.ties.push(l);
		}
		if(n.get_isSlurOrigin() && n.slurDestination != null && n.slurDestination.isVisible) {
			var tie2 = new alphaTab.rendering.glyphs.ScoreSlurGlyph(n,n.slurDestination,false);
			this.ties.push(tie2);
		}
		if(n.isSlurDestination) {
			var tie3 = new alphaTab.rendering.glyphs.ScoreSlurGlyph(n.slurOrigin,n,true);
			this.ties.push(tie3);
		}
		if(this._effectSlur == null && n.beat.isEffectSlurOrigin && n.beat.effectSlurDestination != null) {
			var direction = this.onNotes.beamingHelper.direction;
			var startNote = direction == 0 ? n.beat.minNote : n.beat.maxNote;
			var endNote = direction == 0 ? n.beat.effectSlurDestination.minNote : n.beat.effectSlurDestination.maxNote;
			this._effectSlur = new alphaTab.rendering.glyphs.ScoreSlurGlyph(startNote,endNote,false);
			this.ties.push(this._effectSlur);
		}
		if(this._effectEndSlur == null && n.beat.get_isEffectSlurDestination() && n.beat.effectSlurOrigin != null) {
			var direction1 = this.onNotes.beamingHelper.direction;
			var startNote1 = direction1 == 0 ? n.beat.effectSlurOrigin.minNote : n.beat.effectSlurOrigin.maxNote;
			var endNote1 = direction1 == 0 ? n.beat.minNote : n.beat.maxNote;
			this._effectEndSlur = new alphaTab.rendering.glyphs.ScoreSlurGlyph(startNote1,endNote1,true);
			this.ties.push(this._effectEndSlur);
		}
		if(n.get_hasBend()) {
			if(this._bend == null) {
				this._bend = new alphaTab.rendering.glyphs.ScoreBendGlyph(n.beat);
				this._bend.renderer = this.renderer;
				this.ties.push(this._bend);
			}
			this._bend.addBends(n);
		}
	}
	,__class__: alphaTab.rendering.ScoreBeatContainerGlyph
});
alphaTab.rendering.ScoreRenderer = $hx_exports["alphaTab"]["rendering"]["ScoreRenderer"] = function(settings) {
	this._currentLayoutMode = null;
	this._currentRenderEngine = null;
	this._renderedTracks = null;
	this.canvas = null;
	this.score = null;
	this.tracks = null;
	this.layout = null;
	this.settings = null;
	this.set_boundsLookup(null);
	this.set_width(0);
	this.settings = settings;
	this.recreateCanvas();
	this.recreateLayout();
};
alphaTab.rendering.ScoreRenderer.__name__ = ["alphaTab","rendering","ScoreRenderer"];
alphaTab.rendering.ScoreRenderer.__interfaces__ = [alphaTab.rendering.IScoreRenderer];
alphaTab.rendering.ScoreRenderer.prototype = {
	get_boundsLookup: function() {
		return this.__BoundsLookup;
	}
	,set_boundsLookup: function(value) {
		return this.__BoundsLookup = value;
	}
	,destroy: function() {
		this.score = null;
		this.canvas = null;
		this.layout = null;
		this.settings = null;
		this.set_boundsLookup(null);
		this.tracks = null;
	}
	,recreateCanvas: function() {
		if(this._currentRenderEngine != this.settings.core.engine) {
			this.canvas = alphaTab.Environment.getRenderEngineFactory(this.settings).createCanvas();
			this._currentRenderEngine = this.settings.core.engine;
			return true;
		}
		return false;
	}
	,recreateLayout: function() {
		if(this._currentLayoutMode != this.settings.display.layoutMode) {
			this.layout = alphaTab.Environment.getLayoutEngineFactory(this.settings).createLayout(this);
			this._currentLayoutMode = this.settings.display.layoutMode;
			return true;
		}
		return false;
	}
	,renderScore: function(score,trackIndexes) {
		try {
			this.score = score;
			var tracks;
			if(trackIndexes == null) {
				tracks = score.tracks.slice(0);
			} else {
				var this1 = [];
				tracks = this1;
				var track = new system.Int32ArrayIterator(trackIndexes);
				while(track.hasNext()) {
					var track1 = track.next();
					if(track1 >= 0 && track1 < score.tracks.length) {
						tracks.push(score.tracks[track1]);
					}
				}
			}
			if(tracks.length == 0 && score.tracks.length > 0) {
				tracks.push(score.tracks[0]);
			}
			this.tracks = tracks;
			this.render();
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.onError("render",e);
			} else throw(e);
		}
	}
	,renderTracks: function(tracks) {
		if(tracks.length == 0) {
			this.score = null;
		} else {
			this.score = tracks[0].score;
		}
		this.tracks = tracks;
		this.render();
	}
	,updateSettings: function(settings) {
		this.settings = settings;
	}
	,render: function() {
		if(this.get_width() == 0) {
			alphaTab.util.Logger.warning("Rendering","AlphaTab skipped rendering because of width=0 (element invisible)",null);
			return;
		}
		this.set_boundsLookup(new alphaTab.rendering.utils.BoundsLookup());
		if(this.tracks == null || this.tracks.length == 0) {
			return;
		}
		this.recreateCanvas();
		this.canvas.set_lineWidth(this.settings.display.scale);
		this.canvas.set_settings(this.settings);
		alphaTab.util.Logger.info("Rendering","Rendering " + Std.string(this.tracks.length) + " tracks",null);
		var i = 0;
		while(i < this.tracks.length) {
			var track = this.tracks[i];
			alphaTab.util.Logger.info("Rendering","Track " + Std.string(i) + ": " + track.name,null);
			++i;
		}
		this.onPreRender(false);
		this.recreateLayout();
		this.layoutAndRender();
		this._renderedTracks = this.tracks;
		alphaTab.util.Logger.info("Rendering","Rendering finished",null);
	}
	,get_width: function() {
		return this.__Width;
	}
	,set_width: function(value) {
		return this.__Width = value;
	}
	,resizeRender: function() {
		if(this.recreateLayout() || this.recreateCanvas() || this._renderedTracks != this.tracks || this.tracks == null) {
			alphaTab.util.Logger.info("Rendering","Starting full rerendering due to layout or canvas change",null);
			this.render();
		} else if(this.layout.get_supportsResize()) {
			alphaTab.util.Logger.info("Rendering","Starting optimized rerendering for resize",null);
			this.set_boundsLookup(new alphaTab.rendering.utils.BoundsLookup());
			this.onPreRender(true);
			this.canvas.set_settings(this.settings);
			this.layout.resize();
			this.layout.renderAnnotation();
			this.onRenderFinished();
			this.onPostRender();
		} else {
			alphaTab.util.Logger.warning("Rendering","Current layout does not support dynamic resizing, nothing was done",null);
		}
		alphaTab.util.Logger.debug("Rendering","Resize finished",null);
	}
	,layoutAndRender: function() {
		alphaTab.util.Logger.info("Rendering","Rendering at scale " + Std.string(this.settings.display.scale) + " with layout " + this.layout.get_name(),null);
		this.layout.layoutAndRender();
		this.layout.renderAnnotation();
		this.onRenderFinished();
		this.onPostRender();
	}
	,addPreRender: function(value) {
		this.preRender = system._EventAction1.EventAction1_Impl_.add(this.preRender,value);
	}
	,removePreRender: function(value) {
		this.preRender = system._EventAction1.EventAction1_Impl_.sub(this.preRender,value);
	}
	,onPreRender: function(isResize) {
		var _e = this.preRender;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(isResize);
		}
	}
	,addPartialRenderFinished: function(value) {
		this.partialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this.partialRenderFinished,value);
	}
	,removePartialRenderFinished: function(value) {
		this.partialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.partialRenderFinished,value);
	}
	,onPartialRenderFinished: function(e) {
		var _e = this.partialRenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,addRenderFinished: function(value) {
		this.renderFinished = system._EventAction1.EventAction1_Impl_.add(this.renderFinished,value);
	}
	,removeRenderFinished: function(value) {
		this.renderFinished = system._EventAction1.EventAction1_Impl_.sub(this.renderFinished,value);
	}
	,onRenderFinished: function() {
		var _gthis = this;
		var result = this.canvas.onRenderFinished();
		var _e = this.renderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.invoke(_e,p);
		};
		if(handler != null) {
			var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
			_tmp.renderResult = result;
			_tmp.totalHeight = _gthis.layout.height;
			_tmp.totalWidth = _gthis.layout.width;
			handler(_tmp);
		}
	}
	,addError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.add(this.error,value);
	}
	,removeError: function(value) {
		this.error = system._EventAction2.EventAction2_Impl_.sub(this.error,value);
	}
	,onError: function(type,details) {
		var _e = this.error;
		var handler = function(p1,p2) {
			system._EventAction2.EventAction2_Impl_.invoke(_e,p1,p2);
		};
		if(handler != null) {
			handler(type,details);
		}
	}
	,addPostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.add(this.postRenderFinished,value);
	}
	,removePostRenderFinished: function(value) {
		this.postRenderFinished = system._EventAction.EventAction_Impl_.sub(this.postRenderFinished,value);
	}
	,onPostRender: function() {
		var _e = this.postRenderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,__class__: alphaTab.rendering.ScoreRenderer
};
alphaTab.rendering.TabBarRenderer = function(renderer,bar) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this._tupletSize = 0.0;
	this.showTimeSignature = false;
	this.showRests = false;
	this.showTiedNotes = false;
	this._startSpacing = false;
};
alphaTab.rendering.TabBarRenderer.__name__ = ["alphaTab","rendering","TabBarRenderer"];
alphaTab.rendering.TabBarRenderer.paintSingleBar = function(canvas,x1,y1,x2,y2,size) {
	canvas.beginPath();
	canvas.moveTo(x1,y1);
	canvas.lineTo(x2,y2);
	canvas.lineTo(x2,y2 - size);
	canvas.lineTo(x1,y1 - size);
	canvas.closePath();
	canvas.fill();
};
alphaTab.rendering.TabBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.TabBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	get_lineOffset: function() {
		return (10 + 1) * this.get_scale();
	}
	,getNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		var beat = js.Boot.__cast(this.getOnNotesGlyphForBeat(note.beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
		if(beat != null) {
			return beat.container.x + beat.container.voiceContainer.x + beat.x + beat.noteNumbers.getNoteX(note,onEnd);
		}
		return 0;
	}
	,getNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		var beat = js.Boot.__cast(this.getOnNotesGlyphForBeat(note.beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
		if(beat != null) {
			return beat.noteNumbers.getNoteY(note,aboveNote);
		}
		return 0;
	}
	,updateSizes: function() {
		var res = this.get_resources();
		var this1 = 0.2;
		var numberOverflow = res.tablatureFont.size / 2 + res.tablatureFont.size * this1;
		this.topPadding = numberOverflow;
		this.bottomPadding = numberOverflow;
		this.height = this.get_lineOffset() * (this.bar.staff.tuning.length - 1) + numberOverflow * 2;
		if(this.get_settings().notation.rhythmMode != 0) {
			this.height = this.height + this.get_settings().notation.rhythmHeight * this.get_settings().display.scale;
			this.bottomPadding = this.bottomPadding + this.get_settings().notation.rhythmHeight * this.get_settings().display.scale;
		}
		alphaTab.rendering.BarRendererBase.prototype.updateSizes.call(this);
	}
	,doLayout: function() {
		alphaTab.rendering.BarRendererBase.prototype.doLayout.call(this);
		if(this.get_settings().notation.rhythmMode != 0) {
			var hasTuplets = false;
			var voice = $iterator(this.bar.voices)();
			while(voice.hasNext()) {
				var voice1 = voice.next();
				if(this.hasVoiceContainer(voice1)) {
					var c = this.getOrCreateVoiceContainer(voice1);
					if(c.tupletGroups.length > 0) {
						hasTuplets = true;
						break;
					}
				}
			}
			if(hasTuplets) {
				var this1 = 0.8;
				this._tupletSize = this.get_resources().effectFont.size * this1;
				this.registerOverflowBottom(this._tupletSize);
			}
		}
	}
	,createPreBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.createPreBeatGlyphs.call(this);
		if(this.bar.get_masterBar().isRepeatStart) {
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.RepeatOpenGlyph(0,0,1.5,3));
		}
		if(this.get_isFirstOfLine()) {
			var this1 = 2;
			var center = (this.bar.staff.tuning.length + 1) / this1;
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.TabClefGlyph(5 * this.get_scale(),this.getTabY(center,0)));
		}
		if(this.showTimeSignature && (this.bar.previousBar == null || this.bar.previousBar != null && this.bar.get_masterBar().timeSignatureNumerator != this.bar.previousBar.get_masterBar().timeSignatureNumerator || this.bar.previousBar != null && this.bar.get_masterBar().timeSignatureDenominator != this.bar.previousBar.get_masterBar().timeSignatureDenominator)) {
			this.createStartSpacing();
			this.createTimeSignatureGlyphs();
		}
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.BarNumberGlyph(0,this.getTabY(-0.5,0),this.bar.index + 1));
		if(this.bar.get_isEmpty()) {
			this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,30 * this.get_scale()));
		}
	}
	,createStartSpacing: function() {
		if(this._startSpacing) {
			return;
		}
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,2 * this.get_scale()));
		this._startSpacing = true;
	}
	,createTimeSignatureGlyphs: function() {
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
		this.addPreBeatGlyph(new alphaTab.rendering.glyphs.TabTimeSignatureGlyph(0,this.getTabY(0,0),this.bar.get_masterBar().timeSignatureNumerator,this.bar.get_masterBar().timeSignatureDenominator,this.bar.get_masterBar().timeSignatureCommon));
	}
	,createBeatGlyphs: function() {
		var v = 0;
		while(v < this.bar.voices.length) {
			var voice = this.bar.voices[v];
			if(this.hasVoiceContainer(voice)) {
				this.createVoiceGlyphs(this.bar.voices[v]);
			}
			++v;
		}
	}
	,createVoiceGlyphs: function(v) {
		var i = 0;
		var j = v.beats.length;
		while(i < j) {
			var b = v.beats[i];
			var container = new alphaTab.rendering.glyphs.TabBeatContainerGlyph(b,this.getOrCreateVoiceContainer(v));
			container.preNotes = new alphaTab.rendering.glyphs.TabBeatPreNotesGlyph();
			container.onNotes = new alphaTab.rendering.glyphs.TabBeatGlyph();
			this.addBeatGlyph(container);
			++i;
		}
	}
	,createPostBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.createPostBeatGlyphs.call(this);
		if(this.bar.get_masterBar().get_isRepeatEnd()) {
			this.addPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.x,0));
			if(this.bar.get_masterBar().repeatCount > 2) {
				this.addPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCountGlyph(0,this.getTabY(-0.5,-3),this.bar.get_masterBar().repeatCount));
			}
		} else {
			this.addPostBeatGlyph(new alphaTab.rendering.glyphs.BarSeperatorGlyph(0,0));
		}
	}
	,getTabY: function(line,correction) {
		if(correction == null) {
			correction = 0;
		}
		return this.get_lineOffset() * line + correction * this.get_scale();
	}
	,paintBackground: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.paintBackground.call(this,cx,cy,canvas);
		var res = this.get_resources();
		canvas.set_color(res.staffLineColor);
		var lineY = cy + this.y + this.topPadding;
		var padding = this.get_scale();
		var this1 = [];
		var tabNotes = this1;
		var i = 0;
		var j = this.bar.staff.tuning.length;
		while(i < j) {
			var this2 = [];
			tabNotes.push(this2);
			++i;
		}
		var voice = $iterator(this.bar.voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.hasVoiceContainer(voice1)) {
				var vc = this.getOrCreateVoiceContainer(voice1);
				var bg = $iterator(vc.beatGlyphs)();
				while(bg.hasNext()) {
					var bg1 = bg.next();
					var notes = js.Boot.__cast(bg1.onNotes , alphaTab.rendering.glyphs.TabBeatGlyph);
					var noteNumbers = notes.noteNumbers;
					if(noteNumbers != null) {
						var this3 = noteNumbers.notesPerString;
						var s = $iterator(Object.keys(this3))();
						while(s.hasNext()) {
							var s1 = s.next();
							var noteNumber = noteNumbers.notesPerString[s1];
							if(!noteNumber.isEmpty) {
								tabNotes[this.bar.staff.tuning.length - s1].push(new Float32Array([vc.x + bg1.x + notes.x + noteNumbers.x,noteNumbers.width + padding]));
							}
						}
					}
				}
			}
		}
		var line = $iterator(tabNotes)();
		while(line.hasNext()) {
			var line1 = line.next();
			line1.sort((function(comparison) {
				return function(a,b) {
					return comparison[0](a,b);
				};
			})([(function() {
				return function(a1,b1) {
					if(a1[0] > b1[0]) {
						return 1;
					} else if(a1[0] < b1[0]) {
						return -1;
					} else {
						return 0;
					}
				};
			})()]));
		}
		var lineOffset = this.get_lineOffset();
		var i1 = 0;
		var j1 = this.bar.staff.tuning.length;
		while(i1 < j1) {
			if(i1 > 0) {
				lineY = lineY + lineOffset;
			}
			var lineX = 0;
			var line2 = $iterator(tabNotes[i1])();
			while(line2.hasNext()) {
				var line3 = line2.next();
				var tmp = cx + this.x + lineX;
				var this4 = system.Convert.toInt32_Single(lineY);
				var tmp1 = this.get_scale();
				canvas.fillRect(tmp,this4,line3[0] - lineX,tmp1);
				lineX = line3[0] + line3[1];
			}
			var tmp2 = cx + this.x + lineX;
			var this5 = system.Convert.toInt32_Single(lineY);
			canvas.fillRect(tmp2,this5,this.width - lineX,this.get_scale());
			++i1;
		}
		canvas.set_color(res.mainGlyphColor);
		this.paintSimileMark(cx,cy,canvas);
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.paint.call(this,cx,cy,canvas);
		if(this.get_settings().notation.rhythmMode != 0) {
			this.paintBeams(cx,cy,canvas);
			this.paintTuplets(cx,cy,canvas);
		}
	}
	,paintBeams: function(cx,cy,canvas) {
		var i = 0;
		var j = this.helpers.beamHelpers.length;
		while(i < j) {
			var v = this.helpers.beamHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				this.paintBeamHelper(cx + this.get_beatGlyphsStart(),cy,canvas,h);
				++k;
			}
			++i;
		}
	}
	,paintTuplets: function(cx,cy,canvas) {
		var voice = $iterator(this.bar.voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.hasVoiceContainer(voice1)) {
				var container = this.getOrCreateVoiceContainer(voice1);
				var tupletGroup = $iterator(container.tupletGroups)();
				while(tupletGroup.hasNext()) {
					var tupletGroup1 = tupletGroup.next();
					this.paintTupletHelper(cx + this.get_beatGlyphsStart(),cy,canvas,tupletGroup1);
				}
			}
		}
	}
	,paintBeamHelper: function(cx,cy,canvas,h) {
		canvas.set_color(h.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
		if(h.beats.length == 1 || this.get_settings().notation.rhythmMode == 1) {
			this.paintFooter(cx,cy,canvas,h);
		} else {
			this.paintBar(cx,cy,canvas,h);
		}
	}
	,paintBar: function(cx,cy,canvas,h) {
		var i = 0;
		var j = h.beats.length;
		while(i < j) {
			var beat = h.beats[i];
			if(h.hasBeatLineX(beat)) {
				var beatLineX = h.getBeatLineX(beat);
				var y1 = cy + this.y;
				var y2 = cy + this.y + this.height - this._tupletSize;
				var startGlyph = js.Boot.__cast(this.getOnNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
				if(startGlyph.noteNumbers == null) {
					y1 = y1 + (this.height - this.get_settings().notation.rhythmHeight * this.get_settings().display.scale - this._tupletSize);
				} else {
					y1 = y1 + (startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote,false) + this.get_lineOffset() / 2);
				}
				if(h.direction == 0) {
					var this1 = 2;
					beatLineX = beatLineX - startGlyph.width / this1;
				} else {
					var this2 = 2;
					beatLineX = beatLineX + startGlyph.width / this2;
				}
				canvas.beginPath();
				canvas.moveTo(cx + this.x + beatLineX,y1);
				canvas.lineTo(cx + this.x + beatLineX,y2);
				canvas.stroke();
				var brokenBarOffset = 6 * this.get_scale();
				var barSpacing = -6 * this.get_scale();
				var barSize = 3 * this.get_scale();
				var barCount = alphaTab.model.ModelUtils.getIndex(beat.duration) - 2;
				var barStart = y2;
				var barIndex = 0;
				while(barIndex < barCount) {
					var barStartX;
					var barEndX;
					var barStartY;
					var barEndY;
					var barY = barStart + barIndex * barSpacing;
					if(h.beats.length == 1) {
						barStartX = beatLineX;
						barEndX = beatLineX + brokenBarOffset;
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.paintSingleBar(canvas,cx + this.x + barStartX,barStartY,cx + this.x + barEndX,barEndY,barSize);
					} else if(i < h.beats.length - 1) {
						if(alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(beat,h.beats[i + 1],barIndex)) {
							barStartX = beatLineX;
							barEndX = h.getBeatLineX(h.beats[i + 1]) + this.get_scale();
							var endGlyph = this.getOnNotesGlyphForBeat(h.beats[i + 1]);
							if(h.direction == 0) {
								var this3 = 2;
								barEndX = barEndX - endGlyph.width / this3;
							} else {
								var this4 = 2;
								barEndX = barEndX + endGlyph.width / this4;
							}
						} else if(i == 0 || !alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(h.beats[i - 1],beat,barIndex)) {
							barStartX = beatLineX;
							barEndX = barStartX + brokenBarOffset;
						} else {
							++barIndex;
							continue;
						}
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.paintSingleBar(canvas,cx + this.x + barStartX,barStartY,cx + this.x + barEndX,barEndY,barSize);
					} else if(i > 0 && !alphaTab.rendering.utils.BeamingHelper.isFullBarJoin(beat,h.beats[i - 1],barIndex)) {
						barStartX = beatLineX - brokenBarOffset;
						barEndX = beatLineX;
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.paintSingleBar(canvas,cx + this.x + barStartX,barStartY,cx + this.x + barEndX,barEndY,barSize);
					}
					++barIndex;
				}
			}
			++i;
		}
	}
	,paintTupletHelper: function(cx,cy,canvas,h) {
		var res = this.get_resources();
		var oldAlign = canvas.get_textAlign();
		canvas.set_color(h.voice.index == 0 ? this.get_resources().mainGlyphColor : this.get_resources().secondaryGlyphColor);
		canvas.set_textAlign(1);
		var s;
		var num = h.beats[0].tupletNumerator;
		var den = h.beats[0].tupletDenominator;
		if(num == 2 && den == 3) {
			s = "2";
		} else if(num == 3 && den == 2) {
			s = "3";
		} else if(num == 4 && den == 6) {
			s = "4";
		} else if(num == 5 && den == 4) {
			s = "5";
		} else if(num == 6 && den == 4) {
			s = "6";
		} else if(num == 7 && den == 4) {
			s = "7";
		} else if(num == 9 && den == 8) {
			s = "9";
		} else if(num == 10 && den == 8) {
			s = "10";
		} else if(num == 11 && den == 8) {
			s = "11";
		} else if(num == 12 && den == 8) {
			s = "12";
		} else if(num == 13 && den == 8) {
			s = "13";
		} else {
			s = Std.string(num) + ":" + Std.string(den);
		}
		if(h.beats.length == 1 || !h.isFull) {
			var i = 0;
			var j = h.beats.length;
			while(i < j) {
				var beat = h.beats[i];
				var beamingHelper = this.helpers.beamHelperLookup[h.voice.index][beat.index];
				if(beamingHelper == null) {
					++i;
					continue;
				}
				var tupletX = beamingHelper.getBeatLineX(beat);
				var startGlyph = js.Boot.__cast(this.getOnNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
				if(beamingHelper.direction == 0) {
					var this1 = 2;
					tupletX = tupletX - startGlyph.width / this1;
				} else {
					var this2 = 2;
					tupletX = tupletX + startGlyph.width / this2;
				}
				var this3 = 0.5;
				var tupletY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * this3;
				canvas.set_font(res.effectFont);
				canvas.fillText(s,cx + this.x + tupletX,tupletY);
				++i;
			}
		} else {
			var firstBeat = h.beats[0];
			var lastBeat = h.beats[h.beats.length - 1];
			var firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index][firstBeat.index];
			var lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index][lastBeat.index];
			if(firstBeamingHelper != null && lastBeamingHelper != null) {
				var startX = firstBeamingHelper.getBeatLineX(firstBeat);
				var endX = lastBeamingHelper.getBeatLineX(lastBeat);
				var startGlyph1 = js.Boot.__cast(this.getOnNotesGlyphForBeat(firstBeat) , alphaTab.rendering.glyphs.TabBeatGlyph);
				var endGlyph = js.Boot.__cast(this.getOnNotesGlyphForBeat(firstBeat) , alphaTab.rendering.glyphs.TabBeatGlyph);
				if(firstBeamingHelper.direction == 0) {
					var this4 = 2;
					startX = startX - startGlyph1.width / this4;
					var this5 = 2;
					endX = endX - endGlyph.width / this5;
				} else {
					var this6 = 2;
					startX = startX + startGlyph1.width / this6;
					var this7 = 2;
					endX = endX + endGlyph.width / this7;
				}
				canvas.set_font(res.effectFont);
				var sw = canvas.measureText(s);
				var sp = 3 * this.get_scale();
				var middleX = (startX + endX) / 2;
				var offset1X = middleX - sw / 2 - sp;
				var offset2X = middleX + sw / 2 + sp;
				var this8 = 0.5;
				var startY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * this8;
				var this9 = 0.25;
				var offset = -res.effectFont.size * this9;
				var size = -5 * this.get_scale();
				canvas.beginPath();
				var tmp = cx + this.x + startX;
				var this10 = system.Convert.toInt32_Single(startY - offset);
				canvas.moveTo(tmp,this10);
				var tmp1 = cx + this.x + startX;
				var this11 = system.Convert.toInt32_Single(startY - offset - size);
				canvas.lineTo(tmp1,this11);
				var tmp2 = cx + this.x + offset1X;
				var this12 = system.Convert.toInt32_Single(startY - offset - size);
				canvas.lineTo(tmp2,this12);
				canvas.stroke();
				canvas.beginPath();
				var tmp3 = cx + this.x + offset2X;
				var this13 = system.Convert.toInt32_Single(startY - offset - size);
				canvas.moveTo(tmp3,this13);
				var tmp4 = cx + this.x + endX;
				var this14 = system.Convert.toInt32_Single(startY - offset - size);
				canvas.lineTo(tmp4,this14);
				var tmp5 = cx + this.x + endX;
				var this15 = system.Convert.toInt32_Single(startY - offset);
				canvas.lineTo(tmp5,this15);
				canvas.stroke();
				canvas.fillText(s,cx + this.x + middleX,startY);
			}
		}
		canvas.set_textAlign(oldAlign);
	}
	,paintFooter: function(cx,cy,canvas,h) {
		var beat = $iterator(h.beats)();
		while(beat.hasNext()) {
			var beat1 = beat.next();
			if(beat1.graceType != 0 || beat1.duration == 1 || beat1.duration == -2 || beat1.duration == -4) {
				return;
			}
			var beatLineX = h.getBeatLineX(beat1);
			var y1 = cy + this.y;
			var y2 = cy + this.y + this.height - this._tupletSize;
			var startGlyph = js.Boot.__cast(this.getOnNotesGlyphForBeat(beat1) , alphaTab.rendering.glyphs.TabBeatGlyph);
			if(startGlyph.noteNumbers == null) {
				y1 = y1 + (this.height - this.get_settings().notation.rhythmHeight * this.get_settings().display.scale - this._tupletSize);
			} else {
				y1 = y1 + (startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote,false) + this.get_lineOffset() / 2);
			}
			if(h.direction == 0) {
				var this1 = 2;
				beatLineX = beatLineX - startGlyph.width / this1;
			} else {
				var this2 = 2;
				beatLineX = beatLineX + startGlyph.width / this2;
			}
			canvas.beginPath();
			canvas.moveTo(cx + this.x + beatLineX,y1);
			canvas.lineTo(cx + this.x + beatLineX,y2);
			canvas.stroke();
			if(beat1.duration > 4) {
				var glyph = new alphaTab.rendering.glyphs.BeamGlyph(0,0,beat1.duration,1,false);
				glyph.renderer = this;
				glyph.doLayout();
				glyph.paint(cx + this.x + beatLineX,y2,canvas);
			}
		}
	}
	,__class__: alphaTab.rendering.TabBarRenderer
});
alphaTab.rendering.glyphs.EffectGlyph = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.beat = null;
	this.nextGlyph = null;
	this.previousGlyph = null;
	this.height = 0.0;
};
alphaTab.rendering.glyphs.EffectGlyph.__name__ = ["alphaTab","rendering","glyphs","EffectGlyph"];
alphaTab.rendering.glyphs.EffectGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.EffectGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	__class__: alphaTab.rendering.glyphs.EffectGlyph
});
alphaTab.rendering.glyphs.MusicFontGlyph = function(x,y,glyphScale,symbol) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this.GlyphScale = 0.0;
	this.Symbol = -1;
	this.GlyphScale = glyphScale;
	this.Symbol = symbol;
};
alphaTab.rendering.glyphs.MusicFontGlyph.__name__ = ["alphaTab","rendering","glyphs","MusicFontGlyph"];
alphaTab.rendering.glyphs.MusicFontGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.MusicFontGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	paint: function(cx,cy,canvas) {
		canvas.fillMusicFontSymbol(cx + this.x,cy + this.y,this.GlyphScale * this.get_scale(),this.Symbol,false);
	}
	,__class__: alphaTab.rendering.glyphs.MusicFontGlyph
});
alphaTab.rendering.glyphs.AccentuationGlyph = function(x,y,accentuation) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.AccentuationGlyph.getSymbol(accentuation));
};
alphaTab.rendering.glyphs.AccentuationGlyph.__name__ = ["alphaTab","rendering","glyphs","AccentuationGlyph"];
alphaTab.rendering.glyphs.AccentuationGlyph.getSymbol = function(accentuation) {
	switch(accentuation) {
	case 0:
		return -1;
	case 1:
		return 58528;
	case 2:
		return 58540;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.AccentuationGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.AccentuationGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.AccentuationGlyph
});
alphaTab.rendering.glyphs.AccidentalGlyph = function(x,y,accidentalType,isGrace) {
	if(isGrace == null) {
		isGrace = false;
	}
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.AccidentalGlyph.getMusicSymbol(accidentalType));
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.AccidentalGlyph.__name__ = ["alphaTab","rendering","glyphs","AccidentalGlyph"];
alphaTab.rendering.glyphs.AccidentalGlyph.getMusicSymbol = function(accidentalType) {
	switch(accidentalType) {
	case 1:
		return 57953;
	case 2:
		return 57954;
	case 3:
		return 57952;
	case 4:
		return 57970;
	case 5:
		return 57972;
	case 6:
		return 57968;
	default:
	}
	return -1;
};
alphaTab.rendering.glyphs.AccidentalGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.AccidentalGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 8 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.AccidentalGlyph
});
alphaTab.rendering.glyphs.GlyphGroup = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.Glyphs = null;
};
alphaTab.rendering.glyphs.GlyphGroup.__name__ = ["alphaTab","rendering","glyphs","GlyphGroup"];
alphaTab.rendering.glyphs.GlyphGroup.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.GlyphGroup.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	get_isEmpty: function() {
		if(this.Glyphs != null) {
			return this.Glyphs.length == 0;
		} else {
			return true;
		}
	}
	,doLayout: function() {
		if(this.Glyphs == null || this.Glyphs.length == 0) {
			this.width = 0;
			return;
		}
		var w = 0;
		var i = 0;
		var j = this.Glyphs.length;
		while(i < j) {
			var g = this.Glyphs[i];
			g.renderer = this.renderer;
			g.doLayout();
			w = Math.max(w,g.width);
			++i;
		}
		this.width = w;
	}
	,addGlyph: function(g) {
		if(this.Glyphs == null) {
			var this1 = [];
			this.Glyphs = this1;
		}
		this.Glyphs.push(g);
	}
	,paint: function(cx,cy,canvas) {
		var glyphs = this.Glyphs;
		if(glyphs == null || glyphs.length == 0) {
			return;
		}
		var g = $iterator(glyphs)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.paint(cx + this.x,cy + this.y,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.GlyphGroup
});
alphaTab.rendering.glyphs.AccidentalGroupGlyph = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
};
alphaTab.rendering.glyphs.AccidentalGroupGlyph.__name__ = ["alphaTab","rendering","glyphs","AccidentalGroupGlyph"];
alphaTab.rendering.glyphs.AccidentalGroupGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.AccidentalGroupGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	doLayout: function() {
		if(this.Glyphs == null) {
			this.width = 0;
			return;
		}
		var comparison = function(a,b) {
			if(a.y < b.y) {
				return -1;
			}
			if(a.y > b.y) {
				return 1;
			}
			return 0;
		};
		this.Glyphs.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var this1 = [];
		var columns = this1;
		var this2 = -3000;
		columns.push(this2);
		var accidentalSize = 21 * this.get_scale();
		var i = 0;
		var j = this.Glyphs.length;
		while(i < j) {
			var g = this.Glyphs[i];
			g.renderer = this.renderer;
			g.doLayout();
			var gColumn = 0;
			while(columns[gColumn] > g.y) {
				++gColumn;
				if(gColumn == columns.length) {
					var this3 = -3000;
					columns.push(this3);
				}
			}
			var this4 = gColumn;
			g.x = this4;
			columns[gColumn] = g.y + accidentalSize;
			++i;
		}
		var columnWidth = 8 * this.get_scale();
		var padding = 2 * this.get_scale();
		if(this.Glyphs.length == 0) {
			this.width = 0;
		} else {
			this.width = padding + columnWidth * columns.length;
		}
		var i1 = 0;
		var j1 = this.Glyphs.length;
		while(i1 < j1) {
			var g1 = this.Glyphs[i1];
			g1.x = padding + (this.width - (g1.x + 1) * columnWidth);
			++i1;
		}
	}
	,__class__: alphaTab.rendering.glyphs.AccidentalGroupGlyph
});
alphaTab.rendering.glyphs.AlternateEndingsGlyph = function(x,y,alternateEndings) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._endings = null;
	this._endingsString = null;
	var this1 = [];
	this._endings = this1;
	var i = 0;
	while(i < 8) {
		if((alternateEndings & 1 << i) != 0) {
			this._endings.push(i);
		}
		++i;
	}
};
alphaTab.rendering.glyphs.AlternateEndingsGlyph.__name__ = ["alphaTab","rendering","glyphs","AlternateEndingsGlyph"];
alphaTab.rendering.glyphs.AlternateEndingsGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.AlternateEndingsGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = this.renderer.get_resources().wordsFont.size + (3 * this.get_scale() + 2);
		var this1 = "";
		var endingsStrings = this1;
		var i = 0;
		var j = this._endings.length;
		while(i < j) {
			endingsStrings += Std.string(this._endings[i] + 1);
			endingsStrings += Std.string(". ");
			++i;
		}
		this._endingsString = endingsStrings;
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.paint.call(this,cx,cy,canvas);
		var baseline = canvas.get_textBaseline();
		canvas.set_textBaseline(0);
		if(this._endings.length > 0) {
			var res = this.renderer.get_resources();
			canvas.set_font(res.wordsFont);
			canvas.moveTo(cx + this.x,cy + this.y + this.height);
			canvas.lineTo(cx + this.x,cy + this.y);
			canvas.lineTo(cx + this.x + this.width,cy + this.y);
			canvas.stroke();
			canvas.fillText(this._endingsString,cx + this.x + 3 * this.get_scale(),cy + this.y * this.get_scale());
		}
		canvas.set_textBaseline(baseline);
	}
	,__class__: alphaTab.rendering.glyphs.AlternateEndingsGlyph
});
alphaTab.rendering.glyphs.BarNumberGlyph = function(x,y,number) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._number = 0;
	this._number = number;
};
alphaTab.rendering.glyphs.BarNumberGlyph.__name__ = ["alphaTab","rendering","glyphs","BarNumberGlyph"];
alphaTab.rendering.glyphs.BarNumberGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BarNumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.renderer.scoreRenderer.canvas.set_font(this.renderer.get_resources().barNumberFont);
		this.width = this.renderer.scoreRenderer.canvas.measureText(Std.string(this._number)) + 5 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		if(!this.renderer.staff.isFirstInAccolade) {
			return;
		}
		var res = this.renderer.get_resources();
		var c = canvas.get_color();
		canvas.set_color(res.barNumberColor);
		canvas.set_font(res.barNumberFont);
		canvas.fillText(Std.string(this._number),cx + this.x,cy + this.y);
		canvas.set_color(c);
	}
	,__class__: alphaTab.rendering.glyphs.BarNumberGlyph
});
alphaTab.rendering.glyphs.BarSeperatorGlyph = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.BarSeperatorGlyph.__name__ = ["alphaTab","rendering","glyphs","BarSeperatorGlyph"];
alphaTab.rendering.glyphs.BarSeperatorGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BarSeperatorGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		if(this.renderer.get_isLast()) {
			this.width = 15 * this.get_scale();
		} else if(this.renderer.get_nextRenderer() == null || this.renderer.get_nextRenderer().staff != this.renderer.staff || !this.renderer.get_nextRenderer().bar.get_masterBar().isRepeatStart) {
			this.width = 2 * this.get_scale();
			if(this.renderer.bar.get_masterBar().isDoubleBar) {
				this.width = this.width + 2 * this.get_scale();
			}
		} else {
			this.width = 2 * this.get_scale();
		}
	}
	,paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_scale();
		var top = cy + this.y + this.renderer.topPadding;
		var bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
		var left = system.Convert.toInt32_Single(cx + this.x);
		var h = bottom - top;
		if(this.renderer.get_isLast()) {
			canvas.fillRect(left + this.width - blockWidth - blockWidth,top,this.get_scale(),h);
			canvas.fillRect(left + this.width - blockWidth,top,blockWidth,h);
		} else if(this.renderer.get_nextRenderer() == null || this.renderer.get_nextRenderer().staff != this.renderer.staff || !this.renderer.get_nextRenderer().bar.get_masterBar().isRepeatStart) {
			canvas.fillRect(left + this.width - this.get_scale(),top,this.get_scale(),h);
			if(this.renderer.bar.get_masterBar().isDoubleBar) {
				canvas.fillRect(left + this.width - 5 * this.get_scale(),top,this.get_scale(),h);
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.BarSeperatorGlyph
});
alphaTab.rendering.glyphs.BeamGlyph = function(x,y,duration,direction,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.BeamGlyph.getSymbol(duration,direction,isGrace));
};
alphaTab.rendering.glyphs.BeamGlyph.__name__ = ["alphaTab","rendering","glyphs","BeamGlyph"];
alphaTab.rendering.glyphs.BeamGlyph.getSymbol = function(duration,direction,isGrace) {
	if(isGrace) {
		duration = 8;
	}
	if(direction == 0) {
		switch(duration) {
		case 8:
			return 57920;
		case 16:
			return 57922;
		case 32:
			return 57924;
		case 64:
			return 57926;
		case 128:
			return 57928;
		case 256:
			return 57930;
		default:
			return 57920;
		}
	}
	switch(duration) {
	case 8:
		return 57921;
	case 16:
		return 57923;
	case 32:
		return 57925;
	case 64:
		return 57927;
	case 128:
		return 57929;
	case 256:
		return 57929;
	default:
		return 57921;
	}
};
alphaTab.rendering.glyphs.BeamGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.BeamGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 0;
	}
	,__class__: alphaTab.rendering.glyphs.BeamGlyph
});
alphaTab.rendering.glyphs.BeatGlyphBase = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
	this.container = null;
};
alphaTab.rendering.glyphs.BeatGlyphBase.__name__ = ["alphaTab","rendering","glyphs","BeatGlyphBase"];
alphaTab.rendering.glyphs.BeatGlyphBase.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.BeatGlyphBase.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	doLayout: function() {
		var w = 0;
		if(this.Glyphs != null) {
			var i = 0;
			var j = this.Glyphs.length;
			while(i < j) {
				var g = this.Glyphs[i];
				g.x = w;
				g.renderer = this.renderer;
				g.doLayout();
				w = w + g.width;
				++i;
			}
		}
		this.width = w;
	}
	,noteLoop: function(action) {
		var i = this.container.beat.notes.length - 1;
		while(i >= 0) {
			action(this.container.beat.notes[i]);
			--i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.BeatGlyphBase
});
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
	this.beamingHelper = null;
	this.centerX = 0.0;
	this.centerX = 0;
};
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__name__ = ["alphaTab","rendering","glyphs","BeatOnNoteGlyphBase"];
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	updateBeamingHelper: function() {
	}
	,__class__: alphaTab.rendering.glyphs.BeatOnNoteGlyphBase
});
alphaTab.rendering.glyphs.GroupedEffectGlyph = function(endPosition) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,0,0);
	this.endPosition = 0;
	this.forceGroupedRendering = false;
	this.endOnBarLine = false;
	this.endPosition = endPosition;
};
alphaTab.rendering.glyphs.GroupedEffectGlyph.__name__ = ["alphaTab","rendering","glyphs","GroupedEffectGlyph"];
alphaTab.rendering.glyphs.GroupedEffectGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	get_isLinkedWithPrevious: function() {
		if(this.previousGlyph != null) {
			return this.previousGlyph.renderer.staff.staveGroup == this.renderer.staff.staveGroup;
		} else {
			return false;
		}
	}
	,get_isLinkedWithNext: function() {
		if(this.nextGlyph != null && this.nextGlyph.renderer.isFinalized) {
			return this.nextGlyph.renderer.staff.staveGroup == this.renderer.staff.staveGroup;
		} else {
			return false;
		}
	}
	,paint: function(cx,cy,canvas) {
		if(this.get_isLinkedWithPrevious()) {
			return;
		}
		if(!this.get_isLinkedWithNext() && !this.forceGroupedRendering) {
			this.paintNonGrouped(cx,cy,canvas);
			return;
		}
		var lastLinkedGlyph;
		if(!this.get_isLinkedWithNext() && this.forceGroupedRendering) {
			lastLinkedGlyph = this;
		} else {
			lastLinkedGlyph = js.Boot.__cast(this.nextGlyph , alphaTab.rendering.glyphs.GroupedEffectGlyph);
			while(lastLinkedGlyph.get_isLinkedWithNext()) lastLinkedGlyph = js.Boot.__cast(lastLinkedGlyph.nextGlyph , alphaTab.rendering.glyphs.GroupedEffectGlyph);
		}
		var endBeatRenderer = lastLinkedGlyph.renderer;
		var endBeat = lastLinkedGlyph.beat;
		var position = this.endPosition;
		var cxRenderer = cx - this.renderer.x;
		var endX = this.calculateEndX(endBeatRenderer,endBeat,cxRenderer,position);
		this.paintGrouped(cx,cy,endX,canvas);
	}
	,calculateEndX: function(endBeatRenderer,endBeat,cx,endPosition) {
		if(endBeat == null) {
			return cx + endBeatRenderer.x + this.x + this.width;
		}
		return cx + endBeatRenderer.x + endBeatRenderer.getBeatX(endBeat,endPosition);
	}
	,paintNonGrouped: function(cx,cy,canvas) {
		var cxRenderer = cx - this.renderer.x;
		var endX = this.calculateEndX(this.renderer,this.beat,cxRenderer,this.endPosition);
		this.paintGrouped(cx,cy,endX,canvas);
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.rendering.glyphs.GroupedEffectGlyph
});
alphaTab.rendering.glyphs.BeatVibratoGlyph = function(type) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,4);
	this._type = 0;
	this._stepSize = 0.0;
	this._type = type;
};
alphaTab.rendering.glyphs.BeatVibratoGlyph.__name__ = ["alphaTab","rendering","glyphs","BeatVibratoGlyph"];
alphaTab.rendering.glyphs.BeatVibratoGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.BeatVibratoGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.doLayout.call(this);
		var _g = this._type;
		switch(_g) {
		case 1:
			this._stepSize = 12 * this.get_scale();
			break;
		case 2:
			this._stepSize = 23 * this.get_scale();
			break;
		default:
		}
		this.height = 18 * this.get_scale();
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		var startX = cx + this.x;
		var width = endX - startX;
		var loops = system.Convert.toInt32_Single(Math.max(1,width / this._stepSize));
		canvas.beginPath();
		canvas.moveTo(startX,cy + this.y);
		var i = 0;
		while(i < loops) {
			canvas.lineTo(startX + this._stepSize / 2,cy + this.y + this.height);
			canvas.lineTo(startX + this._stepSize,cy + this.y);
			startX = startX + this._stepSize;
			++i;
		}
		canvas.stroke();
	}
	,__class__: alphaTab.rendering.glyphs.BeatVibratoGlyph
});
alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase = function() {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._infos = null;
	this._noteHeadPadding = 0.0;
	this.minNote = null;
	this.maxNote = null;
	this.spacingChanged = null;
	this.upLineX = 0.0;
	this.downLineX = 0.0;
	this.displacedX = 0.0;
	this.noteStartX = 0.0;
	var this1 = [];
	this._infos = this1;
};
alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.__name__ = ["alphaTab","rendering","glyphs","ScoreNoteChordGlyphBase"];
alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	get_direction: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,add: function(noteGlyph,noteLine) {
		var info = new alphaTab.rendering.glyphs.ScoreNoteGlyphInfo(noteGlyph,noteLine);
		this._infos.push(info);
		if(this.minNote == null || this.minNote.line > info.line) {
			this.minNote = info;
		}
		if(this.maxNote == null || this.maxNote.line < info.line) {
			this.maxNote = info;
		}
	}
	,get_hasTopOverflow: function() {
		if(this.minNote != null) {
			return this.minNote.line <= 0;
		} else {
			return false;
		}
	}
	,get_hasBottomOverflow: function() {
		if(this.maxNote != null) {
			return this.maxNote.line > 8;
		} else {
			return false;
		}
	}
	,doLayout: function() {
		var comparison = function(a,b) {
			return system._Int32.Int32_Impl_.compareTo_Int32(b.line,a.line);
		};
		this._infos.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var displacedX = 0;
		var lastDisplaced = false;
		var lastLine = 0;
		var anyDisplaced = false;
		var direction = this.get_direction();
		var this1 = 1.5;
		var lineOffset = this.get_scale() * this1;
		var w = 0;
		var i = 0;
		var j = this._infos.length;
		while(i < j) {
			var g = this._infos[i].glyph;
			g.renderer = this.renderer;
			g.doLayout();
			var displace = false;
			if(i == 0) {
				displacedX = g.width - lineOffset;
			} else if(Math.abs(lastLine - this._infos[i].line) <= 1) {
				if(!lastDisplaced) {
					displace = true;
					g.x = displacedX;
					anyDisplaced = true;
					lastDisplaced = true;
				} else {
					lastDisplaced = false;
				}
			} else {
				lastDisplaced = false;
			}
			if(direction == 1) {
				g.x = displace ? 0 : displacedX;
			} else {
				g.x = displace ? displacedX : 0;
			}
			g.x = g.x + this.noteStartX;
			lastLine = this._infos[i].line;
			w = Math.max(w,g.x + g.width - lineOffset);
			++i;
		}
		if(anyDisplaced) {
			this._noteHeadPadding = 0;
			this.upLineX = displacedX;
			this.downLineX = displacedX;
		} else {
			this._noteHeadPadding = direction == 1 ? -displacedX : 0;
			w = w + this._noteHeadPadding;
			this.upLineX = w;
			this.downLineX = 0;
		}
		this.displacedX = displacedX;
		this.width = w;
	}
	,paint: function(cx,cy,canvas) {
		cx = cx + this.x;
		cy = cy + this.y;
		var scoreRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var linePadding = 3 * this.get_scale();
		var lineWidth = this.width - this.noteStartX + linePadding * 2;
		if(this.get_hasTopOverflow()) {
			var color = canvas.get_color();
			canvas.set_color(scoreRenderer.get_resources().staffLineColor);
			var l = 0;
			while(l >= this.minNote.line) {
				var this1 = l;
				var lY = cy + scoreRenderer.getScoreY(this1,0);
				canvas.fillRect(cx - linePadding + this.noteStartX,lY,lineWidth,this.get_scale());
				l = l - 2;
			}
			canvas.set_color(color);
		}
		if(this.get_hasBottomOverflow()) {
			var color1 = canvas.get_color();
			canvas.set_color(scoreRenderer.get_resources().staffLineColor);
			var l1 = 12;
			while(l1 <= this.maxNote.line) {
				var this2 = l1;
				var lY1 = cy + scoreRenderer.getScoreY(this2,0);
				canvas.fillRect(cx - linePadding + this.noteStartX,lY1,lineWidth,this.get_scale());
				l1 = l1 + 2;
			}
			canvas.set_color(color1);
		}
		var infos = this._infos;
		var x = cx + this._noteHeadPadding;
		var g = $iterator(infos)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.glyph.renderer = this.renderer;
			g1.glyph.paint(x,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase
});
alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph = function(beat,showParenthesis) {
	if(showParenthesis == null) {
		showParenthesis = false;
	}
	alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.call(this);
	this._beat = null;
	this._showParenthesis = false;
	this._noteValueLookup = null;
	this._accidentals = null;
	this._preNoteParenthesis = null;
	this._postNoteParenthesis = null;
	this.isEmpty = false;
	this.noteHeadOffset = 0.0;
	this._beat = beat;
	this._showParenthesis = showParenthesis;
	this.isEmpty = true;
	this._accidentals = new alphaTab.rendering.glyphs.AccidentalGroupGlyph();
	var this1 = {}
	this._noteValueLookup = this1;
	if(showParenthesis) {
		this._preNoteParenthesis = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(true);
		this._postNoteParenthesis = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(false);
	}
};
alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.__name__ = ["alphaTab","rendering","glyphs","BendNoteHeadGroupGlyph"];
alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.__super__ = alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase;
alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.prototype = $extend(alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype,{
	get_direction: function() {
		return 0;
	}
	,getNoteValueY: function(noteValue,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		if(this._noteValueLookup.hasOwnProperty(noteValue)) {
			return this.y + this._noteValueLookup[noteValue].y + (aboveNote ? -(9 * 0.75 * this.get_scale()) / 2 : 0);
		}
		return 0;
	}
	,containsNoteValue: function(noteValue) {
		return this._noteValueLookup.hasOwnProperty(noteValue);
	}
	,getNoteX: function(noteValue,onMiddle) {
		if(onMiddle == null) {
			onMiddle = true;
		}
		if(this._noteValueLookup.hasOwnProperty(noteValue)) {
			var n = this._noteValueLookup[noteValue];
			var pos = this.x + n.x;
			if(onMiddle) {
				var this1 = 2.0;
				pos = pos + n.width / this1;
			}
			return pos;
		}
		return 0;
	}
	,addGlyph: function(noteValue,quarterBend) {
		if(quarterBend == null) {
			quarterBend = false;
		}
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var noteHeadGlyph = new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,true);
		var accidental = sr.accidentalHelper.applyAccidentalForValue(this._beat,noteValue,quarterBend);
		var line = sr.accidentalHelper.getNoteLineForValue(noteValue,false);
		var this1 = line;
		noteHeadGlyph.y = sr.getScoreY(this1,0);
		if(this._showParenthesis) {
			this._preNoteParenthesis.renderer = this.renderer;
			this._postNoteParenthesis.renderer = this.renderer;
			this._preNoteParenthesis.addParenthesisOnLine(line,true);
			this._postNoteParenthesis.addParenthesisOnLine(line,true);
		}
		if(accidental != 0) {
			this._accidentals.addGlyph(new alphaTab.rendering.glyphs.AccidentalGlyph(0,noteHeadGlyph.y,accidental,true));
		}
		this._noteValueLookup[noteValue] = noteHeadGlyph;
		this.add(noteHeadGlyph,line);
		this.isEmpty = false;
	}
	,doLayout: function() {
		var x = 0;
		if(this._showParenthesis) {
			this._preNoteParenthesis.x = x;
			this._preNoteParenthesis.renderer = this.renderer;
			this._preNoteParenthesis.doLayout();
			x = x + (this._preNoteParenthesis.width + 2 * this.get_scale());
		}
		if(!this._accidentals.get_isEmpty()) {
			this._accidentals.x = x;
			this._accidentals.renderer = this.renderer;
			this._accidentals.doLayout();
			x = x + (this._accidentals.width + 2 * this.get_scale());
		}
		this.noteStartX = x;
		alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.doLayout.call(this);
		this.noteHeadOffset = this.noteStartX + (this.width - this.noteStartX) / 2;
		if(this._showParenthesis) {
			var tmp = this.width;
			var tmp1 = this.get_scale();
			this._postNoteParenthesis.x = tmp + 2 * tmp1;
			this._postNoteParenthesis.renderer = this.renderer;
			this._postNoteParenthesis.doLayout();
			this.width = this.width + (this._postNoteParenthesis.width + 2 * this.get_scale());
		}
	}
	,paint: function(cx,cy,canvas) {
		if(!this._accidentals.get_isEmpty()) {
			this._accidentals.paint(cx + this.x,cy + this.y,canvas);
		}
		if(this._showParenthesis) {
			this._preNoteParenthesis.paint(cx + this.x,cy + this.y,canvas);
			this._postNoteParenthesis.paint(cx + this.x,cy + this.y,canvas);
		}
		alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.paint.call(this,cx,cy,canvas);
	}
	,__class__: alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph
});
alphaTab.rendering.glyphs.ChineseCymbalGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57564);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.ChineseCymbalGlyph.__name__ = ["alphaTab","rendering","glyphs","ChineseCymbalGlyph"];
alphaTab.rendering.glyphs.ChineseCymbalGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ChineseCymbalGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.ChineseCymbalGlyph
});
alphaTab.rendering.glyphs.ChordDiagramContainerGlyph = function(x,y) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._rows = null;
	this.height = 0.0;
	var this1 = [];
	this.Glyphs = this1;
};
alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","ChordDiagramContainerGlyph"];
alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	addChord: function(chord) {
		if(chord.strings.length > 0) {
			var chordDiagram = new alphaTab.rendering.glyphs.ChordDiagramGlyph(0,0,chord);
			chordDiagram.renderer = this.renderer;
			chordDiagram.doLayout();
			this.Glyphs.push(chordDiagram);
		}
	}
	,doLayout: function() {
		var x = 0;
		var y = 0;
		var padding = 2 * 3 * this.get_scale();
		var this1 = [];
		this._rows = this1;
		var row = new alphaTab.rendering.glyphs.ChordDiagramRowGlyph(x,y);
		row.width = this.width;
		var g = $iterator(this.Glyphs)();
		while(g.hasNext()) {
			var g1 = g.next();
			if(x + g1.width < this.width) {
				row.addChord(js.Boot.__cast(g1 , alphaTab.rendering.glyphs.ChordDiagramGlyph));
				x = x + g1.width;
			} else {
				if(!row.get_isEmpty()) {
					row.doLayout();
					this._rows.push(row);
					y = y + (row.height + padding);
				}
				x = 0;
				row = new alphaTab.rendering.glyphs.ChordDiagramRowGlyph(x,y);
				row.width = this.width;
				row.addChord(js.Boot.__cast(g1 , alphaTab.rendering.glyphs.ChordDiagramGlyph));
				x = x + g1.width;
			}
		}
		if(!row.get_isEmpty()) {
			row.doLayout();
			this._rows.push(row);
			y = y + (row.height + padding);
		}
		this.height = y + padding;
	}
	,paint: function(cx,cy,canvas) {
		var row = $iterator(this._rows)();
		while(row.hasNext()) {
			var row1 = row.next();
			row1.paint(cx + this.x,cy + this.y + 3 * this.get_scale(),canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ChordDiagramContainerGlyph
});
alphaTab.rendering.glyphs.ChordDiagramGlyph = function(x,y,chord) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._chord = null;
	this._textRow = 0.0;
	this._fretRow = 0.0;
	this._firstFretSpacing = 0.0;
	this._chord = chord;
};
alphaTab.rendering.glyphs.ChordDiagramGlyph.__name__ = ["alphaTab","rendering","glyphs","ChordDiagramGlyph"];
alphaTab.rendering.glyphs.ChordDiagramGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.ChordDiagramGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		var res = this.renderer.get_resources();
		var this1 = 1.5;
		this._textRow = res.effectFont.size * this1;
		var this2 = 1.5;
		this._fretRow = res.effectFont.size * this2;
		if(this._chord.firstFret > 1) {
			this._firstFretSpacing = 12 * this.get_scale();
		} else {
			this._firstFretSpacing = 0;
		}
		this.height = this._textRow + this._fretRow + (5 - 1) * 12 * this.get_scale() + 2 * 5;
		this.width = this._firstFretSpacing + (this._chord.staff.tuning.length - 1) * 10 * this.get_scale() + 2 * 5;
	}
	,paint: function(cx,cy,canvas) {
		cx = cx + (this.x + 5 * this.get_scale() + this._firstFretSpacing);
		cy = cy + this.y;
		var w = this.width - 2 * 5 * this.get_scale() + this.get_scale() - this._firstFretSpacing;
		var stringSpacing = 10 * this.get_scale();
		var fretSpacing = 12 * this.get_scale();
		var res = this.renderer.get_resources();
		var circleRadius = 2.5 * this.get_scale();
		var align = canvas.get_textAlign();
		var baseline = canvas.get_textBaseline();
		canvas.set_font(res.effectFont);
		canvas.set_textAlign(1);
		canvas.set_textBaseline(0);
		if(this._chord.showName) {
			canvas.fillText(this._chord.name,cx + this.width / 2,cy + res.effectFont.size / 2);
		}
		cy = cy + this._textRow;
		cx = cx + stringSpacing / 2;
		canvas.set_font(res.fretboardNumberFont);
		canvas.set_textBaseline(1);
		var i = 0;
		while(i < this._chord.staff.tuning.length) {
			var x = cx + i * stringSpacing;
			var y = cy + this._fretRow / 2;
			var fret = this._chord.strings[this._chord.staff.tuning.length - i - 1];
			if(fret < 0) {
				canvas.fillMusicFontSymbol(x,y,this.get_scale(),59481,true);
			} else if(fret == 0) {
				canvas.fillMusicFontSymbol(x,y,this.get_scale(),59482,true);
			} else {
				fret = fret - (this._chord.firstFret - 1);
				canvas.fillText(Std.string(fret),x,y);
			}
			++i;
		}
		cy = cy + this._fretRow;
		var i1 = 0;
		while(i1 < this._chord.staff.tuning.length) {
			var x1 = cx + i1 * stringSpacing;
			canvas.fillRect(x1,cy,1,fretSpacing * 5 + this.get_scale());
			++i1;
		}
		if(this._chord.firstFret > 1) {
			canvas.set_textAlign(0);
			canvas.fillText(Std.string(this._chord.firstFret),cx - this._firstFretSpacing,cy + fretSpacing / 2);
		}
		canvas.fillRect(cx,cy - this.get_scale(),w,2 * this.get_scale());
		var i2 = 0;
		while(i2 <= 5) {
			var y1 = cy + i2 * fretSpacing;
			canvas.fillRect(cx,y1,w,this.get_scale());
			++i2;
		}
		var this1 = {}
		var barreLookup = this1;
		var barreFret = $iterator(this._chord.barreFrets)();
		while(barreFret.hasNext()) {
			var barreFret1 = barreFret.next();
			var this2 = new Int32Array(2);
			var strings = this2;
			strings[0] = -1;
			strings[1] = -1;
			barreLookup[barreFret1 - this._chord.firstFret] = strings;
		}
		var guitarString = 0;
		while(guitarString < this._chord.strings.length) {
			var fret1 = this._chord.strings[guitarString];
			if(fret1 > 0) {
				fret1 = fret1 - this._chord.firstFret;
				if(barreLookup.hasOwnProperty(fret1)) {
					var info = barreLookup[fret1];
					if(info[0] == -1 || guitarString < info[0]) {
						info[0] = guitarString;
					}
					if(info[1] == -1 || guitarString > info[1]) {
						info[1] = guitarString;
					}
				}
				var this3 = 0.5;
				var y2 = cy + fret1 * fretSpacing + fretSpacing / 2 + this3;
				var x2 = cx + (this._chord.strings.length - guitarString - 1) * stringSpacing;
				canvas.fillCircle(x2,y2,circleRadius);
			}
			++guitarString;
		}
		var barreFret2 = $iterator(Object.keys(barreLookup))();
		while(barreFret2.hasNext()) {
			var barreFret3 = barreFret2.next();
			var strings1 = barreLookup[barreFret3];
			var y3 = cy + barreFret3 * fretSpacing + fretSpacing / 2 + this.get_scale();
			var xLeft = cx + (this._chord.strings.length - strings1[1] - 1) * stringSpacing;
			var xRight = cx + (this._chord.strings.length - strings1[0] - 1) * stringSpacing;
			canvas.fillRect(xLeft,y3 - circleRadius,xRight - xLeft,circleRadius * 2);
		}
		canvas.set_textAlign(align);
		canvas.set_textBaseline(baseline);
	}
	,__class__: alphaTab.rendering.glyphs.ChordDiagramGlyph
});
alphaTab.rendering.glyphs.ChordDiagramRowGlyph = function(x,y) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._glyphWidth = 0.0;
	this.height = 0.0;
	var this1 = [];
	this.Glyphs = this1;
};
alphaTab.rendering.glyphs.ChordDiagramRowGlyph.__name__ = ["alphaTab","rendering","glyphs","ChordDiagramRowGlyph"];
alphaTab.rendering.glyphs.ChordDiagramRowGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.ChordDiagramRowGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	doLayout: function() {
		var x = (this.width - this._glyphWidth) / 2;
		var glyph = $iterator(this.Glyphs)();
		while(glyph.hasNext()) {
			var glyph1 = glyph.next();
			glyph1.x = x;
			x = x + glyph1.width;
		}
	}
	,addChord: function(chord) {
		this.Glyphs.push(chord);
		this._glyphWidth = this._glyphWidth + chord.width;
		if(chord.height > this.height) {
			this.height = chord.height;
		}
	}
	,__class__: alphaTab.rendering.glyphs.ChordDiagramRowGlyph
});
alphaTab.rendering.glyphs.CircleGlyph = function(x,y,size) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._size = 0.0;
	this._size = size;
};
alphaTab.rendering.glyphs.CircleGlyph.__name__ = ["alphaTab","rendering","glyphs","CircleGlyph"];
alphaTab.rendering.glyphs.CircleGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.CircleGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = this._size + 3 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		canvas.fillCircle(cx + this.x,cy + this.y,this._size);
	}
	,__class__: alphaTab.rendering.glyphs.CircleGlyph
});
alphaTab.rendering.glyphs.ClefGlyph = function(x,y,clef,clefOttava) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ClefGlyph.getSymbol(clef));
	this._clef = 0;
	this._clefOttava = 0;
	this._clef = clef;
	this._clefOttava = clefOttava;
};
alphaTab.rendering.glyphs.ClefGlyph.__name__ = ["alphaTab","rendering","glyphs","ClefGlyph"];
alphaTab.rendering.glyphs.ClefGlyph.getSymbol = function(clef) {
	switch(clef) {
	case 0:
		return 57449;
	case 1:
		return 57436;
	case 2:
		return 57436;
	case 3:
		return 57442;
	case 4:
		return 57424;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.ClefGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ClefGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		var _g = this._clef;
		switch(_g) {
		case 0:
			this.width = 15 * this.get_scale();
			break;
		case 1:case 2:case 3:case 4:
			this.width = 28 * this.get_scale();
			break;
		default:
		}
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.paint.call(this,cx,cy,canvas);
		var numberGlyph;
		var top = false;
		var _g = this._clefOttava;
		switch(_g) {
		case 0:
			numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(-4 * this.get_scale(),0,0.5,58644);
			top = true;
			break;
		case 1:
			numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(-2 * this.get_scale(),0,0.5,58640);
			top = true;
			break;
		case 3:
			numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(-6 * this.get_scale(),0,0.5,58640);
			break;
		case 4:
			numberGlyph = new alphaTab.rendering.glyphs.MusicFontGlyph(-8 * this.get_scale(),0,0.5,58644);
			break;
		default:
			return;
		}
		var offsetY;
		var offsetX;
		var _g1 = this._clef;
		switch(_g1) {
		case 0:
			if(top) {
				offsetY = -12;
			} else {
				offsetY = 15;
			}
			offsetX = 0;
			break;
		case 1:
			if(top) {
				offsetY = -19;
			} else {
				offsetY = 27;
			}
			offsetX = 0;
			break;
		case 2:
			if(top) {
				offsetY = -19;
			} else {
				offsetY = 27;
			}
			offsetX = 0;
			break;
		case 3:
			if(top) {
				offsetY = -9;
			} else {
				offsetY = 27;
			}
			offsetX = -4;
			break;
		case 4:
			if(top) {
				offsetY = -37;
			} else {
				offsetY = 30;
			}
			offsetX = 0;
			break;
		default:
			return;
		}
		numberGlyph.renderer = this.renderer;
		numberGlyph.doLayout();
		var x = this.width / 2;
		numberGlyph.paint(cx + this.x + x + offsetX * this.get_scale(),cy + this.y + offsetY * this.get_scale(),canvas);
	}
	,__class__: alphaTab.rendering.glyphs.ClefGlyph
});
alphaTab.rendering.glyphs.CrescendoGlyph = function(x,y,crescendo) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,4);
	this._crescendo = 0;
	this._crescendo = crescendo;
	this.x = x;
	this.y = y;
};
alphaTab.rendering.glyphs.CrescendoGlyph.__name__ = ["alphaTab","rendering","glyphs","CrescendoGlyph"];
alphaTab.rendering.glyphs.CrescendoGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.CrescendoGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.doLayout.call(this);
		this.height = 17 * this.get_scale();
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		var startX = cx + this.x;
		var height = this.height * this.get_scale();
		canvas.beginPath();
		if(this._crescendo == 1) {
			endX = endX - (10 / 2 | 0) * this.get_scale();
			canvas.moveTo(endX,cy + this.y);
			canvas.lineTo(startX,cy + this.y + height / 2);
			canvas.lineTo(endX,cy + this.y + height);
		} else {
			endX = endX - (10 / 2 | 0) * this.get_scale();
			canvas.moveTo(startX,cy + this.y);
			canvas.lineTo(endX,cy + this.y + height / 2);
			canvas.lineTo(startX,cy + this.y + height);
		}
		canvas.stroke();
	}
	,__class__: alphaTab.rendering.glyphs.CrescendoGlyph
});
alphaTab.rendering.glyphs.DeadNoteHeadGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57514);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","DeadNoteHeadGlyph"];
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.DeadNoteHeadGlyph
});
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph = function(x,y,duration,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.getSymbol(duration));
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","DiamondNoteHeadGlyph"];
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.getSymbol = function(duration) {
	switch(duration) {
	case -4:case -2:case 1:case 2:
		return 57566;
	default:
		return 57564;
	}
};
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.DiamondNoteHeadGlyph
});
alphaTab.rendering.glyphs.DigitGlyph = function(x,y,digit,scale) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,scale,alphaTab.rendering.glyphs.DigitGlyph.getSymbol(digit));
	this._digit = 0;
	this._scale = 0.0;
	this._digit = digit;
	this._scale = scale;
};
alphaTab.rendering.glyphs.DigitGlyph.__name__ = ["alphaTab","rendering","glyphs","DigitGlyph"];
alphaTab.rendering.glyphs.DigitGlyph.getSymbol = function(digit) {
	switch(digit) {
	case 0:
		return 57472;
	case 1:
		return 57473;
	case 2:
		return 57474;
	case 3:
		return 57475;
	case 4:
		return 57476;
	case 5:
		return 57477;
	case 6:
		return 57478;
	case 7:
		return 57479;
	case 8:
		return 57480;
	case 9:
		return 57481;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.DigitGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DigitGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.y = this.y + 7 * this.get_scale();
		this.width = this.getDigitWidth(this._digit) * this.get_scale() * this._scale;
	}
	,getDigitWidth: function(digit) {
		switch(digit) {
		case 1:
			return 10;
		case 0:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
			return 14;
		default:
			return 0;
		}
	}
	,__class__: alphaTab.rendering.glyphs.DigitGlyph
});
alphaTab.rendering.glyphs.DrumSticksGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57513);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DrumSticksGlyph.__name__ = ["alphaTab","rendering","glyphs","DrumSticksGlyph"];
alphaTab.rendering.glyphs.DrumSticksGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DrumSticksGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.DrumSticksGlyph
});
alphaTab.rendering.glyphs.DynamicsGlyph = function(x,y,dynamics) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,0.6,alphaTab.rendering.glyphs.DynamicsGlyph.getSymbol(dynamics));
};
alphaTab.rendering.glyphs.DynamicsGlyph.__name__ = ["alphaTab","rendering","glyphs","DynamicsGlyph"];
alphaTab.rendering.glyphs.DynamicsGlyph.getSymbol = function(dynamics) {
	switch(dynamics) {
	case 0:
		return 58666;
	case 1:
		return 58667;
	case 2:
		return 58656;
	case 3:
		return 58668;
	case 4:
		return 58669;
	case 5:
		return 58658;
	case 6:
		return 58671;
	case 7:
		return 58672;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.DynamicsGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DynamicsGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.doLayout.call(this);
		this.height = 17 * this.get_scale();
		this.y = this.y + this.height / 2;
	}
	,__class__: alphaTab.rendering.glyphs.DynamicsGlyph
});
alphaTab.rendering.glyphs.FadeInGlyph = function(x,y) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
};
alphaTab.rendering.glyphs.FadeInGlyph.__name__ = ["alphaTab","rendering","glyphs","FadeInGlyph"];
alphaTab.rendering.glyphs.FadeInGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.FadeInGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = 17 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var size = 6 * this.get_scale();
		var width = Math.max(this.width,14 * this.get_scale());
		var offset = this.height / 2;
		canvas.beginPath();
		canvas.moveTo(cx + this.x,cy + this.y + offset);
		canvas.quadraticCurveTo(cx + this.x + width / 2,cy + this.y + offset,cx + this.x + width,cy + this.y + offset - size);
		canvas.moveTo(cx + this.x,cy + this.y + offset);
		canvas.quadraticCurveTo(cx + this.x + width / 2,cy + this.y + offset,cx + this.x + width,cy + this.y + offset + size);
		canvas.stroke();
	}
	,__class__: alphaTab.rendering.glyphs.FadeInGlyph
});
alphaTab.rendering.glyphs.FermataGlyph = function(x,y,fermata) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.FermataGlyph.getSymbol(fermata));
};
alphaTab.rendering.glyphs.FermataGlyph.__name__ = ["alphaTab","rendering","glyphs","FermataGlyph"];
alphaTab.rendering.glyphs.FermataGlyph.getSymbol = function(accentuation) {
	switch(accentuation) {
	case 0:
		return 58564;
	case 1:
		return 58560;
	case 2:
		return 58566;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.FermataGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.FermataGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 23 * this.get_scale();
		this.height = 12 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.paint.call(this,cx - this.width / 2,cy + this.height,canvas);
	}
	,__class__: alphaTab.rendering.glyphs.FermataGlyph
});
alphaTab.rendering.glyphs.GhostNoteContainerGlyph = function(isOpen) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._isOpen = false;
	this._infos = null;
	this._glyphs = null;
	this.isEmpty = false;
	this._isOpen = isOpen;
	var this1 = [];
	this._infos = this1;
	var this2 = [];
	this._glyphs = this2;
	this.isEmpty = true;
};
alphaTab.rendering.glyphs.GhostNoteContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","GhostNoteContainerGlyph"];
alphaTab.rendering.glyphs.GhostNoteContainerGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.GhostNoteContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	addParenthesis: function(n) {
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var line = sr.getNoteLine(n);
		var hasParenthesis = n.isGhost || this.isTiedBend(n) && sr.get_settings().notation.showParenthesisForTiedBends;
		this.addParenthesisOnLine(line,hasParenthesis);
	}
	,addParenthesisOnLine: function(line,hasParenthesis) {
		var info = new alphaTab.rendering.glyphs.GhostNoteInfo(line,hasParenthesis);
		this._infos.push(info);
		if(hasParenthesis) {
			this.isEmpty = false;
		}
	}
	,isTiedBend: function(note) {
		if(note.isTieDestination) {
			if(note.tieOrigin.get_hasBend()) {
				return true;
			}
			return this.isTiedBend(note.tieOrigin);
		}
		return false;
	}
	,doLayout: function() {
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var comparison = function(a,b) {
			return system._Int32.Int32_Impl_.compareTo_Int32(a.line,b.line);
		};
		this._infos.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var previousGlyph = null;
		var sizePerLine = sr.getScoreY(1,0);
		var i = 0;
		var j = this._infos.length;
		while(i < j) {
			var g;
			if(!this._infos[i].isGhost) {
				previousGlyph = null;
			} else if(previousGlyph == null) {
				g = new alphaTab.rendering.glyphs.GhostParenthesisGlyph(this._isOpen);
				g.renderer = this.renderer;
				var this1 = this._infos[i].line;
				g.y = sr.getScoreY(this1,0) - sizePerLine;
				g.height = sizePerLine * 2;
				g.doLayout();
				this._glyphs.push(g);
				previousGlyph = g;
			} else {
				var this2 = this._infos[i].line;
				var y = sr.getScoreY(this2,0) + sizePerLine;
				previousGlyph.height = y - previousGlyph.y;
			}
			++i;
		}
		this.width = this._glyphs.length > 0 ? this._glyphs[0].width : 0;
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.Glyph.prototype.paint.call(this,cx,cy,canvas);
		var g = $iterator(this._glyphs)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.paint(cx + this.x,cy + this.y,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.GhostNoteContainerGlyph
});
alphaTab.rendering.glyphs.GhostNoteInfo = function(line,isGhost) {
	this.line = 0;
	this.isGhost = false;
	this.line = line;
	this.isGhost = isGhost;
};
alphaTab.rendering.glyphs.GhostNoteInfo.__name__ = ["alphaTab","rendering","glyphs","GhostNoteInfo"];
alphaTab.rendering.glyphs.GhostNoteInfo.prototype = {
	__class__: alphaTab.rendering.glyphs.GhostNoteInfo
};
alphaTab.rendering.glyphs.GhostParenthesisGlyph = function(isOpen) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._isOpen = false;
	this.height = 0.0;
	this._isOpen = isOpen;
};
alphaTab.rendering.glyphs.GhostParenthesisGlyph.__name__ = ["alphaTab","rendering","glyphs","GhostParenthesisGlyph"];
alphaTab.rendering.glyphs.GhostParenthesisGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.GhostParenthesisGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.doLayout.call(this);
		this.width = 6 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		if(this._isOpen) {
			var this1 = 6;
			alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),cx + this.x + this.width,cy + this.y + this.height,cx + this.x + this.width,cy + this.y,false,this1,3);
		} else {
			var this2 = 6;
			alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),cx + this.x,cy + this.y,cx + this.x,cy + this.y + this.height,false,this2,3);
		}
		canvas.fill();
	}
	,__class__: alphaTab.rendering.glyphs.GhostParenthesisGlyph
});
alphaTab.rendering.glyphs.HiHatGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57523);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.HiHatGlyph.__name__ = ["alphaTab","rendering","glyphs","HiHatGlyph"];
alphaTab.rendering.glyphs.HiHatGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.HiHatGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.HiHatGlyph
});
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
	var this1 = [];
	this.Glyphs = this1;
};
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__name__ = ["alphaTab","rendering","glyphs","LeftToRightLayoutingGlyphGroup"];
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	addGlyph: function(g) {
		g.x = this.Glyphs.length == 0 ? 0 : this.Glyphs[this.Glyphs.length - 1].x + this.Glyphs[this.Glyphs.length - 1].width;
		g.renderer = this.renderer;
		g.doLayout();
		this.width = g.x + g.width;
		alphaTab.rendering.glyphs.GlyphGroup.prototype.addGlyph.call(this,g);
	}
	,__class__: alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup
});
alphaTab.rendering.glyphs.LineRangedGlyph = function(label) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,1);
	this._label = null;
	this._label = label;
};
alphaTab.rendering.glyphs.LineRangedGlyph.__name__ = ["alphaTab","rendering","glyphs","LineRangedGlyph"];
alphaTab.rendering.glyphs.LineRangedGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.LineRangedGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	doLayout: function() {
		if(this.renderer.get_settings().notation.extendLineEffectsToBeatEnd) {
			this.endPosition = 4;
			this.forceGroupedRendering = true;
		}
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.doLayout.call(this);
		this.height = this.renderer.get_resources().effectFont.size;
	}
	,paintNonGrouped: function(cx,cy,canvas) {
		var res = this.renderer.get_resources();
		canvas.set_font(res.effectFont);
		var x = canvas.get_textAlign();
		canvas.set_textAlign(1);
		canvas.fillText(this._label,cx + this.x,cy + this.y);
		canvas.set_textAlign(x);
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		this.paintNonGrouped(cx,cy,canvas);
		var lineSpacing = 3 * this.get_scale();
		var textWidth = canvas.measureText(this._label);
		var this1 = 2;
		var startX = cx + this.x + textWidth / this1 + lineSpacing;
		var lineY = cy + this.y + 4 * this.get_scale();
		var lineSize = 8 * this.get_scale();
		if(endX > startX) {
			var lineX = startX;
			while(lineX < endX) {
				canvas.beginPath();
				var this2 = system.Convert.toInt32_Single(lineY);
				canvas.moveTo(lineX,this2);
				var tmp = Math.min(lineX + lineSize,endX);
				var this3 = system.Convert.toInt32_Single(lineY);
				canvas.lineTo(tmp,this3);
				lineX = lineX + (lineSize + lineSpacing);
				canvas.stroke();
			}
			canvas.beginPath();
			var this4 = system.Convert.toInt32_Single(lineY - 5 * this.get_scale());
			canvas.moveTo(endX,this4);
			var this5 = system.Convert.toInt32_Single(lineY + 5 * this.get_scale());
			canvas.lineTo(endX,this5);
			canvas.stroke();
		}
	}
	,__class__: alphaTab.rendering.glyphs.LineRangedGlyph
});
alphaTab.rendering.glyphs.LyricsGlyph = function(x,y,lines,font,textAlign) {
	if(textAlign == null) {
		textAlign = 1;
	}
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._lines = null;
	this.font = null;
	this.textAlign = 0;
	this._lines = lines;
	this.font = font;
	this.textAlign = textAlign;
};
alphaTab.rendering.glyphs.LyricsGlyph.__name__ = ["alphaTab","rendering","glyphs","LyricsGlyph"];
alphaTab.rendering.glyphs.LyricsGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.LyricsGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = this.font.size * this._lines.length;
	}
	,paint: function(cx,cy,canvas) {
		canvas.set_font(this.font);
		var old = canvas.get_textAlign();
		canvas.set_textAlign(this.textAlign);
		var i = 0;
		while(i < this._lines.length) {
			if(this._lines[i] != null) {
				canvas.fillText(this._lines[i],cx + this.x,cy + this.y + i * this.font.size);
			}
			++i;
		}
		canvas.set_textAlign(old);
	}
	,__class__: alphaTab.rendering.glyphs.LyricsGlyph
});
alphaTab.rendering.glyphs._MusicFontSymbol = {};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_ = {};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.__name__ = ["alphaTab","rendering","glyphs","_MusicFontSymbol","MusicFontSymbol_Impl_"];
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toString = function(this1) {
	switch(this1) {
	case -1:
		return "None";
	case 57424:
		return "ClefG";
	case 57436:
		return "ClefC";
	case 57442:
		return "ClefF";
	case 57449:
		return "ClefNeutral";
	case 57453:
		return "ClefTab";
	case 57454:
		return "ClefTabSmall";
	case 57472:
		return "Num0";
	case 57473:
		return "Num1";
	case 57474:
		return "Num2";
	case 57475:
		return "Num3";
	case 57476:
		return "Num4";
	case 57477:
		return "Num5";
	case 57478:
		return "Num6";
	case 57479:
		return "Num7";
	case 57480:
		return "Num8";
	case 57481:
		return "Num9";
	case 57482:
		return "TimeSignatureCommon";
	case 57483:
		return "TimeSignatureCutCommon";
	case 57504:
		return "NoteDoubleWhole";
	case 57505:
		return "NoteQuadrupleWhole";
	case 57506:
		return "NoteWhole";
	case 57507:
		return "NoteHalf";
	case 57508:
		return "NoteQuarter";
	case 57513:
		return "NoteSideStick";
	case 57514:
		return "NoteDead";
	case 57523:
		return "NoteHiHat";
	case 57564:
		return "NoteHarmonic";
	case 57566:
		return "NoteHarmonicWhole";
	case 57591:
		return "NoteHiHatHalf";
	case 57593:
		return "NoteChineseCymbal";
	case 57813:
		return "Tempo";
	case 57815:
		return "NoteEighth";
	case 57888:
		return "TremoloPickingEighth";
	case 57889:
		return "TremoloPickingSixteenth";
	case 57890:
		return "TremoloPickingThirtySecond";
	case 57920:
		return "FooterUpEighth";
	case 57921:
		return "FooterDownEighth";
	case 57922:
		return "FooterUpSixteenth";
	case 57923:
		return "FooterDownSixteenth";
	case 57924:
		return "FooterUpThirtySecond";
	case 57925:
		return "FooterDownThirtySecond";
	case 57926:
		return "FooterUpSixtyFourth";
	case 57927:
		return "FooterDownSixtyFourth";
	case 57928:
		return "FooterUpOneHundredTwentyEighth";
	case 57929:
		return "FooterDownOneHundredTwentyEighth";
	case 57930:
		return "FooterUpTwoHundredFiftySixth";
	case 57931:
		return "FooterDownTwoHundredFiftySixth";
	case 57952:
		return "AccidentalFlat";
	case 57953:
		return "AccidentalNatural";
	case 57954:
		return "AccidentalSharp";
	case 57968:
		return "AccidentalQuarterToneFlatArrowUp";
	case 57970:
		return "AccidentalQuarterToneNaturalArrowUp";
	case 57972:
		return "AccidentalQuarterToneSharpArrowUp";
	case 58528:
		return "Accentuation";
	case 58540:
		return "HeavyAccentuation";
	case 58560:
		return "FermataMedium";
	case 58564:
		return "FermataShort";
	case 58566:
		return "FermataLong";
	case 58593:
		return "RestQuadrupleWhole";
	case 58594:
		return "RestDoubleWhole";
	case 58595:
		return "RestWhole";
	case 58596:
		return "RestHalf";
	case 58597:
		return "RestQuarter";
	case 58598:
		return "RestEighth";
	case 58599:
		return "RestSixteenth";
	case 58600:
		return "RestThirtySecond";
	case 58601:
		return "RestSixtyFourth";
	case 58602:
		return "RestOneHundredTwentyEighth";
	case 58603:
		return "RestTwoHundredFiftySixth";
	case 58624:
		return "SimileMarkSimple";
	case 58625:
		return "SimileMarkDouble";
	case 58640:
		return "Ottava8";
	case 58641:
		return "Ottava8va";
	case 58644:
		return "Ottava15";
	case 58645:
		return "Ottava15ma";
	case 58652:
		return "Ottava8vb";
	case 58656:
		return "DynamicP";
	case 58658:
		return "DynamicF";
	case 58666:
		return "DynamicPPP";
	case 58667:
		return "DynamicPP";
	case 58668:
		return "DynamicMP";
	case 58669:
		return "DynamicMF";
	case 58671:
		return "DynamicFF";
	case 58672:
		return "DynamicFFF";
	case 58726:
		return "Trill";
	case 58896:
		return "PickStrokeDown";
	case 58898:
		return "PickStrokeUp";
	case 59481:
		return "FretboardX";
	case 59482:
		return "FretboardO";
	case 60068:
		return "WaveHorizontalSlight";
	case 60126:
		return "WaveHorizontalWide";
	case 60563:
		return "OttavaBBaseline";
	case 60565:
		return "OttavaMBaseline";
	}
	return "";
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "accentuation":
		return 58528;
	case "accidentalflat":
		return 57952;
	case "accidentalnatural":
		return 57953;
	case "accidentalquartertoneflatarrowup":
		return 57968;
	case "accidentalquartertonenaturalarrowup":
		return 57970;
	case "accidentalquartertonesharparrowup":
		return 57972;
	case "accidentalsharp":
		return 57954;
	case "clefc":
		return 57436;
	case "cleff":
		return 57442;
	case "clefg":
		return 57424;
	case "clefneutral":
		return 57449;
	case "cleftab":
		return 57453;
	case "cleftabsmall":
		return 57454;
	case "dynamicf":
		return 58658;
	case "dynamicff":
		return 58671;
	case "dynamicfff":
		return 58672;
	case "dynamicmf":
		return 58669;
	case "dynamicmp":
		return 58668;
	case "dynamicp":
		return 58656;
	case "dynamicpp":
		return 58667;
	case "dynamicppp":
		return 58666;
	case "fermatalong":
		return 58566;
	case "fermatamedium":
		return 58560;
	case "fermatashort":
		return 58564;
	case "footerdowneighth":
		return 57921;
	case "footerdownonehundredtwentyeighth":
		return 57929;
	case "footerdownsixteenth":
		return 57923;
	case "footerdownsixtyfourth":
		return 57927;
	case "footerdownthirtysecond":
		return 57925;
	case "footerdowntwohundredfiftysixth":
		return 57931;
	case "footerupeighth":
		return 57920;
	case "footeruponehundredtwentyeighth":
		return 57928;
	case "footerupsixteenth":
		return 57922;
	case "footerupsixtyfourth":
		return 57926;
	case "footerupthirtysecond":
		return 57924;
	case "footeruptwohundredfiftysixth":
		return 57930;
	case "fretboardo":
		return 59482;
	case "fretboardx":
		return 59481;
	case "heavyaccentuation":
		return 58540;
	case "none":
		return -1;
	case "notechinesecymbal":
		return 57593;
	case "notedead":
		return 57514;
	case "notedoublewhole":
		return 57504;
	case "noteeighth":
		return 57815;
	case "notehalf":
		return 57507;
	case "noteharmonic":
		return 57564;
	case "noteharmonicwhole":
		return 57566;
	case "notehihat":
		return 57523;
	case "notehihathalf":
		return 57591;
	case "notequadruplewhole":
		return 57505;
	case "notequarter":
		return 57508;
	case "notesidestick":
		return 57513;
	case "notewhole":
		return 57506;
	case "num0":
		return 57472;
	case "num1":
		return 57473;
	case "num2":
		return 57474;
	case "num3":
		return 57475;
	case "num4":
		return 57476;
	case "num5":
		return 57477;
	case "num6":
		return 57478;
	case "num7":
		return 57479;
	case "num8":
		return 57480;
	case "num9":
		return 57481;
	case "ottava15":
		return 58644;
	case "ottava15ma":
		return 58645;
	case "ottava8":
		return 58640;
	case "ottava8va":
		return 58641;
	case "ottava8vb":
		return 58652;
	case "ottavabbaseline":
		return 60563;
	case "ottavambaseline":
		return 60565;
	case "pickstrokedown":
		return 58896;
	case "pickstrokeup":
		return 58898;
	case "restdoublewhole":
		return 58594;
	case "resteighth":
		return 58598;
	case "resthalf":
		return 58596;
	case "restonehundredtwentyeighth":
		return 58602;
	case "restquadruplewhole":
		return 58593;
	case "restquarter":
		return 58597;
	case "restsixteenth":
		return 58599;
	case "restsixtyfourth":
		return 58601;
	case "restthirtysecond":
		return 58600;
	case "resttwohundredfiftysixth":
		return 58603;
	case "restwhole":
		return 58595;
	case "similemarkdouble":
		return 58625;
	case "similemarksimple":
		return 58624;
	case "tempo":
		return 57813;
	case "timesignaturecommon":
		return 57482;
	case "timesignaturecutcommon":
		return 57483;
	case "tremolopickingeighth":
		return 57888;
	case "tremolopickingsixteenth":
		return 57889;
	case "tremolopickingthirtysecond":
		return 57890;
	case "trill":
		return 58726;
	case "wavehorizontalslight":
		return 60068;
	case "wavehorizontalwide":
		return 60126;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.glyphs.NoteHeadGlyph = function(x,y,duration,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.NoteHeadGlyph.getSymbol(duration));
	this._isGrace = false;
	this._duration = -4;
	this._isGrace = isGrace;
	this._duration = duration;
};
alphaTab.rendering.glyphs.NoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","NoteHeadGlyph"];
alphaTab.rendering.glyphs.NoteHeadGlyph.getSymbol = function(duration) {
	switch(duration) {
	case -4:
		return 57505;
	case -2:
		return 57504;
	case 1:
		return 57506;
	case 2:
		return 57507;
	default:
		return 57508;
	}
};
alphaTab.rendering.glyphs.NoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.NoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	paint: function(cx,cy,canvas) {
		var offset = this._isGrace ? this.get_scale() : 0;
		canvas.fillMusicFontSymbol(cx + this.x,cy + this.y + offset,this.GlyphScale * this.get_scale(),this.Symbol,false);
	}
	,doLayout: function() {
		var scale = (this._isGrace ? 0.75 : 1) * this.get_scale();
		var _g = this._duration;
		switch(_g) {
		case -4:
			this.width = 14 * scale;
			this.height = 9 * scale;
			break;
		case -2:
			this.width = 14 * (this._isGrace ? 0.75 : 1) * this.get_scale();
			this.height = 9 * scale;
			break;
		case 1:
			this.width = 14 * (this._isGrace ? 0.75 : 1) * this.get_scale();
			this.height = 9 * scale;
			break;
		default:
			this.width = 10 * (this._isGrace ? 0.75 : 1) * this.get_scale();
			this.height = 9 * scale;
		}
	}
	,__class__: alphaTab.rendering.glyphs.NoteHeadGlyph
});
alphaTab.rendering.glyphs.NoteNumberGlyph = function(x,y,note) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._note = null;
	this._noteString = null;
	this._trillNoteString = null;
	this._trillNoteStringWidth = 0.0;
	this.isEmpty = false;
	this.height = 0.0;
	this.noteStringWidth = 0.0;
	this._note = note;
};
alphaTab.rendering.glyphs.NoteNumberGlyph.__name__ = ["alphaTab","rendering","glyphs","NoteNumberGlyph"];
alphaTab.rendering.glyphs.NoteNumberGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.NoteNumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		var n = this._note;
		var this1 = n.fret - n.beat.voice.bar.staff.transpositionPitch;
		var fret = this1;
		if(n.harmonicType == 1 && n.harmonicValue != 0) {
			var this2 = n.harmonicValue - n.beat.voice.bar.staff.transpositionPitch;
			fret = this2;
		}
		if(!n.isTieDestination) {
			this._noteString = n.isDead ? "x" : Std.string(fret);
			if(n.isGhost) {
				this._noteString = "(" + this._noteString + ")";
			} else if(n.harmonicType == 1) {
				var this3 = this._noteString;
				var this4 = system.Convert.toUInt16(46);
				var i = this3.indexOf(String.fromCharCode(this4));
				if(i >= 0) {
					this._noteString = HxOverrides.substr(this._noteString,0,i + 2);
				}
				this._noteString = "<" + this._noteString + ">";
			}
		} else if(n.beat.index == 0 || (n.bendType == 2 || n.bendType == 4) && this.renderer.get_settings().notation.showTabNoteOnTiedBend) {
			this._noteString = "(" + Std.string(n.tieOrigin.fret - n.beat.voice.bar.staff.transpositionPitch) + ")";
		} else {
			this._noteString = "";
		}
		if(n.get_isTrill()) {
			this._trillNoteString = "(" + Std.string(n.get_trillFret() - n.beat.voice.bar.staff.transpositionPitch) + ")";
		} else if(!alphaTab.platform.Platform.isAlmostEqualTo(n.harmonicValue,0)) {
			var _g = n.harmonicType;
			switch(_g) {
			case 2:case 3:case 4:case 5:case 6:
				var s = Std.string(fret + n.harmonicValue);
				var this5 = system.Convert.toUInt16(46);
				var i1 = s.indexOf(String.fromCharCode(this5));
				if(i1 >= 0) {
					s = HxOverrides.substr(s,0,i1 + 2);
				}
				this._trillNoteString = "<" + s + ">";
				break;
			default:
				this._trillNoteString = "";
			}
		} else {
			this._trillNoteString = "";
		}
		var s1 = this._noteString;
		this.isEmpty = s1 == null || s1.length == 0;
		if(!this.isEmpty) {
			this.renderer.scoreRenderer.canvas.set_font(this.renderer.get_resources().tablatureFont);
			this.width = this.noteStringWidth = this.renderer.scoreRenderer.canvas.measureText(this._noteString);
			this.height = this.renderer.scoreRenderer.canvas.get_font().size;
			var s2 = this._trillNoteString;
			var hasTrill = !(s2 == null || s2.length == 0);
			if(hasTrill) {
				this.renderer.scoreRenderer.canvas.set_font(this.renderer.get_resources().graceFont);
				this._trillNoteStringWidth = 3 * this.get_scale() + this.renderer.scoreRenderer.canvas.measureText(this._trillNoteString);
				this.width = this.width + this._trillNoteStringWidth;
			}
		}
	}
	,paint: function(cx,cy,canvas) {
		var _gthis = this;
		if(this.isEmpty) {
			return;
		}
		var textWidth = this.noteStringWidth + this._trillNoteStringWidth;
		var x = cx + this.x + (this.width - textWidth) / 2;
		var prevFont = this.renderer.scoreRenderer.canvas.get_font();
		this.renderer.scoreRenderer.canvas.set_font(this.renderer.get_resources().graceFont);
		canvas.fillText(this._trillNoteString,x + this.noteStringWidth + 3 * this.get_scale(),cy + this.y);
		this.renderer.scoreRenderer.canvas.set_font(prevFont);
		canvas.fillText(this._noteString,x,cy + this.y);
		if(this.renderer.get_settings().core.includeNoteBounds) {
			var noteBounds = new alphaTab.rendering.utils.NoteBounds();
			noteBounds.note = this._note;
			var _tmp = new alphaTab.rendering.utils.Bounds();
			_tmp.x = cx + x;
			_tmp.y = cy + _gthis.y;
			_tmp.w = _gthis.width;
			_tmp.h = _gthis.height;
			noteBounds.noteHeadBounds = _tmp;
			this.renderer.scoreRenderer.get_boundsLookup().addNote(noteBounds);
		}
	}
	,__class__: alphaTab.rendering.glyphs.NoteNumberGlyph
});
alphaTab.rendering.glyphs.NoteVibratoGlyph = function(x,y,type,scale) {
	if(scale == null) {
		scale = 1.2;
	}
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,4);
	this._type = 0;
	this._scale = 0.0;
	this._symbol = -1;
	this._symbolSize = 0.0;
	this._symbolOffset = 0.0;
	this._type = type;
	this._scale = scale;
	this.x = x;
	this.y = y;
};
alphaTab.rendering.glyphs.NoteVibratoGlyph.__name__ = ["alphaTab","rendering","glyphs","NoteVibratoGlyph"];
alphaTab.rendering.glyphs.NoteVibratoGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.NoteVibratoGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.doLayout.call(this);
		var symbolHeight = 0;
		var _g = this._type;
		switch(_g) {
		case 1:
			this._symbol = 60068;
			this._symbolSize = 8.5 * this._scale;
			this._symbolOffset = 10 * this._scale;
			symbolHeight = 6 * this._scale;
			break;
		case 2:
			this._symbol = 60126;
			this._symbolSize = 10 * this._scale;
			this._symbolOffset = 7 * this._scale;
			symbolHeight = 10 * this._scale;
			break;
		default:
		}
		this.height = symbolHeight * this.get_scale();
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		var startX = cx + this.x;
		var width = endX - startX;
		var step = this._symbolSize * this.get_scale();
		var loops = system.Convert.toInt32_Single(Math.max(1,width / step));
		var loopX = 0;
		var i = 0;
		while(i < loops) {
			canvas.fillMusicFontSymbol(cx + this.x + loopX,cy + this.y + this._symbolOffset,this._scale,this._symbol,false);
			loopX = loopX + step;
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.NoteVibratoGlyph
});
alphaTab.rendering.glyphs.NumberGlyph = function(x,y,number,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._number = 0;
	this._scale = 0.0;
	this._number = number;
	this._scale = scale;
};
alphaTab.rendering.glyphs.NumberGlyph.__name__ = ["alphaTab","rendering","glyphs","NumberGlyph"];
alphaTab.rendering.glyphs.NumberGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.NumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	doLayout: function() {
		var i = this._number;
		while(i > 0) {
			var num = i % 10;
			var gl = new alphaTab.rendering.glyphs.DigitGlyph(0,0,num,this._scale);
			this.addGlyph(gl);
			i = i / 10 | 0;
		}
		this.Glyphs.reverse();
		var cx = 0;
		var j = 0;
		var k = this.Glyphs.length;
		while(j < k) {
			var g = this.Glyphs[j];
			g.x = cx;
			g.y = 0;
			g.renderer = this.renderer;
			g.doLayout();
			cx = cx + g.width;
			++j;
		}
		this.width = cx;
	}
	,__class__: alphaTab.rendering.glyphs.NumberGlyph
});
alphaTab.rendering.glyphs.OttavaGlyph = function(ottava,aboveStaff) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,3);
	this._ottava = 0;
	this._aboveStaff = false;
	this._ottava = ottava;
	this._aboveStaff = aboveStaff;
};
alphaTab.rendering.glyphs.OttavaGlyph.__name__ = ["alphaTab","rendering","glyphs","OttavaGlyph"];
alphaTab.rendering.glyphs.OttavaGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.OttavaGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.doLayout.call(this);
		this.height = 13 * this.get_scale();
	}
	,paintNonGrouped: function(cx,cy,canvas) {
		this.paintOttava(cx,cy,canvas);
	}
	,paintOttava: function(cx,cy,canvas) {
		var size = 0;
		var _g = this._ottava;
		switch(_g) {
		case 0:
			size = 37 * this.get_scale();
			canvas.fillMusicFontSymbol(cx + this.x - size / 2,cy + this.y + this.height,0.8,58645,false);
			break;
		case 1:
			size = 26 * this.get_scale();
			canvas.fillMusicFontSymbol(cx + this.x - size / 2,cy + this.y + this.height,0.8,58641,false);
			break;
		case 3:
			size = 23 * this.get_scale();
			canvas.fillMusicFontSymbol(cx + this.x - size / 2,cy + this.y + this.height,0.8,58652,false);
			break;
		case 4:
			size = 36 * this.get_scale();
			canvas.fillMusicFontSymbols(cx + this.x - size / 2,cy + this.y + this.height,0.8,[58644,60565,60563],false);
			break;
		default:
		}
		return size / 2;
	}
	,paintGrouped: function(cx,cy,endX,canvas) {
		var size = this.paintOttava(cx,cy,canvas);
		var lineSpacing = 3 * this.get_scale();
		var startX = cx + this.x + size + lineSpacing;
		var lineY = cy + this.y;
		lineY = lineY + (this._aboveStaff ? 2 * this.get_scale() : this.height - 2 * this.get_scale());
		var lineSize = 8 * this.get_scale();
		if(endX > startX) {
			var lineX = startX;
			while(lineX < endX) {
				canvas.beginPath();
				var this1 = system.Convert.toInt32_Single(lineY);
				canvas.moveTo(lineX,this1);
				var tmp = Math.min(lineX + lineSize,endX);
				var this2 = system.Convert.toInt32_Single(lineY);
				canvas.lineTo(tmp,this2);
				lineX = lineX + (lineSize + lineSpacing);
				canvas.stroke();
			}
			canvas.beginPath();
			if(this._aboveStaff) {
				canvas.moveTo(endX,lineY);
				canvas.lineTo(endX,cy + this.y + this.height);
			} else {
				canvas.moveTo(endX,lineY);
				canvas.lineTo(endX,cy + this.y);
			}
			canvas.stroke();
		}
	}
	,__class__: alphaTab.rendering.glyphs.OttavaGlyph
});
alphaTab.rendering.glyphs.PickStrokeGlyph = function(x,y,pickStroke) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,0.75,alphaTab.rendering.glyphs.PickStrokeGlyph.getSymbol(pickStroke));
};
alphaTab.rendering.glyphs.PickStrokeGlyph.__name__ = ["alphaTab","rendering","glyphs","PickStrokeGlyph"];
alphaTab.rendering.glyphs.PickStrokeGlyph.getSymbol = function(pickStroke) {
	switch(pickStroke) {
	case 1:
		return 58898;
	case 2:
		return 58896;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.PickStrokeGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.PickStrokeGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * this.get_scale();
		this.height = 10 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.paint.call(this,cx,cy + this.height,canvas);
	}
	,__class__: alphaTab.rendering.glyphs.PickStrokeGlyph
});
alphaTab.rendering.glyphs.RepeatCloseGlyph = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.RepeatCloseGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatCloseGlyph"];
alphaTab.rendering.glyphs.RepeatCloseGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatCloseGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 11 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_scale();
		var top = cy + this.y + this.renderer.topPadding;
		var bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
		var left = cx + this.x;
		var h = bottom - top;
		var this1 = 1.5;
		var circleSize = this1 * this.get_scale();
		var middle = (top + bottom) / 2;
		var dotOffset = 3;
		canvas.fillCircle(left,middle - circleSize * dotOffset,circleSize);
		canvas.fillCircle(left,middle + circleSize * dotOffset,circleSize);
		left = left + 4 * this.get_scale();
		canvas.beginPath();
		canvas.moveTo(left,top);
		canvas.lineTo(left,bottom);
		canvas.stroke();
		var this2 = 0.5;
		left = left + (3 * this.get_scale() + this2);
		canvas.fillRect(left,top,blockWidth,h);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatCloseGlyph
});
alphaTab.rendering.glyphs.RepeatCountGlyph = function(x,y,count) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._count = 0;
	this._count = count;
};
alphaTab.rendering.glyphs.RepeatCountGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatCountGlyph"];
alphaTab.rendering.glyphs.RepeatCountGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatCountGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 0;
	}
	,paint: function(cx,cy,canvas) {
		var res = this.renderer.get_resources();
		var oldAlign = canvas.get_textAlign();
		canvas.set_font(res.barNumberFont);
		canvas.set_textAlign(2);
		var s = "x" + Std.string(this._count);
		var this1 = 1.5;
		var w = canvas.measureText(s) / this1;
		canvas.fillText(s,cx + this.x - w,cy + this.y);
		canvas.set_textAlign(oldAlign);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatCountGlyph
});
alphaTab.rendering.glyphs.RepeatOpenGlyph = function(x,y,circleSize,dotOffset) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._dotOffset = 0.0;
	this._circleSize = 0.0;
	this._dotOffset = dotOffset;
	this._circleSize = circleSize;
};
alphaTab.rendering.glyphs.RepeatOpenGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatOpenGlyph"];
alphaTab.rendering.glyphs.RepeatOpenGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatOpenGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 13 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_scale();
		var top = cy + this.y + this.renderer.topPadding;
		var bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
		var this1 = 0.5;
		var left = cx + this.x + this1;
		var h = bottom - top;
		canvas.fillRect(left,top,blockWidth,h);
		var this2 = 0.5;
		left = left + (blockWidth * 2 - this2);
		canvas.beginPath();
		canvas.moveTo(left,top);
		canvas.lineTo(left,bottom);
		canvas.stroke();
		left = left + 3 * this.get_scale();
		var circleSize = this._circleSize * this.get_scale();
		var middle = (top + bottom) / 2;
		canvas.fillCircle(left,middle - circleSize * this._dotOffset,circleSize);
		canvas.fillCircle(left,middle + circleSize * this._dotOffset,circleSize);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatOpenGlyph
});
alphaTab.rendering.glyphs.RideCymbalGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57566);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.RideCymbalGlyph.__name__ = ["alphaTab","rendering","glyphs","RideCymbalGlyph"];
alphaTab.rendering.glyphs.RideCymbalGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.RideCymbalGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 9 * (this._isGrace ? 0.75 : 1) * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.RideCymbalGlyph
});
alphaTab.rendering.glyphs.ScoreBeatGlyph = function() {
	alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
};
alphaTab.rendering.glyphs.ScoreBeatGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBeatGlyph"];
alphaTab.rendering.glyphs.ScoreBeatGlyph.__super__ = alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
alphaTab.rendering.glyphs.ScoreBeatGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,{
	updateBeamingHelper: function() {
		if(this.noteHeads != null) {
			this.noteHeads.updateBeamingHelper(this.container.x + this.x);
		} else if(this.restGlyph != null) {
			this.restGlyph.updateBeamingHelper(this.container.x + this.x);
		}
	}
	,doLayout: function() {
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		if(!this.container.beat.isEmpty) {
			if(!this.container.beat.get_isRest()) {
				this.noteHeads = new alphaTab.rendering.glyphs.ScoreNoteChordGlyph();
				this.noteHeads.beat = this.container.beat;
				this.noteHeads.beamingHelper = this.beamingHelper;
				var ghost = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(false);
				ghost.renderer = this.renderer;
				var note = $iterator(this.container.beat.notes)();
				while(note.hasNext()) {
					var note1 = note.next();
					if(note1.isVisible) {
						this.createNoteGlyph(note1);
						ghost.addParenthesis(note1);
					}
				}
				this.addGlyph(this.noteHeads);
				if(!ghost.isEmpty) {
					this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * (this.container.beat.graceType != 0 ? 0.75 : 1) * this.get_scale()));
					this.addGlyph(ghost);
				}
				if(this.container.beat.get_hasWhammyBar()) {
					var whammy = new alphaTab.rendering.glyphs.ScoreWhammyBarGlyph(this.container.beat);
					whammy.renderer = this.renderer;
					whammy.doLayout();
					this.container.ties.push(whammy);
				}
				if(this.container.beat.dots > 0) {
					this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
					var i = 0;
					while(i < this.container.beat.dots) {
						var group = new alphaTab.rendering.glyphs.GlyphGroup(0,0);
						var note2 = $iterator(this.container.beat.notes)();
						while(note2.hasNext()) {
							var note3 = note2.next();
							this.createBeatDot(sr.getNoteLine(note3),group);
						}
						this.addGlyph(group);
						++i;
					}
				}
			} else {
				var dotLine = 0;
				var line = 0;
				var offset = 0;
				var _g = this.container.beat.duration;
				switch(_g) {
				case -4:
					line = 6;
					dotLine = 5;
					break;
				case -2:
					line = 6;
					dotLine = 5;
					break;
				case 1:
					line = 4;
					dotLine = 5;
					break;
				case 2:
					line = 6;
					dotLine = 5;
					break;
				case 4:
					line = 6;
					offset = -2;
					dotLine = 5;
					break;
				case 8:
					line = 6;
					dotLine = 5;
					break;
				case 16:
					line = 6;
					dotLine = 5;
					break;
				case 32:
					line = 6;
					dotLine = 3;
					break;
				case 64:
					line = 6;
					dotLine = 3;
					break;
				case 128:
					line = 6;
					dotLine = 3;
					break;
				case 256:
					line = 6;
					dotLine = 3;
					break;
				default:
				}
				var this1 = line;
				var this2 = offset;
				var y = sr.getScoreY(this1,this2);
				this.restGlyph = new alphaTab.rendering.glyphs.ScoreRestGlyph(0,y,this.container.beat.duration);
				this.restGlyph.beat = this.container.beat;
				this.restGlyph.beamingHelper = this.beamingHelper;
				this.addGlyph(this.restGlyph);
				if(this.container.beat.dots > 0) {
					this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
					var i1 = 0;
					while(i1 < this.container.beat.dots) {
						var group1 = new alphaTab.rendering.glyphs.GlyphGroup(0,0);
						this.createBeatDot(dotLine,group1);
						this.addGlyph(group1);
						++i1;
					}
				}
			}
		}
		alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype.doLayout.call(this);
		if(this.container.beat.isEmpty) {
			this.centerX = this.width / 2;
		} else if(this.container.beat.get_isRest()) {
			this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
		} else {
			this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
		}
	}
	,createBeatDot: function(line,group) {
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var this1 = line;
		var this2 = 1.5;
		group.addGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,sr.getScoreY(this1,0),this2 * this.get_scale()));
	}
	,createNoteHeadGlyph: function(n) {
		var isGrace = this.container.beat.graceType != 0;
		if(n.beat.voice.bar.staff.isPercussion) {
			var value = n.get_realValue();
			if(value <= 30 || value >= 67 || alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys.hasOwnProperty(value)) {
				return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,isGrace);
			}
			if(alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys.hasOwnProperty(value)) {
				return new alphaTab.rendering.glyphs.DrumSticksGlyph(0,0,isGrace);
			}
			if(value == 46) {
				return new alphaTab.rendering.glyphs.HiHatGlyph(0,0,isGrace);
			}
			if(value == 49 || value == 57) {
				return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(0,0,n.beat.duration,isGrace);
			}
			if(value == 52) {
				return new alphaTab.rendering.glyphs.ChineseCymbalGlyph(0,0,isGrace);
			}
			if(value == 51 || value == 53 || value == 59) {
				return new alphaTab.rendering.glyphs.RideCymbalGlyph(0,0,isGrace);
			}
			return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,isGrace);
		}
		if(n.isDead) {
			return new alphaTab.rendering.glyphs.DeadNoteHeadGlyph(0,0,isGrace);
		}
		if(n.beat.graceType == 3) {
			return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,true);
		}
		if(n.harmonicType == 1) {
			return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(0,0,n.beat.duration,isGrace);
		}
		return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,n.beat.duration,isGrace);
	}
	,createNoteGlyph: function(n) {
		if(n.beat.graceType == 3 && !n.get_hasBend()) {
			return;
		}
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var noteHeadGlyph = this.createNoteHeadGlyph(n);
		var line = sr.getNoteLine(n);
		var this1 = line;
		noteHeadGlyph.y = sr.getScoreY(this1,0);
		this.noteHeads.addNoteGlyph(noteHeadGlyph,n,line);
		if(n.harmonicType != 0 && n.harmonicType != 1) {
			var harmonicFret = n.get_displayValue() + n.get_harmonicPitch();
			noteHeadGlyph = new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(0,0,n.beat.duration,this.container.beat.graceType != 0);
			line = sr.accidentalHelper.getNoteLineForValue(harmonicFret,false);
			var this2 = line;
			noteHeadGlyph.y = sr.getScoreY(this2,0);
			this.noteHeads.addNoteGlyph(noteHeadGlyph,n,line);
		}
		if(n.isStaccato && !this.noteHeads.beatEffects.hasOwnProperty("Staccato")) {
			this.noteHeads.beatEffects["Staccato"] = new alphaTab.rendering.glyphs.CircleGlyph(0,0,1.5);
		}
		if(n.accentuated == 1 && !this.noteHeads.beatEffects.hasOwnProperty("Accent")) {
			this.noteHeads.beatEffects["Accent"] = new alphaTab.rendering.glyphs.AccentuationGlyph(0,0,1);
		}
		if(n.accentuated == 2 && !this.noteHeads.beatEffects.hasOwnProperty("HAccent")) {
			this.noteHeads.beatEffects["HAccent"] = new alphaTab.rendering.glyphs.AccentuationGlyph(0,0,2);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBeatGlyph
});
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
};
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBeatPreNotesGlyph"];
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	get_prebendNoteHeadOffset: function() {
		return this._prebends.x + this._prebends.noteHeadOffset;
	}
	,doLayout: function() {
		if(!this.container.beat.get_isRest()) {
			var accidentals = new alphaTab.rendering.glyphs.AccidentalGroupGlyph();
			var ghost = new alphaTab.rendering.glyphs.GhostNoteContainerGlyph(true);
			ghost.renderer = this.renderer;
			this._prebends = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(this.container.beat,true);
			this._prebends.renderer = this.renderer;
			var note = $iterator(this.container.beat.notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				if(note1.isVisible) {
					if(note1.get_hasBend()) {
						var _g = note1.bendType;
						switch(_g) {
						case 6:case 7:case 8:
							this._prebends.addGlyph(note1.get_displayValue() - (note1.bendPoints[0].value / 2 | 0),false);
							break;
						default:
						}
					} else if(note1.beat.get_hasWhammyBar()) {
						var _g1 = note1.beat.whammyBarType;
						switch(_g1) {
						case 5:case 6:
							this._prebends.addGlyph(note1.get_displayValue() - (note1.beat.whammyBarPoints[0].value / 2 | 0),false);
							break;
						default:
						}
					}
					this.createAccidentalGlyph(note1,accidentals);
					ghost.addParenthesis(note1);
				}
			}
			if(!this._prebends.isEmpty) {
				this.addGlyph(this._prebends);
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * (this.container.beat.graceType != 0 ? 0.75 : 1) * this.get_scale()));
			}
			if(this.container.beat.brushType != 0) {
				this.addGlyph(new alphaTab.rendering.glyphs.ScoreBrushGlyph(this.container.beat));
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * this.get_scale()));
			}
			if(!ghost.isEmpty) {
				this.addGlyph(ghost);
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * (this.container.beat.graceType != 0 ? 0.75 : 1) * this.get_scale()));
			}
			if(!accidentals.get_isEmpty()) {
				this.accidentals = accidentals;
				this.addGlyph(accidentals);
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * (this.container.beat.graceType != 0 ? 0.75 : 1) * this.get_scale()));
			}
		}
		alphaTab.rendering.glyphs.BeatGlyphBase.prototype.doLayout.call(this);
	}
	,createAccidentalGlyph: function(n,accidentals) {
		var sr = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var accidental = sr.accidentalHelper.applyAccidental(n);
		var noteLine = sr.getNoteLine(n);
		var isGrace = this.container.beat.graceType != 0;
		if(accidental != 0) {
			var this1 = noteLine;
			accidentals.addGlyph(new alphaTab.rendering.glyphs.AccidentalGlyph(0,sr.getScoreY(this1,0),accidental,isGrace));
		}
		if(n.harmonicType != 0 && n.harmonicType != 1) {
			var harmonicFret = n.get_displayValue() + n.get_harmonicPitch();
			accidental = sr.accidentalHelper.applyAccidentalForValue(n.beat,harmonicFret,isGrace);
			noteLine = sr.accidentalHelper.getNoteLineForValue(harmonicFret,false);
			var this2 = noteLine;
			accidentals.addGlyph(new alphaTab.rendering.glyphs.AccidentalGlyph(0,sr.getScoreY(this2,0),accidental,isGrace));
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
});
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph = function() {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this.BendNoteHeads = null;
	var this1 = [];
	this.BendNoteHeads = this1;
};
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreHelperNotesBaseGlyph"];
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	drawBendSlur: function(canvas,x1,y1,x2,y2,down,scale,slurText) {
		var normalVectorX = y2 - y1;
		var normalVectorY = x2 - x1;
		var this1 = normalVectorX * normalVectorX + normalVectorY * normalVectorY;
		var length = js.Boot.__cast(Math.sqrt(this1) , Float);
		if(down) {
			normalVectorX = normalVectorX * -1;
		} else {
			normalVectorY = normalVectorY * -1;
		}
		normalVectorX = normalVectorX / length;
		normalVectorY = normalVectorY / length;
		var centerX = (x2 + x1) / 2;
		var centerY = (y2 + y1) / 2;
		var offset = 11 * scale;
		if(x2 - x1 < 20) {
			offset = offset / 2;
		}
		var cp1X = centerX + offset * normalVectorX;
		var cp1Y = centerY + offset * normalVectorY;
		canvas.beginPath();
		canvas.moveTo(x1,y1);
		canvas.lineTo(cp1X,cp1Y);
		canvas.lineTo(x2,y2);
		canvas.stroke();
		if(!(slurText == null || slurText.length == 0)) {
			var w = canvas.measureText(slurText);
			var textOffset = down ? 0 : -canvas.get_font().size;
			canvas.fillText(slurText,cp1X - w / 2,cp1Y + textOffset);
		}
	}
	,doLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.doLayout.call(this);
		this.width = 0;
		var noteHeads = $iterator(this.BendNoteHeads)();
		while(noteHeads.hasNext()) {
			var noteHeads1 = noteHeads.next();
			noteHeads1.doLayout();
			this.width = this.width + (noteHeads1.width + 10 * this.get_scale());
		}
	}
	,getBeamDirection: function(beat,noteRenderer) {
		var _g = noteRenderer.getBeatDirection(beat);
		if(_g == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph
});
alphaTab.rendering.glyphs.ScoreBendGlyph = function(beat) {
	alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.call(this);
	this._beat = null;
	this._notes = null;
	this._endNoteGlyph = null;
	this._middleNoteGlyph = null;
	this._beat = beat;
	var this1 = [];
	this._notes = this1;
	this._middleNoteGlyph = null;
	this._endNoteGlyph = null;
};
alphaTab.rendering.glyphs.ScoreBendGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBendGlyph"];
alphaTab.rendering.glyphs.ScoreBendGlyph.__super__ = alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph;
alphaTab.rendering.glyphs.ScoreBendGlyph.prototype = $extend(alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype,{
	addBends: function(note) {
		this._notes.push(note);
		if(note.get_isTieOrigin()) {
			return;
		}
		var _g = note.bendType;
		switch(_g) {
		case 3:
			if(!note.get_isTieOrigin()) {
				var endGlyphs = this._endNoteGlyph;
				if(endGlyphs == null) {
					endGlyphs = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(note.beat,false);
					endGlyphs.renderer = this.renderer;
					this.BendNoteHeads.push(endGlyphs);
				}
				var lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
				endGlyphs.addGlyph(this.getBendNoteValue(note,lastBendPoint),lastBendPoint.value % 2 != 0);
			}
			break;
		case 4:
			var middleGlyphs = this._middleNoteGlyph;
			if(middleGlyphs == null) {
				middleGlyphs = this._middleNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(note.beat,false);
				middleGlyphs.renderer = this.renderer;
				this.BendNoteHeads.push(middleGlyphs);
			}
			var middleBendPoint = note.bendPoints[1];
			middleGlyphs.addGlyph(this.getBendNoteValue(note,note.bendPoints[1]),middleBendPoint.value % 2 != 0);
			var endGlyphs1 = this._endNoteGlyph;
			if(endGlyphs1 == null) {
				endGlyphs1 = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(note.beat,false);
				endGlyphs1.renderer = this.renderer;
				this.BendNoteHeads.push(endGlyphs1);
			}
			var lastBendPoint1 = note.bendPoints[note.bendPoints.length - 1];
			endGlyphs1.addGlyph(this.getBendNoteValue(note,lastBendPoint1),lastBendPoint1.value % 2 != 0);
			break;
		case 2:case 7:case 8:
			var endGlyphs2 = this._endNoteGlyph;
			if(endGlyphs2 == null) {
				endGlyphs2 = this._endNoteGlyph = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(note.beat,false);
				endGlyphs2.renderer = this.renderer;
				this.BendNoteHeads.push(endGlyphs2);
			}
			var lastBendPoint2 = note.bendPoints[note.bendPoints.length - 1];
			endGlyphs2.addGlyph(this.getBendNoteValue(note,lastBendPoint2),lastBendPoint2.value % 2 != 0);
			break;
		default:
		}
	}
	,paint: function(cx,cy,canvas) {
		var startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this._beat.voice.bar);
		var startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,2);
		var endBeatX = cx + startNoteRenderer.x;
		if(this._beat.get_isLastOfVoice()) {
			endBeatX = endBeatX + startNoteRenderer.get_postBeatGlyphsStart();
		} else {
			endBeatX = endBeatX + startNoteRenderer.getBeatX(this._beat.nextBeat,0);
		}
		endBeatX = endBeatX - ((10 / 2 | 0) + 3) * this.get_scale();
		var middleX = (startX + endBeatX) / 2;
		if(this._middleNoteGlyph != null) {
			this._middleNoteGlyph.x = middleX - this._middleNoteGlyph.noteHeadOffset;
			this._middleNoteGlyph.y = cy + startNoteRenderer.y;
			this._middleNoteGlyph.paint(0,0,canvas);
		}
		if(this._endNoteGlyph != null) {
			this._endNoteGlyph.x = endBeatX - this._endNoteGlyph.noteHeadOffset;
			this._endNoteGlyph.y = cy + startNoteRenderer.y;
			this._endNoteGlyph.paint(0,0,canvas);
		}
		var comparison = function(a,b) {
			return b.get_displayValue() - a.get_displayValue();
		};
		this._notes.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var directionBeat = this._beat.graceType == 3 ? this._beat.nextBeat : this._beat;
		var direction = this._notes.length == 1 ? this.getBeamDirection(directionBeat,startNoteRenderer) : 0;
		var i = 0;
		while(i < this._notes.length) {
			var note = this._notes[i];
			if(i > 0 && i >= (this._notes.length / 2 | 0)) {
				direction = 1;
			}
			var startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note,true);
			var this1 = 0.5;
			var heightOffset = 9 * this.get_scale() * 0.75 * this1;
			if(direction == 1) {
				startY = startY + 9 * this.get_scale();
			}
			var slurText = note.bendStyle == 1 ? "grad." : "";
			if(note.get_isTieOrigin()) {
				var endNote = note.tieDestination;
				var endNoteRenderer = endNote == null ? null : this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),endNote.beat.voice.bar);
				if(endNoteRenderer == null || endNoteRenderer.staff != startNoteRenderer.staff) {
					var endX = cx + startNoteRenderer.x + startNoteRenderer.width;
					var noteValueToDraw = note.tieDestination.get_realValue();
					startNoteRenderer.accidentalHelper.applyAccidentalForValue(note.beat,noteValueToDraw,false);
					var endY = cy + startNoteRenderer.y;
					var this2 = startNoteRenderer.accidentalHelper.getNoteLineForValue(noteValueToDraw,false);
					var endY1 = endY + startNoteRenderer.getScoreY(this2,0);
					if(note.bendType == 5 || note.bendType == 6) {
						alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX,endY1,direction == 1,22,4);
						canvas.fill();
					} else {
						this.drawBendSlur(canvas,startX,startY,endX,endY1,direction == 1,this.get_scale(),slurText);
					}
				} else {
					var endX1 = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endNote.beat,2);
					var endY2 = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(endNote,true);
					if(direction == 1) {
						endY2 = endY2 + 9 * this.get_scale();
					}
					if(note.bendType == 5 || note.bendType == 6) {
						alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX1,endY2,direction == 1,22,4);
						canvas.fill();
					} else {
						this.drawBendSlur(canvas,startX,startY,endX1,endY2,direction == 1,this.get_scale(),slurText);
					}
				}
				var _g = note.bendType;
				switch(_g) {
				case 6:case 7:case 8:
					var preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat,0);
					preX = preX + (js.Boot.__cast(startNoteRenderer.getBeatContainer(note.beat).preNotes , alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph)).get_prebendNoteHeadOffset();
					var preY = cy + startNoteRenderer.y;
					var this3 = startNoteRenderer.accidentalHelper.getNoteLineForValue(note.get_displayValue() - (note.bendPoints[0].value / 2 | 0),false);
					var preY1 = preY + startNoteRenderer.getScoreY(this3,0) + heightOffset;
					this.drawBendSlur(canvas,preX,preY1,startX,startY,direction == 1,this.get_scale(),null);
					break;
				default:
				}
			} else {
				if(direction == 0) {
					heightOffset = -heightOffset;
				}
				var endValue;
				var endY3;
				var _g1 = note.bendType;
				switch(_g1) {
				case 2:
					endValue = this.getBendNoteValue(note,note.bendPoints[note.bendPoints.length - 1]);
					endY3 = this._endNoteGlyph.getNoteValueY(endValue,false) + heightOffset;
					this.drawBendSlur(canvas,startX,startY,endBeatX,endY3,direction == 1,this.get_scale(),slurText);
					break;
				case 3:
					if(this.BendNoteHeads.length > 0) {
						endValue = this.getBendNoteValue(note,note.bendPoints[note.bendPoints.length - 1]);
						endY3 = this.BendNoteHeads[0].getNoteValueY(endValue,false) + heightOffset;
						this.drawBendSlur(canvas,startX,startY,endBeatX,endY3,direction == 1,this.get_scale(),slurText);
					}
					break;
				case 4:
					var middleValue = this.getBendNoteValue(note,note.bendPoints[1]);
					var middleY = this._middleNoteGlyph.getNoteValueY(middleValue,false) + heightOffset;
					this.drawBendSlur(canvas,startX,startY,middleX,middleY,direction == 1,this.get_scale(),slurText);
					endValue = this.getBendNoteValue(note,note.bendPoints[note.bendPoints.length - 1]);
					endY3 = this._endNoteGlyph.getNoteValueY(endValue,false) + heightOffset;
					this.drawBendSlur(canvas,middleX,middleY,endBeatX,endY3,direction == 1,this.get_scale(),slurText);
					break;
				case 6:case 7:case 8:
					var preX1 = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat,0);
					preX1 = preX1 + (js.Boot.__cast(startNoteRenderer.getBeatContainer(note.beat).preNotes , alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph)).get_prebendNoteHeadOffset();
					var preY2 = cy + startNoteRenderer.y;
					var this4 = startNoteRenderer.accidentalHelper.getNoteLineForValue(note.get_displayValue() - (note.bendPoints[0].value / 2 | 0),false);
					var preY3 = preY2 + startNoteRenderer.getScoreY(this4,0) + heightOffset;
					this.drawBendSlur(canvas,preX1,preY3,startX,startY,direction == 1,this.get_scale(),null);
					if(this.BendNoteHeads.length > 0) {
						endValue = this.getBendNoteValue(note,note.bendPoints[note.bendPoints.length - 1]);
						endY3 = this.BendNoteHeads[0].getNoteValueY(endValue,false) + heightOffset;
						this.drawBendSlur(canvas,startX,startY,endBeatX,endY3,direction == 1,this.get_scale(),slurText);
					}
					break;
				default:
				}
			}
			++i;
		}
	}
	,getBendNoteValue: function(note,bendPoint) {
		return note.get_displayValueWithoutBend() + (bendPoint.value / 2 | 0);
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBendGlyph
});
alphaTab.rendering.glyphs.ScoreBrushGlyph = function(beat) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._beat = beat;
};
alphaTab.rendering.glyphs.ScoreBrushGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBrushGlyph"];
alphaTab.rendering.glyphs.ScoreBrushGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreBrushGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 10 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var scoreBarRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var lineSize = scoreBarRenderer.get_lineOffset();
		var startY = cy + this.y + (scoreBarRenderer.getNoteY(this._beat.maxNote,false) - lineSize);
		var endY = cy + this.y + scoreBarRenderer.getNoteY(this._beat.minNote,false) + lineSize;
		var arrowX = cx + this.x + this.width / 2;
		var arrowSize = 8 * this.get_scale();
		if(this._beat.brushType != 0) {
			if(this._beat.brushType == 3) {
				var lineStartY = startY - arrowSize;
				var lineEndY = endY - arrowSize;
				canvas.beginRotate(cx + this.x + 2 * this.get_scale(),lineEndY,-90);
				var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
				glyph.renderer = this.renderer;
				glyph.doLayout();
				glyph.width = Math.abs(lineEndY - lineStartY);
				glyph.paint(0,0,canvas);
				canvas.endRotate();
				canvas.beginPath();
				canvas.moveTo(arrowX,endY);
				canvas.lineTo(arrowX + arrowSize / 2,endY - arrowSize);
				canvas.lineTo(arrowX - arrowSize / 2,endY - arrowSize);
				canvas.closePath();
				canvas.fill();
			} else if(this._beat.brushType == 4) {
				var lineStartY1 = startY + arrowSize;
				var lineEndY1 = endY + arrowSize;
				canvas.beginRotate(cx + this.x + 7 * this.get_scale(),lineStartY1,90);
				var glyph1 = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
				glyph1.renderer = this.renderer;
				glyph1.doLayout();
				glyph1.width = Math.abs(lineEndY1 - lineStartY1);
				glyph1.paint(0,0,canvas);
				canvas.endRotate();
				canvas.beginPath();
				canvas.moveTo(arrowX,startY);
				canvas.lineTo(arrowX + arrowSize / 2,startY + arrowSize);
				canvas.lineTo(arrowX - arrowSize / 2,startY + arrowSize);
				canvas.closePath();
				canvas.fill();
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBrushGlyph
});
alphaTab.rendering.glyphs.TieGlyph = function(startBeat,endBeat,forEnd) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this.StartBeat = null;
	this.EndBeat = null;
	this.YOffset = 0.0;
	this.ForEnd = false;
	this.StartBeat = startBeat;
	this.EndBeat = endBeat;
	this.ForEnd = forEnd;
};
alphaTab.rendering.glyphs.TieGlyph.__name__ = ["alphaTab","rendering","glyphs","TieGlyph"];
alphaTab.rendering.glyphs.TieGlyph.paintTie = function(canvas,scale,x1,y1,x2,y2,down,offset,size) {
	if(size == null) {
		size = 4;
	}
	if(offset == null) {
		offset = 22;
	}
	if(down == null) {
		down = false;
	}
	if(x1 == x2 && y1 == y2) {
		return;
	}
	if(x2 < x1) {
		var t = x1;
		x1 = x2;
		x2 = t;
		t = y1;
		y1 = y2;
		y2 = t;
	}
	offset = offset * scale;
	size = size * scale;
	var normalVectorX = y2 - y1;
	var normalVectorY = x2 - x1;
	var this1 = normalVectorX * normalVectorX + normalVectorY * normalVectorY;
	var length = js.Boot.__cast(Math.sqrt(this1) , Float);
	if(down) {
		normalVectorX = normalVectorX * -1;
	} else {
		normalVectorY = normalVectorY * -1;
	}
	normalVectorX = normalVectorX / length;
	normalVectorY = normalVectorY / length;
	var centerX = (x2 + x1) / 2;
	var centerY = (y2 + y1) / 2;
	var cp1X = centerX + offset * normalVectorX;
	var cp1Y = centerY + offset * normalVectorY;
	var cp2X = centerX + (offset - size) * normalVectorX;
	var cp2Y = centerY + (offset - size) * normalVectorY;
	canvas.beginPath();
	canvas.moveTo(x1,y1);
	canvas.quadraticCurveTo(cp1X,cp1Y,x2,y2);
	canvas.quadraticCurveTo(cp2X,cp2Y,x1,y1);
	canvas.closePath();
};
alphaTab.rendering.glyphs.TieGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TieGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 0;
	}
	,paint: function(cx,cy,canvas) {
		if(this.EndBeat == null) {
			return;
		}
		var startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this.StartBeat.voice.bar);
		var endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this.EndBeat.voice.bar);
		var startX = 0;
		var endX = 0;
		var startY = 0;
		var endY = 0;
		var shouldDraw = false;
		var direction = startNoteRenderer == null ? this.getBeamDirection(this.EndBeat,endNoteRenderer) : this.getBeamDirection(this.StartBeat,startNoteRenderer);
		if(!this.ForEnd && startNoteRenderer != null) {
			if(startNoteRenderer != endNoteRenderer) {
				startX = cx + startNoteRenderer.x + this.getStartX(startNoteRenderer);
				startY = cy + startNoteRenderer.y + this.getStartY(startNoteRenderer,direction) + this.YOffset;
				if(endNoteRenderer == null || startNoteRenderer.staff != endNoteRenderer.staff) {
					endX = cx + startNoteRenderer.x + startNoteRenderer.width;
					endY = startY;
				} else {
					endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
					endY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer,direction) + this.YOffset;
				}
			} else {
				startX = cx + startNoteRenderer.x + this.getStartX(startNoteRenderer);
				endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
				startY = cy + startNoteRenderer.y + this.getStartY(startNoteRenderer,direction) + this.YOffset;
				endY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer,direction) + this.YOffset;
			}
			shouldDraw = true;
		} else if(startNoteRenderer == null || startNoteRenderer.staff != endNoteRenderer.staff) {
			startX = cx + endNoteRenderer.x;
			endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
			startY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer,direction) + this.YOffset;
			endY = startY;
			shouldDraw = true;
		}
		if(shouldDraw) {
			alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX,endY,direction == 1,this.getTieHeight(startX,startY,endX,endY),4);
			canvas.fill();
		}
	}
	,getTieHeight: function(startX,startY,endX,endY) {
		return 22;
	}
	,getBeamDirection: function(beat,noteRenderer) {
		return 1;
	}
	,getStartY: function(noteRenderer,direction) {
		return 0;
	}
	,getEndY: function(noteRenderer,direction) {
		return 0;
	}
	,getStartX: function(noteRenderer) {
		return 0;
	}
	,getEndX: function(noteRenderer) {
		return 0;
	}
	,__class__: alphaTab.rendering.glyphs.TieGlyph
});
alphaTab.rendering.glyphs.ScoreLegatoGlyph = function(startBeat,endBeat,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startBeat,endBeat,forEnd);
};
alphaTab.rendering.glyphs.ScoreLegatoGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreLegatoGlyph"];
alphaTab.rendering.glyphs.ScoreLegatoGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.ScoreLegatoGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.TieGlyph.prototype.doLayout.call(this);
		this.YOffset = 9 / 2;
	}
	,getBeamDirection: function(beat,noteRenderer) {
		if(beat.get_isRest()) {
			return 0;
		}
		var _g = (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getBeatDirection(beat);
		if(_g == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,getStartY: function(noteRenderer,direction) {
		if(this.StartBeat.get_isRest()) {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getScoreY(9,0);
		}
		if(direction == 0) {
			return noteRenderer.getNoteY(this.StartBeat.minNote,false);
		} else {
			return noteRenderer.getNoteY(this.StartBeat.maxNote,false);
		}
	}
	,getEndY: function(noteRenderer,direction) {
		if(this.EndBeat.get_isRest()) {
			if(direction == 0) {
				return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getScoreY(9,0);
			} else {
				return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getScoreY(0,0);
			}
		}
		if(direction == 0) {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getNoteY(this.EndBeat.minNote,false);
		} else {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getNoteY(this.EndBeat.maxNote,false);
		}
	}
	,getStartX: function(noteRenderer) {
		if(this.StartBeat.get_isRest()) {
			return noteRenderer.getBeatX(this.StartBeat,0);
		}
		return noteRenderer.getNoteX(this.StartBeat.minNote,true);
	}
	,getEndX: function(noteRenderer) {
		if(this.EndBeat.get_isRest()) {
			return noteRenderer.getBeatX(this.EndBeat,0);
		}
		return noteRenderer.getNoteX(this.EndBeat.minNote,false);
	}
	,__class__: alphaTab.rendering.glyphs.ScoreLegatoGlyph
});
alphaTab.rendering.glyphs.ScoreNoteChordGlyph = function() {
	alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.call(this);
	this._noteGlyphLookup = null;
	this._notes = null;
	this._tremoloPicking = null;
	this.beatEffects = null;
	this.beat = null;
	this.beamingHelper = null;
	var this1 = {}
	this.beatEffects = this1;
	var this2 = {}
	this._noteGlyphLookup = this2;
	var this3 = [];
	this._notes = this3;
};
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreNoteChordGlyph"];
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__super__ = alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase;
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.prototype = $extend(alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype,{
	get_direction: function() {
		return this.beamingHelper.direction;
	}
	,getNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		if(this._noteGlyphLookup.hasOwnProperty(note.id)) {
			var n = this._noteGlyphLookup[note.id];
			var pos = this.x + n.x;
			if(onEnd) {
				pos = pos + n.width;
			}
			return pos;
		}
		return 0;
	}
	,getNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		if(this._noteGlyphLookup.hasOwnProperty(note.id)) {
			return this.y + this._noteGlyphLookup[note.id].y + (aboveNote ? -(9 * this.get_scale()) / 2 : 0);
		}
		return 0;
	}
	,addNoteGlyph: function(noteGlyph,note,noteLine) {
		alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.add.call(this,noteGlyph,noteLine);
		this._noteGlyphLookup[note.id] = noteGlyph;
		this._notes.push(note);
	}
	,updateBeamingHelper: function(cx) {
		if(this.beamingHelper != null) {
			this.beamingHelper.registerBeatLineX("score",this.beat,cx + this.x + this.upLineX,cx + this.x + this.downLineX);
		}
	}
	,doLayout: function() {
		alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.doLayout.call(this);
		var direction = this.get_direction();
		var this1 = this.beatEffects;
		var effectKey = $iterator(Object.keys(this1))();
		while(effectKey.hasNext()) {
			var effectKey1 = effectKey.next();
			var effect = this.beatEffects[effectKey1];
			effect.renderer = this.renderer;
			effect.doLayout();
		}
		if(this.beat.get_isTremolo()) {
			var offset;
			var baseNote = direction == 0 ? this.minNote : this.maxNote;
			var tremoloX = direction == 0 ? this.displacedX : 0;
			var speed = this.beat.tremoloSpeed;
			switch(speed) {
			case 8:
				if(direction == 0) {
					offset = -10;
				} else {
					offset = 10;
				}
				break;
			case 16:
				if(direction == 0) {
					offset = -12;
				} else {
					offset = 15;
				}
				break;
			case 32:
				if(direction == 0) {
					offset = -15;
				} else {
					offset = 15;
				}
				break;
			default:
				if(direction == 0) {
					offset = -10;
				} else {
					offset = 15;
				}
			}
			this._tremoloPicking = new alphaTab.rendering.glyphs.TremoloPickingGlyph(tremoloX,baseNote.glyph.y + offset * this.get_scale(),this.beat.tremoloSpeed);
			this._tremoloPicking.renderer = this.renderer;
			this._tremoloPicking.doLayout();
		}
	}
	,paint: function(cx,cy,canvas) {
		var _gthis = this;
		var scoreRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var effectY;
		if(this.beamingHelper.direction == 0) {
			var this1 = this.maxNote.line;
			var this2 = 1.5;
			effectY = scoreRenderer.getScoreY(this1,this2 * 9);
		} else {
			var this3 = this.minNote.line;
			effectY = scoreRenderer.getScoreY(this3,-1.0 * 9);
		}
		var effectSpacing = this.beamingHelper.direction == 0 ? 7 * this.get_scale() : -7 * this.get_scale();
		var this4 = this.beatEffects;
		var effectKey = $iterator(Object.keys(this4))();
		while(effectKey.hasNext()) {
			var effectKey1 = effectKey.next();
			var g = this.beatEffects[effectKey1];
			g.y = effectY;
			g.x = this.width / 2;
			g.paint(cx + this.x,cy + this.y,canvas);
			effectY = effectY + effectSpacing;
		}
		if(this.renderer.get_settings().core.includeNoteBounds) {
			var note = $iterator(this._notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				if(this._noteGlyphLookup.hasOwnProperty(note1.id)) {
					var glyph = this._noteGlyphLookup[note1.id];
					var noteBounds = new alphaTab.rendering.utils.NoteBounds();
					noteBounds.note = note1;
					var _tmp = new alphaTab.rendering.utils.Bounds();
					_tmp.x = cx + _gthis.x + glyph.x;
					_tmp.y = cy + _gthis.y + glyph.y;
					_tmp.w = glyph.width;
					_tmp.h = glyph.height;
					noteBounds.noteHeadBounds = _tmp;
					this.renderer.scoreRenderer.get_boundsLookup().addNote(noteBounds);
				}
			}
		}
		alphaTab.rendering.glyphs.ScoreNoteChordGlyphBase.prototype.paint.call(this,cx,cy,canvas);
		if(this._tremoloPicking != null) {
			this._tremoloPicking.paint(cx,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreNoteChordGlyph
});
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo = function(glyph,line) {
	this.glyph = null;
	this.line = 0;
	this.glyph = glyph;
	this.line = line;
};
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.__name__ = ["alphaTab","rendering","glyphs","ScoreNoteGlyphInfo"];
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.prototype = {
	__class__: alphaTab.rendering.glyphs.ScoreNoteGlyphInfo
};
alphaTab.rendering.glyphs.ScoreRestGlyph = function(x,y,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ScoreRestGlyph.getSymbol(duration));
	this._duration = -4;
	this.beamingHelper = null;
	this._duration = duration;
};
alphaTab.rendering.glyphs.ScoreRestGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreRestGlyph"];
alphaTab.rendering.glyphs.ScoreRestGlyph.getSymbol = function(duration) {
	switch(duration) {
	case -4:
		return 58593;
	case -2:
		return 58594;
	case 1:
		return 58595;
	case 2:
		return 58596;
	case 4:
		return 58597;
	case 8:
		return 58598;
	case 16:
		return 58599;
	case 32:
		return 58600;
	case 64:
		return 58601;
	case 128:
		return 58602;
	case 256:
		return 58603;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.ScoreRestGlyph.getSize = function(duration) {
	switch(duration) {
	case -4:case -2:case 1:case 2:case 4:case 8:case 16:
		return 9;
	case 32:
		return 12;
	case 64:
		return 14;
	case 128:case 256:
		return 20;
	default:
	}
	return 10;
};
alphaTab.rendering.glyphs.ScoreRestGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ScoreRestGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = alphaTab.rendering.glyphs.ScoreRestGlyph.getSize(this._duration) * this.get_scale();
	}
	,updateBeamingHelper: function(cx) {
		if(this.beamingHelper != null) {
			this.beamingHelper.registerBeatLineX("score",this.beat,cx + this.x + this.width / 2,cx + this.x + this.width / 2);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreRestGlyph
});
alphaTab.rendering.glyphs.ScoreSlideLineGlyph = function(inType,outType,startNote,parent) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._outType = 0;
	this._inType = 0;
	this._startNote = null;
	this._parent = null;
	this._outType = outType;
	this._inType = inType;
	this._startNote = startNote;
	this._parent = parent;
};
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreSlideLineGlyph"];
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 0;
	}
	,paint: function(cx,cy,canvas) {
		this.paintSlideIn(cx,cy,canvas);
		this.drawSlideOut(cx,cy,canvas);
	}
	,paintSlideIn: function(cx,cy,canvas) {
		var startNoteRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var sizeX = 12 * this.get_scale();
		var offsetX = this.get_scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var _g = this._inType;
		switch(_g) {
		case 1:
			endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,false) - offsetX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9 / 2;
			startX = endX - sizeX;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9;
			break;
		case 2:
			endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,false) - offsetX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9 / 2;
			startX = endX - sizeX;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true);
			break;
		default:
			return;
		}
		var accidentalsWidth = this.getAccidentalsWidth(startNoteRenderer,this._startNote.beat);
		startX = startX - accidentalsWidth;
		endX = endX - accidentalsWidth;
		this.paintSlideLine(canvas,false,startX,endX,startY,endY);
	}
	,getAccidentalsWidth: function(renderer,beat) {
		var preNotes = js.Boot.__cast(renderer.getPreNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph);
		if(preNotes != null && preNotes.accidentals != null) {
			return preNotes.accidentals.width;
		}
		return 0;
	}
	,drawSlideOut: function(cx,cy,canvas) {
		var startNoteRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		var sizeX = 12 * this.get_scale();
		var offsetX = this.get_scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var waves = false;
		var _g = this._outType;
		switch(_g) {
		case 1:case 2:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat,3) + offsetX;
			var isUp = this._startNote.slideTarget.get_realValue() > this._startNote.get_realValue();
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false);
			var this1 = 0.25;
			var lineOffset = this1 * 9 * this.get_scale();
			if(isUp) {
				startY = startY + lineOffset;
			} else {
				startY = startY - lineOffset;
			}
			if(this._startNote.slideTarget != null) {
				var endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this._startNote.slideTarget.beat.voice.bar);
				if(endNoteRenderer == null || endNoteRenderer.staff != startNoteRenderer.staff) {
					endX = cx + startNoteRenderer.x + this._parent.x;
					endY = startY;
				} else {
					endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(this._startNote.slideTarget.beat,0) - offsetX;
					endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(this._startNote.slideTarget,false);
					if(isUp) {
						endY = endY - lineOffset;
					} else {
						endY = endY + lineOffset;
					}
				}
			} else {
				endX = cx + startNoteRenderer.x + this._parent.x;
				endY = startY;
			}
			break;
		case 3:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true) + offsetX * 2;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9 / 2;
			endX = startX + sizeX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true);
			break;
		case 4:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true) + offsetX * 2;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9 / 2;
			endX = startX + sizeX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9;
			break;
		case 5:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true) + offsetX * 2;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) - 9 / 2;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9;
			endX = cx + startNoteRenderer.x + startNoteRenderer.width;
			if(this._startNote.beat.nextBeat != null && this._startNote.beat.nextBeat.voice == this._startNote.beat.voice) {
				endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat.nextBeat,0);
			}
			waves = true;
			break;
		case 6:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true) + offsetX * 2;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) + 9 / 2;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,true) - 9;
			endX = cx + startNoteRenderer.x + startNoteRenderer.width;
			if(this._startNote.beat.nextBeat != null && this._startNote.beat.nextBeat.voice == this._startNote.beat.voice) {
				endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat.nextBeat,0);
			}
			waves = true;
			break;
		default:
			return;
		}
		this.paintSlideLine(canvas,waves,startX,endX,startY,endY);
	}
	,paintSlideLine: function(canvas,waves,startX,endX,startY,endY) {
		if(waves) {
			var b = endX - startX;
			var a = endY - startY;
			var this1 = a;
			var this2 = b;
			var c = Math.sqrt(Math.pow(this1,2) + Math.pow(this2,2));
			var this3 = a / c;
			var angle = js.Boot.__cast(Math.asin(this3) * 57.29577951308238 , Float);
			canvas.beginRotate(startX,startY,angle);
			var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
			glyph.renderer = this.renderer;
			glyph.doLayout();
			glyph.width = b;
			glyph.paint(0,0,canvas);
			canvas.endRotate();
		} else {
			canvas.beginPath();
			canvas.moveTo(startX,startY);
			canvas.lineTo(endX,endY);
			canvas.stroke();
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreSlideLineGlyph
});
alphaTab.rendering.glyphs.ScoreTieGlyph = function(startNote,endNote,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startNote == null ? null : startNote.beat,endNote == null ? null : endNote.beat,forEnd);
	this.StartNote = null;
	this.EndNote = null;
	this.StartNote = startNote;
	this.EndNote = endNote;
};
alphaTab.rendering.glyphs.ScoreTieGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreTieGlyph"];
alphaTab.rendering.glyphs.ScoreTieGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.ScoreTieGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.TieGlyph.prototype.doLayout.call(this);
		this.YOffset = 9 / 2;
	}
	,getBeamDirection: function(beat,noteRenderer) {
		var _g = (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).getBeatDirection(beat);
		if(_g == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,getStartY: function(noteRenderer,direction) {
		return noteRenderer.getNoteY(this.StartNote,false);
	}
	,getEndY: function(noteRenderer,direction) {
		return noteRenderer.getNoteY(this.EndNote,false);
	}
	,getStartX: function(noteRenderer) {
		return noteRenderer.getBeatX(this.StartNote.beat,2);
	}
	,getEndX: function(noteRenderer) {
		return noteRenderer.getNoteX(this.EndNote,false);
	}
	,__class__: alphaTab.rendering.glyphs.ScoreTieGlyph
});
alphaTab.rendering.glyphs.ScoreSlurGlyph = function(startNote,endNote,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.ScoreTieGlyph.call(this,startNote,endNote,forEnd);
};
alphaTab.rendering.glyphs.ScoreSlurGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreSlurGlyph"];
alphaTab.rendering.glyphs.ScoreSlurGlyph.__super__ = alphaTab.rendering.glyphs.ScoreTieGlyph;
alphaTab.rendering.glyphs.ScoreSlurGlyph.prototype = $extend(alphaTab.rendering.glyphs.ScoreTieGlyph.prototype,{
	getTieHeight: function(startX,startY,endX,endY) {
		var this1 = endX - startX + 1;
		return js.Boot.__cast(Math.log(this1) , Float) * this.renderer.get_settings().notation.slurHeight;
	}
	,__class__: alphaTab.rendering.glyphs.ScoreSlurGlyph
});
alphaTab.rendering.glyphs.TimeSignatureGlyph = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._numerator = 0;
	this._denominator = 0;
	this._isCommon = false;
	this._numerator = numerator;
	this._denominator = denominator;
	this._isCommon = isCommon;
};
alphaTab.rendering.glyphs.TimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","TimeSignatureGlyph"];
alphaTab.rendering.glyphs.TimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	get_commonY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_numeratorY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_denominatorY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_commonScale: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_numberScale: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,doLayout: function() {
		if(this._isCommon && this._numerator == 2 && this._denominator == 2) {
			var common = new alphaTab.rendering.glyphs.MusicFontGlyph(0,this.get_commonY(),this.get_commonScale(),57483);
			common.width = 14 * this.get_scale();
			this.addGlyph(common);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.doLayout.call(this);
		} else if(this._isCommon && this._numerator == 4 && this._denominator == 4) {
			var common1 = new alphaTab.rendering.glyphs.MusicFontGlyph(0,this.get_commonY(),this.get_commonScale(),57482);
			common1.width = 14 * this.get_scale();
			this.addGlyph(common1);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.doLayout.call(this);
		} else {
			var numerator = new alphaTab.rendering.glyphs.NumberGlyph(0,this.get_numeratorY(),this._numerator,this.get_numberScale());
			var denominator = new alphaTab.rendering.glyphs.NumberGlyph(0,this.get_denominatorY(),this._denominator,this.get_numberScale());
			this.addGlyph(numerator);
			this.addGlyph(denominator);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.doLayout.call(this);
			var i = 0;
			var j = this.Glyphs.length;
			while(i < j) {
				var g = this.Glyphs[i];
				g.x = (this.width - g.width) / 2;
				++i;
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.TimeSignatureGlyph
});
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.TimeSignatureGlyph.call(this,x,y,numerator,denominator,isCommon);
};
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreTimeSignatureGlyph"];
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.TimeSignatureGlyph;
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,{
	get_commonY: function() {
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer);
		return renderer.getScoreY(4,0);
	}
	,get_numeratorY: function() {
		return 2 * this.get_scale();
	}
	,get_denominatorY: function() {
		return 20 * this.get_scale();
	}
	,get_commonScale: function() {
		return 1;
	}
	,get_numberScale: function() {
		return 1;
	}
	,__class__: alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph
});
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph = function(beat) {
	alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.call(this);
	this._beat = null;
	this._beat = beat;
};
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreWhammyBarGlyph"];
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.__super__ = alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph;
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.prototype = $extend(alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype,{
	doLayout: function() {
		var whammyMode = this.renderer.get_settings().notation.notationMode;
		var _g = this._beat.whammyBarType;
		switch(_g) {
		case 0:case 1:case 4:
			return;
		case 2:case 6:
			var endGlyphs = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(this._beat,false);
			endGlyphs.renderer = this.renderer;
			var lastWhammyPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
			var note = $iterator(this._beat.notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				if(!note1.get_isTieOrigin()) {
					endGlyphs.addGlyph(this.getBendNoteValue(note1,lastWhammyPoint),lastWhammyPoint.value % 2 != 0);
				}
			}
			endGlyphs.doLayout();
			this.BendNoteHeads.push(endGlyphs);
			break;
		case 3:
			if(whammyMode == 1) {
				var res = this.renderer.get_resources();
				var this1 = 1.5;
				var tmp = res.tablatureFont.size * this1 + 6 * 2 * this.get_scale();
				var tmp1 = this.get_scale();
				(js.Boot.__cast(this.renderer , alphaTab.rendering.ScoreBarRenderer)).simpleWhammyOverflow = tmp + 2 * tmp1;
			} else {
				var middleGlyphs = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(this._beat,false);
				middleGlyphs.renderer = this.renderer;
				if(this.renderer.get_settings().notation.notationMode == 0) {
					var middleBendPoint = this._beat.whammyBarPoints[1];
					var note2 = $iterator(this._beat.notes)();
					while(note2.hasNext()) {
						var note3 = note2.next();
						middleGlyphs.addGlyph(this.getBendNoteValue(note3,this._beat.whammyBarPoints[1]),middleBendPoint.value % 2 != 0);
					}
				}
				middleGlyphs.doLayout();
				this.BendNoteHeads.push(middleGlyphs);
				var endGlyphs1 = new alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph(this._beat,false);
				endGlyphs1.renderer = this.renderer;
				if(this.renderer.get_settings().notation.notationMode == 0) {
					var lastBendPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
					var note4 = $iterator(this._beat.notes)();
					while(note4.hasNext()) {
						var note5 = note4.next();
						endGlyphs1.addGlyph(this.getBendNoteValue(note5,lastBendPoint),lastBendPoint.value % 2 != 0);
					}
				}
				endGlyphs1.doLayout();
				this.BendNoteHeads.push(endGlyphs1);
			}
			break;
		case 5:
			break;
		default:
		}
		alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.prototype.doLayout.call(this);
	}
	,paint: function(cx,cy,canvas) {
		var beat = this._beat;
		var _g = beat.whammyBarType;
		switch(_g) {
		case 0:case 1:
			return;
		default:
		}
		var whammyMode = this.renderer.get_settings().notation.notationMode;
		var startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),beat.voice.bar);
		var startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(beat,2);
		var beatDirection = this.getBeamDirection(beat,startNoteRenderer);
		var direction = this._beat.notes.length == 1 ? beatDirection : 0;
		var textalign = canvas.get_textAlign();
		var i = 0;
		while(i < beat.notes.length) {
			var note = beat.notes[i];
			var startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note,true);
			if(direction == 1) {
				startY = startY + 9 * this.get_scale();
			}
			if(i > 0 && i >= (this._beat.notes.length / 2 | 0)) {
				direction = 1;
			}
			var endX = cx + startNoteRenderer.x;
			if(beat.get_isLastOfVoice()) {
				endX = endX + startNoteRenderer.width;
			} else {
				endX = endX + startNoteRenderer.getBeatX(beat,4);
			}
			endX = endX - ((10 / 2 | 0) + 3) * this.get_scale();
			var slurText = beat.whammyStyle == 1 && i == 0 ? "grad." : "";
			var endNoteRenderer = null;
			if(note.get_isTieOrigin()) {
				endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),note.tieDestination.beat.voice.bar);
				if(endNoteRenderer != null && endNoteRenderer.staff == startNoteRenderer.staff) {
					endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(note.tieDestination.beat,2);
				} else {
					endNoteRenderer = null;
				}
			}
			var this1 = 0.5;
			var heightOffset = 9 * this.get_scale() * 0.75 * this1;
			if(direction == 0) {
				heightOffset = -heightOffset;
			}
			var endValue;
			var endY;
			var _g1 = beat.whammyBarType;
			switch(_g1) {
			case 2:
				if(i == 0) {
					this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
					this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
					this.BendNoteHeads[0].paint(0,0,canvas);
				}
				endValue = this.getBendNoteValue(note,beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
				if(this.BendNoteHeads[0].containsNoteValue(endValue)) {
					endY = this.BendNoteHeads[0].getNoteValueY(endValue,false) + heightOffset;
					this.drawBendSlur(canvas,startX,startY,endX,endY,direction == 1,this.get_scale(),slurText);
				} else if(endNoteRenderer != null && (note.get_isTieOrigin() && note.tieDestination.beat.get_hasWhammyBar() || note.beat.isContinuedWhammy)) {
					endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination,true);
					this.drawBendSlur(canvas,startX,startY,endX,endY,direction == 1,this.get_scale(),slurText);
				} else if(note.get_isTieOrigin()) {
					if(endNoteRenderer == null) {
						endY = startY;
					} else {
						endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination,true);
					}
					alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX,endY,beatDirection == 1,22,4);
					canvas.fill();
				}
				break;
			case 3:
				if(whammyMode == 1) {
					if(i == 0) {
						var simpleStartX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,1) - 2 * this.get_scale();
						var simpleEndX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,3) + 2 * this.get_scale();
						var middleX = (simpleStartX + simpleEndX) / 2;
						var text = Std.string((this._beat.whammyBarPoints[1].value - this._beat.whammyBarPoints[0].value) / 4 | 0);
						canvas.set_font(this.renderer.get_resources().tablatureFont);
						canvas.fillText(text,middleX,cy + this.y);
						var simpleStartY = cy + this.y + canvas.get_font().size + 2 * this.get_scale();
						var simpleEndY = simpleStartY + 6 * 2 * this.get_scale();
						if(this._beat.whammyBarPoints[1].value > this._beat.whammyBarPoints[0].value) {
							canvas.moveTo(simpleStartX,simpleEndY);
							canvas.lineTo(middleX,simpleStartY);
							canvas.lineTo(simpleEndX,simpleEndY);
						} else {
							canvas.moveTo(simpleStartX,simpleStartY);
							canvas.lineTo(middleX,simpleEndY);
							canvas.lineTo(simpleEndX,simpleStartY);
						}
						canvas.stroke();
					}
					if(note.get_isTieOrigin()) {
						if(endNoteRenderer == null) {
							endY = startY;
						} else {
							endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination,true);
						}
						alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX,endY,beatDirection == 1,22,4);
						canvas.fill();
					}
				} else {
					var middleX1 = (startX + endX) / 2;
					this.BendNoteHeads[0].x = middleX1 - this.BendNoteHeads[0].noteHeadOffset;
					this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
					this.BendNoteHeads[0].paint(0,0,canvas);
					var middleValue = this.getBendNoteValue(note,beat.whammyBarPoints[1]);
					var middleY = this.BendNoteHeads[0].getNoteValueY(middleValue,false) + heightOffset;
					this.drawBendSlur(canvas,startX,startY,middleX1,middleY,direction == 1,this.get_scale(),slurText);
					this.BendNoteHeads[1].x = endX - this.BendNoteHeads[1].noteHeadOffset;
					this.BendNoteHeads[1].y = cy + startNoteRenderer.y;
					this.BendNoteHeads[1].paint(0,0,canvas);
					endValue = this.getBendNoteValue(note,beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
					endY = this.BendNoteHeads[1].getNoteValueY(endValue,false) + heightOffset;
					this.drawBendSlur(canvas,middleX1,middleY,endX,endY,direction == 1,this.get_scale(),slurText);
				}
				break;
			case 4:
				if(note.get_isTieOrigin()) {
					if(endNoteRenderer == null) {
						endY = startY;
					} else {
						endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination,true);
					}
					alphaTab.rendering.glyphs.TieGlyph.paintTie(canvas,this.get_scale(),startX,startY,endX,endY,beatDirection == 1,22,4);
					canvas.fill();
				}
				break;
			case 5:case 6:
				var preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat,0);
				preX = preX + (js.Boot.__cast(startNoteRenderer.getBeatContainer(note.beat).preNotes , alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph)).get_prebendNoteHeadOffset();
				var preY = cy + startNoteRenderer.y;
				var this2 = startNoteRenderer.accidentalHelper.getNoteLineForValue(note.get_displayValue() - (note.beat.whammyBarPoints[0].value / 2 | 0),false);
				var preY1 = preY + startNoteRenderer.getScoreY(this2,0) + heightOffset;
				this.drawBendSlur(canvas,preX,preY1,startX,startY,direction == 1,this.get_scale(),slurText);
				if(this.BendNoteHeads.length > 0) {
					this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
					this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
					this.BendNoteHeads[0].paint(0,0,canvas);
					endValue = this.getBendNoteValue(note,beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
					endY = this.BendNoteHeads[0].getNoteValueY(endValue,false) + heightOffset;
					this.drawBendSlur(canvas,startX,startY,endX,endY,direction == 1,this.get_scale(),slurText);
				}
				break;
			default:
			}
			++i;
		}
		canvas.set_textAlign(textalign);
	}
	,getBendNoteValue: function(note,bendPoint) {
		return note.get_displayValueWithoutBend() + (bendPoint.value / 2 | 0);
	}
	,__class__: alphaTab.rendering.glyphs.ScoreWhammyBarGlyph
});
alphaTab.rendering.glyphs.SpacingGlyph = function(x,y,width) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.width = width;
};
alphaTab.rendering.glyphs.SpacingGlyph.__name__ = ["alphaTab","rendering","glyphs","SpacingGlyph"];
alphaTab.rendering.glyphs.SpacingGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.SpacingGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	__class__: alphaTab.rendering.glyphs.SpacingGlyph
});
alphaTab.rendering.glyphs.TabBeatContainerGlyph = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.BeatContainerGlyph.call(this,beat,voiceContainer);
	this._bend = null;
	this._effectSlurs = null;
};
alphaTab.rendering.glyphs.TabBeatContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatContainerGlyph"];
alphaTab.rendering.glyphs.TabBeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.BeatContainerGlyph;
alphaTab.rendering.glyphs.TabBeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,{
	doLayout: function() {
		var this1 = [];
		this._effectSlurs = this1;
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.doLayout.call(this);
		if(this._bend != null) {
			this._bend.renderer = this.renderer;
			this._bend.doLayout();
			this.updateWidth();
		}
	}
	,createTies: function(n) {
		if(!n.isVisible) {
			return;
		}
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		if(n.get_isTieOrigin() && renderer.showTiedNotes && n.tieDestination.isVisible) {
			var tie = new alphaTab.rendering.glyphs.TabTieGlyph(n,n.tieDestination,false,false);
			this.ties.push(tie);
		}
		if(n.isTieDestination && renderer.showTiedNotes) {
			var tie1 = new alphaTab.rendering.glyphs.TabTieGlyph(n.tieOrigin,n,false,true);
			this.ties.push(tie1);
		}
		if(n.isEffectSlurOrigin && n.effectSlurDestination != null) {
			var expanded = false;
			var slur = $iterator(this._effectSlurs)();
			while(slur.hasNext()) {
				var slur1 = slur.next();
				if(slur1.tryExpand(n,n.effectSlurDestination,false,false)) {
					expanded = true;
					break;
				}
			}
			if(!expanded) {
				var effectSlur = new alphaTab.rendering.glyphs.TabSlurGlyph(n,n.effectSlurDestination,false,false);
				this._effectSlurs.push(effectSlur);
				this.ties.push(effectSlur);
			}
		}
		if(n.get_isEffectSlurDestination() && n.effectSlurOrigin != null) {
			var expanded1 = false;
			var slur2 = $iterator(this._effectSlurs)();
			while(slur2.hasNext()) {
				var slur3 = slur2.next();
				if(slur3.tryExpand(n.effectSlurOrigin,n,false,true)) {
					expanded1 = true;
					break;
				}
			}
			if(!expanded1) {
				var effectSlur1 = new alphaTab.rendering.glyphs.TabSlurGlyph(n.effectSlurOrigin,n,false,true);
				this._effectSlurs.push(effectSlur1);
				this.ties.push(effectSlur1);
			}
		}
		if(n.slideInType != 0 || n.slideOutType != 0) {
			var l = new alphaTab.rendering.glyphs.TabSlideLineGlyph(n.slideInType,n.slideOutType,n,this);
			this.ties.push(l);
		}
		if(n.get_hasBend()) {
			if(this._bend == null) {
				this._bend = new alphaTab.rendering.glyphs.TabBendGlyph();
				this._bend.renderer = this.renderer;
				this.ties.push(this._bend);
			}
			this._bend.addBends(n);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatContainerGlyph
});
alphaTab.rendering.glyphs.TabBeatGlyph = function() {
	alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
};
alphaTab.rendering.glyphs.TabBeatGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatGlyph"];
alphaTab.rendering.glyphs.TabBeatGlyph.__super__ = alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
alphaTab.rendering.glyphs.TabBeatGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,{
	doLayout: function() {
		var tabRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		if(!this.container.beat.get_isRest()) {
			var isGrace = this.renderer.get_settings().notation.smallGraceTabNotes && this.container.beat.graceType != 0;
			this.noteNumbers = new alphaTab.rendering.glyphs.TabNoteChordGlyph(0,0,isGrace);
			this.noteNumbers.beat = this.container.beat;
			this.noteNumbers.beamingHelper = this.beamingHelper;
			var note = $iterator(this.container.beat.notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				if(note1.isVisible) {
					this.createNoteGlyph(note1);
				}
			}
			this.addGlyph(this.noteNumbers);
			if(this.container.beat.get_hasWhammyBar()) {
				var whammy = new alphaTab.rendering.glyphs.TabWhammyBarGlyph(this.container.beat);
				whammy.renderer = this.renderer;
				whammy.doLayout();
				this.container.ties.push(whammy);
			}
			if(this.container.beat.get_isTremolo() && !this.noteNumbers.beatEffects.hasOwnProperty("Tremolo")) {
				var offset = 0;
				var speed = this.container.beat.tremoloSpeed;
				switch(speed) {
				case 8:
					offset = 0;
					break;
				case 16:
					offset = 5;
					break;
				case 32:
					offset = 10;
					break;
				default:
				}
				this.noteNumbers.beatEffects["Tremolo"] = new alphaTab.rendering.glyphs.TremoloPickingGlyph(5 * this.get_scale(),offset * this.get_scale(),this.container.beat.tremoloSpeed);
			}
			if(this.container.beat.dots > 0 && tabRenderer.get_settings().notation.rhythmMode != 0) {
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
				var i = 0;
				while(i < this.container.beat.dots) {
					var this1 = 1.5;
					this.addGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,tabRenderer.get_lineOffset() * tabRenderer.bar.staff.tuning.length + tabRenderer.get_settings().notation.rhythmHeight * tabRenderer.get_scale(),this1 * this.get_scale()));
					++i;
				}
			}
		} else {
			var line = 0;
			var offset1 = 0;
			var _g = this.container.beat.duration;
			switch(_g) {
			case -4:
				line = 3;
				break;
			case -2:
				line = 3;
				break;
			case 1:
				line = 2;
				break;
			case 2:
				line = 3;
				break;
			case 4:
				line = 3;
				break;
			case 8:
				line = 2;
				offset1 = 5;
				break;
			case 16:
				line = 2;
				offset1 = 5;
				break;
			case 32:
				line = 3;
				break;
			case 64:
				line = 3;
				break;
			case 128:
				line = 3;
				break;
			case 256:
				line = 3;
				break;
			default:
			}
			var this2 = offset1;
			var y = tabRenderer.getTabY(line,this2);
			this.restGlyph = new alphaTab.rendering.glyphs.TabRestGlyph(0,y,tabRenderer.showRests,this.container.beat.duration);
			this.restGlyph.beat = this.container.beat;
			this.restGlyph.beamingHelper = this.beamingHelper;
			this.addGlyph(this.restGlyph);
			if(this.container.beat.dots > 0 && tabRenderer.showRests) {
				this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_scale()));
				var i1 = 0;
				while(i1 < this.container.beat.dots) {
					var this3 = 1.5;
					this.addGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,y,this3 * this.get_scale()));
					++i1;
				}
			}
		}
		if(this.Glyphs == null) {
			return;
		}
		var w = 0;
		var i2 = 0;
		var j = this.Glyphs.length;
		while(i2 < j) {
			var g = this.Glyphs[i2];
			g.x = w;
			g.renderer = this.renderer;
			g.doLayout();
			w = w + g.width;
			++i2;
		}
		this.width = w;
		if(this.container.beat.isEmpty) {
			this.centerX = this.width / 2;
		} else if(this.container.beat.get_isRest()) {
			this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
		} else {
			this.centerX = this.noteNumbers.x + this.noteNumbers.noteStringWidth / 2;
		}
	}
	,updateBeamingHelper: function() {
		if(!this.container.beat.get_isRest()) {
			this.noteNumbers.updateBeamingHelper(this.container.x + this.x);
		} else {
			this.restGlyph.updateBeamingHelper(this.container.x + this.x);
		}
	}
	,createNoteGlyph: function(n) {
		var tr = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var noteNumberGlyph = new alphaTab.rendering.glyphs.NoteNumberGlyph(0,0,n);
		var l = n.beat.voice.bar.staff.tuning.length - n.string + 1;
		var this1 = l;
		noteNumberGlyph.y = tr.getTabY(this1,-2);
		noteNumberGlyph.renderer = this.renderer;
		noteNumberGlyph.doLayout();
		this.noteNumbers.addNoteGlyph(noteNumberGlyph,n);
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatGlyph
});
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
};
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatPreNotesGlyph"];
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	doLayout: function() {
		if(this.container.beat.brushType != 0 && !this.container.beat.get_isRest()) {
			this.addGlyph(new alphaTab.rendering.glyphs.TabBrushGlyph(this.container.beat));
			this.addGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * this.get_scale()));
		}
		alphaTab.rendering.glyphs.BeatGlyphBase.prototype.doLayout.call(this);
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatPreNotesGlyph
});
alphaTab.rendering.glyphs.TabBendGlyph = function() {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._notes = null;
	this._renderPoints = null;
	this._preBendMinValue = 0;
	this._bendMiddleMinValue = 0;
	this._bendEndMinValue = 0;
	this._bendEndContinuedMinValue = 0;
	this._releaseMinValue = 0;
	this._releaseContinuedMinValue = 0;
	this._maxBendValue = 0;
	var this1 = [];
	this._notes = this1;
	var this2 = {}
	this._renderPoints = this2;
	this._preBendMinValue = -1;
	this._bendMiddleMinValue = -1;
	this._bendEndMinValue = -1;
	this._bendEndContinuedMinValue = -1;
	this._releaseMinValue = -1;
	this._releaseContinuedMinValue = -1;
	this._maxBendValue = -1;
};
alphaTab.rendering.glyphs.TabBendGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBendGlyph"];
alphaTab.rendering.glyphs.TabBendGlyph.getFractionSign = function(steps) {
	switch(steps) {
	case 1:
		return "Â¼";
	case 2:
		return "Â½";
	case 3:
		return "Â¾";
	default:
		return Std.string(steps) + "/ 4";
	}
};
alphaTab.rendering.glyphs.TabBendGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabBendGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	addBends: function(note) {
		this._notes.push(note);
		var renderPoints = this.createRenderingPoints(note);
		this._renderPoints[note.id] = renderPoints;
		if(this._maxBendValue == -1 || this._maxBendValue < note.maxBendPoint.value) {
			this._maxBendValue = note.maxBendPoint.value;
		}
		var value;
		var _g = note.bendType;
		switch(_g) {
		case 2:
			value = renderPoints[1].value;
			if(note.get_isTieOrigin()) {
				if(this._bendEndContinuedMinValue == -1 || value < this._bendEndContinuedMinValue) {
					this._bendEndContinuedMinValue = value;
				}
			} else if(this._bendEndMinValue == -1 || value < this._bendEndMinValue) {
				this._bendEndMinValue = value;
			}
			break;
		case 3:
			value = renderPoints[1].value;
			if(note.get_isTieOrigin()) {
				if(this._releaseContinuedMinValue == -1 || value < this._releaseContinuedMinValue) {
					this._releaseContinuedMinValue = value;
				}
			} else if(value > 0 && (this._releaseMinValue == -1 || value < this._releaseMinValue)) {
				this._releaseMinValue = value;
			}
			break;
		case 4:
			value = renderPoints[1].value;
			if(this._bendMiddleMinValue == -1 || value < this._bendMiddleMinValue) {
				this._bendMiddleMinValue = value;
			}
			value = renderPoints[2].value;
			if(note.get_isTieOrigin()) {
				if(this._releaseContinuedMinValue == -1 || value < this._releaseContinuedMinValue) {
					this._releaseContinuedMinValue = value;
				}
			} else if(value > 0 && (this._releaseMinValue == -1 || value < this._releaseMinValue)) {
				this._releaseMinValue = value;
			}
			break;
		case 6:
			value = renderPoints[0].value;
			if(this._preBendMinValue == -1 || value < this._preBendMinValue) {
				this._preBendMinValue = value;
			}
			break;
		case 7:
			value = renderPoints[0].value;
			if(this._preBendMinValue == -1 || value < this._preBendMinValue) {
				this._preBendMinValue = value;
			}
			value = renderPoints[1].value;
			if(note.get_isTieOrigin()) {
				if(this._bendEndContinuedMinValue == -1 || value < this._bendEndContinuedMinValue) {
					this._bendEndContinuedMinValue = value;
				}
			} else if(this._bendEndMinValue == -1 || value < this._bendEndMinValue) {
				this._bendEndMinValue = value;
			}
			break;
		case 8:
			value = renderPoints[0].value;
			if(this._preBendMinValue == -1 || value < this._preBendMinValue) {
				this._preBendMinValue = value;
			}
			value = renderPoints[1].value;
			if(note.get_isTieOrigin()) {
				if(this._releaseContinuedMinValue == -1 || value < this._releaseContinuedMinValue) {
					this._releaseContinuedMinValue = value;
				}
			} else if(value > 0 && (this._releaseMinValue == -1 || value < this._releaseMinValue)) {
				this._releaseMinValue = value;
			}
			break;
		default:
		}
	}
	,doLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.doLayout.call(this);
		var bendHeight = this._maxBendValue * 6 * this.get_scale();
		this.renderer.registerOverflowTop(bendHeight);
		var value;
		var note = $iterator(this._notes)();
		while(note.hasNext()) {
			var note1 = note.next();
			var renderPoints = this._renderPoints[note1.id];
			var _g = note1.bendType;
			switch(_g) {
			case 2:
				var tmp = note1.get_isTieOrigin() ? this._bendEndContinuedMinValue : this._bendEndMinValue;
				renderPoints[1].lineValue = tmp;
				break;
			case 3:
				if(note1.get_isTieOrigin()) {
					value = this._releaseContinuedMinValue;
				} else {
					value = this._releaseMinValue;
				}
				if(value >= 0) {
					renderPoints[1].lineValue = value;
				}
				break;
			case 4:
				renderPoints[1].lineValue = this._bendMiddleMinValue;
				if(note1.get_isTieOrigin()) {
					value = this._releaseContinuedMinValue;
				} else {
					value = this._releaseMinValue;
				}
				if(value >= 0) {
					renderPoints[2].lineValue = value;
				}
				break;
			case 6:
				renderPoints[0].lineValue = this._preBendMinValue;
				break;
			case 7:
				renderPoints[0].lineValue = this._preBendMinValue;
				var tmp1 = note1.get_isTieOrigin() ? this._bendEndContinuedMinValue : this._bendEndMinValue;
				renderPoints[1].lineValue = tmp1;
				break;
			case 8:
				renderPoints[0].lineValue = this._preBendMinValue;
				if(note1.get_isTieOrigin()) {
					value = this._releaseContinuedMinValue;
				} else {
					value = this._releaseMinValue;
				}
				if(value >= 0) {
					renderPoints[1].lineValue = value;
				}
				break;
			default:
			}
		}
		this.width = 0;
		var comparison = function(a,b) {
			if(a.get_isStringed()) {
				return a.string - b.string;
			}
			return a.get_realValue() - b.get_realValue();
		};
		this._notes.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
	}
	,createRenderingPoints: function(note) {
		var this1 = [];
		var renderingPoints = this1;
		var _g = note.bendType;
		switch(_g) {
		case 1:
			var bendPoint = $iterator(note.bendPoints)();
			while(bendPoint.hasNext()) {
				var bendPoint1 = bendPoint.next();
				renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(bendPoint1.offset,bendPoint1.value));
			}
			break;
		case 4:
			renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(0,note.bendPoints[0].value));
			renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(60 / 2 | 0,note.bendPoints[1].value));
			renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(60,note.bendPoints[3].value));
			break;
		case 2:case 3:case 5:case 6:case 7:case 8:
			renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(0,note.bendPoints[0].value));
			renderingPoints.push(new alphaTab.rendering.glyphs.TabBendRenderPoint(60,note.bendPoints[1].value));
			break;
		default:
		}
		return renderingPoints;
	}
	,paint: function(cx,cy,canvas) {
		var color = canvas.get_color();
		if(this._notes.length > 1) {
			canvas.set_color(this.renderer.get_resources().secondaryGlyphColor);
		}
		var note = $iterator(this._notes)();
		while(note.hasNext()) {
			var note1 = note.next();
			var renderPoints = this._renderPoints[note1.id];
			var startNoteRenderer = this.renderer;
			var endNote = note1;
			var isMultiBeatBend = false;
			var endNoteRenderer;
			var endNoteHasBend = false;
			var slurText = note1.bendStyle == 1 ? "grad." : "";
			var endBeat = null;
			while(endNote.get_isTieOrigin()) {
				var nextNote = endNote.tieDestination;
				endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),nextNote.beat.voice.bar);
				if(endNoteRenderer == null || startNoteRenderer.staff != endNoteRenderer.staff) {
					break;
				}
				endNote = nextNote;
				isMultiBeatBend = true;
				if(endNote.get_hasBend() || !this.renderer.get_settings().notation.extendBendArrowsOnTiedNotes) {
					endNoteHasBend = true;
					break;
				}
			}
			endBeat = endNote.beat;
			endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),endBeat.voice.bar);
			if(endBeat.get_isLastOfVoice() && !endNote.get_hasBend() && this.renderer.get_settings().notation.extendBendArrowsOnTiedNotes) {
				endBeat = null;
			}
			var startX = 0;
			var endX = 0;
			var topY = cy + startNoteRenderer.y;
			startX = cx + startNoteRenderer.x;
			if(renderPoints[0].value > 0 || note1.isContinuedBend) {
				startX = startX + startNoteRenderer.getBeatX(note1.beat,2);
			} else {
				startX = startX + startNoteRenderer.getNoteX(note1,true);
			}
			if(endBeat == null || endBeat.get_isLastOfVoice() && !endNoteHasBend) {
				endX = cx + endNoteRenderer.x + endNoteRenderer.get_postBeatGlyphsStart();
			} else if(endNoteHasBend || endBeat.nextBeat == null) {
				endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat,2);
			} else if(note1.bendType == 5) {
				endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat,1);
			} else {
				endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat,0);
			}
			if(!isMultiBeatBend) {
				endX = endX - 6 * this.get_scale();
			}
			var width = endX - startX;
			var dX = width / 60;
			canvas.beginPath();
			var i = 0;
			var j = renderPoints.length - 1;
			while(i < j) {
				var firstPt = renderPoints[i];
				var secondPt = renderPoints[i + 1];
				if(i == 0 && firstPt.value != 0 && !note1.isTieDestination) {
					this.paintBend(note1,new alphaTab.rendering.glyphs.TabBendRenderPoint(0,0),firstPt,startX,topY,dX,slurText,canvas);
				}
				if(note1.bendType != 6) {
					this.paintBend(note1,firstPt,secondPt,startX,topY,dX,slurText,canvas);
				} else if(note1.get_isTieOrigin() && note1.tieDestination.get_hasBend()) {
					var _tmp = new alphaTab.rendering.glyphs.TabBendRenderPoint(60,firstPt.value);
					_tmp.lineValue = firstPt.lineValue;
					this.paintBend(note1,firstPt,_tmp,startX,topY,dX,slurText,canvas);
				}
				++i;
			}
			canvas.set_color(color);
		}
	}
	,paintBend: function(note,firstPt,secondPt,cx,cy,dX,slurText,canvas) {
		var r = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var res = this.renderer.get_resources();
		var overflowOffset = r.get_lineOffset() / 2;
		var x1 = cx + dX * firstPt.offset;
		var bendValueHeight = 6 * this.get_scale();
		var y1 = cy - bendValueHeight * firstPt.lineValue;
		if(firstPt.value == 0) {
			if(secondPt.offset == firstPt.offset) {
				y1 = y1 + r.getNoteY(note.beat.maxStringNote,true);
			} else {
				y1 = y1 + r.getNoteY(note,false);
			}
		} else {
			y1 = y1 + overflowOffset;
		}
		var x2 = cx + dX * secondPt.offset;
		var y2 = cy - bendValueHeight * secondPt.lineValue;
		if(secondPt.lineValue == 0) {
			y2 = y2 + r.getNoteY(note,false);
		} else {
			y2 = y2 + overflowOffset;
		}
		var arrowOffset = 0;
		var arrowSize = 6 * this.get_scale();
		if(secondPt.value > firstPt.value) {
			if(y2 + arrowSize > y1) {
				y2 = y1 - arrowSize;
			}
			canvas.beginPath();
			canvas.moveTo(x2,y2);
			var this1 = 0.5;
			canvas.lineTo(x2 - arrowSize * this1,y2 + arrowSize);
			var this2 = 0.5;
			canvas.lineTo(x2 + arrowSize * this2,y2 + arrowSize);
			canvas.closePath();
			canvas.fill();
			arrowOffset = arrowSize;
		} else if(secondPt.value != firstPt.value) {
			if(y2 < y1) {
				y2 = y1 + arrowSize;
			}
			canvas.beginPath();
			canvas.moveTo(x2,y2);
			var this3 = 0.5;
			canvas.lineTo(x2 - arrowSize * this3,y2 - arrowSize);
			var this4 = 0.5;
			canvas.lineTo(x2 + arrowSize * this4,y2 - arrowSize);
			canvas.closePath();
			canvas.fill();
			arrowOffset = -arrowSize;
		}
		canvas.stroke();
		if(firstPt.value == secondPt.value) {
			if(firstPt.lineValue > 0) {
				var dashX = x2;
				var dashSize = 3 * this.get_scale();
				var end = x1 + dashSize;
				var dashes = (dashX - x1) / (dashSize * 2);
				if(dashes < 1) {
					canvas.moveTo(dashX,y1);
					canvas.lineTo(x1,y1);
				} else {
					while(dashX > end) {
						canvas.moveTo(dashX,y1);
						canvas.lineTo(dashX - dashSize,y1);
						dashX = dashX - dashSize * 2;
					}
				}
				canvas.stroke();
			}
		} else if(x2 > x1) {
			canvas.moveTo(x1,y1);
			canvas.bezierCurveTo((x1 + x2) / 2,y1,x2,y1,x2,y2 + arrowOffset);
			canvas.stroke();
		} else {
			canvas.moveTo(x1,y1);
			canvas.lineTo(x2,y2);
			canvas.stroke();
		}
		if(!(slurText == null || slurText.length == 0) && firstPt.offset < secondPt.offset) {
			canvas.set_font(res.graceFont);
			var size = canvas.measureText(slurText);
			var y;
			var x;
			if(y1 > y2) {
				var h = Math.abs(y1 - y2);
				var this5 = 1.3;
				if(h > canvas.get_font().size * this5) {
					y = y1 - h / 2;
				} else {
					y = y1;
				}
				x = (x1 + x2 - size) / 2;
			} else {
				y = y1;
				x = x2 - size;
			}
			canvas.fillText(slurText,x,y);
		}
		if(secondPt.value != 0 && firstPt.value != secondPt.value) {
			var dV = secondPt.value;
			var up = secondPt.value > firstPt.value;
			dV = Math.abs(dV);
			var s = "";
			if(dV == 4) {
				s = "full";
				dV = dV - 4;
			} else if(dV >= 4 || dV <= -4) {
				var steps = dV / 4 | 0;
				s = s + Std.string(steps);
				dV = dV - steps * 4;
			}
			if(dV > 0) {
				s = s + alphaTab.rendering.glyphs.TabBendGlyph.getFractionSign(dV);
			}
			if(s != "") {
				y2 = cy - bendValueHeight * secondPt.value;
				var startY = y2;
				if(!up) {
					var this6 = 1;
					startY = y1 + Math.abs(y2 - y1) * this6 / 3;
				}
				canvas.set_font(res.tablatureFont);
				var size1 = canvas.measureText(s);
				var this7 = 0.5;
				var y3 = startY - res.tablatureFont.size * this7 - 2 * this.get_scale();
				var x3 = x2 - size1 / 2;
				canvas.fillText(s,x3,y3);
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabBendGlyph
});
alphaTab.rendering.glyphs.TabBendRenderPoint = function(offset,value) {
	if(value == null) {
		value = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	alphaTab.model.BendPoint.call(this,offset,value);
	this.lineValue = 0;
	this.lineValue = value;
};
alphaTab.rendering.glyphs.TabBendRenderPoint.__name__ = ["alphaTab","rendering","glyphs","TabBendRenderPoint"];
alphaTab.rendering.glyphs.TabBendRenderPoint.__super__ = alphaTab.model.BendPoint;
alphaTab.rendering.glyphs.TabBendRenderPoint.prototype = $extend(alphaTab.model.BendPoint.prototype,{
	__class__: alphaTab.rendering.glyphs.TabBendRenderPoint
});
alphaTab.rendering.glyphs.TabBrushGlyph = function(beat) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._beat = beat;
};
alphaTab.rendering.glyphs.TabBrushGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBrushGlyph"];
alphaTab.rendering.glyphs.TabBrushGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabBrushGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 10 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var tabBarRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var res = this.renderer.get_resources();
		var startY = cy + this.x + (tabBarRenderer.getNoteY(this._beat.maxNote,false) - res.tablatureFont.size / 2);
		var endY = cy + this.y + tabBarRenderer.getNoteY(this._beat.minNote,false) + res.tablatureFont.size / 2;
		var arrowX = system.Convert.toInt32_Single(cx + this.x + this.width / 2);
		var arrowSize = 8 * this.get_scale();
		if(this._beat.brushType != 0) {
			if(this._beat.brushType == 1 || this._beat.brushType == 2) {
				canvas.beginPath();
				var this1 = arrowX;
				canvas.moveTo(this1,startY);
				var this2 = arrowX;
				canvas.lineTo(this2,endY);
				canvas.stroke();
			} else if(this._beat.brushType == 3) {
				var lineStartY = startY - arrowSize;
				var lineEndY = endY - arrowSize;
				canvas.beginRotate(cx + this.x + 2 * this.get_scale(),lineEndY,-90);
				var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
				glyph.renderer = this.renderer;
				glyph.doLayout();
				glyph.width = Math.abs(lineEndY - lineStartY);
				glyph.paint(0,0,canvas);
				canvas.endRotate();
			} else if(this._beat.brushType == 4) {
				var lineStartY1 = startY + arrowSize;
				var lineEndY1 = endY + arrowSize;
				canvas.beginRotate(cx + this.x + 7 * this.get_scale(),lineStartY1,90);
				var glyph1 = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
				glyph1.renderer = this.renderer;
				glyph1.doLayout();
				glyph1.width = Math.abs(lineEndY1 - lineStartY1);
				glyph1.paint(0,0,canvas);
				canvas.endRotate();
			}
			if(this._beat.brushType == 1 || this._beat.brushType == 3) {
				canvas.beginPath();
				var this3 = arrowX;
				canvas.moveTo(this3,endY);
				canvas.lineTo(arrowX + arrowSize / 2,endY - arrowSize);
				canvas.lineTo(arrowX - arrowSize / 2,endY - arrowSize);
				canvas.closePath();
				canvas.fill();
			} else {
				canvas.beginPath();
				var this4 = arrowX;
				canvas.moveTo(this4,startY);
				canvas.lineTo(arrowX + arrowSize / 2,startY + arrowSize);
				canvas.lineTo(arrowX - arrowSize / 2,startY + arrowSize);
				canvas.closePath();
				canvas.fill();
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabBrushGlyph
});
alphaTab.rendering.glyphs.TabClefGlyph = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.TabClefGlyph.__name__ = ["alphaTab","rendering","glyphs","TabClefGlyph"];
alphaTab.rendering.glyphs.TabClefGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabClefGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 28 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var strings = this.renderer.bar.staff.tuning.length;
		var this1 = 0.5;
		var correction = strings * this.get_scale() * this1;
		var symbol = strings <= 4 ? 57454 : 57453;
		var scale;
		if(strings <= 4) {
			var this2 = 4.5;
			scale = strings / this2;
		} else {
			var this3 = 6.5;
			scale = strings / this3;
		}
		canvas.fillMusicFontSymbol(cx + this.x + 5 * this.get_scale(),cy + this.y - correction,scale * this.get_scale(),symbol,false);
	}
	,__class__: alphaTab.rendering.glyphs.TabClefGlyph
});
alphaTab.rendering.glyphs.TabNoteChordGlyph = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._notes = null;
	this._isGrace = false;
	this.beat = null;
	this.beamingHelper = null;
	this.minStringNote = null;
	this.beatEffects = null;
	this.notesPerString = null;
	this.noteStringWidth = 0.0;
	this._isGrace = isGrace;
	var this1 = [];
	this._notes = this1;
	var this2 = {}
	this.beatEffects = this2;
	var this3 = {}
	this.notesPerString = this3;
};
alphaTab.rendering.glyphs.TabNoteChordGlyph.__name__ = ["alphaTab","rendering","glyphs","TabNoteChordGlyph"];
alphaTab.rendering.glyphs.TabNoteChordGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabNoteChordGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	getNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		if(this.notesPerString.hasOwnProperty(note.string)) {
			var n = this.notesPerString[note.string];
			var pos = this.x + n.x;
			if(onEnd) {
				pos = pos + n.width;
			}
			return pos;
		}
		return 0;
	}
	,getNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		if(this.notesPerString.hasOwnProperty(note.string)) {
			return this.y + this.notesPerString[note.string].y + (aboveNote ? -this.notesPerString[note.string].height / 2 : 0);
		}
		return 0;
	}
	,doLayout: function() {
		var w = 0;
		var noteStringWidth = 0;
		var i = 0;
		var j = this._notes.length;
		while(i < j) {
			var g = this._notes[i];
			g.renderer = this.renderer;
			g.doLayout();
			if(g.width > w) {
				w = g.width;
			}
			if(g.noteStringWidth > noteStringWidth) {
				noteStringWidth = g.noteStringWidth;
			}
			++i;
		}
		this.noteStringWidth = noteStringWidth;
		var tabHeight = this.renderer.get_resources().tablatureFont.size;
		var effectY = this.getNoteY(this.minStringNote,false) + tabHeight / 2;
		var effectSpacing = 7 * this.get_scale();
		var this1 = this.beatEffects;
		var beatEffectKey = $iterator(Object.keys(this1))();
		while(beatEffectKey.hasNext()) {
			var beatEffectKey1 = beatEffectKey.next();
			var g1 = this.beatEffects[beatEffectKey1];
			g1.y = g1.y + effectY;
			g1.x = g1.x + this.width / 2;
			g1.renderer = this.renderer;
			effectY = effectY + effectSpacing;
			g1.doLayout();
		}
		this.width = w;
	}
	,addNoteGlyph: function(noteGlyph,note) {
		this._notes.push(noteGlyph);
		this.notesPerString[note.string] = noteGlyph;
		if(this.minStringNote == null || note.string < this.minStringNote.string) {
			this.minStringNote = note;
		}
	}
	,paint: function(cx,cy,canvas) {
		cx = cx + this.x;
		cy = cy + this.y;
		var res = this.renderer.get_resources();
		var oldBaseLine = canvas.get_textBaseline();
		canvas.set_textBaseline(1);
		canvas.set_font(this._isGrace ? res.graceFont : res.tablatureFont);
		var notes = this._notes;
		var w = this.width;
		var g = $iterator(notes)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.renderer = this.renderer;
			g1.width = w;
			g1.paint(cx,cy,canvas);
		}
		canvas.set_textBaseline(oldBaseLine);
		var this1 = this.beatEffects;
		var beatEffectKey = $iterator(Object.keys(this1))();
		while(beatEffectKey.hasNext()) {
			var beatEffectKey1 = beatEffectKey.next();
			var g2 = this.beatEffects[beatEffectKey1];
			g2.paint(cx,cy,canvas);
		}
	}
	,updateBeamingHelper: function(cx) {
		if(this.beamingHelper != null && this.beamingHelper.isPositionFrom("tab",this.beat)) {
			this.beamingHelper.registerBeatLineX("tab",this.beat,cx + this.x + this.width,cx + this.x);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabNoteChordGlyph
});
alphaTab.rendering.glyphs.TabRestGlyph = function(x,y,isVisibleRest,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ScoreRestGlyph.getSymbol(duration));
	this._isVisibleRest = false;
	this._duration = -4;
	this.beamingHelper = null;
	this._isVisibleRest = isVisibleRest;
	this._duration = duration;
};
alphaTab.rendering.glyphs.TabRestGlyph.__name__ = ["alphaTab","rendering","glyphs","TabRestGlyph"];
alphaTab.rendering.glyphs.TabRestGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.TabRestGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		if(this._isVisibleRest) {
			this.width = alphaTab.rendering.glyphs.ScoreRestGlyph.getSize(this._duration) * this.get_scale();
		} else {
			this.width = 10 * this.get_scale();
		}
	}
	,updateBeamingHelper: function(cx) {
		if(this.beamingHelper != null && this.beamingHelper.isPositionFrom("tab",this.beat)) {
			this.beamingHelper.registerBeatLineX("tab",this.beat,cx + this.x + this.width,cx + this.x);
		}
	}
	,paint: function(cx,cy,canvas) {
		if(this._isVisibleRest) {
			alphaTab.rendering.glyphs.MusicFontGlyph.prototype.paint.call(this,cx,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabRestGlyph
});
alphaTab.rendering.glyphs.TabSlideLineGlyph = function(inType,outType,startNote,parent) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._inType = 0;
	this._outType = 0;
	this._startNote = null;
	this._parent = null;
	this._inType = inType;
	this._outType = outType;
	this._startNote = startNote;
	this._parent = parent;
};
alphaTab.rendering.glyphs.TabSlideLineGlyph.__name__ = ["alphaTab","rendering","glyphs","TabSlideLineGlyph"];
alphaTab.rendering.glyphs.TabSlideLineGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabSlideLineGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	doLayout: function() {
		this.width = 0;
	}
	,paint: function(cx,cy,canvas) {
		this.paintSlideIn(cx,cy,canvas);
		this.paintSlideOut(cx,cy,canvas);
	}
	,paintSlideIn: function(cx,cy,canvas) {
		var startNoteRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var sizeX = 12 * this.get_scale();
		var sizeY = 3 * this.get_scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var _g = this._inType;
		switch(_g) {
		case 1:
			endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,false);
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false);
			startX = endX - sizeX;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) + sizeY;
			break;
		case 2:
			endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,false);
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false);
			startX = endX - sizeX;
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) - sizeY;
			break;
		default:
			return;
		}
		this.paintSlideLine(canvas,false,startX,endX,startY,endY);
	}
	,paintSlideOut: function(cx,cy,canvas) {
		var startNoteRenderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var sizeX = 12 * this.get_scale();
		var sizeY = 3 * this.get_scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var waves = false;
		var _g = this._outType;
		switch(_g) {
		case 1:case 2:
			var startOffsetY;
			var endOffsetY;
			if(this._startNote.slideTarget == null) {
				startOffsetY = 0;
				endOffsetY = 0;
			} else if(this._startNote.slideTarget.fret > this._startNote.fret) {
				startOffsetY = sizeY;
				endOffsetY = sizeY * -1;
			} else {
				startOffsetY = sizeY * -1;
				endOffsetY = sizeY;
			}
			startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat,3);
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) + startOffsetY;
			if(this._startNote.slideTarget != null) {
				var endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this._startNote.slideTarget.beat.voice.bar);
				if(endNoteRenderer == null || endNoteRenderer.staff != startNoteRenderer.staff) {
					endX = cx + startNoteRenderer.x + this._parent.x;
					endY = startY;
				} else {
					endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(this._startNote.slideTarget.beat,1);
					endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(this._startNote.slideTarget,false) + endOffsetY;
				}
			} else {
				endX = cx + startNoteRenderer.x + this._parent.x;
				endY = startY;
			}
			break;
		case 3:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true);
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false);
			endX = startX + sizeX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) - sizeY;
			break;
		case 4:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true);
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false);
			endX = startX + sizeX;
			endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) + sizeY;
			break;
		case 5:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true);
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) - sizeY * 2;
			endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat,4);
			endY = startY + sizeY * 3;
			waves = true;
			break;
		case 6:
			startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote,true);
			startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote,false) + sizeY;
			endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat,4);
			endY = startY - sizeY * 3;
			waves = true;
			break;
		default:
			return;
		}
		this.paintSlideLine(canvas,waves,startX,endX,startY,endY);
	}
	,paintSlideLine: function(canvas,waves,startX,endX,startY,endY) {
		if(waves) {
			var b = endX - startX;
			var a = endY - startY;
			var this1 = a;
			var this2 = b;
			var c = Math.sqrt(Math.pow(this1,2) + Math.pow(this2,2));
			var this3 = a / c;
			var angle = js.Boot.__cast(Math.asin(this3) * 57.29577951308238 , Float);
			canvas.beginRotate(startX,startY,angle);
			var glyph = new alphaTab.rendering.glyphs.NoteVibratoGlyph(0,0,1,1.2);
			glyph.renderer = this.renderer;
			glyph.doLayout();
			glyph.width = b;
			glyph.paint(0,0,canvas);
			canvas.endRotate();
		} else {
			canvas.beginPath();
			canvas.moveTo(startX,startY);
			canvas.lineTo(endX,endY);
			canvas.stroke();
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabSlideLineGlyph
});
alphaTab.rendering.glyphs.TabTieGlyph = function(startNote,endNote,forSlide,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startNote.beat,endNote.beat,forEnd);
	this.StartNote = null;
	this.EndNote = null;
	this.ForSlide = false;
	this.StartNote = startNote;
	this.EndNote = endNote;
	this.ForSlide = forSlide;
};
alphaTab.rendering.glyphs.TabTieGlyph.__name__ = ["alphaTab","rendering","glyphs","TabTieGlyph"];
alphaTab.rendering.glyphs.TabTieGlyph.getBeamDirection_Note = function(note) {
	if(note.string > 3) {
		return 0;
	} else {
		return 1;
	}
};
alphaTab.rendering.glyphs.TabTieGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.TabTieGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	get_offset: function() {
		if(this.ForSlide) {
			return 5 * this.get_scale();
		} else {
			return 0;
		}
	}
	,getBeamDirection: function(beat,noteRenderer) {
		return alphaTab.rendering.glyphs.TabTieGlyph.getBeamDirection_Note(this.StartNote);
	}
	,getStartY: function(noteRenderer,direction) {
		return noteRenderer.getNoteY(this.StartNote,false) - this.get_offset();
	}
	,getEndY: function(noteRenderer,direction) {
		return noteRenderer.getNoteY(this.EndNote,false) - this.get_offset();
	}
	,getStartX: function(noteRenderer) {
		return noteRenderer.getNoteX(this.StartNote,true);
	}
	,getEndX: function(noteRenderer) {
		return noteRenderer.getNoteX(this.EndNote,false);
	}
	,__class__: alphaTab.rendering.glyphs.TabTieGlyph
});
alphaTab.rendering.glyphs.TabSlurGlyph = function(startNote,endNote,forSlide,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TabTieGlyph.call(this,startNote,endNote,forSlide,forEnd);
	this._direction = 0;
	this._direction = alphaTab.rendering.glyphs.TabTieGlyph.getBeamDirection_Note(startNote);
};
alphaTab.rendering.glyphs.TabSlurGlyph.__name__ = ["alphaTab","rendering","glyphs","TabSlurGlyph"];
alphaTab.rendering.glyphs.TabSlurGlyph.__super__ = alphaTab.rendering.glyphs.TabTieGlyph;
alphaTab.rendering.glyphs.TabSlurGlyph.prototype = $extend(alphaTab.rendering.glyphs.TabTieGlyph.prototype,{
	getTieHeight: function(startX,startY,endX,endY) {
		var this1 = endX - startX + 1;
		return js.Boot.__cast(Math.log(this1) , Float) * this.renderer.get_settings().notation.slurHeight;
	}
	,tryExpand: function(startNote,endNote,forSlide,forEnd) {
		if(this.ForSlide != forSlide) {
			return false;
		}
		if(this.ForEnd != forEnd) {
			return false;
		}
		if(this.StartNote.beat.id != startNote.beat.id) {
			return false;
		}
		if(this.EndNote.beat.id != endNote.beat.id) {
			return false;
		}
		if(this._direction != alphaTab.rendering.glyphs.TabTieGlyph.getBeamDirection_Note(startNote)) {
			return false;
		}
		var _g = this._direction;
		switch(_g) {
		case 0:
			if(startNote.get_realValue() > this.StartNote.get_realValue()) {
				this.StartNote = startNote;
				this.StartBeat = startNote.beat;
			}
			if(endNote.get_realValue() > this.EndNote.get_realValue()) {
				this.EndNote = endNote;
				this.EndBeat = endNote.beat;
			}
			break;
		case 1:
			if(startNote.get_realValue() < this.StartNote.get_realValue()) {
				this.StartNote = startNote;
				this.StartBeat = startNote.beat;
			}
			if(endNote.get_realValue() < this.EndNote.get_realValue()) {
				this.EndNote = endNote;
				this.EndBeat = endNote.beat;
			}
			break;
		default:
		}
		return true;
	}
	,paint: function(cx,cy,canvas) {
		var startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),this.StartBeat.voice.bar);
		var direction = this.getBeamDirection(this.StartBeat,startNoteRenderer);
		var slurId = "tab.slur." + Std.string(this.StartNote.beat.id) + "." + Std.string(this.EndNote.beat.id) + "." + direction;
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var isSlurRendered = renderer.staff.getSharedLayoutData(slurId,false);
		if(!isSlurRendered) {
			renderer.staff.setSharedLayoutData(slurId,true);
			alphaTab.rendering.glyphs.TabTieGlyph.prototype.paint.call(this,cx,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabSlurGlyph
});
alphaTab.rendering.glyphs.TabTimeSignatureGlyph = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.TimeSignatureGlyph.call(this,x,y,numerator,denominator,isCommon);
};
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","TabTimeSignatureGlyph"];
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.TimeSignatureGlyph;
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,{
	get_commonY: function() {
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		return renderer.getTabY(0,0);
	}
	,get_numeratorY: function() {
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var offset;
		if(renderer.bar.staff.tuning.length <= 4) {
			var this1 = 4;
			offset = 1 / this1;
		} else {
			var this2 = 3;
			offset = 1 / this2;
		}
		return renderer.get_lineOffset() * renderer.bar.staff.tuning.length * offset * this.get_scale();
	}
	,get_denominatorY: function() {
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		var this1 = 5;
		var offset = 3 / this1;
		return renderer.get_lineOffset() * renderer.bar.staff.tuning.length * offset * this.get_scale();
	}
	,get_commonScale: function() {
		return 1;
	}
	,get_numberScale: function() {
		var renderer = js.Boot.__cast(this.renderer , alphaTab.rendering.TabBarRenderer);
		if(renderer.bar.staff.tuning.length <= 4) {
			return 0.75;
		}
		return 1;
	}
	,__class__: alphaTab.rendering.glyphs.TabTimeSignatureGlyph
});
alphaTab.rendering.glyphs.TabWhammyBarGlyph = function(beat) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._renderPoints = null;
	this._isSimpleDip = false;
	this._beat = beat;
	this._renderPoints = this.createRenderingPoints(beat);
	this._isSimpleDip = false;
};
alphaTab.rendering.glyphs.TabWhammyBarGlyph.__name__ = ["alphaTab","rendering","glyphs","TabWhammyBarGlyph"];
alphaTab.rendering.glyphs.TabWhammyBarGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabWhammyBarGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	createRenderingPoints: function(beat) {
		if(beat.whammyBarType == 1) {
			return beat.whammyBarPoints;
		}
		var this1 = [];
		var renderingPoints = this1;
		var _g = beat.whammyBarType;
		switch(_g) {
		case 3:
			renderingPoints.push(new alphaTab.model.BendPoint(0,beat.whammyBarPoints[0].value));
			renderingPoints.push(new alphaTab.model.BendPoint(60 / 2 | 0,beat.whammyBarPoints[1].value));
			renderingPoints.push(new alphaTab.model.BendPoint(60,beat.whammyBarPoints[beat.whammyBarPoints.length - 1].value));
			break;
		case 2:case 4:case 5:case 6:
			renderingPoints.push(new alphaTab.model.BendPoint(0,beat.whammyBarPoints[0].value));
			renderingPoints.push(new alphaTab.model.BendPoint(60,beat.whammyBarPoints[1].value));
			break;
		default:
		}
		return renderingPoints;
	}
	,doLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.doLayout.call(this);
		this._isSimpleDip = this.renderer.get_settings().notation.notationMode == 1 && this._beat.whammyBarType == 3;
		var minValue = null;
		var maxValue = null;
		var beat = this._beat;
		while(beat != null && beat.get_hasWhammyBar()) {
			if(minValue == null || minValue.value > beat.minWhammyPoint.value) {
				minValue = beat.minWhammyPoint;
			}
			if(maxValue == null || maxValue.value < beat.maxWhammyPoint.value) {
				maxValue = beat.maxWhammyPoint;
			}
			beat = beat.nextBeat;
		}
		var topOffset = maxValue.value > 0 ? Math.abs(this.getOffset(maxValue.value)) : 0;
		if(topOffset > 0 || this._beat.whammyBarPoints[0].value != 0 || this.renderer.get_settings().notation.showZeroOnDiveWhammy) {
			var this1 = 2;
			topOffset = topOffset + this.renderer.get_resources().tablatureFont.size * this1;
		}
		var bottomOffset = minValue.value < 0 ? Math.abs(this.getOffset(minValue.value)) : 0;
		this.renderer.registerOverflowTop(topOffset + bottomOffset);
		var currentOffset = this.renderer.staff.getSharedLayoutData("tab.whammy.topoffset",-1);
		if(topOffset > currentOffset) {
			this.renderer.staff.setSharedLayoutData("tab.whammy.topoffset",topOffset);
		}
	}
	,getOffset: function(value) {
		if(value == 0) {
			return 0;
		}
		var this1 = 2;
		var offset = 6 * this.get_scale() + Math.log2(Math.abs(value) / this1) * 6 * this.get_scale();
		if(value < 0) {
			offset = -offset;
		}
		return offset;
	}
	,paint: function(cx,cy,canvas) {
		var startNoteRenderer = this.renderer;
		var endBeat = this._beat.nextBeat;
		var endNoteRenderer = null;
		var endXPositionType = 0;
		if(endBeat != null) {
			endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.get_staveId(),endBeat.voice.bar);
			if(endNoteRenderer == null || endNoteRenderer.staff != startNoteRenderer.staff) {
				endBeat = null;
				endNoteRenderer = null;
			} else if(endNoteRenderer != startNoteRenderer && !endBeat.get_hasWhammyBar()) {
				endBeat = null;
				endNoteRenderer = null;
			} else if(endBeat.get_hasWhammyBar() && (startNoteRenderer.get_settings().notation.notationMode != 1 || endBeat.whammyBarType != 3)) {
				endXPositionType = 2;
			} else {
				endXPositionType = 0;
			}
		}
		var startX;
		var endX;
		if(this._isSimpleDip) {
			startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,1) - 2 * this.get_scale();
			endX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,3) + 2 * this.get_scale();
		} else {
			startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat,2);
			if(endNoteRenderer == null) {
				endX = cx + startNoteRenderer.x + startNoteRenderer.width - 2 * this.get_scale();
			} else {
				endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat,endXPositionType);
			}
		}
		var old = canvas.get_textAlign();
		canvas.set_textAlign(1);
		if(this._renderPoints.length >= 2) {
			var dx = (endX - startX) / 60;
			canvas.beginPath();
			var zeroY = cy + this.renderer.staff.getSharedLayoutData("tab.whammy.topoffset",0);
			var slurText = this._beat.whammyStyle == 1 ? "grad." : "";
			var i = 0;
			var j = this._renderPoints.length - 1;
			while(i < j) {
				var firstPt = this._renderPoints[i];
				var secondPt = this._renderPoints[i + 1];
				var nextPt = i < j - 2 ? this._renderPoints[i + 2] : null;
				var isFirst = i == 0;
				if(i == 0 && firstPt.value != 0 && !this._beat.isContinuedWhammy) {
					this.paintWhammy(false,new alphaTab.model.BendPoint(0,0),firstPt,secondPt,startX,zeroY,dx,canvas,null);
					isFirst = false;
				}
				this.paintWhammy(isFirst,firstPt,secondPt,nextPt,startX,zeroY,dx,canvas,slurText);
				slurText = "";
				++i;
			}
			canvas.stroke();
		}
		canvas.set_textAlign(old);
	}
	,paintWhammy: function(isFirst,firstPt,secondPt,nextPt,cx,cy,dx,canvas,slurText) {
		var x1 = cx + dx * firstPt.offset;
		var x2 = cx + dx * secondPt.offset;
		var y1 = cy - this.getOffset(firstPt.value);
		var y2 = cy - this.getOffset(secondPt.value);
		if(firstPt.offset == secondPt.offset) {
			var dashSize = 3 * this.get_scale();
			var dashes = Math.abs(y2 - y1) / (dashSize * 2);
			if(dashes < 1) {
				canvas.moveTo(x1,y1);
				canvas.lineTo(x2,y2);
			} else {
				var dashEndY = Math.max(y1,y2);
				var dashStartY = Math.min(y1,y2);
				while(dashEndY > dashStartY) {
					canvas.moveTo(x1,dashStartY);
					canvas.lineTo(x1,dashStartY + dashSize);
					dashStartY = dashStartY + dashSize * 2;
				}
			}
			canvas.stroke();
		} else if(firstPt.value == secondPt.value) {
			var dashSize1 = 3 * this.get_scale();
			var dashes1 = Math.abs(x2 - x1) / (dashSize1 * 2);
			if(dashes1 < 1) {
				canvas.moveTo(x1,y1);
				canvas.lineTo(x2,y2);
			} else {
				var dashEndX = Math.max(x1,x2);
				var dashStartX = Math.min(x1,x2);
				while(dashEndX > dashStartX) {
					canvas.moveTo(dashEndX,y1);
					canvas.lineTo(dashEndX - dashSize1,y1);
					dashEndX = dashEndX - dashSize1 * 2;
				}
			}
			canvas.stroke();
		} else {
			canvas.moveTo(x1,y1);
			canvas.lineTo(x2,y2);
		}
		var res = this.renderer.get_resources();
		if(isFirst && !this._beat.isContinuedWhammy && !this._isSimpleDip) {
			var y = y1;
			y = y - (res.tablatureFont.size + 2 * this.get_scale());
			if(this.renderer.get_settings().notation.showZeroOnDiveWhammy) {
				canvas.fillText("0",x1,y);
			}
			if(slurText != null) {
				y = y - (res.tablatureFont.size + 2 * this.get_scale());
				canvas.fillText(slurText,x1,y);
			}
		}
		var dV = Math.abs(secondPt.value);
		if((dV != 0 || this.renderer.get_settings().notation.showZeroOnDiveWhammy && !this._isSimpleDip) && firstPt.value != secondPt.value) {
			var s = "";
			if(secondPt.value < 0) {
				s = s + "-";
			}
			if(dV >= 4) {
				var steps = dV / 4 | 0;
				s = s + Std.string(steps);
				dV = dV - steps * 4;
			} else if(dV == 0) {
				s = s + "0";
			}
			if(dV > 0) {
				s = s + alphaTab.rendering.glyphs.TabBendGlyph.getFractionSign(dV);
			}
			var y3;
			if(this._isSimpleDip) {
				y3 = Math.min(y1,y2) - res.tablatureFont.size - 2 * this.get_scale();
			} else {
				if(firstPt.offset == secondPt.offset) {
					y3 = Math.min(y1,y2);
				} else {
					y3 = y2;
				}
				y3 = y3 - (res.tablatureFont.size + 2 * this.get_scale());
				if(nextPt != null && nextPt.value > secondPt.value) {
					y3 = y3 - 2 * this.get_scale();
				}
			}
			var x = x2;
			canvas.fillText(s,x,y3);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabWhammyBarGlyph
});
alphaTab.rendering.glyphs.TempoGlyph = function(x,y,tempo) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._tempo = 0;
	this._tempo = tempo;
};
alphaTab.rendering.glyphs.TempoGlyph.__name__ = ["alphaTab","rendering","glyphs","TempoGlyph"];
alphaTab.rendering.glyphs.TempoGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TempoGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = 25 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var res = this.renderer.get_resources();
		canvas.set_font(res.markerFont);
		var this1 = 0.8;
		var this2 = 0.75;
		canvas.fillMusicFontSymbol(cx + this.x,cy + this.y + this.height * this1,this.get_scale() * this2,57813,false);
		canvas.fillText("= " + Std.string(this._tempo),cx + this.x + this.height / 2,cy + this.y + canvas.get_font().size / 2);
	}
	,__class__: alphaTab.rendering.glyphs.TempoGlyph
});
alphaTab.rendering.glyphs.TextGlyph = function(x,y,text,font,textAlign) {
	if(textAlign == null) {
		textAlign = 0;
	}
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._lines = null;
	this.font = null;
	this.textAlign = 0;
	var this1 = system.Convert.toUInt16(10);
	var this2 = this1;
	this._lines = system._CsString.CsString_Impl_.split_CharArray(text,[this2]);
	this.font = font;
	this.textAlign = textAlign;
};
alphaTab.rendering.glyphs.TextGlyph.__name__ = ["alphaTab","rendering","glyphs","TextGlyph"];
alphaTab.rendering.glyphs.TextGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TextGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = this.font.size * this._lines.length;
	}
	,paint: function(cx,cy,canvas) {
		canvas.set_font(this.font);
		var old = canvas.get_textAlign();
		var y = cy + this.y;
		var line = HxOverrides.iter(this._lines);
		while(line.hasNext()) {
			var line1 = line.next();
			canvas.set_textAlign(this.textAlign);
			canvas.fillText(line1,cx + this.x,y);
			canvas.set_textAlign(old);
			y = y + this.font.size;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TextGlyph
});
alphaTab.rendering.glyphs.TremoloPickingGlyph = function(x,y,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.TremoloPickingGlyph.getSymbol(duration));
};
alphaTab.rendering.glyphs.TremoloPickingGlyph.__name__ = ["alphaTab","rendering","glyphs","TremoloPickingGlyph"];
alphaTab.rendering.glyphs.TremoloPickingGlyph.getSymbol = function(duration) {
	switch(duration) {
	case 8:
		return 57888;
	case 16:
		return 57889;
	case 32:
		return 57890;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.TremoloPickingGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.TremoloPickingGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	doLayout: function() {
		this.width = 12 * this.get_scale();
	}
	,__class__: alphaTab.rendering.glyphs.TremoloPickingGlyph
});
alphaTab.rendering.glyphs.TrillGlyph = function(x,y) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
};
alphaTab.rendering.glyphs.TrillGlyph.__name__ = ["alphaTab","rendering","glyphs","TrillGlyph"];
alphaTab.rendering.glyphs.TrillGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TrillGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = 20 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		var res = this.renderer.get_resources();
		canvas.set_font(res.markerFont);
		var textw = canvas.measureText("tr");
		canvas.fillText("tr",cx + this.x,cy + this.y + canvas.get_font().size / 2);
		var startX = textw + 3 * this.get_scale();
		var endX = this.width - startX;
		var waveScale = 1.2;
		var step = 11 * this.get_scale() * waveScale;
		var loops = Math.max(1,(endX - startX) / step);
		var loopX = startX;
		var loopY = cy + this.y + this.height;
		var i = 0;
		while(i < loops) {
			canvas.fillMusicFontSymbol(cx + this.x + loopX,loopY,waveScale,60068,false);
			loopX = loopX + step;
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TrillGlyph
});
alphaTab.rendering.glyphs.TripletFeelGlyph = function(tripletFeel) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,0,0);
	this._tripletFeel = 0;
	this._tripletFeel = tripletFeel;
};
alphaTab.rendering.glyphs.TripletFeelGlyph.__name__ = ["alphaTab","rendering","glyphs","TripletFeelGlyph"];
alphaTab.rendering.glyphs.TripletFeelGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TripletFeelGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	doLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.doLayout.call(this);
		this.height = 25 * this.get_scale();
	}
	,paint: function(cx,cy,canvas) {
		cx = cx + this.x;
		cy = cy + this.y;
		var this1 = 0.75;
		var noteY = cy + this.height * this1;
		canvas.set_font(this.renderer.get_resources().effectFont);
		var this2 = 0.3;
		canvas.fillText("(",cx,cy + this.height * this2);
		var leftNoteX = cx + 10 * this.get_scale();
		var rightNoteX = cx + 40 * this.get_scale();
		var _g = this._tripletFeel;
		switch(_g) {
		case 0:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0]);
			break;
		case 1:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0,2]);
			this.renderTriplet(rightNoteX,cy,canvas);
			break;
		case 2:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			canvas.fillMusicFontSymbol(rightNoteX,noteY,0.40,57813,false);
			canvas.fillMusicFontSymbol(rightNoteX + 12 * this.get_scale(),noteY,0.40,57815,false);
			this.renderTriplet(rightNoteX,cy,canvas);
			break;
		case 3:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0,0,2]);
			canvas.fillCircle(rightNoteX + 9 * this.get_scale(),noteY,this.get_scale());
			break;
		case 4:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0,2]);
			canvas.fillCircle(rightNoteX + 9 * this.get_scale(),noteY,this.get_scale());
			break;
		case 5:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0,0,1]);
			canvas.fillCircle(rightNoteX + 12 * this.get_scale() + 8 * this.get_scale(),noteY,this.get_scale());
			break;
		case 6:
			this.renderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.renderBarNote(rightNoteX,noteY,0.40,canvas,[0,1]);
			canvas.fillCircle(rightNoteX + 12 * this.get_scale() + 8 * this.get_scale(),noteY,this.get_scale());
			break;
		default:
		}
		canvas.fillText("=",cx + 30 * this.get_scale(),cy + 5 * this.get_scale());
		var this3 = 0.3;
		canvas.fillText(")",cx + 65 * this.get_scale(),cy + this.height * this3);
	}
	,renderBarNote: function(cx,noteY,noteScale,canvas,bars) {
		canvas.fillMusicFontSymbol(cx,noteY,noteScale,57813,false);
		var this1 = 2;
		var partialBarWidth = 12 / this1 * this.get_scale();
		var i = 0;
		while(i < bars.length) {
			var _g = bars[i];
			switch(_g) {
			case 0:
				canvas.fillRect(cx + 4 * this.get_scale(),noteY - 12 * this.get_scale() + 3 * this.get_scale() * i,12 * this.get_scale(),2 * this.get_scale());
				break;
			case 1:
				canvas.fillRect(cx + 4 * this.get_scale(),noteY - 12 * this.get_scale() + 3 * this.get_scale() * i,partialBarWidth,2 * this.get_scale());
				break;
			case 2:
				canvas.fillRect(cx + 4 * this.get_scale() + partialBarWidth,noteY - 12 * this.get_scale() + 3 * this.get_scale() * i,partialBarWidth,2 * this.get_scale());
				break;
			default:
			}
			++i;
		}
		canvas.fillMusicFontSymbol(cx + 12 * this.get_scale(),noteY,noteScale,57813,false);
	}
	,renderTriplet: function(cx,cy,canvas) {
		cy = cy + 2 * this.get_scale();
		var font = this.renderer.get_resources().effectFont;
		var this1 = 0.8;
		canvas.set_font(new alphaTab.platform.model.Font(font.family,font.size * this1,font.style));
		var rightX = cx + 12 * this.get_scale() + 3 * this.get_scale();
		canvas.beginPath();
		canvas.moveTo(cx,cy + 3 * this.get_scale());
		canvas.lineTo(cx,cy);
		canvas.lineTo(cx + 5 * this.get_scale(),cy);
		canvas.moveTo(rightX + 5 * this.get_scale(),cy + 3 * this.get_scale());
		canvas.lineTo(rightX + 5 * this.get_scale(),cy);
		canvas.lineTo(rightX,cy);
		canvas.stroke();
		canvas.fillText("3",cx + 7 * this.get_scale(),cy - 10 * this.get_scale());
		canvas.set_font(font);
	}
	,__class__: alphaTab.rendering.glyphs.TripletFeelGlyph
});
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType = {};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_ = {};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.__name__ = ["alphaTab","rendering","glyphs","_TripletFeelGlyph_BarType","TripletFeelGlyph_BarType_Impl_"];
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Full";
	case 1:
		return "PartialLeft";
	case 2:
		return "PartialRight";
	}
	return "";
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "full":
		return 0;
	case "partialleft":
		return 1;
	case "partialright":
		return 2;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.glyphs.TuningGlyph = function(x,y,scale,resources,tuning) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._scale = 0.0;
	this._resources = null;
	this.height = 0.0;
	this._scale = scale;
	this._resources = resources;
	this.createGlyphs(tuning);
};
alphaTab.rendering.glyphs.TuningGlyph.__name__ = ["alphaTab","rendering","glyphs","TuningGlyph"];
alphaTab.rendering.glyphs.TuningGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.TuningGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	createGlyphs: function(tuning) {
		this.addGlyph(new alphaTab.rendering.glyphs.TextGlyph(0,0,tuning.name,this._resources.effectFont,0));
		this.height = this.height + 15 * this._scale;
		if(!tuning.isStandard) {
			var stringsPerColumn = system.Convert.toInt32_Double(Math.ceil(tuning.tunings.length / 2.0));
			var currentX = 0;
			var currentY = this.height;
			var i = 0;
			var j = tuning.tunings.length;
			while(i < j) {
				var str = "(" + Std.string(i + 1) + ") = " + alphaTab.model.Tuning.getTextForTuning(tuning.tunings[i],false);
				this.addGlyph(new alphaTab.rendering.glyphs.TextGlyph(currentX,currentY,str,this._resources.effectFont,0));
				currentY = currentY + this.height;
				if(i == stringsPerColumn - 1) {
					currentY = this.height;
					currentX = currentX + 43 * this._scale;
				}
				++i;
			}
			this.height = this.height + stringsPerColumn * (15 * this._scale);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TuningGlyph
});
alphaTab.rendering.glyphs.VoiceContainerGlyph = function(x,y,voice) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this.beatGlyphs = null;
	this.voice = null;
	this.minWidth = 0.0;
	this.tupletGroups = null;
	this.voice = voice;
	var this1 = [];
	this.beatGlyphs = this1;
	var this2 = [];
	this.tupletGroups = this2;
};
alphaTab.rendering.glyphs.VoiceContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","VoiceContainerGlyph"];
alphaTab.rendering.glyphs.VoiceContainerGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.VoiceContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	scaleToWidth: function(width) {
		var force = this.renderer.layoutingInfo.spaceToForce(width);
		this.scaleToForce(force);
	}
	,scaleToForce: function(force) {
		this.width = this.renderer.layoutingInfo.calculateVoiceWidth(force);
		var positions = this.renderer.layoutingInfo.buildOnTimePositions(force);
		var beatGlyphs = this.beatGlyphs;
		var i = 0;
		var j = beatGlyphs.length;
		while(i < j) {
			var currentBeatGlyph = beatGlyphs[i];
			var time = currentBeatGlyph.beat.get_absoluteDisplayStart();
			var tmp = currentBeatGlyph.get_onTimeX();
			currentBeatGlyph.x = positions[time] - tmp;
			if(i > 0) {
				var beatWidth = currentBeatGlyph.x - beatGlyphs[i - 1].x;
				beatGlyphs[i - 1].scaleToWidth(beatWidth);
			}
			if(i == j - 1) {
				var beatWidth1 = this.width - beatGlyphs[beatGlyphs.length - 1].x;
				currentBeatGlyph.scaleToWidth(beatWidth1);
			}
			++i;
		}
	}
	,registerLayoutingInfo: function(info) {
		info.updateVoiceSize(this.width);
		var beatGlyphs = this.beatGlyphs;
		var b = $iterator(beatGlyphs)();
		while(b.hasNext()) {
			var b1 = b.next();
			b1.registerLayoutingInfo(info);
		}
	}
	,applyLayoutingInfo: function(info) {
		var beatGlyphs = this.beatGlyphs;
		var b = $iterator(beatGlyphs)();
		while(b.hasNext()) {
			var b1 = b.next();
			b1.applyLayoutingInfo(info);
		}
		this.scaleToForce(Math.max(this.renderer.get_settings().display.stretchForce,info.minStretchForce));
	}
	,addGlyph: function(g) {
		var bg = js.Boot.__cast(g , alphaTab.rendering.glyphs.BeatContainerGlyph);
		g.x = this.beatGlyphs.length == 0 ? 0 : this.beatGlyphs[this.beatGlyphs.length - 1].x + this.beatGlyphs[this.beatGlyphs.length - 1].width;
		g.renderer = this.renderer;
		g.doLayout();
		this.beatGlyphs.push(bg);
		this.width = g.x + g.width;
		if(bg.beat.get_hasTuplet() && bg.beat.tupletGroup.beats[0].id == bg.beat.id) {
			this.tupletGroups.push(bg.beat.tupletGroup);
		}
	}
	,doLayout: function() {
		this.minWidth = this.width;
	}
	,paint: function(cx,cy,canvas) {
		canvas.set_color(this.voice.index == 0 ? this.renderer.get_resources().mainGlyphColor : this.renderer.get_resources().secondaryGlyphColor);
		var i = 0;
		var j = this.beatGlyphs.length;
		while(i < j) {
			this.beatGlyphs[i].paint(cx + this.x,cy + this.y,canvas);
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.VoiceContainerGlyph
});
alphaTab.rendering.layout._HeaderFooterElements = {};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_ = {};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.__name__ = ["alphaTab","rendering","layout","_HeaderFooterElements","HeaderFooterElements_Impl_"];
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Title";
	case 2:
		return "SubTitle";
	case 4:
		return "Artist";
	case 8:
		return "Album";
	case 16:
		return "Words";
	case 32:
		return "Music";
	case 64:
		return "WordsAndMusic";
	case 128:
		return "Copyright";
	case 256:
		return "PageNumber";
	case 511:
		return "All";
	}
	return "";
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "album":
		return 8;
	case "all":
		return 511;
	case "artist":
		return 4;
	case "copyright":
		return 128;
	case "music":
		return 32;
	case "none":
		return 0;
	case "pagenumber":
		return 256;
	case "subtitle":
		return 2;
	case "title":
		return 1;
	case "words":
		return 16;
	case "wordsandmusic":
		return 64;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo = function() {
	this.width = 0.0;
	this.masterBars = null;
	var this1 = [];
	this.masterBars = this1;
};
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.__name__ = ["alphaTab","rendering","layout","HorizontalScreenLayoutPartialInfo"];
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.prototype = {
	__class__: alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo
};
alphaTab.rendering.staves = {};
alphaTab.rendering.staves.BarLayoutingInfo = function() {
	this._timeSortedSprings = null;
	this._xMin = 0.0;
	this._minTime = 0;
	this._onTimePositionsForce = 0.0;
	this._onTimePositions = null;
	this.version = 0;
	this.preBeatSizes = null;
	this.onBeatSizes = null;
	this.onBeatCenterX = null;
	this.preBeatSize = 0.0;
	this.postBeatSize = 0.0;
	this.voiceSize = 0.0;
	this.minStretchForce = 0.0;
	this.totalSpringConstant = 0.0;
	this.springs = null;
	var this1 = {}
	this.preBeatSizes = this1;
	var this2 = {}
	this.onBeatSizes = this2;
	var this3 = {}
	this.onBeatCenterX = this3;
	this.voiceSize = 0;
	var this4 = {}
	this.springs = this4;
	this.version = 0;
	var this5 = [];
	this._timeSortedSprings = this5;
	this._minTime = 2147483647;
};
alphaTab.rendering.staves.BarLayoutingInfo.__name__ = ["alphaTab","rendering","staves","BarLayoutingInfo"];
alphaTab.rendering.staves.BarLayoutingInfo.prototype = {
	updateVoiceSize: function(size) {
		if(size > this.voiceSize) {
			this.voiceSize = size;
			this.version++;
		}
	}
	,setPreBeatSize: function(beat,size) {
		if(!this.preBeatSizes.hasOwnProperty(beat.index) || this.preBeatSizes[beat.index] < size) {
			this.preBeatSizes[beat.index] = size;
			this.version++;
		}
	}
	,getPreBeatSize: function(beat) {
		if(this.preBeatSizes.hasOwnProperty(beat.index)) {
			return this.preBeatSizes[beat.index];
		}
		return 0;
	}
	,setOnBeatSize: function(beat,size) {
		if(!this.onBeatSizes.hasOwnProperty(beat.index) || this.onBeatSizes[beat.index] < size) {
			this.onBeatSizes[beat.index] = size;
			this.version++;
		}
	}
	,getOnBeatSize: function(beat) {
		if(this.onBeatSizes.hasOwnProperty(beat.index)) {
			return this.onBeatSizes[beat.index];
		}
		return 0;
	}
	,getBeatCenterX: function(beat) {
		if(this.onBeatCenterX.hasOwnProperty(beat.index)) {
			return this.onBeatCenterX[beat.index];
		}
		return 0;
	}
	,setBeatCenterX: function(beat,x) {
		if(!this.onBeatCenterX.hasOwnProperty(beat.index) || this.onBeatCenterX[beat.index] < x) {
			this.onBeatCenterX[beat.index] = x;
			this.version++;
		}
	}
	,updateMinStretchForce: function(force) {
		if(this.minStretchForce < force) {
			this.minStretchForce = force;
			this.version++;
		}
	}
	,addSpring: function(start,duration,preSpringSize,postSpringSize) {
		this.version++;
		var spring;
		if(!this.springs.hasOwnProperty(start)) {
			spring = new alphaTab.rendering.staves.Spring();
			spring.timePosition = start;
			spring.allDurations.push(duration);
			if(this._timeSortedSprings.length > 0) {
				var smallestDuration = duration;
				var previousSpring = this._timeSortedSprings[this._timeSortedSprings.length - 1];
				var prevDuration = $iterator(previousSpring.allDurations)();
				while(prevDuration.hasNext()) {
					var prevDuration1 = prevDuration.next();
					var end = previousSpring.timePosition + prevDuration1;
					if(end >= start && prevDuration1 < smallestDuration) {
						smallestDuration = prevDuration1;
					}
				}
			}
			spring.longestDuration = duration;
			spring.postSpringWidth = postSpringSize;
			spring.preSpringWidth = preSpringSize;
			this.springs[start] = spring;
			var timeSorted = this._timeSortedSprings;
			var insertPos = timeSorted.length - 1;
			while(insertPos > 0 && timeSorted[insertPos].timePosition > start) --insertPos;
			this._timeSortedSprings.splice(insertPos + 1,0,spring);
		} else {
			spring = this.springs[start];
			if(spring.postSpringWidth < postSpringSize) {
				spring.postSpringWidth = postSpringSize;
			}
			if(spring.preSpringWidth < preSpringSize) {
				spring.preSpringWidth = preSpringSize;
			}
			if(duration < spring.smallestDuration) {
				spring.smallestDuration = duration;
			}
			if(duration > spring.longestDuration) {
				spring.longestDuration = duration;
			}
			spring.allDurations.push(duration);
		}
		if(this._minTime > start) {
			this._minTime = start;
		}
		return spring;
	}
	,addBeatSpring: function(beat,preBeatSize,postBeatSize) {
		var start = beat.get_absoluteDisplayStart();
		return this.addSpring(start,beat.displayDuration,preBeatSize,postBeatSize);
	}
	,finish: function() {
		this.calculateSpringConstants();
		this.version++;
	}
	,calculateSpringConstants: function() {
		this._xMin = 0;
		var springs = this.springs;
		var time = $iterator(Object.keys(springs))();
		while(time.hasNext()) {
			var time1 = time.next();
			var spring = springs[time1];
			if(spring.get_springWidth() < this._xMin) {
				this._xMin = spring.get_springWidth();
			}
		}
		var totalSpringConstant = 0;
		var sortedSprings = this._timeSortedSprings;
		var i = 0;
		while(i < sortedSprings.length) {
			var currentSpring = sortedSprings[i];
			var duration;
			if(i == sortedSprings.length - 1) {
				duration = currentSpring.longestDuration;
			} else {
				var nextSpring = sortedSprings[i + 1];
				duration = Math.abs(nextSpring.timePosition - currentSpring.timePosition);
			}
			currentSpring.springConstant = this.calculateSpringConstant(currentSpring,duration);
			totalSpringConstant = totalSpringConstant + 1 / currentSpring.springConstant;
			++i;
		}
		this.totalSpringConstant = 1 / totalSpringConstant;
		var i1 = 0;
		while(i1 < sortedSprings.length) {
			var force = sortedSprings[i1].get_springWidth() * sortedSprings[i1].springConstant;
			this.updateMinStretchForce(force);
			++i1;
		}
	}
	,calculateSpringConstant: function(spring,duration) {
		if(duration <= 0) {
			duration = alphaTab.audio.MidiUtils.toTicks(64);
		}
		if(spring.smallestDuration == 0) {
			spring.smallestDuration = duration;
		}
		var this1 = spring.smallestDuration;
		var minDuration = this1;
		var this2 = 0.6;
		var phi = 1 + this2 * Math.log2(duration / js.Boot.__cast(30 , Float));
		return minDuration / duration * (1 / (phi * 10));
	}
	,spaceToForce: function(space) {
		return space * this.totalSpringConstant;
	}
	,calculateVoiceWidth: function(force) {
		return this.calculateWidth(force,this.totalSpringConstant);
	}
	,calculateWidth: function(force,springConstant) {
		return force / springConstant;
	}
	,buildOnTimePositions: function(force) {
		if(Math.abs(this._onTimePositionsForce - force) < 0.00001 && this._onTimePositions != null) {
			return this._onTimePositions;
		}
		this._onTimePositionsForce = force;
		var this1 = {}
		var positions = this._onTimePositions = this1;
		var sortedSprings = this._timeSortedSprings;
		if(sortedSprings.length == 0) {
			return positions;
		}
		var springX = sortedSprings[0].preSpringWidth;
		var i = 0;
		while(i < sortedSprings.length) {
			positions[sortedSprings[i].timePosition] = springX;
			springX = springX + this.calculateWidth(force,sortedSprings[i].springConstant);
			++i;
		}
		return positions;
	}
	,__class__: alphaTab.rendering.staves.BarLayoutingInfo
};
alphaTab.rendering.staves.MasterBarsRenderers = function() {
	this.width = 0.0;
	this.isLinkedToPrevious = false;
	this.canWrap = false;
	this.masterBar = null;
	this.renderers = null;
	this.layoutingInfo = null;
	var this1 = [];
	this.renderers = this1;
	this.canWrap = true;
};
alphaTab.rendering.staves.MasterBarsRenderers.__name__ = ["alphaTab","rendering","staves","MasterBarsRenderers"];
alphaTab.rendering.staves.MasterBarsRenderers.prototype = {
	__class__: alphaTab.rendering.staves.MasterBarsRenderers
};
alphaTab.rendering.staves.Spring = function() {
	this.timePosition = 0;
	this.longestDuration = 0;
	this.smallestDuration = 0;
	this.force = 0.0;
	this.springConstant = 0.0;
	this.preSpringWidth = 0.0;
	this.postSpringWidth = 0.0;
	this.allDurations = null;
	var this1 = [];
	this.allDurations = this1;
};
alphaTab.rendering.staves.Spring.__name__ = ["alphaTab","rendering","staves","Spring"];
alphaTab.rendering.staves.Spring.prototype = {
	get_springWidth: function() {
		return this.preSpringWidth + this.postSpringWidth;
	}
	,__class__: alphaTab.rendering.staves.Spring
};
alphaTab.rendering.staves.Staff = function(trackIndex,staff,factory) {
	this._factory = null;
	this._sharedLayoutData = null;
	this.staveTrackGroup = null;
	this.staveGroup = null;
	this.barRenderers = null;
	this.x = 0.0;
	this.y = 0.0;
	this.height = 0.0;
	this.index = 0;
	this.staffIndex = 0;
	this.trackIndex = 0;
	this.modelStaff = null;
	this.staveTop = 0.0;
	this.topSpacing = 0.0;
	this.bottomSpacing = 0.0;
	this.staveBottom = 0.0;
	this.isFirstInAccolade = false;
	this.isLastInAccolade = false;
	var this1 = [];
	this.barRenderers = this1;
	this.trackIndex = trackIndex;
	this.modelStaff = staff;
	this._factory = factory;
	this.topSpacing = 20;
	this.bottomSpacing = 5;
	this.staveTop = 0;
	this.staveBottom = 0;
	var this2 = {}
	this._sharedLayoutData = this2;
};
alphaTab.rendering.staves.Staff.__name__ = ["alphaTab","rendering","staves","Staff"];
alphaTab.rendering.staves.Staff.prototype = {
	get_staveId: function() {
		return this._factory.get_staffId();
	}
	,getSharedLayoutData: function(key,def) {
		if(this._sharedLayoutData.hasOwnProperty(key)) {
			return this._sharedLayoutData[key];
		}
		return def;
	}
	,setSharedLayoutData: function(key,def) {
		this._sharedLayoutData[key] = def;
	}
	,get_isInAccolade: function() {
		return this._factory.isInAccolade;
	}
	,get_isRelevantForBoundsLookup: function() {
		return this._factory.isRelevantForBoundsLookup;
	}
	,registerStaffTop: function(offset) {
		this.staveTop = offset;
	}
	,registerStaffBottom: function(offset) {
		this.staveBottom = offset;
	}
	,addBarRenderer: function(renderer) {
		renderer.staff = this;
		renderer.index = this.barRenderers.length;
		renderer.reLayout();
		this.barRenderers.push(renderer);
		this.staveGroup.layout.registerBarRenderer(this.get_staveId(),renderer);
	}
	,addBar: function(bar,layoutingInfo) {
		var renderer;
		if(bar == null) {
			renderer = new alphaTab.rendering.BarRendererBase(this.staveGroup.layout.renderer,bar);
		} else {
			renderer = this._factory.create(this.staveGroup.layout.renderer,bar);
		}
		renderer.staff = this;
		renderer.index = this.barRenderers.length;
		renderer.layoutingInfo = layoutingInfo;
		renderer.doLayout();
		renderer.registerLayoutingInfo();
		this.barRenderers.push(renderer);
		if(bar != null) {
			this.staveGroup.layout.registerBarRenderer(this.get_staveId(),renderer);
		}
	}
	,revertLastBar: function() {
		var lastBar = this.barRenderers[this.barRenderers.length - 1];
		var index = this.barRenderers.length - 1;
		if(index != -1) {
			this.barRenderers.splice(index,1);
		}
		this.staveGroup.layout.unregisterBarRenderer(this.get_staveId(),lastBar);
		return lastBar;
	}
	,scaleToWidth: function(width) {
		var this1 = {}
		this._sharedLayoutData = this1;
		var difference = width - this.staveGroup.width;
		var spacePerBar = difference / this.barRenderers.length;
		var i = 0;
		var j = this.barRenderers.length;
		while(i < j) {
			this.barRenderers[i].scaleToWidth(this.barRenderers[i].width + spacePerBar);
			++i;
		}
	}
	,get_topOverflow: function() {
		var m = 0;
		var i = 0;
		var j = this.barRenderers.length;
		while(i < j) {
			var r = this.barRenderers[i];
			if(r.topOverflow > m) {
				m = r.topOverflow;
			}
			++i;
		}
		return m;
	}
	,get_bottomOverflow: function() {
		var m = 0;
		var i = 0;
		var j = this.barRenderers.length;
		while(i < j) {
			var r = this.barRenderers[i];
			if(r.bottomOverflow > m) {
				m = r.bottomOverflow;
			}
			++i;
		}
		return m;
	}
	,finalizeStaff: function() {
		var x = 0;
		this.height = 0;
		var topOverflow = this.get_topOverflow();
		var bottomOverflow = this.get_bottomOverflow();
		var i = 0;
		while(i < this.barRenderers.length) {
			this.barRenderers[i].x = x;
			this.barRenderers[i].y = this.topSpacing + topOverflow;
			this.height = Math.max(this.height,this.barRenderers[i].height);
			this.barRenderers[i].finalizeRenderer();
			x = x + this.barRenderers[i].width;
			++i;
		}
		if(this.height > 0) {
			this.height = this.height + (this.topSpacing + topOverflow + bottomOverflow + this.bottomSpacing);
		}
	}
	,paint: function(cx,cy,canvas,startIndex,count) {
		if(this.height == 0 || count == 0) {
			return;
		}
		var i = startIndex;
		var j = Math.min(startIndex + count,this.barRenderers.length);
		while(i < j) {
			this.barRenderers[i].paint(cx + this.x,cy + this.y,canvas);
			++i;
		}
	}
	,__class__: alphaTab.rendering.staves.Staff
};
alphaTab.rendering.staves.StaveGroup = function() {
	this._allStaves = null;
	this._firstStaffInAccolade = null;
	this._lastStaffInAccolade = null;
	this.x = 0.0;
	this.y = 0.0;
	this.index = 0;
	this._accoladeSpacingCalculated = false;
	this.accoladeSpacing = 0.0;
	this.isFull = false;
	this.width = 0.0;
	this.isLast = false;
	this.masterBarsRenderers = null;
	this.staves = null;
	this.layout = null;
	var this1 = [];
	this.masterBarsRenderers = this1;
	var this2 = [];
	this.staves = this2;
	var this3 = [];
	this._allStaves = this3;
	this.width = 0;
	this.index = 0;
	this._accoladeSpacingCalculated = false;
	this.accoladeSpacing = 0;
};
alphaTab.rendering.staves.StaveGroup.__name__ = ["alphaTab","rendering","staves","StaveGroup"];
alphaTab.rendering.staves.StaveGroup.prototype = {
	get_firstBarIndex: function() {
		return this.masterBarsRenderers[0].masterBar.index;
	}
	,get_lastBarIndex: function() {
		return this.masterBarsRenderers[this.masterBarsRenderers.length - 1].masterBar.index;
	}
	,addMasterBarRenderers: function(tracks,renderers) {
		if(tracks.length == 0) {
			return null;
		}
		this.masterBarsRenderers.push(renderers);
		this.calculateAccoladeSpacing(tracks);
		renderers.layoutingInfo.preBeatSize = 0;
		var src = 0;
		var i = 0;
		var j = this.staves.length;
		while(i < j) {
			var g = this.staves[i];
			var k = 0;
			var l = g.staves.length;
			while(k < l) {
				var s = g.staves[k];
				var renderer = renderers.renderers[src++];
				s.addBarRenderer(renderer);
				++k;
			}
			++i;
		}
		this.updateWidth();
		return renderers;
	}
	,addBars: function(tracks,barIndex) {
		if(tracks.length == 0) {
			return null;
		}
		var result = new alphaTab.rendering.staves.MasterBarsRenderers();
		result.layoutingInfo = new alphaTab.rendering.staves.BarLayoutingInfo();
		result.masterBar = tracks[0].score.masterBars[barIndex];
		this.masterBarsRenderers.push(result);
		this.calculateAccoladeSpacing(tracks);
		var barLayoutingInfo = result.layoutingInfo;
		var g = $iterator(this.staves)();
		while(g.hasNext()) {
			var g1 = g.next();
			var s = $iterator(g1.staves)();
			while(s.hasNext()) {
				var s1 = s.next();
				var bar = g1.track.staves[s1.modelStaff.index].bars[barIndex];
				s1.addBar(bar,barLayoutingInfo);
				var renderer = s1.barRenderers[s1.barRenderers.length - 1];
				result.renderers.push(renderer);
				if(renderer.isLinkedToPrevious) {
					result.isLinkedToPrevious = true;
				}
				if(!renderer.canWrap) {
					result.canWrap = false;
				}
			}
		}
		barLayoutingInfo.finish();
		result.width = this.updateWidth();
		return result;
	}
	,revertLastBar: function() {
		if(this.masterBarsRenderers.length > 1) {
			var toRemove = this.masterBarsRenderers[this.masterBarsRenderers.length - 1];
			var index = this.masterBarsRenderers.length - 1;
			if(index != -1) {
				this.masterBarsRenderers.splice(index,1);
			}
			var w = 0;
			var i = 0;
			var j = this._allStaves.length;
			while(i < j) {
				var s = this._allStaves[i];
				var lastBar = s.revertLastBar();
				w = Math.max(w,lastBar.width);
				++i;
			}
			this.width = this.width - w;
			return toRemove;
		}
		return null;
	}
	,updateWidth: function() {
		var realWidth = 0;
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			var s = this._allStaves[i];
			s.barRenderers[s.barRenderers.length - 1].applyLayoutingInfo();
			if(s.barRenderers[s.barRenderers.length - 1].width > realWidth) {
				realWidth = s.barRenderers[s.barRenderers.length - 1].width;
			}
			++i;
		}
		this.width = this.width + realWidth;
		return realWidth;
	}
	,calculateAccoladeSpacing: function(tracks) {
		if(!this._accoladeSpacingCalculated && this.index == 0) {
			this._accoladeSpacingCalculated = true;
			if(this.layout.renderer.settings.notation.hideTrackNames) {
				this.accoladeSpacing = 0;
			} else {
				var canvas = this.layout.renderer.canvas;
				var res = this.layout.renderer.settings.display.resources.effectFont;
				canvas.set_font(res);
				var t = HxOverrides.iter(tracks);
				while(t.hasNext()) {
					var t1 = t.next();
					var this1 = Math.max(this.accoladeSpacing,canvas.measureText(t1.shortName));
					this.accoladeSpacing = js.Boot.__cast(Math.ceil(this1) , Float);
				}
				this.accoladeSpacing = this.accoladeSpacing + 2 * 10;
				this.width = this.width + this.accoladeSpacing;
			}
		}
	}
	,getStaveTrackGroup: function(track) {
		var i = 0;
		var j = this.staves.length;
		while(i < j) {
			var g = this.staves[i];
			if(g.track == track) {
				return g;
			}
			++i;
		}
		return null;
	}
	,addStaff: function(track,staff) {
		var group = this.getStaveTrackGroup(track);
		if(group == null) {
			group = new alphaTab.rendering.staves.StaveTrackGroup(this,track);
			this.staves.push(group);
		}
		staff.staveTrackGroup = group;
		staff.staveGroup = this;
		staff.index = this._allStaves.length;
		this._allStaves.push(staff);
		group.addStaff(staff);
		if(staff.get_isInAccolade()) {
			if(this._firstStaffInAccolade == null) {
				this._firstStaffInAccolade = staff;
				staff.isFirstInAccolade = true;
			}
			if(group.firstStaffInAccolade == null) {
				group.firstStaffInAccolade = staff;
			}
			if(this._lastStaffInAccolade == null) {
				this._lastStaffInAccolade = staff;
				staff.isLastInAccolade = true;
			}
			if(this._lastStaffInAccolade != null) {
				this._lastStaffInAccolade.isLastInAccolade = false;
			}
			this._lastStaffInAccolade = staff;
			this._lastStaffInAccolade.isLastInAccolade = true;
			group.lastStaffInAccolade = staff;
		}
	}
	,get_height: function() {
		return this._allStaves[this._allStaves.length - 1].y + this._allStaves[this._allStaves.length - 1].height;
	}
	,scaleToWidth: function(width) {
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			this._allStaves[i].scaleToWidth(width);
			++i;
		}
		this.width = width;
	}
	,paint: function(cx,cy,canvas) {
		this.paintPartial(cx + this.x,cy + this.y,canvas,0,this.masterBarsRenderers.length);
	}
	,paintPartial: function(cx,cy,canvas,startIndex,count) {
		this.buildBoundingsLookup(cx,cy);
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			this._allStaves[i].paint(cx,cy,canvas,startIndex,count);
			++i;
		}
		var res = this.layout.renderer.settings.display.resources;
		if(this.staves.length > 0 && startIndex == 0) {
			canvas.set_color(res.barSeparatorColor);
			if(this._firstStaffInAccolade != null && this._lastStaffInAccolade != null) {
				var firstStart = cy + this._firstStaffInAccolade.y + this._firstStaffInAccolade.staveTop + this._firstStaffInAccolade.topSpacing + this._firstStaffInAccolade.get_topOverflow();
				var lastEnd = cy + this._lastStaffInAccolade.y + this._lastStaffInAccolade.topSpacing + this._lastStaffInAccolade.get_topOverflow() + this._lastStaffInAccolade.staveBottom;
				var acooladeX = cx + this._firstStaffInAccolade.x;
				canvas.beginPath();
				canvas.moveTo(acooladeX,firstStart);
				canvas.lineTo(acooladeX,lastEnd);
				canvas.stroke();
			}
			canvas.set_font(res.effectFont);
			var i1 = 0;
			var j1 = this.staves.length;
			while(i1 < j1) {
				var g = this.staves[i1];
				if(g.firstStaffInAccolade != null && g.lastStaffInAccolade != null) {
					var firstStart1 = cy + g.firstStaffInAccolade.y + g.firstStaffInAccolade.staveTop + g.firstStaffInAccolade.topSpacing + g.firstStaffInAccolade.get_topOverflow();
					var lastEnd1 = cy + g.lastStaffInAccolade.y + g.lastStaffInAccolade.topSpacing + g.lastStaffInAccolade.get_topOverflow() + g.lastStaffInAccolade.staveBottom;
					var acooladeX1 = cx + g.firstStaffInAccolade.x;
					var barSize = 3 * this.layout.renderer.settings.display.scale;
					var barOffset = barSize;
					var accoladeStart = firstStart1 - barSize * 4;
					var accoladeEnd = lastEnd1 + barSize * 4;
					if(this.index == 0 && !this.layout.renderer.settings.notation.hideTrackNames) {
						canvas.fillText(g.track.shortName,cx + 10 * this.layout.get_scale(),firstStart1);
					}
					canvas.fillRect(acooladeX1 - barOffset - barSize,accoladeStart,barSize,accoladeEnd - accoladeStart);
					var spikeStartX = acooladeX1 - barOffset - barSize;
					var spikeEndX = acooladeX1 + barSize * 2;
					canvas.beginPath();
					canvas.moveTo(spikeStartX,accoladeStart);
					canvas.bezierCurveTo(spikeStartX,accoladeStart,spikeStartX,accoladeStart,spikeEndX,accoladeStart - barSize);
					canvas.bezierCurveTo(acooladeX1,accoladeStart + barSize,spikeStartX,accoladeStart + barSize,spikeStartX,accoladeStart + barSize);
					canvas.closePath();
					canvas.fill();
					canvas.beginPath();
					canvas.moveTo(spikeStartX,accoladeEnd);
					canvas.bezierCurveTo(spikeStartX,accoladeEnd,acooladeX1,accoladeEnd,spikeEndX,accoladeEnd + barSize);
					canvas.bezierCurveTo(acooladeX1,accoladeEnd - barSize,spikeStartX,accoladeEnd - barSize,spikeStartX,accoladeEnd - barSize);
					canvas.closePath();
					canvas.fill();
				}
				++i1;
			}
		}
	}
	,finalizeGroup: function() {
		var currentY = 0;
		var staff = $iterator(this._allStaves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.x = this.accoladeSpacing;
			staff1.y = currentY;
			staff1.finalizeStaff();
			currentY = currentY + staff1.height;
		}
	}
	,buildBoundingsLookup: function(cx,cy) {
		var _gthis = this;
		if(this.layout.renderer.get_boundsLookup().isFinished) {
			return;
		}
		if(this._firstStaffInAccolade == null || this._lastStaffInAccolade == null) {
			return;
		}
		var lastStaff = this._allStaves[this._allStaves.length - 1];
		var visualTop = cy + this.y + this._firstStaffInAccolade.y;
		var visualBottom = cy + this.y + this._lastStaffInAccolade.y + this._lastStaffInAccolade.height;
		var realTop = cy + this.y + this._allStaves[0].y;
		var realBottom = cy + this.y + lastStaff.y + lastStaff.height;
		var lineTop = cy + this.y + this._firstStaffInAccolade.y + this._firstStaffInAccolade.topSpacing + this._firstStaffInAccolade.get_topOverflow() + (this._firstStaffInAccolade.barRenderers.length > 0 ? this._firstStaffInAccolade.barRenderers[0].topPadding : 0);
		var lineBottom = cy + this.y + lastStaff.y + lastStaff.height - lastStaff.bottomSpacing - lastStaff.get_bottomOverflow() - (lastStaff.barRenderers.length > 0 ? lastStaff.barRenderers[0].bottomPadding : 0);
		var visualHeight = visualBottom - visualTop;
		var lineHeight = lineBottom - lineTop;
		var realHeight = realBottom - realTop;
		var x = this.x + this._firstStaffInAccolade.x;
		var staveGroupBounds = new alphaTab.rendering.utils.StaveGroupBounds();
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.x = cx;
		_tmp.y = cy + _gthis.y;
		_tmp.w = _gthis.width;
		_tmp.h = _gthis.get_height();
		staveGroupBounds.visualBounds = _tmp;
		var _tmp1 = new alphaTab.rendering.utils.Bounds();
		_tmp1.x = cx;
		_tmp1.y = cy + _gthis.y;
		_tmp1.w = _gthis.width;
		_tmp1.h = _gthis.get_height();
		staveGroupBounds.realBounds = _tmp1;
		this.layout.renderer.get_boundsLookup().addStaveGroup(staveGroupBounds);
		var this1 = {}
		var masterBarBoundsLookup = this1;
		var i = 0;
		while(i < this.staves.length) {
			var staff = $iterator(this.staves[i].stavesRelevantForBoundsLookup)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				var renderer = $iterator(staff1.barRenderers)();
				while(renderer.hasNext()) {
					var renderer1 = renderer.next();
					var masterBarBounds;
					var key = renderer1.bar.get_masterBar().index;
					if(!masterBarBoundsLookup.hasOwnProperty(key)) {
						masterBarBounds = new alphaTab.rendering.utils.MasterBarBounds();
						masterBarBounds.index = renderer1.bar.get_masterBar().index;
						masterBarBounds.isFirstOfLine = renderer1.get_isFirstOfLine();
						var _tmp2 = new alphaTab.rendering.utils.Bounds();
						_tmp2.x = x + renderer1.x;
						_tmp2.y = realTop;
						_tmp2.w = renderer1.width;
						_tmp2.h = realHeight;
						masterBarBounds.realBounds = _tmp2;
						var _tmp3 = new alphaTab.rendering.utils.Bounds();
						_tmp3.x = x + renderer1.x;
						_tmp3.y = visualTop;
						_tmp3.w = renderer1.width;
						_tmp3.h = visualHeight;
						masterBarBounds.visualBounds = _tmp3;
						var _tmp4 = new alphaTab.rendering.utils.Bounds();
						_tmp4.x = x + renderer1.x;
						_tmp4.y = lineTop;
						_tmp4.w = renderer1.width;
						_tmp4.h = lineHeight;
						masterBarBounds.lineAlignedBounds = _tmp4;
						this.layout.renderer.get_boundsLookup().addMasterBar(masterBarBounds);
						masterBarBoundsLookup[masterBarBounds.index] = masterBarBounds;
					} else {
						masterBarBounds = masterBarBoundsLookup[renderer1.bar.get_masterBar().index];
					}
					renderer1.buildBoundingsLookup(masterBarBounds,x,cy + this.y + staff1.y);
				}
			}
			++i;
		}
	}
	,getBarX: function(index) {
		if(this._firstStaffInAccolade == null || this.layout.renderer.tracks.length == 0) {
			return 0;
		}
		var bar = this.layout.renderer.tracks[0].staves[0].bars[index];
		var renderer = this.layout.getRendererForBar(this._firstStaffInAccolade.get_staveId(),bar);
		return renderer.x;
	}
	,__class__: alphaTab.rendering.staves.StaveGroup
};
alphaTab.rendering.staves.StaveTrackGroup = function(staveGroup,track) {
	this.track = null;
	this.staveGroup = null;
	this.staves = null;
	this.stavesRelevantForBoundsLookup = null;
	this.firstStaffInAccolade = null;
	this.lastStaffInAccolade = null;
	this.staveGroup = staveGroup;
	this.track = track;
	var this1 = [];
	this.staves = this1;
	var this2 = [];
	this.stavesRelevantForBoundsLookup = this2;
};
alphaTab.rendering.staves.StaveTrackGroup.__name__ = ["alphaTab","rendering","staves","StaveTrackGroup"];
alphaTab.rendering.staves.StaveTrackGroup.prototype = {
	addStaff: function(staff) {
		this.staves.push(staff);
		if(staff.get_isRelevantForBoundsLookup()) {
			this.stavesRelevantForBoundsLookup.push(staff);
		}
	}
	,__class__: alphaTab.rendering.staves.StaveTrackGroup
};
alphaTab.rendering.utils.AccidentalHelper = function(bar) {
	this._bar = null;
	this._registeredAccidentals = null;
	this._appliedScoreLines = null;
	this._appliedScoreLinesByValue = null;
	this._notesByValue = null;
	this.maxNoteValueBeat = null;
	this.minNoteValueBeat = null;
	this.maxNoteValue = 0;
	this.minNoteValue = 0;
	this._bar = bar;
	var this1 = {}
	this._registeredAccidentals = this1;
	var this2 = {}
	this._appliedScoreLines = this2;
	var this3 = {}
	this._appliedScoreLinesByValue = this3;
	var this4 = {}
	this._notesByValue = this4;
	this.maxNoteValue = -1;
	this.minNoteValue = -1;
};
alphaTab.rendering.utils.AccidentalHelper.__name__ = ["alphaTab","rendering","utils","AccidentalHelper"];
alphaTab.rendering.utils.AccidentalHelper.prototype = {
	applyAccidental: function(note) {
		var staff = this._bar.staff;
		var noteValue = staff.isPercussion ? alphaTab.rendering.utils.PercussionMapper.mapNoteForDisplay(note.get_displayValue()) : note.get_displayValue();
		var quarterBend = note.get_hasQuarterToneOffset();
		var line = this.registerNoteLine(note,noteValue);
		if(this.minNoteValue == -1 || noteValue < this.minNoteValue) {
			this.minNoteValue = noteValue;
			this.minNoteValueBeat = note.beat;
		}
		if(this.maxNoteValue == -1 || noteValue > this.maxNoteValue) {
			this.maxNoteValue = noteValue;
			this.maxNoteValueBeat = note.beat;
		}
		return this.getAccidental(line,noteValue,quarterBend);
	}
	,applyAccidentalForValue: function(relatedBeat,noteValue,quarterBend) {
		var staff = this._bar.staff;
		if(staff.isPercussion) {
			noteValue = alphaTab.rendering.utils.PercussionMapper.mapNoteForDisplay(noteValue);
		}
		var line = this.registerNoteValueLine(noteValue);
		if(this.minNoteValue == -1 || noteValue < this.minNoteValue) {
			this.minNoteValue = noteValue;
			this.minNoteValueBeat = relatedBeat;
		}
		if(this.maxNoteValue == -1 || noteValue > this.maxNoteValue) {
			this.maxNoteValue = noteValue;
			this.maxNoteValueBeat = relatedBeat;
		}
		return this.getAccidental(line,noteValue,quarterBend);
	}
	,getAccidental: function(line,noteValue,quarterBend) {
		var accidentalToSet = 0;
		if(!this._bar.staff.isPercussion) {
			var ks = this._bar.get_masterBar().keySignature;
			var ksi = ks + 7;
			var index = noteValue % 12;
			var keySignatureAccidental = ksi < 7 ? 3 : 2;
			var hasNoteAccidentalForKeySignature = alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup[ksi][index];
			var isAccidentalNote = alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes[index];
			if(quarterBend) {
				if(isAccidentalNote) {
					accidentalToSet = keySignatureAccidental;
				} else {
					accidentalToSet = 1;
				}
			} else {
				var isAccidentalRegistered = this._registeredAccidentals.hasOwnProperty(line);
				if(hasNoteAccidentalForKeySignature != isAccidentalNote && !isAccidentalRegistered) {
					this._registeredAccidentals[line] = true;
					if(isAccidentalNote) {
						accidentalToSet = keySignatureAccidental;
					} else {
						accidentalToSet = 1;
					}
				} else if(hasNoteAccidentalForKeySignature == isAccidentalNote && isAccidentalRegistered) {
					var this1 = this._registeredAccidentals;
					delete this1[line];
					if(isAccidentalNote) {
						accidentalToSet = keySignatureAccidental;
					} else {
						accidentalToSet = 1;
					}
				}
			}
		}
		if(quarterBend) {
			switch(accidentalToSet) {
			case 1:
				return 4;
			case 2:
				return 5;
			case 3:
				return 6;
			default:
			}
		}
		return accidentalToSet;
	}
	,registerNoteLine: function(n,noteValue) {
		var steps = this.calculateNoteLine(noteValue,n.accidentalMode);
		this._appliedScoreLines[n.id] = steps;
		this._notesByValue[noteValue] = n;
		return steps;
	}
	,registerNoteValueLine: function(noteValue) {
		var steps = this.calculateNoteLine(noteValue,0);
		this._appliedScoreLinesByValue[noteValue] = steps;
		return steps;
	}
	,calculateNoteLine: function(noteValue,mode) {
		var value = noteValue;
		var ks = this._bar.get_masterBar().keySignature;
		var clef = this._bar.clef;
		var index = value % 12;
		var octave = (value / 12 | 0) - 1;
		var steps = alphaTab.rendering.utils.AccidentalHelper.OctaveSteps[clef];
		steps = steps - octave * 7;
		var stepList = alphaTab.model.ModelUtils.keySignatureIsSharp(ks) || alphaTab.model.ModelUtils.keySignatureIsNatural(ks) ? alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps : alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps;
		steps = steps - stepList[index];
		return steps;
	}
	,getNoteLine: function(n) {
		return this._appliedScoreLines[n.id];
	}
	,getNoteLineForValue: function(rawValue,searchForNote) {
		if(searchForNote == null) {
			searchForNote = false;
		}
		if(this._appliedScoreLinesByValue.hasOwnProperty(rawValue)) {
			return this._appliedScoreLinesByValue[rawValue];
		}
		if(searchForNote && this._notesByValue.hasOwnProperty(rawValue)) {
			return this.getNoteLine(this._notesByValue[rawValue]);
		}
		return 0;
	}
	,__class__: alphaTab.rendering.utils.AccidentalHelper
};
alphaTab.rendering.utils.BarBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["BarBounds"] = function() {
	this.masterBarBounds = null;
	this.visualBounds = null;
	this.realBounds = null;
	this.bar = null;
	this.beats = null;
	var this1 = [];
	this.beats = this1;
};
alphaTab.rendering.utils.BarBounds.__name__ = ["alphaTab","rendering","utils","BarBounds"];
alphaTab.rendering.utils.BarBounds.prototype = {
	addBeat: function(bounds) {
		bounds.barBounds = this;
		this.beats.push(bounds);
		this.masterBarBounds.addBeat(bounds);
	}
	,findBeatAtPos: function(x) {
		var beat = null;
		var t = $iterator(this.beats)();
		while(t.hasNext()) {
			var t1 = t.next();
			if(beat == null || t1.realBounds.x < x) {
				beat = t1;
			} else if(t1.realBounds.x > x) {
				break;
			}
		}
		return beat;
	}
	,__class__: alphaTab.rendering.utils.BarBounds
};
alphaTab.rendering.utils.BarHelpers = function(bar) {
	this.beamHelpers = null;
	this.beamHelperLookup = null;
	var this1 = [];
	this.beamHelpers = this1;
	var this2 = [];
	this.beamHelperLookup = this2;
	var currentBeamHelper = null;
	var currentGraceBeamHelper = null;
	if(bar != null) {
		var i = 0;
		var j = bar.voices.length;
		while(i < j) {
			var v = bar.voices[i];
			var this3 = this.beamHelpers;
			var this4 = [];
			this3.push(this4);
			var this5 = this.beamHelperLookup;
			var this6 = {}
			this5.push(this6);
			var k = 0;
			var l = v.beats.length;
			while(k < l) {
				var b = v.beats[k];
				var helperForBeat;
				if(b.graceType != 0) {
					helperForBeat = currentGraceBeamHelper;
				} else {
					helperForBeat = currentBeamHelper;
					currentGraceBeamHelper = null;
				}
				if(!b.get_isRest()) {
					if(helperForBeat == null || !helperForBeat.checkBeat(b)) {
						if(helperForBeat != null) {
							helperForBeat.finish();
						}
						helperForBeat = new alphaTab.rendering.utils.BeamingHelper(bar.staff);
						helperForBeat.checkBeat(b);
						if(b.graceType != 0) {
							currentGraceBeamHelper = helperForBeat;
						} else {
							currentBeamHelper = helperForBeat;
						}
						this.beamHelpers[v.index].push(helperForBeat);
					}
				}
				this.beamHelperLookup[v.index][b.index] = helperForBeat;
				++k;
			}
			if(currentBeamHelper != null) {
				currentBeamHelper.finish();
			}
			if(currentGraceBeamHelper != null) {
				currentGraceBeamHelper.finish();
			}
			currentBeamHelper = null;
			currentGraceBeamHelper = null;
			++i;
		}
	}
};
alphaTab.rendering.utils.BarHelpers.__name__ = ["alphaTab","rendering","utils","BarHelpers"];
alphaTab.rendering.utils.BarHelpers.prototype = {
	getBeamingHelperForBeat: function(beat) {
		return this.beamHelperLookup[beat.voice.index][beat.index];
	}
	,__class__: alphaTab.rendering.utils.BarHelpers
};
alphaTab.rendering.utils._BeamDirection = {};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_ = {};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.__name__ = ["alphaTab","rendering","utils","_BeamDirection","BeamDirection_Impl_"];
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Up";
	case 1:
		return "Down";
	}
	return "";
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "down":
		return 1;
	case "up":
		return 0;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.rendering.utils.BeamingHelper = function(staff) {
	this._staff = null;
	this._beatLineXPositions = null;
	this.voice = null;
	this.beats = null;
	this.shortestDuration = -4;
	this.fingeringCount = 0;
	this.hasTuplet = false;
	this.firstMinNoteValue = 0;
	this.firstMaxNoteValue = 0;
	this.lastMinNoteValue = 0;
	this.lastMaxNoteValue = 0;
	this.minNoteValue = 0;
	this.minNoteBeat = null;
	this.maxNoteValue = 0;
	this.maxNoteBeat = null;
	this.invertBeamDirection = false;
	this.isGrace = false;
	this.direction = 0;
	this._staff = staff;
	var this1 = [];
	this.beats = this1;
	var this2 = {}
	this._beatLineXPositions = this2;
	this.shortestDuration = -4;
	this.maxNoteValue = -2147483648;
	this.minNoteValue = -2147483648;
	this.firstMinNoteValue = -2147483648;
	this.firstMaxNoteValue = -2147483648;
	this.lastMinNoteValue = -2147483648;
	this.lastMaxNoteValue = -2147483648;
};
alphaTab.rendering.utils.BeamingHelper.__name__ = ["alphaTab","rendering","utils","BeamingHelper"];
alphaTab.rendering.utils.BeamingHelper.canJoin = function(b1,b2) {
	if(b1 == null || b2 == null || b1.get_isRest() || b2.get_isRest() || b1.graceType != b2.graceType || b1.graceType == 3 || b2.graceType == 3) {
		return false;
	}
	if(b1.graceType != 0 && b2.graceType != 0) {
		return true;
	}
	var m1 = b1.voice.bar;
	var m2 = b1.voice.bar;
	if(m1 != m2) {
		return false;
	}
	var start1 = b1.playbackStart;
	var start2 = b2.playbackStart;
	if(!alphaTab.rendering.utils.BeamingHelper.canJoinDuration(b1.duration) || !alphaTab.rendering.utils.BeamingHelper.canJoinDuration(b2.duration)) {
		return start1 == start2;
	}
	if(b1.tupletGroup != b2.tupletGroup) {
		return false;
	}
	if(b1.get_hasTuplet() && b2.get_hasTuplet()) {
		if(b1.tupletGroup == b2.tupletGroup && b1.tupletGroup.isFull) {
			return true;
		}
	}
	var divisionLength = 960;
	var _g = m1.get_masterBar().timeSignatureDenominator;
	if(_g == 8) {
		if(m1.get_masterBar().timeSignatureNumerator % 3 == 0) {
			divisionLength = divisionLength + (960 / 2 | 0);
		}
	}
	var division1 = (divisionLength + start1) / divisionLength | 0 | 0;
	var division2 = (divisionLength + start2) / divisionLength | 0 | 0;
	return division1 == division2;
};
alphaTab.rendering.utils.BeamingHelper.canJoinDuration = function(d) {
	switch(d) {
	case 1:case 2:case 4:
		return false;
	default:
		return true;
	}
};
alphaTab.rendering.utils.BeamingHelper.isFullBarJoin = function(a,b,barIndex) {
	if(alphaTab.model.ModelUtils.getIndex(a.duration) - 2 - barIndex > 0) {
		return alphaTab.model.ModelUtils.getIndex(b.duration) - 2 - barIndex > 0;
	} else {
		return false;
	}
};
alphaTab.rendering.utils.BeamingHelper.prototype = {
	getValue: function(n) {
		if(this._staff.isPercussion) {
			return alphaTab.rendering.utils.PercussionMapper.mapNoteForDisplay(n.get_displayValue());
		}
		return n.get_displayValue();
	}
	,getMaxValue: function(n) {
		var value = this.getValue(n);
		if(n.harmonicType != 0 && n.harmonicType != 1) {
			value = n.get_realValue() - this._staff.displayTranspositionPitch;
		}
		return value;
	}
	,getMinValue: function(n) {
		var value = this.getValue(n);
		return value;
	}
	,getBeatLineX: function(beat) {
		if(this.hasBeatLineX(beat)) {
			if(this.direction == 0) {
				var this1 = system.Convert.toInt32_Single(this._beatLineXPositions[beat.index].up);
				return this1;
			}
			var this2 = system.Convert.toInt32_Single(this._beatLineXPositions[beat.index].down);
			return this2;
		}
		return 0;
	}
	,hasBeatLineX: function(beat) {
		return this._beatLineXPositions.hasOwnProperty(beat.index);
	}
	,registerBeatLineX: function(staffId,beat,up,down) {
		var positions = this.getOrCreateBeatPositions(beat);
		positions.staffId = staffId;
		positions.up = up;
		positions.down = down;
	}
	,getOrCreateBeatPositions: function(beat) {
		if(this._beatLineXPositions.hasOwnProperty(beat.index)) {
			return this._beatLineXPositions[beat.index];
		} else {
			return this._beatLineXPositions[beat.index] = new alphaTab.rendering.utils.BeatLinePositions();
		}
	}
	,finish: function() {
		this.direction = this.calculateDirection();
	}
	,calculateDirection: function() {
		if(this.voice.index > 0) {
			return this.invert(1);
		}
		if(this.voice.bar.voices.length > 1) {
			var v = 1;
			while(v < this.voice.bar.voices.length) {
				if(!this.voice.bar.voices[v].isEmpty) {
					return this.invert(0);
				}
				++v;
			}
		}
		if(this.beats[0].graceType != 0) {
			return this.invert(0);
		}
		var avg = (this.maxNoteValue + this.minNoteValue) / 2 | 0;
		return this.invert(avg < alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys[this.beats[this.beats.length - 1].voice.bar.clef] ? 0 : 1);
	}
	,invert: function(direction) {
		if(!this.invertBeamDirection) {
			return direction;
		}
		switch(direction) {
		case 0:
			return 1;
		case 1:
			return 0;
		default:
		}
		return 0;
	}
	,checkBeat: function(beat) {
		if(beat.invertBeamDirection) {
			this.invertBeamDirection = true;
		}
		if(this.voice == null) {
			this.voice = beat.voice;
		}
		var add = false;
		if(this.beats.length == 0) {
			add = true;
		} else if(alphaTab.rendering.utils.BeamingHelper.canJoin(this.beats[this.beats.length - 1],beat)) {
			add = true;
		}
		if(add) {
			this.beats.push(beat);
			if(beat.graceType != 0) {
				this.isGrace = true;
			}
			var positions = this.getOrCreateBeatPositions(beat);
			if(beat.get_hasTuplet()) {
				this.hasTuplet = true;
			}
			var fingeringCount = 0;
			var n = 0;
			while(n < beat.notes.length) {
				var note = beat.notes[n];
				if(note.leftHandFinger != -2 || note.rightHandFinger != -2) {
					++fingeringCount;
				}
				++n;
			}
			if(fingeringCount > this.fingeringCount) {
				this.fingeringCount = fingeringCount;
			}
			this.lastMinNoteValue = -2147483648;
			this.lastMaxNoteValue = -2147483648;
			this.checkNote(beat.minNote);
			this.checkNote(beat.maxNote);
			positions.minNoteValue = this.lastMinNoteValue;
			positions.maxNoteValue = this.lastMaxNoteValue;
			if(this.shortestDuration < beat.duration) {
				this.shortestDuration = beat.duration;
			}
			if(beat.get_hasTuplet()) {
				this.hasTuplet = true;
			}
		}
		return add;
	}
	,checkNote: function(note) {
		var value = this.getValue(note);
		if(this.beats.length == 1 && this.beats[0] == note.beat) {
			if(this.firstMinNoteValue == -2147483648 || value < this.firstMinNoteValue) {
				this.firstMinNoteValue = value;
			}
			if(this.firstMaxNoteValue == -2147483648 || value > this.firstMaxNoteValue) {
				this.firstMaxNoteValue = value;
			}
		}
		if(this.lastMinNoteValue == -2147483648 || value < this.lastMinNoteValue) {
			this.lastMinNoteValue = value;
		}
		if(this.lastMaxNoteValue == -2147483648 || value > this.lastMaxNoteValue) {
			this.lastMaxNoteValue = value;
		}
		var minValue = this.getMinValue(note);
		if(this.minNoteValue == -2147483648 || this.minNoteValue > minValue) {
			this.minNoteValue = minValue;
			this.minNoteBeat = note.beat;
		}
		var maxValue = this.getMaxValue(note);
		if(this.maxNoteValue == -2147483648 || this.maxNoteValue < maxValue) {
			this.maxNoteValue = maxValue;
			this.maxNoteBeat = note.beat;
		}
	}
	,calculateBeamY: function(stemSize,xCorrection,xPosition,scale,yPosition) {
		return this.calculateBeamYWithDirection(stemSize,xCorrection,xPosition,scale,yPosition,this.direction);
	}
	,calculateBeamYWithDirection: function(stemSize,xCorrection,xPosition,scale,yPosition,direction) {
		if(this.beats.length == 1) {
			if(direction == 0) {
				return yPosition.getYPositionForNoteValue(this.maxNoteValue) - stemSize;
			}
			return yPosition.getYPositionForNoteValue(this.minNoteValue) + stemSize;
		}
		var maxDistance = 10 * scale;
		if(direction == 1 && this.minNoteBeat != this.beats[0] && this.minNoteBeat != this.beats[this.beats.length - 1]) {
			return yPosition.getYPositionForNoteValue(this.minNoteValue) + stemSize;
		}
		if(direction == 0 && this.maxNoteBeat != this.beats[0] && this.minNoteBeat != this.beats[this.beats.length - 1]) {
			return yPosition.getYPositionForNoteValue(this.maxNoteValue) - stemSize;
		}
		var startX = this.getBeatLineX(this.beats[0]) + xCorrection;
		var startY = direction == 0 ? yPosition.getYPositionForNoteValue(this.firstMaxNoteValue) - stemSize : yPosition.getYPositionForNoteValue(this.firstMinNoteValue) + stemSize;
		var endX = this.getBeatLineX(this.beats[this.beats.length - 1]) + xCorrection;
		var endY = direction == 0 ? yPosition.getYPositionForNoteValue(this.lastMaxNoteValue) - stemSize : yPosition.getYPositionForNoteValue(this.lastMinNoteValue) + stemSize;
		if(direction == 1 && startY > endY && startY - endY > maxDistance) {
			endY = startY - maxDistance;
		}
		if(direction == 1 && endY > startY && endY - startY > maxDistance) {
			startY = endY - maxDistance;
		}
		if(direction == 0 && startY < endY && endY - startY > maxDistance) {
			endY = startY + maxDistance;
		}
		if(direction == 0 && endY < startY && startY - endY > maxDistance) {
			startY = endY + maxDistance;
		}
		if(startX == endX) {
			return startY;
		}
		return (endY - startY) / (endX - startX) * (xPosition - startX) + startY;
	}
	,isPositionFrom: function(staffId,beat) {
		if(!this._beatLineXPositions.hasOwnProperty(beat.index)) {
			return true;
		}
		if(this._beatLineXPositions[beat.index].staffId != staffId) {
			return this._beatLineXPositions[beat.index].staffId == null;
		} else {
			return true;
		}
	}
	,getBeatMinValue: function(beat) {
		if(!this._beatLineXPositions.hasOwnProperty(beat.index)) {
			return beat.minNote.get_displayValue();
		}
		return this._beatLineXPositions[beat.index].minNoteValue;
	}
	,getBeatMaxValue: function(beat) {
		if(!this._beatLineXPositions.hasOwnProperty(beat.index)) {
			return beat.maxNote.get_displayValue();
		}
		return this._beatLineXPositions[beat.index].maxNoteValue;
	}
	,__class__: alphaTab.rendering.utils.BeamingHelper
};
alphaTab.rendering.utils.BeatBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["BeatBounds"] = function() {
	this.barBounds = null;
	this.visualBounds = null;
	this.realBounds = null;
	this.beat = null;
	this.notes = null;
};
alphaTab.rendering.utils.BeatBounds.__name__ = ["alphaTab","rendering","utils","BeatBounds"];
alphaTab.rendering.utils.BeatBounds.prototype = {
	addNote: function(bounds) {
		if(this.notes == null) {
			var this1 = [];
			this.notes = this1;
		}
		this.notes.push(bounds);
	}
	,findNoteAtPos: function(x,y) {
		if(this.notes == null) {
			return null;
		}
		var note = $iterator(this.notes)();
		while(note.hasNext()) {
			var note1 = note.next();
			var bottom = note1.noteHeadBounds.y + note1.noteHeadBounds.h;
			var right = note1.noteHeadBounds.x + note1.noteHeadBounds.w;
			if(note1.noteHeadBounds.x >= x && note1.noteHeadBounds.y >= y && x <= right && y <= bottom) {
				return note1.note;
			}
		}
		return null;
	}
	,__class__: alphaTab.rendering.utils.BeatBounds
};
alphaTab.rendering.utils.BeatLinePositions = function() {
	this.staffId = null;
	this.up = 0.0;
	this.down = 0.0;
	this.minNoteValue = 0;
	this.maxNoteValue = 0;
};
alphaTab.rendering.utils.BeatLinePositions.__name__ = ["alphaTab","rendering","utils","BeatLinePositions"];
alphaTab.rendering.utils.BeatLinePositions.prototype = {
	__class__: alphaTab.rendering.utils.BeatLinePositions
};
alphaTab.rendering.utils.Bounds = $hx_exports["alphaTab"]["rendering"]["utils"]["Bounds"] = function() {
	this.x = 0.0;
	this.y = 0.0;
	this.w = 0.0;
	this.h = 0.0;
};
alphaTab.rendering.utils.Bounds.__name__ = ["alphaTab","rendering","utils","Bounds"];
alphaTab.rendering.utils.Bounds.prototype = {
	__class__: alphaTab.rendering.utils.Bounds
};
alphaTab.rendering.utils.BoundsLookup = $hx_exports["alphaTab"]["rendering"]["utils"]["BoundsLookup"] = function() {
	this._beatLookup = null;
	this._masterBarLookup = null;
	this._currentStaveGroup = null;
	this.staveGroups = null;
	this.isFinished = false;
	var this1 = [];
	this.staveGroups = this1;
	var this2 = {}
	this._beatLookup = this2;
	var this3 = {}
	this._masterBarLookup = this3;
};
alphaTab.rendering.utils.BoundsLookup.__name__ = ["alphaTab","rendering","utils","BoundsLookup"];
alphaTab.rendering.utils.BoundsLookup.fromJson = function(json,score) {
	var lookup = new alphaTab.rendering.utils.BoundsLookup();
	var staveGroups = json["staveGroups"];
	var staveGroup = $iterator(staveGroups)();
	while(staveGroup.hasNext()) {
		var staveGroup1 = staveGroup.next();
		var sg = new alphaTab.rendering.utils.StaveGroupBounds();
		sg.visualBounds = staveGroup1.visualBounds;
		sg.realBounds = staveGroup1.realBounds;
		lookup.addStaveGroup(sg);
		var masterBar = $iterator(staveGroup1.bars)();
		while(masterBar.hasNext()) {
			var masterBar1 = masterBar.next();
			var mb = new alphaTab.rendering.utils.MasterBarBounds();
			mb.index = masterBar1.index;
			mb.isFirstOfLine = masterBar1.isFirstOfLine;
			mb.lineAlignedBounds = masterBar1.lineAlignedBounds;
			mb.visualBounds = masterBar1.visualBounds;
			mb.realBounds = masterBar1.realBounds;
			sg.addBar(mb);
			var bar = $iterator(masterBar1.bars)();
			while(bar.hasNext()) {
				var bar1 = bar.next();
				var b = new alphaTab.rendering.utils.BarBounds();
				b.visualBounds = bar1.visualBounds;
				b.realBounds = bar1.realBounds;
				mb.addBar(b);
				var beat = $iterator(bar1.beats)();
				while(beat.hasNext()) {
					var beat1 = beat.next();
					var bb = new alphaTab.rendering.utils.BeatBounds();
					bb.visualBounds = beat1.visualBounds;
					bb.realBounds = beat1.realBounds;
					var bd = beat1;
					bb.beat = score.tracks[bd.trackIndex].staves[bd.staffIndex].bars[bd.barIndex].voices[bd.voiceIndex].beats[bd.beatIndex];
					if(beat1.notes != null) {
						var this1 = [];
						bb.notes = this1;
						var note = $iterator(beat1.notes)();
						while(note.hasNext()) {
							var note1 = note.next();
							var n = new alphaTab.rendering.utils.NoteBounds();
							var nd = note1;
							n.note = bb.beat.notes[nd.index];
							n.noteHeadBounds = note1.noteHeadBounds;
							bb.addNote(n);
						}
					}
					b.addBeat(bb);
				}
			}
		}
	}
	return lookup;
};
alphaTab.rendering.utils.BoundsLookup.prototype = {
	toJson: function() {
		var json = {}
		var this1 = [];
		var staveGroups = this1;
		json.staveGroups = staveGroups;
		var group = $iterator(this.staveGroups)();
		while(group.hasNext()) {
			var group1 = group.next();
			var g = {}
			g.visualBounds = this.boundsToJson(group1.visualBounds);
			g.realBounds = this.boundsToJson(group1.realBounds);
			var this2 = [];
			g.bars = this2;
			var masterBar = $iterator(group1.bars)();
			while(masterBar.hasNext()) {
				var masterBar1 = masterBar.next();
				var mb = {}
				mb.lineAlignedBounds = this.boundsToJson(masterBar1.lineAlignedBounds);
				mb.visualBounds = this.boundsToJson(masterBar1.visualBounds);
				mb.realBounds = this.boundsToJson(masterBar1.realBounds);
				mb.index = masterBar1.index;
				var this3 = [];
				mb.bars = this3;
				var bar = $iterator(masterBar1.bars)();
				while(bar.hasNext()) {
					var bar1 = bar.next();
					var b = {}
					b.visualBounds = this.boundsToJson(bar1.visualBounds);
					b.realBounds = this.boundsToJson(bar1.realBounds);
					var this4 = [];
					b.beats = this4;
					var beat = $iterator(bar1.beats)();
					while(beat.hasNext()) {
						var beat1 = beat.next();
						var bb = {}
						bb.visualBounds = this.boundsToJson(beat1.visualBounds);
						bb.realBounds = this.boundsToJson(beat1.realBounds);
						var bbd = bb;
						bbd.beatIndex = beat1.beat.index;
						bbd.voiceIndex = beat1.beat.voice.index;
						bbd.barIndex = beat1.beat.voice.bar.index;
						bbd.staffIndex = beat1.beat.voice.bar.staff.index;
						bbd.trackIndex = beat1.beat.voice.bar.staff.track.index;
						if(beat1.notes != null) {
							var this5 = [];
							var notes = bb.notes = this5;
							var note = $iterator(beat1.notes)();
							while(note.hasNext()) {
								var note1 = note.next();
								var n = {}
								var nd = n;
								nd.index = note1.note.index;
								n.noteHeadBounds = this.boundsToJson(note1.noteHeadBounds);
								notes.push(n);
							}
						}
						b.beats.push(bb);
					}
					mb.bars.push(b);
				}
				g.bars.push(mb);
			}
			staveGroups.push(g);
		}
		return json;
	}
	,boundsToJson: function(bounds) {
		var json = {}
		json.x = bounds.x;
		json.y = bounds.y;
		json.w = bounds.w;
		json.h = bounds.h;
		return json;
	}
	,finish: function() {
		var t = $iterator(this.staveGroups)();
		while(t.hasNext()) {
			var t1 = t.next();
			t1.finish();
		}
		this.isFinished = true;
	}
	,addNote: function(bounds) {
		var beat = this.findBeat(bounds.note.beat);
		beat.addNote(bounds);
	}
	,addStaveGroup: function(bounds) {
		bounds.index = this.staveGroups.length;
		bounds.boundsLookup = this;
		this.staveGroups.push(bounds);
		this._currentStaveGroup = bounds;
	}
	,addMasterBar: function(bounds) {
		if(bounds.staveGroupBounds == null) {
			bounds.staveGroupBounds = this._currentStaveGroup;
			this._masterBarLookup[bounds.index] = bounds;
			this._currentStaveGroup.addBar(bounds);
		} else {
			this._masterBarLookup[bounds.index] = bounds;
		}
	}
	,addBeat: function(bounds) {
		this._beatLookup[bounds.beat.id] = bounds;
	}
	,findMasterBarByIndex: function(index) {
		if(this._masterBarLookup.hasOwnProperty(index)) {
			return this._masterBarLookup[index];
		}
		return null;
	}
	,findMasterBar: function(bar) {
		var id = bar.index;
		if(this._masterBarLookup.hasOwnProperty(id)) {
			return this._masterBarLookup[id];
		}
		return null;
	}
	,findBeat: function(beat) {
		var id = beat.id;
		if(this._beatLookup.hasOwnProperty(id)) {
			return this._beatLookup[id];
		}
		return null;
	}
	,getBeatAtPos: function(x,y) {
		var bottom = 0;
		var top = this.staveGroups.length - 1;
		var staveGroupIndex = -1;
		while(bottom <= top) {
			var middle = (top + bottom) / 2 | 0;
			var group = this.staveGroups[middle];
			if(y >= group.realBounds.y && y <= group.realBounds.y + group.realBounds.h) {
				staveGroupIndex = middle;
				break;
			}
			if(y < group.realBounds.y) {
				top = middle - 1;
			} else {
				bottom = middle + 1;
			}
		}
		if(staveGroupIndex == -1) {
			return null;
		}
		var staveGroup = this.staveGroups[staveGroupIndex];
		var bar = staveGroup.findBarAtPos(x);
		if(bar != null) {
			return bar.findBeatAtPos(x,y);
		}
		return null;
	}
	,getNoteAtPos: function(beat,x,y) {
		var beatBounds = this.findBeat(beat);
		if(beatBounds == null) {
			return null;
		}
		x = x - beatBounds.barBounds.masterBarBounds.staveGroupBounds.realBounds.x;
		y = y - beatBounds.barBounds.masterBarBounds.staveGroupBounds.realBounds.y;
		return beatBounds.findNoteAtPos(x,y);
	}
	,__class__: alphaTab.rendering.utils.BoundsLookup
};
alphaTab.rendering.utils.MasterBarBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["MasterBarBounds"] = function() {
	this.index = 0;
	this.isFirstOfLine = false;
	this.visualBounds = null;
	this.realBounds = null;
	this.lineAlignedBounds = null;
	this.bars = null;
	this.staveGroupBounds = null;
	var this1 = [];
	this.bars = this1;
};
alphaTab.rendering.utils.MasterBarBounds.__name__ = ["alphaTab","rendering","utils","MasterBarBounds"];
alphaTab.rendering.utils.MasterBarBounds.prototype = {
	addBar: function(bounds) {
		bounds.masterBarBounds = this;
		this.bars.push(bounds);
	}
	,findBeatAtPos: function(x,y) {
		var beat = null;
		var bar = $iterator(this.bars)();
		while(bar.hasNext()) {
			var bar1 = bar.next();
			var b = bar1.findBeatAtPos(x);
			if(b != null && (beat == null || beat.realBounds.x < b.realBounds.x)) {
				beat = b;
			}
		}
		if(beat == null) {
			return null;
		} else {
			return beat.beat;
		}
	}
	,finish: function() {
		var comparison = function(a,b) {
			if(a.realBounds.y < b.realBounds.y) {
				return -1;
			}
			if(a.realBounds.y > b.realBounds.y) {
				return 1;
			}
			if(a.realBounds.x < b.realBounds.x) {
				return -1;
			}
			if(a.realBounds.x > b.realBounds.x) {
				return 1;
			}
			return 0;
		};
		this.bars.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
	}
	,addBeat: function(bounds) {
		this.staveGroupBounds.boundsLookup.addBeat(bounds);
	}
	,__class__: alphaTab.rendering.utils.MasterBarBounds
};
alphaTab.rendering.utils.NoteBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["NoteBounds"] = function() {
	this.noteHeadBounds = null;
	this.note = null;
};
alphaTab.rendering.utils.NoteBounds.__name__ = ["alphaTab","rendering","utils","NoteBounds"];
alphaTab.rendering.utils.NoteBounds.prototype = {
	__class__: alphaTab.rendering.utils.NoteBounds
};
alphaTab.rendering.utils.PercussionMapper = function() {
};
alphaTab.rendering.utils.PercussionMapper.__name__ = ["alphaTab","rendering","utils","PercussionMapper"];
alphaTab.rendering.utils.PercussionMapper.midiFromElementVariation = function(note) {
	return alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi[note.element][note.variation];
};
alphaTab.rendering.utils.PercussionMapper.mapNoteForDisplay = function(value) {
	if(value == 61 || value == 66 || value == 44) {
		return 62;
	}
	if(value == 60 || value == 65) {
		return 64;
	}
	if(value >= 35 && value <= 36) {
		return 65;
	}
	if(value == 41 || value == 64) {
		return 67;
	}
	if(value == 43 || value == 62) {
		return 69;
	}
	if(value == 45 || value == 63) {
		return 71;
	}
	if(value == 47 || value == 54) {
		return 74;
	}
	if(value == 48 || value == 56) {
		return 76;
	}
	if(value == 50) {
		return 77;
	}
	if(value == 42 || value == 46 || value >= 49 && value <= 53 || value == 57 || value == 59) {
		return 79;
	}
	return 72;
};
alphaTab.rendering.utils.PercussionMapper.prototype = {
	__class__: alphaTab.rendering.utils.PercussionMapper
};
alphaTab.rendering.utils.StaveGroupBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["StaveGroupBounds"] = function() {
	this.index = 0;
	this.visualBounds = null;
	this.realBounds = null;
	this.bars = null;
	this.boundsLookup = null;
	var this1 = [];
	this.bars = this1;
	this.index = 0;
};
alphaTab.rendering.utils.StaveGroupBounds.__name__ = ["alphaTab","rendering","utils","StaveGroupBounds"];
alphaTab.rendering.utils.StaveGroupBounds.prototype = {
	finish: function() {
		var t = $iterator(this.bars)();
		while(t.hasNext()) {
			var t1 = t.next();
			t1.finish();
		}
	}
	,addBar: function(bounds) {
		this.boundsLookup.addMasterBar(bounds);
		bounds.staveGroupBounds = this;
		this.bars.push(bounds);
	}
	,findBarAtPos: function(x) {
		var b = null;
		var bar = $iterator(this.bars)();
		while(bar.hasNext()) {
			var bar1 = bar.next();
			if(b == null || bar1.realBounds.x < x) {
				b = bar1;
			} else if(x > bar1.realBounds.x + bar1.realBounds.w) {
				break;
			}
		}
		return b;
	}
	,__class__: alphaTab.rendering.utils.StaveGroupBounds
};
alphaTab.ui = {};
alphaTab.ui.IMouseEventArgs = $hx_exports["alphaTab"]["ui"]["IMouseEventArgs"] = function() { };
alphaTab.ui.IMouseEventArgs.__name__ = ["alphaTab","ui","IMouseEventArgs"];
alphaTab.ui.IMouseEventArgs.prototype = {
	__class__: alphaTab.ui.IMouseEventArgs
};
alphaTab.ui.BrowserMouseEventArgs = function(e) {
	this._e = null;
	this._e = e;
};
alphaTab.ui.BrowserMouseEventArgs.__name__ = ["alphaTab","ui","BrowserMouseEventArgs"];
alphaTab.ui.BrowserMouseEventArgs.__interfaces__ = [alphaTab.ui.IMouseEventArgs];
alphaTab.ui.BrowserMouseEventArgs.prototype = {
	get_isLeftMouseButton: function() {
		return this._e.button == 0;
	}
	,getX: function(relativeTo) {
		var relativeToElement = (js.Boot.__cast(relativeTo , alphaTab.ui.HtmlElementContainer)).element;
		var bounds = relativeToElement.getBoundingClientRect();
		var left = bounds.left + relativeToElement.ownerDocument.defaultView.pageXOffset;
		return this._e.pageX - left;
	}
	,getY: function(relativeTo) {
		var relativeToElement = (js.Boot.__cast(relativeTo , alphaTab.ui.HtmlElementContainer)).element;
		var bounds = relativeToElement.getBoundingClientRect();
		var top = bounds.top + relativeToElement.ownerDocument.defaultView.pageYOffset;
		return this._e.pageY - top;
	}
	,preventDefault: function() {
		this._e.preventDefault();
	}
	,__class__: alphaTab.ui.BrowserMouseEventArgs
};
alphaTab.ui.IUiFacade = $hx_exports["alphaTab"]["ui"]["IUiFacade"] = function() { };
alphaTab.ui.IUiFacade.__name__ = ["alphaTab","ui","IUiFacade"];
alphaTab.ui.IUiFacade.prototype = {
	__class__: alphaTab.ui.IUiFacade
};
alphaTab.ui.BrowserUiFacade = function(rootElement) {
	this._fontCheckers = null;
	this._api = null;
	this._contents = null;
	this._file = null;
	this._visibilityCheckIntervalId = 0;
	this._visibilityCheckInterval = 0;
	this._totalResultCount = 0;
	this._initialTrackIndexes = null;
	this.__RootContainer = null;
	this.__AreWorkersSupported = false;
	var this1 = {}
	this._fontCheckers = this1;
	rootElement.classList.add("alphaTab");
	this.__RootContainer = new alphaTab.ui.HtmlElementContainer(rootElement);
	var workersUnsupported = !window["Worker"];
	this.__AreWorkersSupported = !workersUnsupported;
	alphaTab.Environment.bravuraFontChecker.addFontLoaded($bind(this,this.onFontLoaded));
};
alphaTab.ui.BrowserUiFacade.__name__ = ["alphaTab","ui","BrowserUiFacade"];
alphaTab.ui.BrowserUiFacade.__interfaces__ = [alphaTab.ui.IUiFacade];
alphaTab.ui.BrowserUiFacade.prototype = {
	add_rootContainerBecameVisible: function(value) {
		this._rootContainerBecameVisible = system._EventAction.EventAction_Impl_.add(this._rootContainerBecameVisible,value);
	}
	,remove_rootContainerBecameVisible: function(value) {
		this._rootContainerBecameVisible = system._EventAction.EventAction_Impl_.sub(this._rootContainerBecameVisible,value);
	}
	,get_resizeThrottle: function() {
		return 10;
	}
	,get_rootContainer: function() {
		return this.__RootContainer;
	}
	,get_areWorkersSupported: function() {
		return this.__AreWorkersSupported;
	}
	,get_canRender: function() {
		return this.areAllFontsLoaded();
	}
	,areAllFontsLoaded: function() {
		if(!alphaTab.Environment.bravuraFontChecker.isFontLoaded) {
			return false;
		}
		var this1 = this._fontCheckers;
		var font = $iterator(Object.keys(this1))();
		while(font.hasNext()) {
			var font1 = font.next();
			var checker = this._fontCheckers[font1];
			if(!checker.isFontLoaded) {
				return false;
			}
		}
		var this2 = this._fontCheckers;
		alphaTab.util.Logger.debug("Font","All fonts loaded: " + Std.string(Object.keys(this2).length),null);
		return true;
	}
	,addCanRenderChanged: function(value) {
		this.canRenderChanged = system._EventAction.EventAction_Impl_.add(this.canRenderChanged,value);
	}
	,removeCanRenderChanged: function(value) {
		this.canRenderChanged = system._EventAction.EventAction_Impl_.sub(this.canRenderChanged,value);
	}
	,onFontLoaded: function(family) {
		alphaTab.platform.svg.FontSizes.generateFontLookup(family);
		if(this.areAllFontsLoaded()) {
			var _e = this.canRenderChanged;
			var handler = function() {
				system._EventAction.EventAction_Impl_.invoke(_e);
			};
			if(handler != null) {
				handler();
			}
		}
	}
	,createWorkerRenderer: function() {
		return new alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer(this._api,this._api.settings);
	}
	,addRootContainerBecameVisible: function(value) {
		var _gthis = this;
		if(this.get_rootContainer().get_isVisible()) {
			value();
		} else {
			this.add_rootContainerBecameVisible(value);
			if(this._visibilityCheckIntervalId == 0) {
				this._visibilityCheckIntervalId = window.setInterval(function() {
					if(_gthis._api.container.get_isVisible()) {
						window.clearInterval(_gthis._visibilityCheckIntervalId);
						_gthis._visibilityCheckIntervalId = 0;
						if(_gthis._rootContainerBecameVisible != null) {
							system._EventAction.EventAction_Impl_.invoke(_gthis._rootContainerBecameVisible);
						}
						_gthis._visibilityCheckIntervalId = 0;
					}
				},this._visibilityCheckInterval);
			}
		}
	}
	,removeRootContainerBecameVisible: function(value) {
		this.remove_rootContainerBecameVisible(value);
	}
	,initialize: function(api,raw) {
		this._api = api;
		var settings = new alphaTab.Settings();
		settings.fillFromJson(raw);
		var dataAttributes = this.getDataAttributes();
		settings.fillFromDataAttributes(dataAttributes);
		if(settings.notation.notationMode == 1) {
			settings.setSongBookModeSettings();
		}
		api.settings = settings;
		if(settings.core.engine == "default" || settings.core.engine == "svg") {
			api.container.addScroll($bind(this,this.showSvgsInViewPort));
			api.container.addResize($bind(this,this.showSvgsInViewPort));
		}
		this.setupFontCheckers(settings);
		var tracksData;
		var options = raw;
		if(options != null && options.tracks) {
			tracksData = options.tracks;
		} else if(dataAttributes.hasOwnProperty("tracks")) {
			tracksData = dataAttributes["tracks"];
		} else {
			tracksData = 0;
		}
		this._initialTrackIndexes = this.parseTracks(tracksData);
		this._contents = "";
		var element = js.Boot.__cast(api.container , alphaTab.ui.HtmlElementContainer);
		if(dataAttributes.hasOwnProperty("tex") && !(!element.element.innerText)) {
			this._contents = element.element.innerHTML;
			element.element.innerHTML = "";
		}
		this.createStyleElement(settings);
		if(options && options.file) {
			this._file = options.file;
		} else if(dataAttributes.hasOwnProperty("file")) {
			this._file = dataAttributes["file"];
		}
		this._visibilityCheckInterval = 500;
		if(options && options.visibilityCheckInterval) {
			this._visibilityCheckInterval = options.visibilityCheckInterval;
		}
	}
	,setupFontCheckers: function(settings) {
		this.registerFontChecker(settings.display.resources.copyrightFont);
		this.registerFontChecker(settings.display.resources.effectFont);
		this.registerFontChecker(settings.display.resources.fingeringFont);
		this.registerFontChecker(settings.display.resources.graceFont);
		this.registerFontChecker(settings.display.resources.markerFont);
		this.registerFontChecker(settings.display.resources.tablatureFont);
		this.registerFontChecker(settings.display.resources.titleFont);
		this.registerFontChecker(settings.display.resources.wordsFont);
		this.registerFontChecker(settings.display.resources.barNumberFont);
		this.registerFontChecker(settings.display.resources.fretboardNumberFont);
		this.registerFontChecker(settings.display.resources.subTitleFont);
	}
	,registerFontChecker: function(font) {
		if(!this._fontCheckers.hasOwnProperty(font.family)) {
			var checker = new alphaTab.utils.FontLoadingChecker(font.family,null);
			this._fontCheckers[font.family] = checker;
			checker.addFontLoaded($bind(this,this.onFontLoaded));
			checker.checkForFontAvailability();
		}
	}
	,destroy: function() {
		(js.Boot.__cast(this.__RootContainer , alphaTab.ui.HtmlElementContainer)).element.innerHTML = "";
	}
	,createCanvasElement: function() {
		var canvasElement = window.document.createElement("div");
		canvasElement.className = "at-surface";
		canvasElement.style.fontSize = "0";
		canvasElement.style.overflow = "hidden";
		canvasElement.style.lineHeight = "0";
		return new alphaTab.ui.HtmlElementContainer(canvasElement);
	}
	,triggerEvent: function(container,name,details) {
		var element = (js.Boot.__cast(container , alphaTab.ui.HtmlElementContainer)).element;
		name = "alphaTab." + name;
		var e = window.document.createEvent("CustomEvent");
		e.initCustomEvent(name,false,false,details);
		element.dispatchEvent(e);
		var json = window;
		if((json && "jQuery" in json)) {
			var jquery = window["jQuery"];
			jquery(element).trigger(name,details);
		}
	}
	,load: function(data,success,error) {
		if(js.Boot.__instanceof(data,alphaTab.model.Score)) {
			success(data);
			return true;
		}
		if((data instanceof ArrayBuffer)) {
			success(alphaTab.importer.ScoreLoader.loadScoreFromBytes(new Uint8Array(data),this._api.settings));
			return true;
		}
		if((data instanceof Uint8Array)) {
			success(alphaTab.importer.ScoreLoader.loadScoreFromBytes(data,this._api.settings));
			return true;
		}
		if(typeof(data) == "string") {
			alphaTab.importer.ScoreLoader.loadScoreAsync(data,success,error,this._api.settings);
			return true;
		}
		return false;
	}
	,loadSoundFont: function(data) {
		if((data instanceof ArrayBuffer)) {
			this._api.player.loadSoundFont(new Uint8Array(data));
			return true;
		}
		if((data instanceof Uint8Array)) {
			this._api.player.loadSoundFont(data);
			return true;
		}
		if(typeof(data) == "string") {
			(js.Boot.__cast(this._api , alphaTab.platform.javaScript.AlphaTabApi)).loadSoundFontFromUrl(data);
			return true;
		}
		return false;
	}
	,initialRender: function() {
		var _gthis = this;
		this._api.renderer.addPreRender(function(resize) {
			_gthis._totalResultCount = 0;
		});
		this.addRootContainerBecameVisible(function() {
			_gthis._api.renderer.set_width(system.Convert.toInt32_Single(_gthis.get_rootContainer().get_width()));
			_gthis._api.renderer.updateSettings(_gthis._api.settings);
			var s = _gthis._contents;
			if(!(s == null || s.length == 0)) {
				_gthis._api.tex(_gthis._contents,_gthis._initialTrackIndexes);
				_gthis._initialTrackIndexes = null;
			} else {
				var s1 = _gthis._file;
				if(!(s1 == null || s1.length == 0)) {
					alphaTab.importer.ScoreLoader.loadScoreAsync(_gthis._file,function(s2) {
						_gthis._api.renderScore(s2,_gthis._initialTrackIndexes);
						_gthis._initialTrackIndexes = null;
					},function(e) {
						_gthis._api.onError("import",e);
					},_gthis._api.settings);
				}
			}
		});
	}
	,showSvgsInViewPort: function() {
		var placeholders = (js.Boot.__cast(this._api.canvasElement , alphaTab.ui.HtmlElementContainer)).element.querySelectorAll("[data-lazy=true]");
		var i = 0;
		while(i < placeholders.length) {
			var placeholder = placeholders.item(i);
			if(this.isElementInViewPort(placeholder)) {
				placeholder.outerHTML = placeholder["svg"];
			}
			++i;
		}
	}
	,isElementInViewPort: function(element) {
		var rect = element.getBoundingClientRect();
		if(rect.top + rect.height >= 0 && rect.top <= window.innerHeight && rect.left + rect.width >= 0) {
			return rect.left <= window.innerWidth;
		} else {
			return false;
		}
	}
	,createStyleElement: function(settings) {
		var elementDocument = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element.ownerDocument;
		var styleElement = elementDocument.getElementById("alphaTabStyle");
		if(styleElement == null) {
			var fontDirectory = settings.core.fontDirectory;
			styleElement = elementDocument.createElement("style");
			styleElement.id = "alphaTabStyle";
			styleElement.type = "text/css";
			var this1 = "";
			var css = this1;
			css = css + ("@font-face {" + "\r\n");
			css = css + ("    font-family: 'alphaTab';" + "\r\n");
			css = css + ("     src: url('" + fontDirectory + "Bravura.eot');" + "\r\n");
			css = css + ("     src: url('" + fontDirectory + "Bravura.eot?#iefix') format('embedded-opentype')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.woff') format('woff')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.otf') format('opentype')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.svg#Bravura') format('svg');" + "\r\n");
			css = css + ("     font-weight: normal;" + "\r\n");
			css = css + ("     font-style: normal;" + "\r\n");
			css = css + ("}" + "\r\n");
			css = css + (".at-surface * {" + "\r\n");
			css = css + ("    cursor: default;" + "\r\n");
			css = css + ("    vertical-align: top;" + "\r\n");
			css = css + ("}" + "\r\n");
			css = css + (".at {" + "\r\n");
			css = css + ("     font-family: 'alphaTab';" + "\r\n");
			css = css + ("     speak: none;" + "\r\n");
			css = css + ("     font-style: normal;" + "\r\n");
			css = css + ("     font-weight: normal;" + "\r\n");
			css = css + ("     font-variant: normal;" + "\r\n");
			css = css + ("     text-transform: none;" + "\r\n");
			css = css + ("     line-height: 1;" + "\r\n");
			css = css + ("     line-height: 1;" + "\r\n");
			css = css + ("     -webkit-font-smoothing: antialiased;" + "\r\n");
			css = css + ("     -moz-osx-font-smoothing: grayscale;" + "\r\n");
			css = css + ("     font-size: 34px;" + "\r\n");
			css = css + ("     overflow: visible !important;" + "\r\n");
			css = css + ("}" + "\r\n");
			styleElement.innerHTML = css;
			elementDocument.getElementsByTagName("head").item(0).appendChild(styleElement);
			alphaTab.Environment.bravuraFontChecker.checkForFontAvailability();
		}
	}
	,parseTracks: function(tracksData) {
		if(tracksData == null) {
			var this1 = new Int32Array(0);
			return this1;
		}
		var this2 = [];
		var tracks = this2;
		if(typeof(tracksData) == "string") {
			try {
				if(tracksData == "all") {
					return new Int32Array([-1]);
				}
				tracksData = JSON.parse(tracksData);
			} catch( __e ) {
				tracksData = [0];
			}
		}
		if(typeof(tracksData) == "number") {
			tracks.push(tracksData);
		} else if("length" in tracksData) {
			var length = tracksData["length"];
			var array = tracksData;
			var i = 0;
			while(i < length) {
				var item = array[i];
				var value;
				if(typeof(item) == "number") {
					value = item;
				} else if("index" in item) {
					value = item["index"];
				} else {
					value = alphaTab.platform.Platform.parseIntMinValue(Std.string(item));
				}
				if(value >= 0 || value == -1) {
					tracks.push(value);
				}
				++i;
			}
		} else if("index" in tracksData) {
			tracks.push(tracksData["index"]);
		}
		return new Int32Array(tracks);
	}
	,getDataAttributes: function() {
		var this1 = {}
		var dataAttributes = this1;
		var element = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element;
		if(element.dataset) {
			var json = element.dataset;
			var key = HxOverrides.iter(Object.keys(json));
			while(key.hasNext()) {
				var key1 = key.next();
				var value = element.dataset[key1];
				try {
					var stringValue = value;
					value = JSON.parse(stringValue);
				} catch( __e ) {
					if(value == "") {
						value = null;
					}
				}
				dataAttributes[key1] = value;
			}
		} else {
			var i = 0;
			while(i < element.attributes.length) {
				var attr = element.attributes.item(i);
				var nodeName = attr.nodeName;
				if(StringTools.startsWith(nodeName,"data-")) {
					var a = HxOverrides.substr(nodeName,5,null);
					var this2 = system.Convert.toUInt16(45);
					var this3 = this2;
					var keyParts = system._CsString.CsString_Impl_.split_CharArray(a,[this3]);
					var key2 = keyParts[0];
					var j = 1;
					while(j < keyParts.length) {
						key2 = key2 + (HxOverrides.substr(keyParts[j],0,1).toUpperCase() + HxOverrides.substr(keyParts[j],1,null));
						++j;
					}
					var value1 = attr.nodeValue;
					try {
						value1 = JSON.parse(value1);
					} catch( __e1 ) {
						if(value1 == "") {
							value1 = null;
						}
					}
					dataAttributes[key2] = value1;
				}
				++i;
			}
		}
		return dataAttributes;
	}
	,beginAppendRenderResults: function(renderResult) {
		var canvasElement = (js.Boot.__cast(this._api.canvasElement , alphaTab.ui.HtmlElementContainer)).element;
		if(renderResult == null) {
			while(canvasElement.childElementCount > this._totalResultCount) canvasElement.removeChild(canvasElement.lastChild);
			if(this._api.settings.core.enableLazyLoading) {
				this.showSvgsInViewPort();
			}
		} else {
			var body = renderResult.renderResult;
			if(typeof(body) == "string") {
				var placeholder;
				if(this._totalResultCount < canvasElement.childElementCount) {
					placeholder = canvasElement.childNodes.item(this._totalResultCount);
				} else {
					placeholder = window.document.createElement("div");
					canvasElement.appendChild(placeholder);
				}
				placeholder.style.width = Std.string(renderResult.width) + "px";
				placeholder.style.height = Std.string(renderResult.height) + "px";
				placeholder.style.display = "inline-block";
				if(this.isElementInViewPort(placeholder) || !this._api.settings.core.enableLazyLoading) {
					var bodyHtml = body;
					placeholder.outerHTML = bodyHtml;
				} else {
					placeholder["svg"] = body;
					placeholder.setAttribute("data-lazy","true");
				}
			} else if(this._totalResultCount < canvasElement.childElementCount) {
				canvasElement.replaceChild(renderResult.renderResult,canvasElement.childNodes.item(this._totalResultCount));
			} else {
				canvasElement.appendChild(renderResult.renderResult);
			}
			this._totalResultCount++;
		}
	}
	,createWorkerPlayer: function() {
		var _gthis = this;
		var supportsWebAudio = !!window.ScriptProcessorNode;
		var supportsWebWorkers = !!window.Worker;
		var forceFlash = !!window.ForceFlash;
		var alphaSynthScriptFile = alphaTab.Environment.scriptFile;
		var player = null;
		if(supportsWebAudio && !forceFlash) {
			alphaTab.util.Logger.info("Player","Will use webworkers for synthesizing and web audio api for playback",null);
			player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(new alphaTab.platform.javaScript.AlphaSynthWebAudioOutput(),alphaSynthScriptFile,this._api.settings.core.logLevel);
		} else if(supportsWebWorkers) {
			alphaTab.util.Logger.info("Player","Will use webworkers for synthesizing and flash for playback",null);
			player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(new alphaTab.platform.javaScript.AlphaSynthFlashOutput(alphaSynthScriptFile),alphaSynthScriptFile,this._api.settings.core.logLevel);
		}
		if(player == null) {
			alphaTab.util.Logger.error("Player","Player requires webworkers and web audio api or flash, browser unsupported",null);
		} else {
			player.addReady(function() {
				var s = _gthis._api.settings.player.soundFont;
				if(!(s == null || s.length == 0)) {
					(js.Boot.__cast(_gthis._api , alphaTab.platform.javaScript.AlphaTabApi)).loadSoundFontFromUrl(_gthis._api.settings.player.soundFont);
				}
			});
		}
		return player;
	}
	,beginInvoke: function(action) {
		window.requestAnimationFrame(function(f) {
			action();
		});
	}
	,highlightElements: function(groupId) {
		var element = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element;
		var elementsToHighlight = element.getElementsByClassName(groupId);
		var i = 0;
		while(i < elementsToHighlight.length) {
			elementsToHighlight.item(i).classList.add("at-highlight");
			++i;
		}
	}
	,removeHighlights: function() {
		var element = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element;
		var elements = element.getElementsByClassName("at-highlight");
		while(elements.length > 0) elements.item(0).classList.remove("at-highlight");
	}
	,destroyCursors: function() {
		var element = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element;
		var cursorWrapper = element.querySelector(".at-cursors");
		element.removeChild(cursorWrapper);
	}
	,createCursors: function() {
		var element = (js.Boot.__cast(this._api.container , alphaTab.ui.HtmlElementContainer)).element;
		var cursorWrapper = window.document.createElement("div");
		cursorWrapper.classList.add("at-cursors");
		var selectionWrapper = window.document.createElement("div");
		selectionWrapper.classList.add("at-selection");
		var barCursor = window.document.createElement("div");
		barCursor.classList.add("at-cursor-bar");
		var beatCursor = window.document.createElement("div");
		beatCursor.classList.add("at-cursor-beat");
		element.style.position = "relative";
		element.style.textAlign = "left";
		cursorWrapper.style.position = "absolute";
		cursorWrapper.style.zIndex = "1000";
		cursorWrapper.style.display = "inline";
		cursorWrapper.style.pointerEvents = 'none';
		selectionWrapper.style.position = "absolute";
		barCursor.style.position = "absolute";
		beatCursor.style.position = "absolute";
		beatCursor.style.transition = "all 0s linear";
		element.insertBefore(cursorWrapper,element.firstChild);
		cursorWrapper.appendChild(selectionWrapper);
		cursorWrapper.appendChild(barCursor);
		cursorWrapper.appendChild(beatCursor);
		return new alphaTab.ui.Cursors(new alphaTab.ui.HtmlElementContainer(cursorWrapper),new alphaTab.ui.HtmlElementContainer(barCursor),new alphaTab.ui.HtmlElementContainer(beatCursor),new alphaTab.ui.HtmlElementContainer(selectionWrapper));
	}
	,getOffset: function(scrollContainer,container) {
		var element = (js.Boot.__cast(container , alphaTab.ui.HtmlElementContainer)).element;
		var bounds = element.getBoundingClientRect();
		var top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
		var left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
		if(scrollContainer != null) {
			var scrollElement = (js.Boot.__cast(scrollContainer , alphaTab.ui.HtmlElementContainer)).element;
			var nodeName = scrollElement.nodeName.toLowerCase();
			if(nodeName != "html" && nodeName != "body") {
				var scrollElementOffset = this.getOffset(null,scrollContainer);
				top = top + scrollElement.scrollTop - scrollElementOffset.y;
				left = left + scrollElement.scrollLeft - scrollElementOffset.x;
			}
		}
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.x = left;
		_tmp.y = top;
		_tmp.w = bounds.width;
		_tmp.h = bounds.height;
		return _tmp;
	}
	,getScrollContainer: function() {
		var scrollElement;
		var o = this._api.settings.player.scrollElement;
		if(typeof(o) == "string") {
			var scrollElement1 = this._api.settings.player.scrollElement;
			scrollElement = window.document.querySelector(scrollElement1);
		} else {
			scrollElement = this._api.settings.player.scrollElement;
		}
		var nodeName = scrollElement.nodeName.toLowerCase();
		if(nodeName == "html" || nodeName == "body") {
			var userAgent = window.navigator.userAgent;
			if(!(!userAgent.match("((iPod|iPhone|iPad|Android))"))) {
				scrollElement = window.document.body;
			} else {
				scrollElement = window.document.documentElement;
			}
		}
		return new alphaTab.ui.HtmlElementContainer(scrollElement);
	}
	,createSelectionElement: function() {
		var element = window.document.createElement("div");
		element.style.position = "absolute";
		return new alphaTab.ui.HtmlElementContainer(element);
	}
	,scrollToY: function(element,scrollTargetY,speed) {
		var this1 = speed;
		this.internalScrollToY((js.Boot.__cast(element , alphaTab.ui.HtmlElementContainer)).element,scrollTargetY,this1);
	}
	,scrollToX: function(element,scrollTargetY,speed) {
		this.internalScrollToX((js.Boot.__cast(element , alphaTab.ui.HtmlElementContainer)).element,scrollTargetY,speed);
	}
	,internalScrollToY: function(element,scrollTargetY,speed) {
		var startY = element.scrollTop;
		var diff = scrollTargetY - startY;
		var start = 0;
		var step = null;
		step = function(x) {
			if(start == 0) {
				start = x;
			}
			var time = x - start;
			var percent = Math.min(time / speed,1);
			var step1 = system.Convert.toInt32_Double(startY + diff * percent);
			element.scrollTop = step1;
			if(time < speed) {
				window.requestAnimationFrame(step);
			}
		};
		window.requestAnimationFrame(step);
	}
	,internalScrollToX: function(element,scrollTargetX,speed) {
		var startX = element.scrollLeft;
		var diff = scrollTargetX - startX;
		var start = 0;
		var step = null;
		step = function(t) {
			if(start == 0) {
				start = t;
			}
			var time = t - start;
			var percent = Math.min(time / speed,1);
			var step1 = system.Convert.toInt32_Double(startX + diff * percent);
			element.scrollLeft = step1;
			if(time < speed) {
				window.requestAnimationFrame(step);
			}
		};
		window.requestAnimationFrame(step);
	}
	,__class__: alphaTab.ui.BrowserUiFacade
};
alphaTab.ui.Cursors = $hx_exports["alphaTab"]["ui"]["Cursors"] = function(cursorWrapper,barCursor,beatCursor,selectionWrapper) {
	this.cursorWrapper = null;
	this.barCursor = null;
	this.beatCursor = null;
	this.selectionWrapper = null;
	this.cursorWrapper = cursorWrapper;
	this.barCursor = barCursor;
	this.beatCursor = beatCursor;
	this.selectionWrapper = selectionWrapper;
};
alphaTab.ui.Cursors.__name__ = ["alphaTab","ui","Cursors"];
alphaTab.ui.Cursors.prototype = {
	__class__: alphaTab.ui.Cursors
};
alphaTab.ui.IContainer = $hx_exports["alphaTab"]["ui"]["IContainer"] = function() { };
alphaTab.ui.IContainer.__name__ = ["alphaTab","ui","IContainer"];
alphaTab.ui.IContainer.prototype = {
	__class__: alphaTab.ui.IContainer
};
alphaTab.ui.HtmlElementContainer = function(element) {
	this.element = null;
	this.element = element;
};
alphaTab.ui.HtmlElementContainer.__name__ = ["alphaTab","ui","HtmlElementContainer"];
alphaTab.ui.HtmlElementContainer.__interfaces__ = [alphaTab.ui.IContainer];
alphaTab.ui.HtmlElementContainer.prototype = {
	get_top: function() {
		var s = this.element.style.top;
		return parseFloat(s);
	}
	,set_top: function(value) {
		var x = Std.string(value) + "px";
		this.element.style.top = x;
		return this.get_top();
	}
	,get_left: function() {
		var s = this.element.style.top;
		return parseFloat(s);
	}
	,set_left: function(value) {
		var x = Std.string(value) + "px";
		this.element.style.left = x;
		return this.get_left();
	}
	,get_width: function() {
		return this.element.offsetWidth;
	}
	,set_width: function(value) {
		var x = Std.string(value) + "px";
		this.element.style.width = x;
		return this.get_width();
	}
	,get_scrollLeft: function() {
		return this.element.scrollLeft;
	}
	,set_scrollLeft: function(value) {
		var tmp = system.Convert.toInt32_Single(value);
		this.element.scrollTop = tmp;
		return this.get_scrollLeft();
	}
	,get_scrollTop: function() {
		return this.element.scrollLeft;
	}
	,set_scrollTop: function(value) {
		var tmp = system.Convert.toInt32_Single(value);
		this.element.scrollTop = tmp;
		return this.get_scrollTop();
	}
	,get_height: function() {
		return this.element.offsetHeight;
	}
	,set_height: function(value) {
		if(value >= 0) {
			this.element.style.height = Std.string(value) + "px";
		} else {
			this.element.style.height = "100%";
		}
		return this.get_height();
	}
	,get_isVisible: function() {
		if(!(!(!this.element.offsetWidth) || !(!this.element.offsetHeight))) {
			return !(!this.element.getClientRects().length);
		} else {
			return true;
		}
	}
	,stopAnimation: function() {
		this.element.style.transition = "none";
	}
	,transitionToX: function(duration,x) {
		this.element.style.transition = "all 0s linear";
		this.element.style.transitionDuration = Std.string(duration) + "ms";
		this.element.style.left = Std.string(x) + "px";
	}
	,addMouseDown: function(value) {
		this.element.addEventListener("mousedown",function(e) {
			value(new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e , MouseEvent)));
		},true);
	}
	,removeMouseDown: function(value) {
	}
	,addMouseMove: function(value) {
		this.element.addEventListener("mousemove",function(e) {
			value(new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e , MouseEvent)));
		},true);
	}
	,removeMouseMove: function(value) {
	}
	,addMouseUp: function(value) {
		this.element.addEventListener("mouseup",function(e) {
			value(new alphaTab.ui.BrowserMouseEventArgs(js.Boot.__cast(e , MouseEvent)));
		},true);
	}
	,removeMouseUp: function(value) {
	}
	,clear: function() {
		this.element.innerHTML = "";
	}
	,appendChild: function(child) {
		this.element.appendChild((js.Boot.__cast(child , alphaTab.ui.HtmlElementContainer)).element);
	}
	,addScroll: function(value) {
		window.addEventListener("scroll",value,true);
	}
	,removeScroll: function(value) {
		window.removeEventListener("scroll",value,true);
	}
	,addResize: function(value) {
		window.addEventListener("resize",value,true);
	}
	,removeResize: function(value) {
		window.removeEventListener("resize",value,true);
	}
	,__class__: alphaTab.ui.HtmlElementContainer
};
alphaTab.util.Lazy = function(factory) {
	this._factory = null;
	this._created = false;
	this._value = null;
	this._factory = factory;
};
alphaTab.util.Lazy.__name__ = ["alphaTab","util","Lazy"];
alphaTab.util.Lazy.prototype = {
	get_value: function() {
		if(!this._created) {
			this._value = this._factory();
			this._created = true;
		}
		return this._value;
	}
	,__class__: alphaTab.util.Lazy
};
alphaTab.util._LogLevel = {};
alphaTab.util._LogLevel.LogLevel_Impl_ = $hx_exports["alphaTab"]["util"]["_LogLevel"]["LogLevel_Impl_"] = {};
alphaTab.util._LogLevel.LogLevel_Impl_.__name__ = ["alphaTab","util","_LogLevel","LogLevel_Impl_"];
alphaTab.util._LogLevel.LogLevel_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Debug";
	case 2:
		return "Info";
	case 3:
		return "Warning";
	case 4:
		return "Error";
	}
	return "";
};
alphaTab.util._LogLevel.LogLevel_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "debug":
		return 1;
	case "error":
		return 4;
	case "info":
		return 2;
	case "none":
		return 0;
	case "warning":
		return 3;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.util._LogLevel.LogLevel_Impl_.toJson = function(obj) {
	return obj;
};
alphaTab.util._LogLevel.LogLevel_Impl_.fromJson = function(json) {
	if(typeof json === 'number') {
		return json;
	}
	if(typeof json === 'string') {
		return alphaTab.util._LogLevel.LogLevel_Impl_.fromString(json);
	}
	throw new js._Boot.HaxeError(new alphaTab.utils.SerializationException().SerializationException("Unsupported value type"));
};
alphaTab.utils.SerializationException = $hx_exports["alphaTab"]["utils"]["SerializationException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.utils.SerializationException.__name__ = ["alphaTab","utils","SerializationException"];
alphaTab.utils.SerializationException.__super__ = alphaTab.AlphaTabException;
alphaTab.utils.SerializationException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	SerializationException: function(message) {
		this.AlphaTabException(message);
		return this;
	}
	,__class__: alphaTab.utils.SerializationException
});
alphaTab.xml = {};
alphaTab.xml.XmlNode = function() {
	this.nodeType = 0;
	this.localName = null;
	this.value = null;
	this.childNodes = null;
	this.attributes = null;
	this.firstChild = null;
	this.firstElement = null;
	var this1 = {}
	this.attributes = this1;
	var this2 = [];
	this.childNodes = this2;
};
alphaTab.xml.XmlNode.__name__ = ["alphaTab","xml","XmlNode"];
alphaTab.xml.XmlNode.prototype = {
	addChild: function(node) {
		this.childNodes.push(node);
		this.firstChild = node;
		if(node.nodeType == 1) {
			this.firstElement = node;
		}
	}
	,getAttribute: function(name) {
		if(this.attributes.hasOwnProperty(name)) {
			return this.attributes[name];
		}
		return "";
	}
	,getElementsByTagName: function(name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var this1 = [];
		var tags = this1;
		this.searchElementsByTagName(this.childNodes,tags,name,recursive);
		return tags;
	}
	,searchElementsByTagName: function(all,result,name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var c = $iterator(all)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1 != null && c1.nodeType == 1 && c1.localName == name) {
				result.push(c1);
			}
			if(recursive) {
				this.searchElementsByTagName(c1.childNodes,result,name,true);
			}
		}
	}
	,findChildElement: function(name) {
		var c = $iterator(this.childNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1 != null && c1.nodeType == 1 && c1.localName == name) {
				return c1;
			}
		}
		return null;
	}
	,get_innerText: function() {
		if(this.nodeType == 1 || this.nodeType == 9) {
			var this1 = "";
			var txt = this1;
			var c = $iterator(this.childNodes)();
			while(c.hasNext()) {
				var c1 = c.next();
				txt += Std.string(c1.get_innerText());
			}
			var s = txt;
			return StringTools.trim(s);
		}
		return this.value;
	}
	,__class__: alphaTab.xml.XmlNode
};
alphaTab.xml.XmlDocument = function(xml) {
	alphaTab.xml.XmlNode.call(this);
	this.documentElement = null;
	this.nodeType = 9;
	alphaTab.xml.XmlParser.parse(xml,0,this);
	var child = $iterator(this.childNodes)();
	while(child.hasNext()) {
		var child1 = child.next();
		if(child1.nodeType == 1) {
			this.documentElement = child1;
			break;
		}
	}
};
alphaTab.xml.XmlDocument.__name__ = ["alphaTab","xml","XmlDocument"];
alphaTab.xml.XmlDocument.__super__ = alphaTab.xml.XmlNode;
alphaTab.xml.XmlDocument.prototype = $extend(alphaTab.xml.XmlNode.prototype,{
	__class__: alphaTab.xml.XmlDocument
});
alphaTab.xml.XmlException = function() {
	alphaTab.AlphaTabException.call(this);
	this.xml = null;
	this.pos = 0;
};
alphaTab.xml.XmlException.__name__ = ["alphaTab","xml","XmlException"];
alphaTab.xml.XmlException.__super__ = alphaTab.AlphaTabException;
alphaTab.xml.XmlException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	XmlException: function(message,xml,pos) {
		this.AlphaTabException(message);
		this.xml = null;
		this.pos = 0;
		this.xml = xml;
		this.pos = pos;
		return this;
	}
	,__class__: alphaTab.xml.XmlException
});
alphaTab.xml._XmlNodeType = {};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_ = {};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.__name__ = ["alphaTab","xml","_XmlNodeType","XmlNodeType_Impl_"];
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toChar_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt8(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toByte_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt8(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.toUInt32(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Element";
	case 2:
		return "Attribute";
	case 3:
		return "Text";
	case 4:
		return "CDATA";
	case 5:
		return "EntityReference";
	case 6:
		return "Entity";
	case 7:
		return "ProcessingInstruction";
	case 8:
		return "Comment";
	case 9:
		return "Document";
	case 10:
		return "DocumentType";
	case 11:
		return "DocumentFragment";
	case 12:
		return "Notation";
	case 13:
		return "Whitespace";
	case 14:
		return "SignificantWhitespace";
	case 15:
		return "EndElement";
	case 16:
		return "EndEntity";
	case 17:
		return "XmlDeclaration";
	}
	return "";
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.fromString = function(str) {
	var _g = str.toLowerCase();
	switch(_g) {
	case "attribute":
		return 2;
	case "cdata":
		return 4;
	case "comment":
		return 8;
	case "document":
		return 9;
	case "documentfragment":
		return 11;
	case "documenttype":
		return 10;
	case "element":
		return 1;
	case "endelement":
		return 15;
	case "endentity":
		return 16;
	case "entity":
		return 6;
	case "entityreference":
		return 5;
	case "none":
		return 0;
	case "notation":
		return 12;
	case "processinginstruction":
		return 7;
	case "significantwhitespace":
		return 14;
	case "text":
		return 3;
	case "whitespace":
		return 13;
	case "xmldeclaration":
		return 17;
	}
	throw new js._Boot.HaxeError(new system.ArgumentException().ArgumentException_CsString_CsString("Unsupported string value","str"));
};
alphaTab.xml.XmlParser = function() {
};
alphaTab.xml.XmlParser.__name__ = ["alphaTab","xml","XmlParser"];
alphaTab.xml.XmlParser.parse = function(str,p,parent) {
	var this1 = system.Convert.toUInt16(HxOverrides.cca(str,p));
	var this2 = this1;
	var c = this2;
	var state = 1;
	var next = 1;
	var start = 0;
	var this3 = "";
	var buf = this3;
	var escapeNext = 1;
	var xml = null;
	var aname = null;
	var nbrackets = 0;
	var attrValQuote = 0;
	while(p < str.length) {
		var this4 = system.Convert.toUInt16(HxOverrides.cca(str,p));
		c = this4;
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				var this5 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
				if(this5 == 91) {
					p = p + 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <![CDATA[",str,p));
					}
					p = p + 5;
					state = 17;
					start = p + 1;
				} else {
					var tmp;
					var this6 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
					if(!(this6 == 68)) {
						var this7 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
						tmp = this7 == 100;
					} else {
						tmp = true;
					}
					if(tmp) {
						if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
							throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <!DOCTYPE",str,p));
						}
						p = p + 8;
						state = 16;
						start = p + 1;
					} else {
						var tmp1;
						var this8 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
						if(!(this8 != 45)) {
							var this9 = system.Convert.toUInt16(HxOverrides.cca(str,p + 2));
							tmp1 = this9 != 45;
						} else {
							tmp1 = true;
						}
						if(tmp1) {
							throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <!--",str,p));
						} else {
							p = p + 2;
							state = 15;
							start = p + 1;
						}
					}
				}
				break;
			case 47:
				if(parent == null) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!alphaTab.xml.XmlParser.isValidChar(c)) {
				if(p == start) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				xml = new alphaTab.xml.XmlNode();
				xml.nodeType = 1;
				xml.localName = HxOverrides.substr(str,start,p - start);
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!alphaTab.xml.XmlParser.isValidChar(c)) {
				if(start == p) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected attribute name",str,p));
				}
				var tmp2 = HxOverrides.substr(str,start,p - start);
				aname = tmp2;
				if(xml.attributes.hasOwnProperty(aname)) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				var this10 = "";
				buf = this10;
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
			}
			break;
		case 8:
			if(c == 38) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				state = 18;
				escapeNext = 8;
				start = p + 1;
			} else if(c == attrValQuote) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				var val = buf;
				var this11 = "";
				buf = this11;
				xml.attributes[aname] = val;
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = alphaTab.xml.XmlParser.parse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!alphaTab.xml.XmlParser.isValidChar(c)) {
				if(start == p) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.localName) {
					var tmp3 = "Expected </" + parent.localName + ">";
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException(tmp3,str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				return p;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				var child = new alphaTab.xml.XmlNode();
				child.nodeType = 3;
				child.value = buf;
				var this12 = "";
				buf = this12;
				parent.addChild(child);
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			var tmp4;
			if(c == 63) {
				var this13 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
				tmp4 = this13 == 62;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				++p;
				state = 1;
			}
			break;
		case 15:
			var tmp5;
			var tmp6;
			if(c == 45) {
				var this14 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
				tmp6 = this14 == 45;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				var this15 = system.Convert.toUInt16(HxOverrides.cca(str,p + 2));
				tmp5 = this15 == 62;
			} else {
				tmp5 = false;
			}
			if(tmp5) {
				p = p + 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				var node = new alphaTab.xml.XmlNode();
				node.nodeType = 10;
				node.value = HxOverrides.substr(str,start,p - start);
				parent.addChild(node);
				state = 1;
			}
			break;
		case 17:
			var tmp7;
			var tmp8;
			if(c == 93) {
				var this16 = system.Convert.toUInt16(HxOverrides.cca(str,p + 1));
				tmp8 = this16 == 93;
			} else {
				tmp8 = false;
			}
			if(tmp8) {
				var this17 = system.Convert.toUInt16(HxOverrides.cca(str,p + 2));
				tmp7 = this17 == 62;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				var child1 = new alphaTab.xml.XmlNode();
				child1.nodeType = 4;
				child1.value = HxOverrides.substr(str,start,p - start);
				parent.addChild(child1);
				p = p + 2;
				state = 1;
			}
			break;
		case 18:
			var this18 = system.Convert.toUInt16(59);
			if(c == this18) {
				var s = HxOverrides.substr(str,start,p - start);
				var this19 = system.Convert.toUInt16(HxOverrides.cca(s,0));
				if(this19 == 35) {
					var code;
					var this20 = system.Convert.toUInt16(HxOverrides.cca(s,1));
					if(this20 == 120) {
						code = alphaTab.platform.Platform.parseIntMinValue("0" + HxOverrides.substr(s,1,s.length - 1));
					} else {
						code = alphaTab.platform.Platform.parseIntMinValue(HxOverrides.substr(s,1,s.length - 1));
					}
					buf += String.fromCharCode(code);
				} else if(alphaTab.xml.XmlParser.Escapes.hasOwnProperty(s)) {
					buf += Std.string(alphaTab.xml.XmlParser.Escapes[s]);
				} else {
					buf += Std.string("&" + s + ";");
				}
				start = p + 1;
				state = escapeNext;
			} else if(!alphaTab.xml.XmlParser.isValidChar(c) && c != 35) {
				buf += Std.string("&");
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		default:
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start) {
			buf += Std.string(HxOverrides.substr(str,start,p - start));
			var node1 = new alphaTab.xml.XmlNode();
			node1.nodeType = 3;
			node1.value = buf;
			parent.addChild(node1);
		}
		return p;
	}
	if(state == 18 && escapeNext == 13) {
		buf += Std.string("&");
		buf += Std.string(HxOverrides.substr(str,start,p - start));
		var node2 = new alphaTab.xml.XmlNode();
		node2.nodeType = 3;
		node2.value = buf;
		parent.addChild(node2);
		return p;
	}
	throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Unexpected end",str,p));
};
alphaTab.xml.XmlParser.isValidChar = function(c) {
	if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95)) {
		return c == 45;
	} else {
		return true;
	}
};
alphaTab.xml.XmlParser.prototype = {
	__class__: alphaTab.xml.XmlParser
};
alphaTab.xml.XmlParser_XmlState = function() {
};
alphaTab.xml.XmlParser_XmlState.__name__ = ["alphaTab","xml","XmlParser_XmlState"];
alphaTab.xml.XmlParser_XmlState.prototype = {
	__class__: alphaTab.xml.XmlParser_XmlState
};
haxe.IMap = function() { };
haxe.IMap.__name__ = ["haxe","IMap"];
haxe._Int64 = {};
haxe._Int64.___Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe._Int64.___Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe._Int64.___Int64.prototype = {
	__class__: haxe._Int64.___Int64
};
haxe.crypto = {};
haxe.crypto.Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe.crypto.Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe.crypto.Adler32.read = function(i) {
	var a = new haxe.crypto.Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe.crypto.Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe.crypto.Adler32
};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [haxe.IMap];
haxe.ds.IntMap.prototype = {
	__class__: haxe.ds.IntMap
};
haxe.io.Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.io.BytesBuffer = function() {
	this.b = [];
};
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe.io.Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Eof = function() { };
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.FPHelper = function() { };
haxe.io.FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe.io.FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe.io.FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe.io.FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe.io.FPHelper.doubleToI64 = function(v) {
	var i64 = haxe.io.FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
haxe.zip = {};
haxe.zip.ExtraField = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"] };
haxe.zip.ExtraField.FUnknown = function(tag,bytes) { var $x = ["FUnknown",0,tag,bytes]; $x.__enum__ = haxe.zip.ExtraField; $x.toString = $estr; return $x; };
haxe.zip.ExtraField.FInfoZipUnicodePath = function(name,crc) { var $x = ["FInfoZipUnicodePath",1,name,crc]; $x.__enum__ = haxe.zip.ExtraField; $x.toString = $estr; return $x; };
haxe.zip.ExtraField.FUtf8 = ["FUtf8",2];
haxe.zip.ExtraField.FUtf8.toString = $estr;
haxe.zip.ExtraField.FUtf8.__enum__ = haxe.zip.ExtraField;
haxe.zip.Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe.zip.Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.HuffTools = function() {
};
haxe.zip.HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe.zip.HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js._Boot.HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe.zip.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js._Boot.HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe.zip.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe.zip.Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js._Boot.HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe.zip.Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js._Boot.HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js._Boot.HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe.ds.IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe.zip.HuffTools
};
haxe.zip._InflateImpl = {};
haxe.zip._InflateImpl.Window = function(hasCrc) {
	this.buffer = new haxe.io.Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe.crypto.Adler32();
	}
};
haxe.zip._InflateImpl.Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe.zip._InflateImpl.Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe.io.Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe.zip._InflateImpl.Window
};
haxe.zip._InflateImpl.State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe.zip._InflateImpl.State.Head = ["Head",0];
haxe.zip._InflateImpl.State.Head.toString = $estr;
haxe.zip._InflateImpl.State.Head.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Block = ["Block",1];
haxe.zip._InflateImpl.State.Block.toString = $estr;
haxe.zip._InflateImpl.State.Block.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.CData = ["CData",2];
haxe.zip._InflateImpl.State.CData.toString = $estr;
haxe.zip._InflateImpl.State.CData.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Flat = ["Flat",3];
haxe.zip._InflateImpl.State.Flat.toString = $estr;
haxe.zip._InflateImpl.State.Flat.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Crc = ["Crc",4];
haxe.zip._InflateImpl.State.Crc.toString = $estr;
haxe.zip._InflateImpl.State.Crc.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Dist = ["Dist",5];
haxe.zip._InflateImpl.State.Dist.toString = $estr;
haxe.zip._InflateImpl.State.Dist.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.DistOne = ["DistOne",6];
haxe.zip._InflateImpl.State.DistOne.toString = $estr;
haxe.zip._InflateImpl.State.DistOne.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Done = ["Done",7];
haxe.zip._InflateImpl.State.Done.toString = $estr;
haxe.zip._InflateImpl.State.Done.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip.InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe.zip.HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe.zip._InflateImpl.State.Head : haxe.zip._InflateImpl.State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe.zip._InflateImpl.Window(crc);
};
haxe.zip.InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe.zip.InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe.zip.InflateImpl.FIXED_HUFFMAN != null) {
			return haxe.zip.InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe.zip.InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				break;
			default:
				throw new js._Boot.HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js._Boot.HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js._Boot.HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js._Boot.HaxeError("Unsupported dictionary");
			}
			this.state = haxe.zip._InflateImpl.State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.state = haxe.zip._InflateImpl.State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			default:
				throw new js._Boot.HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.len = haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.dist = haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe.zip._InflateImpl.State.DistOne : haxe.zip._InflateImpl.State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe.zip._InflateImpl.State.Done;
				return true;
			}
			var crc = haxe.crypto.Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js._Boot.HaxeError("Invalid CRC");
			}
			this.state = haxe.zip._InflateImpl.State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe.zip.InflateImpl
};
haxe.zip.Reader = function(i) {
	this.i = i;
};
haxe.zip.Reader.__name__ = ["haxe","zip","Reader"];
haxe.zip.Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new List();
		while(length > 0) {
			if(length < 4) {
				throw new js._Boot.HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js._Boot.HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe.io.BytesBuffer();
					data.b.push(version);
					var src = this.i.read(len - 1);
					var b1 = data.b;
					var b2 = src.b;
					var _g1 = 0;
					var _g = src.length;
					while(_g1 < _g) {
						var i = _g1++;
						data.b.push(b2[i]);
					}
					fields.add(haxe.zip.ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe.zip.ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe.zip.ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js._Boot.HaxeError("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw new js._Boot.HaxeError("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js._Boot.HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe.zip.ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe.io.Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe.io.BytesBuffer();
					var z = new haxe.zip.InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						if(n < 0 || n > tmp.length) {
							throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
						}
						var b1 = out.b;
						var b2 = tmp.b;
						var _g1 = 0;
						var _g = n;
						while(_g1 < _g) {
							var i = _g1++;
							out.b.push(b2[i]);
						}
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe.zip.Reader
};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js._Boot.HaxeError);
	}
};
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js._Boot.HaxeError(val);
	}
};
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	__class__: js._Boot.HaxeError
});
js.html = {};
js.html.compat = {};
js.html.compat.ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js.html.compat.ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js.html.compat.ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js.html.compat.ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js.html.compat.ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js.html.compat.ArrayBuffer
};
js.html.compat.Float32Array = function() { };
js.html.compat.Float32Array.__name__ = ["js","html","compat","Float32Array"];
js.html.compat.Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js.html.compat.ArrayBuffer(_g2);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe.io.FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe.io.FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Float32Array._subarray;
	arr.set = js.html.compat.Float32Array._set;
	return arr;
};
js.html.compat.Float32Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Float32Array._subarray = function(start,end) {
	var a = js.html.compat.Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
js.html.compat.Float64Array = function() { };
js.html.compat.Float64Array.__name__ = ["js","html","compat","Float64Array"];
js.html.compat.Float64Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 3;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js.html.compat.ArrayBuffer(_g2);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 3;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val1 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			var val2 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe.io.FPHelper.i64ToDouble(val1,val2));
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var v = haxe.io.FPHelper.doubleToI64(f);
			var i3 = v.low;
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
			var i4 = v.high;
			buffer1.push(i4 & 255);
			buffer1.push(i4 >> 8 & 255);
			buffer1.push(i4 >> 16 & 255);
			buffer1.push(i4 >>> 24);
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Float64Array._subarray;
	arr.set = js.html.compat.Float64Array._set;
	return arr;
};
js.html.compat.Float64Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Float64Array._subarray = function(start,end) {
	var a = js.html.compat.Float64Array._new(this.slice(start,end));
	a.byteOffset = start * 8;
	return a;
};
js.html.compat.Uint8Array = function() { };
js.html.compat.Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js.html.compat.Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Uint8Array._subarray;
	arr.set = js.html.compat.Uint8Array._set;
	return arr;
};
js.html.compat.Uint8Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Uint8Array._subarray = function(start,end) {
	var a = js.html.compat.Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
system.ArgumentException = function() {
	system.Exception.call(this);
};
system.ArgumentException.__name__ = ["system","ArgumentException"];
system.ArgumentException.__super__ = system.Exception;
system.ArgumentException.prototype = $extend(system.Exception.prototype,{
	ArgumentException_CsString_CsString: function(message,paramName) {
		this.Exception_CsString(message);
		this.ParamName = paramName;
		return this;
	}
	,__class__: system.ArgumentException
});
system.collections = {};
system.collections.generic = {};
system.collections.generic.IEnumerable = function() { };
system.collections.generic.IEnumerable.__name__ = ["system","collections","generic","IEnumerable"];
system.Convert = function() { };
system.Convert.__name__ = ["system","Convert"];
system.Convert.toInt8 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._int8Buffer[0];
};
system.Convert.toUInt8 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint8Buffer[0];
};
system.Convert.toInt16 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._int16Buffer[0];
};
system.Convert.toUInt16 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint16Buffer[0];
};
system.Convert.toUInt32 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint32Buffer[0];
};
system.Convert.toInt32 = function(v) {
	system.Convert._uint32Buffer[0] = v;
	return system.Convert._int32Buffer[0];
};
system.Convert.toInt32_Double = function(v) {
	if(v >= 0) {
		if(v < 2147483647.5) {
			return v | 0;
		}
	} else if(v >= -2147483648.5) {
		return v | 0;
	}
	return v | 0;
};
system.Convert.toInt32_Single = function(v) {
	var this1 = v;
	return system.Convert.toInt32_Double(this1);
};
system._CsString = {};
system._CsString.CsString_Impl_ = {};
system._CsString.CsString_Impl_.__name__ = ["system","_CsString","CsString_Impl_"];
system._CsString.CsString_Impl_.split_CharArray = function(this1,chars) {
	var strings = [];
	var startPos = 0;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var cc = HxOverrides.cca(this1,i);
		if(chars.indexOf(cc) >= 0) {
			var endPos = i;
			if(endPos < startPos) {
				strings.push("");
			} else {
				strings.push(this1.substring(startPos,endPos));
			}
			startPos = i + 1;
		}
	}
	if(startPos < this1.length) {
		strings.push(this1.substring(startPos,this1.length));
	}
	return strings;
};
system._EventAction = {};
system._EventAction.EventAction_Impl_ = {};
system._EventAction.EventAction_Impl_.__name__ = ["system","_EventAction","EventAction_Impl_"];
system._EventAction.EventAction_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction.EventAction_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction.EventAction_Impl_.invoke = function(this1) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x();
	}
};
system._EventAction1 = {};
system._EventAction1.EventAction1_Impl_ = {};
system._EventAction1.EventAction1_Impl_.__name__ = ["system","_EventAction1","EventAction1_Impl_"];
system._EventAction1.EventAction1_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction1.EventAction1_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction1.EventAction1_Impl_.invoke = function(this1,p) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x(p);
	}
};
system._EventAction2 = {};
system._EventAction2.EventAction2_Impl_ = {};
system._EventAction2.EventAction2_Impl_.__name__ = ["system","_EventAction2","EventAction2_Impl_"];
system._EventAction2.EventAction2_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction2.EventAction2_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction2.EventAction2_Impl_.invoke = function(this1,p1,p2) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x(p1,p2);
	}
};
system.IFormatProvider = function() { };
system.IFormatProvider.__name__ = ["system","IFormatProvider"];
system._Int32 = {};
system._Int32.Int32_Impl_ = {};
system._Int32.Int32_Impl_.__name__ = ["system","_Int32","Int32_Impl_"];
system._Int32.Int32_Impl_.compareTo_Int32 = function(this1,other) {
	if(this1 < other) {
		return -1;
	}
	if(this1 > other) {
		return 1;
	}
	return 0;
};
system.Int32ArrayIterator = function(array) {
	this._array = array;
	this._i = 0;
};
system.Int32ArrayIterator.__name__ = ["system","Int32ArrayIterator"];
system.Int32ArrayIterator.prototype = {
	hasNext: function() {
		return this._i < this._array.length;
	}
	,next: function() {
		return this._array[this._i++];
	}
	,__class__: system.Int32ArrayIterator
};
system.collections.generic.IterableEnumerable = function(i) {
	this._iterable = i;
};
system.collections.generic.IterableEnumerable.__name__ = ["system","collections","generic","IterableEnumerable"];
system.collections.generic.IterableEnumerable.__interfaces__ = [system.collections.generic.IEnumerable];
system.collections.generic.IterableEnumerable.prototype = {
	__class__: system.collections.generic.IterableEnumerable
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"isReadyForPlayback",{ get : alphaTab.AlphaTabApi.prototype.get_isReadyForPlayback});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"playerState",{ get : alphaTab.AlphaTabApi.prototype.get_playerState});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"masterVolume",{ get : alphaTab.AlphaTabApi.prototype.get_masterVolume, set : alphaTab.AlphaTabApi.prototype.set_masterVolume});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"metronomeVolume",{ get : alphaTab.AlphaTabApi.prototype.get_metronomeVolume, set : alphaTab.AlphaTabApi.prototype.set_metronomeVolume});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"tickPosition",{ get : alphaTab.AlphaTabApi.prototype.get_tickPosition, set : alphaTab.AlphaTabApi.prototype.set_tickPosition});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"timePosition",{ get : alphaTab.AlphaTabApi.prototype.get_timePosition, set : alphaTab.AlphaTabApi.prototype.set_timePosition});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"playbackRange",{ get : alphaTab.AlphaTabApi.prototype.get_playbackRange, set : alphaTab.AlphaTabApi.prototype.set_playbackRange});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"playbackSpeed",{ get : alphaTab.AlphaTabApi.prototype.get_playbackSpeed, set : alphaTab.AlphaTabApi.prototype.set_playbackSpeed});
Object.defineProperty(alphaTab.AlphaTabApi.prototype,"isLooping",{ get : alphaTab.AlphaTabApi.prototype.get_isLooping, set : alphaTab.AlphaTabApi.prototype.set_isLooping});
Object.defineProperty(alphaTab.platform.model.Color.prototype,"a",{ get : alphaTab.platform.model.Color.prototype.get_a});
Object.defineProperty(alphaTab.platform.model.Color.prototype,"r",{ get : alphaTab.platform.model.Color.prototype.get_r});
Object.defineProperty(alphaTab.platform.model.Color.prototype,"g",{ get : alphaTab.platform.model.Color.prototype.get_g});
Object.defineProperty(alphaTab.platform.model.Color.prototype,"b",{ get : alphaTab.platform.model.Color.prototype.get_b});
Object.defineProperty(alphaTab.platform.model.Font.prototype,"isBold",{ get : alphaTab.platform.model.Font.prototype.get_isBold});
Object.defineProperty(alphaTab.platform.model.Font.prototype,"isItalic",{ get : alphaTab.platform.model.Font.prototype.get_isItalic});
alphaTab.util.Logger.logLevel = 0;
alphaTab.util.Logger.logLevel = 2;
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"isReady",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_isReady, set : alphaTab.audio.synth.AlphaSynth.prototype.set_isReady});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"isReadyForPlayback",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_isReadyForPlayback});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"state",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_state, set : alphaTab.audio.synth.AlphaSynth.prototype.set_state});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"logLevel",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_logLevel, set : alphaTab.audio.synth.AlphaSynth.prototype.set_logLevel});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"masterVolume",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_masterVolume, set : alphaTab.audio.synth.AlphaSynth.prototype.set_masterVolume});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"metronomeVolume",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_metronomeVolume, set : alphaTab.audio.synth.AlphaSynth.prototype.set_metronomeVolume});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"playbackSpeed",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_playbackSpeed, set : alphaTab.audio.synth.AlphaSynth.prototype.set_playbackSpeed});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"tickPosition",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_tickPosition, set : alphaTab.audio.synth.AlphaSynth.prototype.set_tickPosition});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"timePosition",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_timePosition, set : alphaTab.audio.synth.AlphaSynth.prototype.set_timePosition});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"playbackRange",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_playbackRange, set : alphaTab.audio.synth.AlphaSynth.prototype.set_playbackRange});
Object.defineProperty(alphaTab.audio.synth.AlphaSynth.prototype,"isLooping",{ get : alphaTab.audio.synth.AlphaSynth.prototype.get_isLooping, set : alphaTab.audio.synth.AlphaSynth.prototype.set_isLooping});
alphaTab.Environment.scriptFile = null;
alphaTab.Environment.bravuraFontChecker = null;
alphaTab.Environment.RenderEngines = null;
alphaTab.Environment.LayoutEngines = null;
alphaTab.Environment.StaveProfiles = null;
alphaTab.Environment.init();
Object.defineProperty(alphaTab.Settings.prototype,"songBook",{ get : alphaTab.Settings.prototype.get_songBook});
Object.defineProperty(alphaTab.audio.synth.midi.event.MidiEvent.prototype,"channel",{ get : alphaTab.audio.synth.midi.event.MidiEvent.prototype.get_channel});
Object.defineProperty(alphaTab.audio.synth.midi.event.MidiEvent.prototype,"command",{ get : alphaTab.audio.synth.midi.event.MidiEvent.prototype.get_command});
Object.defineProperty(alphaTab.audio.synth.midi.event.MidiEvent.prototype,"data1",{ get : alphaTab.audio.synth.midi.event.MidiEvent.prototype.get_data1, set : alphaTab.audio.synth.midi.event.MidiEvent.prototype.set_data1});
Object.defineProperty(alphaTab.audio.synth.midi.event.MidiEvent.prototype,"data2",{ get : alphaTab.audio.synth.midi.event.MidiEvent.prototype.get_data2, set : alphaTab.audio.synth.midi.event.MidiEvent.prototype.set_data2});
Object.defineProperty(alphaTab.importer.ScoreImporter.prototype,"name",{ get : alphaTab.importer.ScoreImporter.prototype.get_name});
Object.defineProperty(alphaTab.model.Bar.prototype,"masterBar",{ get : alphaTab.model.Bar.prototype.get_masterBar});
Object.defineProperty(alphaTab.model.Bar.prototype,"isEmpty",{ get : alphaTab.model.Bar.prototype.get_isEmpty});
Object.defineProperty(alphaTab.model.Beat.prototype,"isLastOfVoice",{ get : alphaTab.model.Beat.prototype.get_isLastOfVoice});
Object.defineProperty(alphaTab.model.Beat.prototype,"isLegatoDestination",{ get : alphaTab.model.Beat.prototype.get_isLegatoDestination});
Object.defineProperty(alphaTab.model.Beat.prototype,"isRest",{ get : alphaTab.model.Beat.prototype.get_isRest});
Object.defineProperty(alphaTab.model.Beat.prototype,"hasTuplet",{ get : alphaTab.model.Beat.prototype.get_hasTuplet});
Object.defineProperty(alphaTab.model.Beat.prototype,"hasWhammyBar",{ get : alphaTab.model.Beat.prototype.get_hasWhammyBar});
Object.defineProperty(alphaTab.model.Beat.prototype,"hasChord",{ get : alphaTab.model.Beat.prototype.get_hasChord});
Object.defineProperty(alphaTab.model.Beat.prototype,"chord",{ get : alphaTab.model.Beat.prototype.get_chord});
Object.defineProperty(alphaTab.model.Beat.prototype,"isTremolo",{ get : alphaTab.model.Beat.prototype.get_isTremolo});
Object.defineProperty(alphaTab.model.Beat.prototype,"absoluteDisplayStart",{ get : alphaTab.model.Beat.prototype.get_absoluteDisplayStart});
Object.defineProperty(alphaTab.model.Beat.prototype,"absolutePlaybackStart",{ get : alphaTab.model.Beat.prototype.get_absolutePlaybackStart});
Object.defineProperty(alphaTab.model.Beat.prototype,"isEffectSlurDestination",{ get : alphaTab.model.Beat.prototype.get_isEffectSlurDestination});
Object.defineProperty(alphaTab.model.MasterBar.prototype,"isRepeatEnd",{ get : alphaTab.model.MasterBar.prototype.get_isRepeatEnd});
Object.defineProperty(alphaTab.model.MasterBar.prototype,"isSectionStart",{ get : alphaTab.model.MasterBar.prototype.get_isSectionStart});
Object.defineProperty(alphaTab.model.Note.prototype,"hasBend",{ get : alphaTab.model.Note.prototype.get_hasBend});
Object.defineProperty(alphaTab.model.Note.prototype,"isStringed",{ get : alphaTab.model.Note.prototype.get_isStringed});
Object.defineProperty(alphaTab.model.Note.prototype,"isPiano",{ get : alphaTab.model.Note.prototype.get_isPiano});
Object.defineProperty(alphaTab.model.Note.prototype,"isPercussion",{ get : alphaTab.model.Note.prototype.get_isPercussion});
Object.defineProperty(alphaTab.model.Note.prototype,"isHammerPullDestination",{ get : alphaTab.model.Note.prototype.get_isHammerPullDestination});
Object.defineProperty(alphaTab.model.Note.prototype,"isSlurOrigin",{ get : alphaTab.model.Note.prototype.get_isSlurOrigin});
Object.defineProperty(alphaTab.model.Note.prototype,"isHarmonic",{ get : alphaTab.model.Note.prototype.get_isHarmonic});
Object.defineProperty(alphaTab.model.Note.prototype,"isTieOrigin",{ get : alphaTab.model.Note.prototype.get_isTieOrigin});
Object.defineProperty(alphaTab.model.Note.prototype,"trillFret",{ get : alphaTab.model.Note.prototype.get_trillFret});
Object.defineProperty(alphaTab.model.Note.prototype,"isTrill",{ get : alphaTab.model.Note.prototype.get_isTrill});
Object.defineProperty(alphaTab.model.Note.prototype,"isEffectSlurDestination",{ get : alphaTab.model.Note.prototype.get_isEffectSlurDestination});
Object.defineProperty(alphaTab.model.Note.prototype,"stringTuning",{ get : alphaTab.model.Note.prototype.get_stringTuning});
Object.defineProperty(alphaTab.model.Note.prototype,"realValue",{ get : alphaTab.model.Note.prototype.get_realValue});
Object.defineProperty(alphaTab.model.Note.prototype,"harmonicPitch",{ get : alphaTab.model.Note.prototype.get_harmonicPitch});
Object.defineProperty(alphaTab.model.Note.prototype,"displayValue",{ get : alphaTab.model.Note.prototype.get_displayValue});
Object.defineProperty(alphaTab.model.Note.prototype,"displayValueWithoutBend",{ get : alphaTab.model.Note.prototype.get_displayValueWithoutBend});
Object.defineProperty(alphaTab.model.Note.prototype,"hasQuarterToneOffset",{ get : alphaTab.model.Note.prototype.get_hasQuarterToneOffset});
Object.defineProperty(alphaTab.model.Staff.prototype,"isStringed",{ get : alphaTab.model.Staff.prototype.get_isStringed});
alphaTab.model.Tuning._sevenStrings = null;
alphaTab.model.Tuning._sixStrings = null;
alphaTab.model.Tuning._fiveStrings = null;
alphaTab.model.Tuning._fourStrings = null;
alphaTab.model.Tuning._defaultTunings = null;
alphaTab.model.Tuning.initialize();
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = null;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId = 0;
var this1 = {}
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = this1;
Object.defineProperty(alphaTab.platform.javaScript.AlphaTabApi.prototype,"playerState",{ get : alphaTab.platform.javaScript.AlphaTabApi.prototype.get_playerState});
Object.defineProperty(alphaTab.rendering.ScoreRenderer.prototype,"boundsLookup",{ get : alphaTab.rendering.ScoreRenderer.prototype.get_boundsLookup, set : alphaTab.rendering.ScoreRenderer.prototype.set_boundsLookup});
Object.defineProperty(alphaTab.rendering.ScoreRenderer.prototype,"width",{ get : alphaTab.rendering.ScoreRenderer.prototype.get_width, set : alphaTab.rendering.ScoreRenderer.prototype.set_width});
alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = null;
alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = null;
var this1 = {}
alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = this1;
var normalKeyNotes = new Int32Array([32,34,35,36,38,39,40,41,43,45,47,48,50,55,56,58,60,61]);
var i = 0;
while(i < normalKeyNotes.length) {
	alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys[normalKeyNotes[i]] = true;
	++i;
}
var this2 = {}
alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = this2;
var xKeyNotes = new Int32Array([31,33,37,42,44,54,62,63,64,65,66]);
var i1 = 0;
while(i1 < xKeyNotes.length) {
	alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys[xKeyNotes[i1]] = true;
	++i1;
}
alphaTab.xml.XmlParser.Escapes = null;
var this1 = {}
alphaTab.xml.XmlParser.Escapes = this1;
alphaTab.xml.XmlParser.Escapes["lt"] = "<";
alphaTab.xml.XmlParser.Escapes["gt"] = ">";
alphaTab.xml.XmlParser.Escapes["amp"] = "&";
alphaTab.xml.XmlParser.Escapes["quot"] = "\"";
alphaTab.xml.XmlParser.Escapes["apos"] = "'";
var ArrayBuffer = $global.ArrayBuffer || js.html.compat.ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js.html.compat.ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js.html.compat.Float32Array._new;
var Float64Array = $global.Float64Array || ($global.Float32Array ? "notsupported" : null) || js.html.compat.Float64Array._new;
var Uint8Array = $global.Uint8Array || js.html.compat.Uint8Array._new;
alphaTab.CoreSettings.__meta__ = { fields : { scriptFile : { json : ["scriptFile"]}, fontDirectory : { json : ["fontDirectory"]}, enableLazyLoading : { json : ["enableLazyLoading"]}, engine : { json : ["engine"]}, logLevel : { json : ["logLevel"]}, useWorkers : { json : ["useWorkers"]}, includeNoteBounds : { json : ["includeNoteBounds"]}}};
alphaTab.DisplaySettings.__meta__ = { fields : { scale : { json : ["scale"]}, stretchForce : { json : ["stretchForce"]}, layoutMode : { json : ["layoutMode"]}, staveProfile : { json : ["staveProfile"]}, barsPerRow : { json : ["barsPerRow"]}, startBar : { json : ["startBar"]}, barCount : { json : ["barCount"]}, barCountPerPartial : { json : ["barCountPerPartial"]}, resources : { json : ["resources"]}, padding : { json : ["padding"]}}};
alphaTab.platform.svg.SvgCanvas.BlurCorrection = 0;
alphaTab.platform.model.Color.__meta__ = { obj : { immutable : null}};
alphaTab.platform.model.Color.BlackRgb = "#000000";
alphaTab.platform.model.Font.__meta__ = { obj : { immutable : null}};
alphaTab.platform.javaScript.Html5Canvas.BlurCorrection = 0;
js.Boot.__toStr = ({ }).toString;
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPrefix = "alphaSynth.";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdInitialize = "alphaSynth." + "initialize";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetLogLevel = "alphaSynth." + "setLogLevel";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMasterVolume = "alphaSynth." + "setMasterVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMetronomeVolume = "alphaSynth." + "setMetronomeVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackSpeed = "alphaSynth." + "setPlaybackSpeed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTickPosition = "alphaSynth." + "setTickPosition";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTimePosition = "alphaSynth." + "setTimePosition";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackRange = "alphaSynth." + "setPlaybackRange";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetIsLooping = "alphaSynth." + "setIsLooping";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlay = "alphaSynth." + "play";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPause = "alphaSynth." + "pause";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayPause = "alphaSynth." + "playPause";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdStop = "alphaSynth." + "stop";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadSoundFontBytes = "alphaSynth." + "loadSoundFontBytes";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadMidi = "alphaSynth." + "loadMidi";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelMute = "alphaSynth." + "setChannelMute";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelSolo = "alphaSynth." + "setChannelSolo";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelVolume = "alphaSynth." + "setChannelVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelProgram = "alphaSynth." + "setChannelProgram";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdResetChannelStates = "alphaSynth." + "resetChannelStates";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReady = "alphaSynth." + "ready";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReadyForPlayback = "alphaSynth." + "readyForPlayback";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPositionChanged = "alphaSynth." + "positionChanged";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayerStateChanged = "alphaSynth." + "playerStateChanged";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdFinished = "alphaSynth." + "finished";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoaded = "alphaSynth." + "soundFontLoaded";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoadFailed = "alphaSynth." + "soundFontLoadFailed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoaded = "alphaSynth." + "midiLoaded";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoadFailed = "alphaSynth." + "midiLoadFailed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLog = "alphaSynth." + "log";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPrefix = "alphaSynth." + "output.";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSequencerFinished = "alphaSynth." + "output." + "sequencerFinished";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputAddSamples = "alphaSynth." + "output." + "addSamples";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPlay = "alphaSynth." + "output." + "play";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPause = "alphaSynth." + "output." + "pause";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputResetSamples = "alphaSynth." + "output." + "resetSamples";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest = "alphaSynth." + "output." + "sampleRequest";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputFinished = "alphaSynth." + "output." + "finished";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed = "alphaSynth." + "output." + "samplesPlayed";
alphaTab.audio.synth.synthesis.TinySoundFont.MicroBufferCount = 32;
alphaTab.audio.synth.synthesis.TinySoundFont.MicroBufferSize = 64;
alphaTab.rendering.layout.PageViewLayout.PagePadding = new Float32Array([40,40,40,40]);
alphaTab.rendering.layout.PageViewLayout.GroupSpacing = 20;
alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding = new Float32Array([20,20,20,20]);
alphaTab.rendering.layout.HorizontalScreenLayout.GroupSpacing = 20;
alphaTab._FingeringMode.FingeringMode_Impl_.ScoreDefault = 0;
alphaTab._FingeringMode.FingeringMode_Impl_.ScoreForcePiano = 1;
alphaTab._FingeringMode.FingeringMode_Impl_.SingleNoteEffectBand = 2;
alphaTab._FingeringMode.FingeringMode_Impl_.SingleNoteEffectBandForcePiano = 3;
alphaTab.ImporterSettings.__meta__ = { fields : { encoding : { json : ["encoding"]}, mergePartGroupsInMusicXml : { json : ["mergePartGroupsInMusicXml"]}}};
alphaTab._LayoutMode.LayoutMode_Impl_.Page = 0;
alphaTab._LayoutMode.LayoutMode_Impl_.Horizontal = 1;
alphaTab._NotationMode.NotationMode_Impl_.GuitarPro = 0;
alphaTab._NotationMode.NotationMode_Impl_.SongBook = 1;
alphaTab.NotationSettings.__meta__ = { fields : { notationMode : { json : ["notationMode"]}, fingeringMode : { json : ["fingeringMode"]}, hideInfo : { json : ["hideInfo"]}, hideTuning : { json : ["hideTuning"]}, hideTrackNames : { json : ["hideTrackNames"]}, hideChordDiagrams : { json : ["hideChordDiagrams"]}, rhythmMode : { json : ["rhythmMode"]}, rhythmHeight : { json : ["rhythmHeight"]}, transpositionPitches : { json : ["transpositionPitches"]}, displayTranspositionPitches : { json : ["displayTranspositionPitches"]}, smallGraceTabNotes : { json : ["smallGraceTabNotes"]}, extendBendArrowsOnTiedNotes : { json : ["extendBendArrowsOnTiedNotes"]}, showParenthesisForTiedBends : { json : ["showParenthesisForTiedBends"]}, showTabNoteOnTiedBend : { json : ["showTabNoteOnTiedBend"]}, showZeroOnDiveWhammy : { json : ["showZeroOnDiveWhammy"]}, extendLineEffectsToBeatEnd : { json : ["extendLineEffectsToBeatEnd"]}, slurHeight : { json : ["slurHeight"]}}};
alphaTab.PlayerSettings.__meta__ = { fields : { soundFont : { json : ["soundFont"]}, scrollElement : { json : ["scrollElement"]}, enablePlayer : { json : ["enablePlayer"]}, enableCursor : { json : ["enableCursor"]}, scrollOffsetX : { json : ["scrollOffsetX"]}, scrollOffsetY : { json : ["scrollOffsetY"]}, scrollMode : { json : ["scrollMode"]}, scrollSpeed : { json : ["scrollSpeed"]}, songBookBendDuration : { json : ["songBookBendDuration"]}, songBookDipDuration : { json : ["songBookDipDuration"]}, vibrato : { json : ["vibrato"]}}};
alphaTab.RenderingResources.__meta__ = { fields : { copyrightFont : { json : ["copyrightFont"]}, titleFont : { json : ["titleFont"]}, subTitleFont : { json : ["subTitleFont"]}, wordsFont : { json : ["wordsFont"]}, effectFont : { json : ["effectFont"]}, fretboardNumberFont : { json : ["fretboardNumberFont"]}, tablatureFont : { json : ["tablatureFont"]}, graceFont : { json : ["graceFont"]}, staffLineColor : { json : ["staffLineColor"]}, barSeparatorColor : { json : ["barSeparatorColor"]}, barNumberFont : { json : ["barNumberFont"]}, barNumberColor : { json : ["barNumberColor"]}, fingeringFont : { json : ["fingeringFont"]}, markerFont : { json : ["markerFont"]}, mainGlyphColor : { json : ["mainGlyphColor"]}, secondaryGlyphColor : { json : ["secondaryGlyphColor"]}, scoreInfoColor : { json : ["scoreInfoColor"]}}};
alphaTab._ScrollMode.ScrollMode_Impl_.Off = 0;
alphaTab._ScrollMode.ScrollMode_Impl_.Continuous = 1;
alphaTab._ScrollMode.ScrollMode_Impl_.OffScreen = 2;
alphaTab.Settings.__meta__ = { fields : { core : { json : ["core",""]}, display : { json : ["display",""]}, notation : { json : ["notation"]}, importer : { json : ["importer"]}, player : { json : ["player"]}}};
alphaTab._StaveProfile.StaveProfile_Impl_.Default = 0;
alphaTab._StaveProfile.StaveProfile_Impl_.ScoreTab = 1;
alphaTab._StaveProfile.StaveProfile_Impl_.Score = 2;
alphaTab._StaveProfile.StaveProfile_Impl_.Tab = 3;
alphaTab._StaveProfile.StaveProfile_Impl_.TabMixed = 4;
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.Hidden = 0;
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.ShowWithBeams = 1;
alphaTab._TabRhythmMode.TabRhythmMode_Impl_.ShowWithBars = 2;
alphaTab.VibratoPlaybackSettings.__meta__ = { fields : { noteWideLength : { json : ["noteWideLength"]}, noteWideAmplitude : { json : ["noteWideAmplitude"]}, noteSlightLength : { json : ["noteSlightLength"]}, noteSlightAmplitude : { json : ["noteSlightAmplitude"]}, beatWideLength : { json : ["beatWideLength"]}, beatWideAmplitude : { json : ["beatWideAmplitude"]}, beatSlightLength : { json : ["beatSlightLength"]}, beatSlightAmplitude : { json : ["beatSlightAmplitude"]}}};
alphaTab.audio.MidiUtils.QuarterTime = 960;
alphaTab.audio.MidiUtils.MinVelocity = 15;
alphaTab.audio.MidiUtils.VelocityIncrement = 16;
alphaTab.audio.generator.MidiFileGenerator.DefaultDurationDead = 30;
alphaTab.audio.generator.MidiFileGenerator.DefaultDurationPalmMute = 80;
alphaTab.audio.generator.MidiFileGenerator.DefaultBend = 32;
alphaTab.audio.generator.MidiFileGenerator.DefaultBendSemitone = 2.75;
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Paused = 0;
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Playing = 1;
alphaTab.audio.synth.midi.MidiHelper.MicroSecondsPerMinute = 60000000;
alphaTab.audio.synth.midi.MidiHelper.MinChannel = 0;
alphaTab.audio.synth.midi.MidiHelper.MaxChannel = 15;
alphaTab.audio.synth.midi.MidiHelper.DrumChannel = 9;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.BankSelectCoarse = 0;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ModulationCoarse = 1;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.DataEntryCoarse = 6;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.VolumeCoarse = 7;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.PanCoarse = 10;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ExpressionControllerCoarse = 11;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ModulationFine = 33;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.DataEntryFine = 38;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.VolumeFine = 39;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.PanFine = 42;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ExpressionControllerFine = 43;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.HoldPedal = 64;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.LegatoPedal = 68;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.NonRegisteredParameterFine = 98;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.NonRegisteredParameterCourse = 99;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.RegisteredParameterFine = 100;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.RegisteredParameterCourse = 101;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.ResetControllers = 121;
alphaTab.audio.synth.midi.event._ControllerType.ControllerType_Impl_.AllNotesOff = 123;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceNumber = 0;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TextEvent = 1;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CopyrightNotice = 2;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceOrTrackName = 3;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.InstrumentName = 4;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.LyricText = 5;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MarkerText = 6;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CuePoint = 7;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PatchName = 8;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PortName = 9;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiChannel = 32;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiPort = 33;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.EndOfTrack = 47;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.Tempo = 81;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SmpteOffset = 84;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TimeSignature = 88;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.KeySignature = 89;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequencerSpecific = 127;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteOff = 128;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteOn = 144;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.NoteAftertouch = 160;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.Controller = 176;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ProgramChange = 192;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.ChannelAftertouch = 208;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.PitchBend = 224;
alphaTab.audio.synth.midi.event._MidiEventType.MidiEventType_Impl_.Meta = 255;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive = 240;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.MtcQuarterFrame = 241;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongPosition = 242;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongSelect = 243;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.TuneRequest = 246;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive2 = 247;
alphaTab.audio.synth.soundFont.HydraIbag.SizeInFile = 4;
alphaTab.audio.synth.soundFont.HydraIgen.SizeInFile = 4;
alphaTab.audio.synth.soundFont.HydraImod.SizeInFile = 10;
alphaTab.audio.synth.soundFont.HydraInst.SizeInFile = 22;
alphaTab.audio.synth.soundFont.HydraPbag.SizeInFile = 4;
alphaTab.audio.synth.soundFont.HydraPgen.SizeInFile = 4;
alphaTab.audio.synth.soundFont.HydraPgen.GenInstrument = 41;
alphaTab.audio.synth.soundFont.HydraPgen.GenKeyRange = 43;
alphaTab.audio.synth.soundFont.HydraPgen.GenVelRange = 44;
alphaTab.audio.synth.soundFont.HydraPgen.GenSampleId = 53;
alphaTab.audio.synth.soundFont.HydraPhdr.SizeInFile = 38;
alphaTab.audio.synth.soundFont.HydraPmod.SizeInFile = 10;
alphaTab.audio.synth.soundFont.HydraShdr.SizeInFile = 46;
alphaTab.audio.synth.soundFont.RiffChunk.HeaderSize = 8;
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.None = 0;
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.Continuous = 1;
alphaTab.audio.synth.synthesis._LoopMode.LoopMode_Impl_.Sustain = 2;
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.StereoInterleaved = 0;
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.StereoUnweaved = 1;
alphaTab.audio.synth.synthesis._OutputMode.OutputMode_Impl_.Mono = 2;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.StartAddrsOffset = 0;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.EndAddrsOffset = 1;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.StartloopAddrsOffset = 2;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.EndloopAddrsOffset = 3;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.StartAddrsCoarseOffset = 4;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ModLfoToPitch = 5;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.VibLfoToPitch = 6;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ModEnvToPitch = 7;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.InitialFilterFc = 8;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.InitialFilterQ = 9;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ModLfoToFilterFc = 10;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ModEnvToFilterFc = 11;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.EndAddrsCoarseOffset = 12;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ModLfoToVolume = 13;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Unused1 = 14;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ChorusEffectsSend = 15;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ReverbEffectsSend = 16;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Pan = 17;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Unused2 = 18;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Unused3 = 19;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Unused4 = 20;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DelayModLFO = 21;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.FreqModLFO = 22;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DelayVibLFO = 23;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.FreqVibLFO = 24;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DelayModEnv = 25;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.AttackModEnv = 26;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.HoldModEnv = 27;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DecayModEnv = 28;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.SustainModEnv = 29;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ReleaseModEnv = 30;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.KeynumToModEnvHold = 31;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.KeynumToModEnvDecay = 32;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DelayVolEnv = 33;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.AttackVolEnv = 34;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.HoldVolEnv = 35;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.DecayVolEnv = 36;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.SustainVolEnv = 37;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ReleaseVolEnv = 38;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.KeynumToVolEnvHold = 39;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.KeynumToVolEnvDecay = 40;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Instrument = 41;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Reserved1 = 42;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.KeyRange = 43;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.VelRange = 44;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.StartloopAddrsCoarseOffset = 45;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Keynum = 46;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Velocity = 47;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.InitialAttenuation = 48;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Reserved2 = 49;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.EndloopAddrsCoarseOffset = 50;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.CoarseTune = 51;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.FineTune = 52;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.SampleID = 53;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.SampleModes = 54;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Reserved3 = 55;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ScaleTuning = 56;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.ExclusiveClass = 57;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.OverridingRootKey = 58;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.Unused5 = 59;
alphaTab.audio.synth.synthesis._Region_GenOperators.Region_GenOperators_Impl_.EndOper = 60;
alphaTab.audio.synth.synthesis.Voice.RenderEffectSampleBLock = 64;
alphaTab.audio.synth.synthesis.VoiceEnvelope.FastReleaseTime = 0.01;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.None = 0;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Delay = 1;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Attack = 2;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Hold = 3;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Decay = 4;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Sustain = 5;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Release = 6;
alphaTab.audio.synth.synthesis._VoiceEnvelopeSegment.VoiceEnvelopeSegment_Impl_.Done = 7;
alphaTab.audio.synth.util.SynthConstants.DrumBank = 128;
alphaTab.audio.synth.util.SynthConstants.DefaultChannelCount = 17;
alphaTab.audio.synth.util.SynthConstants.MetronomeChannel = 17 - 1;
alphaTab.audio.synth.util.SynthConstants.AudioChannels = 2;
alphaTab.audio.synth.util.SynthConstants.MinVolume = 0;
alphaTab.audio.synth.util.SynthConstants.MaxVolume = 1;
alphaTab.audio.synth.util.SynthConstants.MinProgram = 0;
alphaTab.audio.synth.util.SynthConstants.MaxProgram = 127;
alphaTab.audio.synth.util.SynthConstants.MinPlaybackSpeed = 0.125;
alphaTab.audio.synth.util.SynthConstants.MaxPlaybackSpeed = 8;
alphaTab.importer.AlphaTexImporter.Eof = 0;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.No = 0;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Eof = 1;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Number = 2;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.DoubleDot = 3;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Dot = 4;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.String = 5;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Tuning = 6;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LParensis = 7;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RParensis = 8;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LBrace = 9;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RBrace = 10;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Pipe = 11;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.MetaCommand = 12;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Multiply = 13;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LowerThan = 14;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Property = 15;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Boolean = 0;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Integer = 1;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Float = 2;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.String = 3;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Point = 4;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Size = 5;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Rectangle = 6;
alphaTab.importer._BinaryStylesheetParser_DataType.BinaryStylesheetParser_DataType_Impl_.Color = 7;
alphaTab.importer.Gp3To5Importer.VersionString = "FICHIER GUITAR PRO ";
alphaTab.importer.Gp3To5Importer.BendStep = 25;
alphaTab.importer.GpifParser.InvalidId = "-1";
alphaTab.importer.GpifParser.BendPointPositionFactor = 0.6;
alphaTab.importer.GpifParser.BendPointValueFactor = 0.04;
alphaTab.importer.GpxFileSystem.HeaderBcFs = "BCFS";
alphaTab.importer.GpxFileSystem.HeaderBcFz = "BCFZ";
alphaTab.importer.GpxFileSystem.ScoreGpif = "score.gpif";
alphaTab.importer.GpxFileSystem.BinaryStylesheet = "BinaryStylesheet";
alphaTab.importer.GpxFileSystem.PartConfiguration = "PartConfiguration";
alphaTab.io.BitReader.ByteSize = 8;
alphaTab.model._AccentuationType.AccentuationType_Impl_.None = 0;
alphaTab.model._AccentuationType.AccentuationType_Impl_.Normal = 1;
alphaTab.model._AccentuationType.AccentuationType_Impl_.Heavy = 2;
alphaTab.model._AccidentalType.AccidentalType_Impl_.None = 0;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Natural = 1;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Sharp = 2;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Flat = 3;
alphaTab.model._AccidentalType.AccidentalType_Impl_.NaturalQuarterNoteUp = 4;
alphaTab.model._AccidentalType.AccidentalType_Impl_.SharpQuarterNoteUp = 5;
alphaTab.model._AccidentalType.AccidentalType_Impl_.FlatQuarterNoteUp = 6;
alphaTab.model._AutomationType.AutomationType_Impl_.Tempo = 0;
alphaTab.model._AutomationType.AutomationType_Impl_.Volume = 1;
alphaTab.model._AutomationType.AutomationType_Impl_.Instrument = 2;
alphaTab.model._AutomationType.AutomationType_Impl_.Balance = 3;
alphaTab.model.Bar._globalBarId = 0;
alphaTab.model.Beat._globalBeatId = 0;
alphaTab.model.BendPoint.MaxPosition = 60;
alphaTab.model.BendPoint.MaxValue = 12;
alphaTab.model._BendStyle.BendStyle_Impl_.Default = 0;
alphaTab.model._BendStyle.BendStyle_Impl_.Gradual = 1;
alphaTab.model._BendStyle.BendStyle_Impl_.Fast = 2;
alphaTab.model._BendType.BendType_Impl_.None = 0;
alphaTab.model._BendType.BendType_Impl_.Custom = 1;
alphaTab.model._BendType.BendType_Impl_.Bend = 2;
alphaTab.model._BendType.BendType_Impl_.Release = 3;
alphaTab.model._BendType.BendType_Impl_.BendRelease = 4;
alphaTab.model._BendType.BendType_Impl_.Hold = 5;
alphaTab.model._BendType.BendType_Impl_.Prebend = 6;
alphaTab.model._BendType.BendType_Impl_.PrebendBend = 7;
alphaTab.model._BendType.BendType_Impl_.PrebendRelease = 8;
alphaTab.model._BrushType.BrushType_Impl_.None = 0;
alphaTab.model._BrushType.BrushType_Impl_.BrushUp = 1;
alphaTab.model._BrushType.BrushType_Impl_.BrushDown = 2;
alphaTab.model._BrushType.BrushType_Impl_.ArpeggioUp = 3;
alphaTab.model._BrushType.BrushType_Impl_.ArpeggioDown = 4;
alphaTab.model._Clef.Clef_Impl_.Neutral = 0;
alphaTab.model._Clef.Clef_Impl_.C3 = 1;
alphaTab.model._Clef.Clef_Impl_.C4 = 2;
alphaTab.model._Clef.Clef_Impl_.F4 = 3;
alphaTab.model._Clef.Clef_Impl_.G2 = 4;
alphaTab.model._CrescendoType.CrescendoType_Impl_.None = 0;
alphaTab.model._CrescendoType.CrescendoType_Impl_.Crescendo = 1;
alphaTab.model._CrescendoType.CrescendoType_Impl_.Decrescendo = 2;
alphaTab.model._Duration.Duration_Impl_.QuadrupleWhole = -4;
alphaTab.model._Duration.Duration_Impl_.DoubleWhole = -2;
alphaTab.model._Duration.Duration_Impl_.Whole = 1;
alphaTab.model._Duration.Duration_Impl_.Half = 2;
alphaTab.model._Duration.Duration_Impl_.Quarter = 4;
alphaTab.model._Duration.Duration_Impl_.Eighth = 8;
alphaTab.model._Duration.Duration_Impl_.Sixteenth = 16;
alphaTab.model._Duration.Duration_Impl_.ThirtySecond = 32;
alphaTab.model._Duration.Duration_Impl_.SixtyFourth = 64;
alphaTab.model._Duration.Duration_Impl_.OneHundredTwentyEighth = 128;
alphaTab.model._Duration.Duration_Impl_.TwoHundredFiftySixth = 256;
alphaTab.model._DynamicValue.DynamicValue_Impl_.PPP = 0;
alphaTab.model._DynamicValue.DynamicValue_Impl_.PP = 1;
alphaTab.model._DynamicValue.DynamicValue_Impl_.P = 2;
alphaTab.model._DynamicValue.DynamicValue_Impl_.MP = 3;
alphaTab.model._DynamicValue.DynamicValue_Impl_.MF = 4;
alphaTab.model._DynamicValue.DynamicValue_Impl_.F = 5;
alphaTab.model._DynamicValue.DynamicValue_Impl_.FF = 6;
alphaTab.model._DynamicValue.DynamicValue_Impl_.FFF = 7;
alphaTab.model._FermataType.FermataType_Impl_.Short = 0;
alphaTab.model._FermataType.FermataType_Impl_.Medium = 1;
alphaTab.model._FermataType.FermataType_Impl_.Long = 2;
alphaTab.model._Fingers.Fingers_Impl_.Unknown = -2;
alphaTab.model._Fingers.Fingers_Impl_.NoOrDead = -1;
alphaTab.model._Fingers.Fingers_Impl_.Thumb = 0;
alphaTab.model._Fingers.Fingers_Impl_.IndexFinger = 1;
alphaTab.model._Fingers.Fingers_Impl_.MiddleFinger = 2;
alphaTab.model._Fingers.Fingers_Impl_.AnnularFinger = 3;
alphaTab.model._Fingers.Fingers_Impl_.LittleFinger = 4;
alphaTab.model._GraceType.GraceType_Impl_.None = 0;
alphaTab.model._GraceType.GraceType_Impl_.OnBeat = 1;
alphaTab.model._GraceType.GraceType_Impl_.BeforeBeat = 2;
alphaTab.model._GraceType.GraceType_Impl_.BendGrace = 3;
alphaTab.model._HarmonicType.HarmonicType_Impl_.None = 0;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Natural = 1;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Artificial = 2;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Pinch = 3;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Tap = 4;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Semi = 5;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Feedback = 6;
alphaTab.model._KeySignature.KeySignature_Impl_.Cb = -7;
alphaTab.model._KeySignature.KeySignature_Impl_.Gb = -6;
alphaTab.model._KeySignature.KeySignature_Impl_.Db = -5;
alphaTab.model._KeySignature.KeySignature_Impl_.Ab = -4;
alphaTab.model._KeySignature.KeySignature_Impl_.Eb = -3;
alphaTab.model._KeySignature.KeySignature_Impl_.Bb = -2;
alphaTab.model._KeySignature.KeySignature_Impl_.F = -1;
alphaTab.model._KeySignature.KeySignature_Impl_.C = 0;
alphaTab.model._KeySignature.KeySignature_Impl_.G = 1;
alphaTab.model._KeySignature.KeySignature_Impl_.D = 2;
alphaTab.model._KeySignature.KeySignature_Impl_.A = 3;
alphaTab.model._KeySignature.KeySignature_Impl_.E = 4;
alphaTab.model._KeySignature.KeySignature_Impl_.B = 5;
alphaTab.model._KeySignature.KeySignature_Impl_.FSharp = 6;
alphaTab.model._KeySignature.KeySignature_Impl_.CSharp = 7;
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Major = 0;
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Minor = 1;
alphaTab.model.Lyrics.CharCodeLF = 10;
alphaTab.model.Lyrics.CharCodeTab = 9;
alphaTab.model.Lyrics.CharCodeCR = 13;
alphaTab.model.Lyrics.CharCodeSpace = 32;
alphaTab.model.Lyrics.CharCodeBrackedClose = 93;
alphaTab.model.Lyrics.CharCodeBrackedOpen = 91;
alphaTab.model.Lyrics.CharCodeDash = 45;
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.IgnoreSpaces = 0;
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Begin = 1;
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Text = 2;
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Comment = 3;
alphaTab.model._Lyrics_LyricsState.Lyrics_LyricsState_Impl_.Dash = 4;
alphaTab.model.MasterBar.MaxAlternateEndings = 8;
alphaTab.model.Note.GlobalNoteId = 0;
alphaTab.model.Note.MaxOffsetForSameLineSearch = 3;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.Default = 0;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.SwapAccidentals = 1;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceNatural = 2;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceSharp = 3;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceFlat = 4;
alphaTab.model._Ottavia.Ottavia_Impl_._15ma = 0;
alphaTab.model._Ottavia.Ottavia_Impl_._8va = 1;
alphaTab.model._Ottavia.Ottavia_Impl_.Regular = 2;
alphaTab.model._Ottavia.Ottavia_Impl_._8vb = 3;
alphaTab.model._Ottavia.Ottavia_Impl_._15mb = 4;
alphaTab.model._PickStroke.PickStroke_Impl_.None = 0;
alphaTab.model._PickStroke.PickStroke_Impl_.Up = 1;
alphaTab.model._PickStroke.PickStroke_Impl_.Down = 2;
alphaTab.model._SimileMark.SimileMark_Impl_.None = 0;
alphaTab.model._SimileMark.SimileMark_Impl_.Simple = 1;
alphaTab.model._SimileMark.SimileMark_Impl_.FirstOfDouble = 2;
alphaTab.model._SimileMark.SimileMark_Impl_.SecondOfDouble = 3;
alphaTab.model._SlideInType.SlideInType_Impl_.None = 0;
alphaTab.model._SlideInType.SlideInType_Impl_.IntoFromBelow = 1;
alphaTab.model._SlideInType.SlideInType_Impl_.IntoFromAbove = 2;
alphaTab.model._SlideOutType.SlideOutType_Impl_.None = 0;
alphaTab.model._SlideOutType.SlideOutType_Impl_.Shift = 1;
alphaTab.model._SlideOutType.SlideOutType_Impl_.Legato = 2;
alphaTab.model._SlideOutType.SlideOutType_Impl_.OutUp = 3;
alphaTab.model._SlideOutType.SlideOutType_Impl_.OutDown = 4;
alphaTab.model._SlideOutType.SlideOutType_Impl_.PickSlideDown = 5;
alphaTab.model._SlideOutType.SlideOutType_Impl_.PickSlideUp = 6;
alphaTab.model.Track.ShortNameMaxLength = 10;
alphaTab.model._TripletFeel.TripletFeel_Impl_.NoTripletFeel = 0;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet16th = 1;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet8th = 2;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted16th = 3;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted8th = 4;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish16th = 5;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish8th = 6;
alphaTab.model.TupletGroup.HalfTicks = 1920;
alphaTab.model.TupletGroup.QuarterTicks = 960;
alphaTab.model.TupletGroup.EighthTicks = 480;
alphaTab.model.TupletGroup.SixteenthTicks = 240;
alphaTab.model.TupletGroup.ThirtySecondTicks = 120;
alphaTab.model.TupletGroup.SixtyFourthTicks = 60;
alphaTab.model.TupletGroup.OneHundredTwentyEighthTicks = 30;
alphaTab.model.TupletGroup.TwoHundredFiftySixthTicks = 15;
alphaTab.model.TupletGroup.AllTicks = new Int32Array([1920,960,480,240,120,60,30,15]);
alphaTab.model._VibratoType.VibratoType_Impl_.None = 0;
alphaTab.model._VibratoType.VibratoType_Impl_.Slight = 1;
alphaTab.model._VibratoType.VibratoType_Impl_.Wide = 2;
alphaTab.model._WhammyType.WhammyType_Impl_.None = 0;
alphaTab.model._WhammyType.WhammyType_Impl_.Custom = 1;
alphaTab.model._WhammyType.WhammyType_Impl_.Dive = 2;
alphaTab.model._WhammyType.WhammyType_Impl_.Dip = 3;
alphaTab.model._WhammyType.WhammyType_Impl_.Hold = 4;
alphaTab.model._WhammyType.WhammyType_Impl_.Predive = 5;
alphaTab.model._WhammyType.WhammyType_Impl_.PrediveDive = 6;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.PreferredSampleRate = 44100;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Id = "alphaSynthFlashPlayer";
alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId = 0;
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferSize = 4096;
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferCount = 10;
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.PreferredSampleRate = 44100;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Plain = 0;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Bold = 1;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Italic = 2;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Left = 0;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Center = 1;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Right = 2;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Top = 0;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Middle = 1;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Bottom = 2;
alphaTab.platform.svg.FontSizes.ControlChars = 32;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PreNotes = 0;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.OnNotes = 1;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.MiddleNotes = 2;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PostNotes = 3;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.EndBeat = 4;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SinglePreBeat = 0;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SingleOnBeat = 1;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SingleOnBeatToEnd = 2;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedBeforeBeat = 3;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedOnBeat = 4;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedOnBeatToEnd = 5;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.FullBar = 6;
alphaTab.rendering.ScoreBarRenderer.StaffId = "score";
alphaTab.rendering.ScoreBarRenderer.SharpKsSteps = new Int32Array([1,4,0,3,6,2,5]);
alphaTab.rendering.ScoreBarRenderer.FlatKsSteps = new Int32Array([5,2,6,3,7,4,8]);
alphaTab.rendering.ScoreBarRenderer.LineSpacing = 8;
alphaTab.rendering.ScoreBarRenderer.StemWidth = 1.3;
alphaTab.rendering.TabBarRenderer.StaffId = "tab";
alphaTab.rendering.TabBarRenderer.LineSpacing = 10;
alphaTab.rendering.glyphs.AccidentalGroupGlyph.NonReserved = -3000;
alphaTab.rendering.glyphs.AlternateEndingsGlyph.Padding = 3;
alphaTab.rendering.glyphs.BendNoteHeadGroupGlyph.ElementPadding = 2;
alphaTab.rendering.glyphs.ChordDiagramContainerGlyph.Padding = 3;
alphaTab.rendering.glyphs.ChordDiagramGlyph.Padding = 5;
alphaTab.rendering.glyphs.ChordDiagramGlyph.Frets = 5;
alphaTab.rendering.glyphs.ChordDiagramGlyph.CircleRadius = 2.5;
alphaTab.rendering.glyphs.ChordDiagramGlyph.StringSpacing = 10;
alphaTab.rendering.glyphs.ChordDiagramGlyph.FretSpacing = 12;
alphaTab.rendering.glyphs.CrescendoGlyph.Padding = 10 / 2 | 0;
alphaTab.rendering.glyphs.GhostParenthesisGlyph.Size = 6;
alphaTab.rendering.glyphs.LineRangedGlyph.LineSpacing = 3;
alphaTab.rendering.glyphs.LineRangedGlyph.LineTopPadding = 4;
alphaTab.rendering.glyphs.LineRangedGlyph.LineTopOffset = 5;
alphaTab.rendering.glyphs.LineRangedGlyph.LineSize = 8;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.None = -1;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefG = 57424;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefC = 57436;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefF = 57442;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefNeutral = 57449;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTab = 57453;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTabSmall = 57454;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuadrupleWhole = 58593;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestDoubleWhole = 58594;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestWhole = 58595;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestHalf = 58596;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuarter = 58597;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestEighth = 58598;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixteenth = 58599;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestThirtySecond = 58600;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixtyFourth = 58601;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestOneHundredTwentyEighth = 58602;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestTwoHundredFiftySixth = 58603;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Trill = 58726;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num0 = 57472;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num1 = 57473;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num2 = 57474;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num3 = 57475;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num4 = 57476;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num5 = 57477;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num6 = 57478;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num7 = 57479;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num8 = 57480;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num9 = 57481;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCommon = 57482;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCutCommon = 57483;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuadrupleWhole = 57505;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDoubleWhole = 57504;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteWhole = 57506;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHalf = 57507;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuarter = 57508;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDead = 57514;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHarmonic = 57564;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHarmonicWhole = 57566;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHat = 57523;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteSideStick = 57513;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHatHalf = 57591;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteChineseCymbal = 57593;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpEighth = 57920;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownEighth = 57921;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixteenth = 57922;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixteenth = 57923;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpThirtySecond = 57924;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownThirtySecond = 57925;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixtyFourth = 57926;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixtyFourth = 57927;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpOneHundredTwentyEighth = 57928;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownOneHundredTwentyEighth = 57929;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpTwoHundredFiftySixth = 57930;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownTwoHundredFiftySixth = 57931;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPPP = 58666;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPP = 58667;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicP = 58656;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMP = 58668;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMF = 58669;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicF = 58658;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFF = 58671;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFFF = 58672;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Accentuation = 58528;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.HeavyAccentuation = 58540;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.WaveHorizontalSlight = 60068;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.WaveHorizontalWide = 60126;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeDown = 58896;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeUp = 58898;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingThirtySecond = 57890;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingSixteenth = 57889;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingEighth = 57888;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Tempo = 57813;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteEighth = 57815;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalFlat = 57952;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalNatural = 57953;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalSharp = 57954;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneFlatArrowUp = 57968;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneSharpArrowUp = 57972;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalQuarterToneNaturalArrowUp = 57970;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8 = 58640;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8va = 58641;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava8vb = 58652;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava15 = 58644;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Ottava15ma = 58645;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.OttavaMBaseline = 60565;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.OttavaBBaseline = 60563;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.SimileMarkSimple = 58624;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.SimileMarkDouble = 58625;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataMedium = 58560;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataShort = 58564;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FermataLong = 58566;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FretboardX = 59481;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FretboardO = 59482;
alphaTab.rendering.glyphs.NoteHeadGlyph.GraceScale = 0.75;
alphaTab.rendering.glyphs.NoteHeadGlyph.NoteHeadHeight = 9;
alphaTab.rendering.glyphs.NoteHeadGlyph.QuarterNoteHeadWidth = 10;
alphaTab.rendering.glyphs.NoteVibratoGlyph.SlightWaveOffset = 10;
alphaTab.rendering.glyphs.NoteVibratoGlyph.SlightWaveSize = 8.5;
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.SlurHeight = 11;
alphaTab.rendering.glyphs.ScoreHelperNotesBaseGlyph.EndPadding = (10 / 2 | 0) + 3;
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.SimpleDipHeight = 6 * 2;
alphaTab.rendering.glyphs.ScoreWhammyBarGlyph.SimpleDipPadding = 2;
alphaTab.rendering.glyphs.TabBendGlyph.ArrowSize = 6;
alphaTab.rendering.glyphs.TabBendGlyph.DashSize = 3;
alphaTab.rendering.glyphs.TabBendGlyph.BendValueHeight = 6;
alphaTab.rendering.glyphs.TabWhammyBarGlyph.TopOffsetSharedDataKey = "tab.whammy.topoffset";
alphaTab.rendering.glyphs.TabWhammyBarGlyph.PerHalfSize = 6;
alphaTab.rendering.glyphs.TabWhammyBarGlyph.DashSize = 3;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteScale = 0.40;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteHeight = 12;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteSeparation = 12;
alphaTab.rendering.glyphs.TripletFeelGlyph.BarHeight = 2;
alphaTab.rendering.glyphs.TripletFeelGlyph.BarSeparation = 3;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.Full = 0;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialLeft = 1;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialRight = 2;
alphaTab.rendering.glyphs.VoiceContainerGlyph.KeySizeBeat = "Beat";
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.None = 0;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Title = 1;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.SubTitle = 2;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Artist = 4;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Album = 8;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Words = 16;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Music = 32;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.WordsAndMusic = 64;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Copyright = 128;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.PageNumber = 256;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.All = 511;
alphaTab.rendering.staves.BarLayoutingInfo.MinDuration = 30;
alphaTab.rendering.staves.BarLayoutingInfo.MinDurationWidth = 10;
alphaTab.rendering.staves.StaveGroup.AccoladeLabelSpacing = 10;
alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup = [[true,true,true,true,true,true,true,true,true,true,true,true],[true,true,true,true,true,false,true,true,true,true,true,true],[false,true,true,true,true,false,true,true,true,true,true,true],[false,true,true,true,true,false,false,false,true,true,true,true],[false,false,false,true,true,false,false,false,true,true,true,true],[false,false,false,true,true,false,false,false,false,false,true,true],[false,false,false,false,false,false,false,false,false,false,true,true],[false,false,false,false,false,false,false,false,false,false,false,false],[false,false,false,false,false,true,true,false,false,false,false,false],[true,true,false,false,false,true,true,false,false,false,false,false],[true,true,false,false,false,true,true,true,true,false,false,false],[true,true,true,true,false,true,true,true,true,false,false,false],[true,true,true,true,false,true,true,true,true,true,true,false],[true,true,true,true,true,true,true,true,true,true,true,false],[true,true,true,true,true,true,true,true,true,true,true,true]];
alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes = [false,true,false,true,false,false,true,false,true,false,true,false];
alphaTab.rendering.utils.AccidentalHelper.StepsPerOctave = 7;
alphaTab.rendering.utils.AccidentalHelper.OctaveSteps = new Int32Array([40,34,32,28,40]);
alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps = new Int32Array([0,0,1,1,2,3,3,4,4,5,5,6]);
alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps = new Int32Array([0,1,1,2,2,3,4,4,5,5,6,6]);
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Up = 0;
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Down = 1;
alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys = new Int32Array([71,60,57,50,71]);
alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi = [new Int32Array([35,35,35]),new Int32Array([38,38,37]),new Int32Array([56,56,56]),new Int32Array([56,56,56]),new Int32Array([56,56,56]),new Int32Array([41,41,41]),new Int32Array([43,43,43]),new Int32Array([45,45,45]),new Int32Array([47,47,47]),new Int32Array([48,48,48]),new Int32Array([42,46,46]),new Int32Array([44,44,44]),new Int32Array([49,49,49]),new Int32Array([57,57,57]),new Int32Array([55,55,55]),new Int32Array([51,59,53]),new Int32Array([52,52,52])];
alphaTab.util._LogLevel.LogLevel_Impl_.None = 0;
alphaTab.util._LogLevel.LogLevel_Impl_.Debug = 1;
alphaTab.util._LogLevel.LogLevel_Impl_.Info = 2;
alphaTab.util._LogLevel.LogLevel_Impl_.Warning = 3;
alphaTab.util._LogLevel.LogLevel_Impl_.Error = 4;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.None = 0;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Element = 1;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Attribute = 2;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Text = 3;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.CDATA = 4;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EntityReference = 5;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Entity = 6;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ProcessingInstruction = 7;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Comment = 8;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Document = 9;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentType = 10;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentFragment = 11;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Notation = 12;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Whitespace = 13;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.SignificantWhitespace = 14;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndElement = 15;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndEntity = 16;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.XmlDeclaration = 17;
alphaTab.xml.XmlParser.CharCodeLF = 10;
alphaTab.xml.XmlParser.CharCodeTab = 9;
alphaTab.xml.XmlParser.CharCodeCR = 13;
alphaTab.xml.XmlParser.CharCodeSpace = 32;
alphaTab.xml.XmlParser.CharCodeLowerThan = 60;
alphaTab.xml.XmlParser.CharCodeAmp = 38;
alphaTab.xml.XmlParser.CharCodeBrackedClose = 93;
alphaTab.xml.XmlParser.CharCodeBrackedOpen = 91;
alphaTab.xml.XmlParser.CharCodeGreaterThan = 62;
alphaTab.xml.XmlParser.CharCodeExclamation = 33;
alphaTab.xml.XmlParser.CharCodeUpperD = 68;
alphaTab.xml.XmlParser.CharCodeLowerD = 100;
alphaTab.xml.XmlParser.CharCodeMinus = 45;
alphaTab.xml.XmlParser.CharCodeQuestion = 63;
alphaTab.xml.XmlParser.CharCodeSlash = 47;
alphaTab.xml.XmlParser.CharCodeEquals = 61;
alphaTab.xml.XmlParser.CharCodeDoubleQuote = 34;
alphaTab.xml.XmlParser.CharCodeSingleQuote = 39;
alphaTab.xml.XmlParser.CharCodeSharp = 35;
alphaTab.xml.XmlParser.CharCodeLowerX = 120;
alphaTab.xml.XmlParser.CharCodeLowerA = 97;
alphaTab.xml.XmlParser.CharCodeLowerZ = 122;
alphaTab.xml.XmlParser.CharCodeUpperA = 65;
alphaTab.xml.XmlParser.CharCodeUpperZ = 90;
alphaTab.xml.XmlParser.CharCode0 = 48;
alphaTab.xml.XmlParser.CharCode9 = 57;
alphaTab.xml.XmlParser.CharCodeColon = 58;
alphaTab.xml.XmlParser.CharCodeDot = 46;
alphaTab.xml.XmlParser.CharCodeUnderscore = 95;
alphaTab.xml.XmlParser_XmlState.IgnoreSpaces = 0;
alphaTab.xml.XmlParser_XmlState.Begin = 1;
alphaTab.xml.XmlParser_XmlState.BeginNode = 2;
alphaTab.xml.XmlParser_XmlState.TagName = 3;
alphaTab.xml.XmlParser_XmlState.Body = 4;
alphaTab.xml.XmlParser_XmlState.AttribName = 5;
alphaTab.xml.XmlParser_XmlState.Equals = 6;
alphaTab.xml.XmlParser_XmlState.AttvalBegin = 7;
alphaTab.xml.XmlParser_XmlState.AttribVal = 8;
alphaTab.xml.XmlParser_XmlState.Childs = 9;
alphaTab.xml.XmlParser_XmlState.Close = 10;
alphaTab.xml.XmlParser_XmlState.WaitEnd = 11;
alphaTab.xml.XmlParser_XmlState.WaitEndRet = 12;
alphaTab.xml.XmlParser_XmlState.Pcdata = 13;
alphaTab.xml.XmlParser_XmlState.Header = 14;
alphaTab.xml.XmlParser_XmlState.Comment = 15;
alphaTab.xml.XmlParser_XmlState.Doctype = 16;
alphaTab.xml.XmlParser_XmlState.Cdata = 17;
alphaTab.xml.XmlParser_XmlState.Escape = 18;
haxe.io.FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe._Int64.___Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe.zip.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js.html.compat.Float32Array.BYTES_PER_ELEMENT = 4;
js.html.compat.Float64Array.BYTES_PER_ELEMENT = 8;
js.html.compat.Uint8Array.BYTES_PER_ELEMENT = 1;
system.Convert._conversionBuffer = new ArrayBuffer(8);
system.Convert._int8Buffer = new Int8Array(system.Convert._conversionBuffer);
system.Convert._uint8Buffer = new Uint8Array(system.Convert._conversionBuffer);
system.Convert._int16Buffer = new Int16Array(system.Convert._conversionBuffer);
system.Convert._uint16Buffer = new Uint16Array(system.Convert._conversionBuffer);
system.Convert._int32Buffer = new Int32Array(system.Convert._conversionBuffer);
system.Convert._uint32Buffer = new Uint32Array(system.Convert._conversionBuffer);
alphaTab.Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
